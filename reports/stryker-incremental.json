{
  "files": {
    "src/app/[locale]/(pages)/(withfooter)/[...path]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 63,
              "line": 18
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 19
            },
            "start": {
              "column": 44,
              "line": 19
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 40,
              "line": 23
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 53,
              "line": 28
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 32
            },
            "start": {
              "column": 47,
              "line": 32
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 33
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 33
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "BooleanLiteral",
          "replacement": "page",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 39
            },
            "start": {
              "column": 25,
              "line": 39
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { PageProps } from '@/types/Page';\n\nimport { getPageStaticParams, getPageMetadatas } from '@/lib/pages/staticGeneration';\nimport isSkippedPath from '@/lib/pages/static/helpers/isSkippedPath';\nimport { getPageByLanguageAndPathUnstrict } from '@/lib/pages/api';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport { I18N_MIDDLEWARE_CONFIG } from '@/middlewares/withI18n';\nimport PageMDX from '@/components/layouts/pages/MdxComponent';\nimport MAIN_CLS from '@/components/config/styles/main';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { notFound } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\n\nexport async function generateMetadata({ params }: PageProps) {\n  const metadatas = await getPageMetadatas({ params }, I18N_MIDDLEWARE_CONFIG.urlMappingStrategy);\n  return metadatas;\n}\n\nexport function generateStaticParams() {\n  const staticParams = getPageStaticParams();\n  return staticParams;\n}\n\nexport default function Page({ params }: PageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const path = params[PageTaxonomy.PATH].join('/');\n  if (isSkippedPath(path)) notFound();\n\n  const page = getPageByLanguageAndPathUnstrict(language, path);\n  if (!page) notFound();\n\n  return (\n    <main className={cn('max-w-full', MAIN_CLS)}>\n      <PageMDX code={page.body.code} />\n    </main>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/blog/[categ]/[subcateg]/[slug]/[...notfound]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "11",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 66,
              "line": 10
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 11
            },
            "start": {
              "column": 20,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { NotFoundCatchallParams } from '@/types/Next';\n\nimport NotFoundCatchall from '@/components/phantoms/NotFoundCatchall';\n\nexport default function Page({ params }: NotFoundCatchallParams) {\n  NotFoundCatchall({ params });\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/blog/[categ]/[subcateg]/[slug]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "13",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 71,
              "line": 21
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 22
            },
            "start": {
              "column": 23,
              "line": 22
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 23
            },
            "start": {
              "column": 56,
              "line": 23
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 46,
              "line": 28
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 65
            },
            "start": {
              "column": 67,
              "line": 35
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 133,
              "line": 39
            },
            "start": {
              "column": 41,
              "line": 39
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 42
            },
            "start": {
              "column": 7,
              "line": 42
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 42
            },
            "start": {
              "column": 7,
              "line": 42
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 42
            },
            "start": {
              "column": 7,
              "line": 42
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "ArithmeticOperator",
          "replacement": "countCharacter(ROUTES_ROOTS.BLOG, '/') - 1 - CUSTOM_CRUMB_MIN_DEPTH",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 45
            },
            "start": {
              "column": 17,
              "line": 45
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "ArithmeticOperator",
          "replacement": "countCharacter(ROUTES_ROOTS.BLOG, '/') + 1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 45
            },
            "start": {
              "column": 17,
              "line": 45
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 45
            },
            "start": {
              "column": 51,
              "line": 45
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 56
            },
            "start": {
              "column": 25,
              "line": 51
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 55
            },
            "start": {
              "column": 13,
              "line": 52
            }
          }
        },
        {
          "id": "27",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 60
            },
            "start": {
              "column": 59,
              "line": 60
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { BlogPostPageProps, BlogPostType } from '@/types/Blog';\n\nimport { getBlogPostMetadatas, getBlogStaticParams, blogPostGuard } from '@/lib/blog/staticGeneration';\nimport documentTypeInlineFilter from '@/lib/pagefind/builders/documentTypeInlineFilter';\nimport BlogPostCrumb from '@/components/ui/breadcrumbs/custom/BlogPostCrumb';\nimport Breadcrumbs from '@/components/ui/breadcrumbs/Breadcrumbs';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport { I18N_MIDDLEWARE_CONFIG } from '@/middlewares/withI18n';\nimport BlogPost from '@/components/pages/blog/BlogPost';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getBlogPostUnstrict } from '@/lib/blog/api';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { countCharacter } from '@/lib/str';\nimport { notFound } from 'next/navigation';\n\nexport async function generateMetadata({ params }: BlogPostPageProps) {\n  await blogPostGuard({ params });\n  const blogPostMetadatas = await getBlogPostMetadatas({ params }, I18N_MIDDLEWARE_CONFIG.urlMappingStrategy);\n\n  return blogPostMetadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getBlogStaticParams();\n  return staticParams;\n}\n\nconst CUSTOM_CRUMB_MIN_DEPTH = 3;\n\nexport default async function Page({ params }: BlogPostPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const [category, subcategory, slug] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[BlogTaxonomy.SLUG]];\n\n  const post: MaybeNull<BlogPostType> = await getBlogPostUnstrict(category, subcategory, slug, language);\n  if (!post) notFound();\n\n  // eslint-disable-next-line no-magic-numbers\n  const depth = countCharacter(ROUTES_ROOTS.BLOG, '/') - 1 + CUSTOM_CRUMB_MIN_DEPTH;\n\n  return (\n    <>\n      <div className=\"mx-8 flex flex-col items-center lg:mx-auto lg:max-w-[750px]\">\n        <Breadcrumbs\n          customCrumbs={[\n            {\n              jsx: <BlogPostCrumb label={post.title} url={post.url} />,\n              depth\n            }\n          ]}\n          className=\"my-4 w-fit self-start\"\n        />\n      </div>\n      <div data-pagefind-filter={documentTypeInlineFilter('BlogPost')} className=\"mx-4 flex flex-col items-center lg:mx-24\">\n        <BlogPost className=\"mx-4\" params={params} />\n      </div>\n    </>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/blog/[categ]/[subcateg]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "28",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 78,
              "line": 12
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 13
            },
            "start": {
              "column": 30,
              "line": 13
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 14
            },
            "start": {
              "column": 70,
              "line": 14
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 46,
              "line": 19
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 68,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { BlogSubcategoryPageProps } from '@/types/Blog';\n\nimport { getBlogSubcategoryMetadatas, blogSubcategoryGuard, getBlogStaticParams } from '@/lib/blog/staticGeneration';\nimport SubcategoryRelatedBlogPosts from '@/components/pages/blog/SubcategoryRelatedBlogPosts/Server';\nimport Breadcrumbs from '@/components/ui/breadcrumbs/Breadcrumbs';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\n\nexport async function generateMetadata({ params }: BlogSubcategoryPageProps) {\n  await blogSubcategoryGuard({ params });\n  const blogSubcategoryMetadatas = await getBlogSubcategoryMetadatas({ params });\n\n  return blogSubcategoryMetadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getBlogStaticParams();\n  return staticParams;\n}\n\nexport default function Page({ params }: BlogSubcategoryPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <div className=\"mx-8 flex flex-col items-center lg:mx-auto lg:max-w-[750px]\" data-pagefind-ignore=\"all\">\n      <Breadcrumbs className=\"my-4 w-fit self-start\" />\n      <SubcategoryRelatedBlogPosts params={params} />\n    </div>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/blog/[categ]/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "33",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 70,
              "line": 9
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 10
            },
            "start": {
              "column": 30,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\n\nimport { MAIN_CLS } from '@/components/config/styles/main';\nimport { cn } from '@/lib/tailwind';\n\nexport default function BlogLayout({ children }: LayoutMinimalProps) {\n  return <main className={cn('w-full flex-1', MAIN_CLS)}>{children}</main>;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/blog/[categ]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "35",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 75,
              "line": 12
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 13
            },
            "start": {
              "column": 21,
              "line": 13
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 14
            },
            "start": {
              "column": 64,
              "line": 14
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 46,
              "line": 19
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 65,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { BlogCategoryPageProps } from '@/types/Blog';\n\nimport CategoryRelatedSubcategoriesAndBlogPosts from '@/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts';\nimport { getBlogCategoryMetadatas, getBlogStaticParams, blogCategoryGuard } from '@/lib/blog/staticGeneration';\nimport Breadcrumbs from '@/components/ui/breadcrumbs/Breadcrumbs';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\n\nexport async function generateMetadata({ params }: BlogCategoryPageProps) {\n  blogCategoryGuard({ params });\n  const blogCategoryMetadatas = await getBlogCategoryMetadatas({ params });\n\n  return blogCategoryMetadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getBlogStaticParams();\n  return staticParams;\n}\n\nexport default function Page({ params }: BlogCategoryPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <div className=\"mx-8 flex flex-col items-center lg:mx-auto lg:max-w-[750px]\" data-pagefind-ignore=\"all\">\n      <Breadcrumbs className=\"my-4 w-fit self-start\" />\n      <CategoryRelatedSubcategoriesAndBlogPosts params={params} />\n    </div>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/blog/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "40",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 40,
              "line": 9
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 57,
              "line": 13
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 18
            },
            "start": {
              "column": 25,
              "line": 18
            }
          }
        }
      ],
      "source": "import type { I18nPageProps } from '@/types/Next';\n\nimport { setStaticParamsLocale } from 'next-international/server';\nimport MAIN_CLS from '@/components/config/styles/main';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getStaticParams } from '@/i18n/server';\nimport { cn } from '@/lib/tailwind';\n\nexport function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default function Page({ params }: I18nPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <main className={cn('flex flex-1 flex-col justify-center', MAIN_CLS)}>\n      <p className=\"text-center\">ToDo</p>\n    </main>\n  );\n}\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "43",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 65,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\n\nimport PagesWithFooterRootElement from '@/components/layouts/base/PagesWithFooterRootElement';\n\nexport default function PagesLayout({ children }: WithChildren) {\n  return <PagesWithFooterRootElement>{children}</PagesWithFooterRootElement>;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/(withfooter)/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "44",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 42,
              "line": 20
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 24
            },
            "start": {
              "column": 32,
              "line": 24
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 24
            },
            "start": {
              "column": 42,
              "line": 24
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 24
            },
            "start": {
              "column": 49,
              "line": 24
            }
          }
        },
        {
          "id": "48",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 27
            },
            "start": {
              "column": 40,
              "line": 27
            }
          }
        },
        {
          "id": "49",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 27
            },
            "start": {
              "column": 73,
              "line": 27
            }
          }
        },
        {
          "id": "50",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 27
            },
            "start": {
              "column": 101,
              "line": 27
            }
          }
        },
        {
          "id": "51",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 28
            },
            "start": {
              "column": 31,
              "line": 28
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 30
            },
            "start": {
              "column": 10,
              "line": 30
            }
          }
        },
        {
          "id": "53",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 40,
              "line": 33
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 55
            },
            "start": {
              "column": 57,
              "line": 37
            }
          }
        },
        {
          "id": "55",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 42
            },
            "start": {
              "column": 25,
              "line": 42
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 47
            },
            "start": {
              "column": 18,
              "line": 47
            }
          }
        },
        {
          "id": "57",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 47
            },
            "start": {
              "column": 28,
              "line": 47
            }
          }
        },
        {
          "id": "58",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 49
            },
            "start": {
              "column": 21,
              "line": 49
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 49
            },
            "start": {
              "column": 34,
              "line": 49
            }
          }
        },
        {
          "id": "60",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 49
            },
            "start": {
              "column": 82,
              "line": 49
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { OpenGraph } from 'next/dist/lib/metadata/types/opengraph-types';\nimport type { MaybeObjectValue } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { Page } from 'contentlayer/generated';\nimport type { I18nPageProps } from '@/types/Next';\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport InviteTheBotButton from '@/components/ui/cta/InviteTheBotButton';\nimport { getServerSideI18n, getStaticParams } from '@/i18n/server';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport HomepageVideo from '@/components/ui/misc/HomepageVideo';\nimport { MAIN_CLS } from '@/components/config/styles/main';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport Logo from '@/components/ui/cta/Logo';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n\n  const metadataBase: MaybeObjectValue<URL> = process.env.METADABASE_URL ? new URL(process.env.METADABASE_URL) : undefined;\n  const openGraph: OpenGraph = { images: { url: '/assets/medias/img/og/logo/head.jpeg' } };\n\n  const { metadescriptions, pagesTitles, vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), globalT(`${pagesTitles}.homepage`), true);\n  const description = globalT(`${metadescriptions}.homepage`);\n\n  return { metadataBase, description, openGraph, title };\n}\n\nexport function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default function Page({ params }: I18nPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <main className={cn('flex flex-1 flex-col justify-center', MAIN_CLS)}>\n      <div className=\"text-center\">\n        <HomepageVideo />\n        <div\n          className=\"absolute bottom-0 left-0 h-full w-full bg-gradient-to-t from-slate-900 to-slate-700 opacity-75 blur-sm\"\n          style={{ zIndex: -1 }}\n        />\n        <div style={{ boxShadow: 'inset 0 0 70vw 11vw rgba(0, 0, 0, 1)', zIndex: -1 }} className=\"absolute bottom-0 left-0 h-full w-full\" />\n        <Logo onPageEnterAnimation animatedOnHover height={201.45} width={226} clickable />\n        <InviteTheBotButton className=\"mt-2\" />\n      </div>\n    </main>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/[...notfound]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "61",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 66,
              "line": 10
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 11
            },
            "start": {
              "column": 20,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { NotFoundCatchallParams } from '@/types/Next';\n\nimport NotFoundCatchall from '@/components/phantoms/NotFoundCatchall';\n\nexport default function Page({ params }: NotFoundCatchallParams) {\n  NotFoundCatchall({ params });\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/bar/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "63",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 42,
              "line": 9
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 12
            },
            "start": {
              "column": 40,
              "line": 12
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 12
            },
            "start": {
              "column": 77,
              "line": 12
            }
          }
        },
        {
          "id": "66",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 13
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 13
            },
            "start": {
              "column": 25,
              "line": 13
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport DashboardBarPage from '@/components/pages/dashboard/bar';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { dashboardPagesTitles, pagesTitles } = i18ns;\n  const title = buildPageTitle(globalT(`${pagesTitles}.dashboard`), globalT(`${dashboardPagesTitles}.bar`));\n  return { description: '', title };\n}\n\nexport default function Page() {\n  return <DashboardBarPage />;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/foo/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "69",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 42,
              "line": 9
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 12
            },
            "start": {
              "column": 40,
              "line": 12
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 12
            },
            "start": {
              "column": 77,
              "line": 12
            }
          }
        },
        {
          "id": "72",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 13
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 13
            },
            "start": {
              "column": 25,
              "line": 13
            }
          }
        },
        {
          "id": "74",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport DashboardFooPage from '@/components/pages/dashboard/foo';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { dashboardPagesTitles, pagesTitles } = i18ns;\n  const title = buildPageTitle(globalT(`${pagesTitles}.dashboard`), globalT(`${dashboardPagesTitles}.foo`));\n  return { description: '', title };\n}\n\nexport default function Page() {\n  return <DashboardFooPage />;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "75",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 40,
              "line": 15
            }
          }
        },
        {
          "id": "76",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 85,
              "line": 19
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { LayoutBaseProps } from '@/types/Next';\n\nimport DASHBOARD_ROUTES, { DASHBOARD_ROUTES_TITLES } from '@/config/DashboardSidebar/routesImpl';\nimport DASHBOARD_ROUTES_SIDEBAR_COMPONENTS from '@/config/DashboardSidebar/utils/IconsMapping';\nimport DashboardLayoutClient from '@/components/layouts/dashboard/DashboardLayoutClient';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getStaticParams } from '@/i18n/server';\n\ninterface DashboardLayoutProps extends LayoutBaseProps {}\n\nexport function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default function DashboardLayout({ children, params }: DashboardLayoutProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <DashboardLayoutClient\n      dashboardRoutesSidebarComponents={DASHBOARD_ROUTES_SIDEBAR_COMPONENTS}\n      dashboardRoutesTitles={DASHBOARD_ROUTES_TITLES}\n      dashboardRoutes={DASHBOARD_ROUTES}\n    >\n      {children}\n    </DashboardLayoutClient>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "77",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 42,
              "line": 9
            }
          }
        },
        {
          "id": "78",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 12
            },
            "start": {
              "column": 40,
              "line": 12
            }
          }
        },
        {
          "id": "79",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 107,
              "line": 12
            },
            "start": {
              "column": 77,
              "line": 12
            }
          }
        },
        {
          "id": "80",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 13
            }
          }
        },
        {
          "id": "81",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 13
            },
            "start": {
              "column": 25,
              "line": 13
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport DashboardMainPage from '@/components/pages/dashboard/main';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { dashboardPagesTitles, pagesTitles } = i18ns;\n  const title = buildPageTitle(globalT(`${pagesTitles}.dashboard`), globalT(`${dashboardPagesTitles}.main`));\n  return { description: '', title };\n}\n\nexport default function Page() {\n  return <DashboardMainPage />;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "83",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 65,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\n\nimport PagesRootElement from '@/components/layouts/base/PagesRootElement';\nimport '@/app/search-menu.css';\n\nexport default function PagesLayout({ children }: WithChildren) {\n  return <PagesRootElement>{children}</PagesRootElement>;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "84",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 75,
              "line": 13
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { LayoutBaseProps } from '@/types/Next';\n\nimport { BODY_CONTAINER_CLS } from '@/components/config/styles/body';\nimport HtmlElement from '@/components/layouts/base/HtmlElement';\nimport { SpeedInsights } from '@vercel/speed-insights/next';\nimport { BODY_CONTAINER_ID } from '@/config/elementsId';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport Providers from '@/contexts/Providers';\n\nexport default function RootLayout({ children, params }: LayoutBaseProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n\n  return (\n    <HtmlElement params={params}>\n      <div className={BODY_CONTAINER_CLS} id={BODY_CONTAINER_ID}>\n        <Providers locale={language}>{children}</Providers>\n      </div>\n      <SpeedInsights />\n    </HtmlElement>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/[lp-slug]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "85",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 70,
              "line": 18
            }
          }
        },
        {
          "id": "86",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 19
            },
            "start": {
              "column": 51,
              "line": 19
            }
          }
        },
        {
          "id": "87",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 46,
              "line": 23
            }
          }
        },
        {
          "id": "88",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 45
            },
            "start": {
              "column": 60,
              "line": 28
            }
          }
        },
        {
          "id": "89",
          "mutatorName": "BooleanLiteral",
          "replacement": "lp",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "90",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "91",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "92",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 38
            },
            "start": {
              "column": 74,
              "line": 38
            }
          }
        },
        {
          "id": "93",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 39
            },
            "start": {
              "column": 54,
              "line": 39
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LandingPageProps } from '@/types/LandingPage';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport { getLandingPagesStaticParams, getLandingPageMetadatas } from '@/lib/landingPages/staticGeneration';\nimport documentTypeInlineFilter from '@/lib/pagefind/builders/documentTypeInlineFilter';\nimport { getLandingPageByLanguageAndSlugUnstrict } from '@/lib/landingPages/api';\nimport LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport LandingPageMDX from '@/components/layouts/lp/MdxComponent';\nimport { I18N_MIDDLEWARE_CONFIG } from '@/middlewares/withI18n';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { notFound } from 'next/navigation';\n\nexport async function generateMetadata({ params }: LandingPageProps) {\n  const metadatas = await getLandingPageMetadatas({ params }, I18N_MIDDLEWARE_CONFIG.urlMappingStrategy);\n  return metadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getLandingPagesStaticParams();\n  return staticParams;\n}\n\nexport default function Page({ params }: LandingPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const slug = params[LandingPageTaxonomy.SLUG];\n  const lp: MaybeNull<LandingPage> = getLandingPageByLanguageAndSlugUnstrict(language, slug);\n  if (!lp) notFound();\n\n  return (\n    <main\n      data-pagefind-ignore={lp.doNotExcludeFromLocalSearch ? undefined : 'all'}\n      data-pagefind-filter={documentTypeInlineFilter('LandingPage')}\n      className=\"max-w-full\"\n    >\n      <LandingPageMDX code={lp.body.code} />\n    </main>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "94",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 72,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\n\nimport LandingPagesRootElement from '@/components/layouts/base/LandingPagesRootElement';\n\nexport default function LandingPagesLayout({ children }: WithChildren) {\n  return <LandingPagesRootElement>{children}</LandingPagesRootElement>;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/sign-up/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "95",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 72,
              "line": 9
            }
          }
        },
        {
          "id": "96",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 30,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\n\nimport { MAIN_CLS } from '@/components/config/styles/main';\nimport { cn } from '@/lib/tailwind';\n\nexport default function SignUpLayout({ children }: LayoutMinimalProps) {\n  return <main className={cn('flex flex-1 items-center justify-center', MAIN_CLS)}>{children}</main>;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/sign-up/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "97",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 67,
              "line": 15
            }
          }
        },
        {
          "id": "98",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 22
            },
            "start": {
              "column": 40,
              "line": 22
            }
          }
        },
        {
          "id": "99",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 24
            },
            "start": {
              "column": 10,
              "line": 24
            }
          }
        },
        {
          "id": "100",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 40,
              "line": 27
            }
          }
        },
        {
          "id": "101",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 37
            },
            "start": {
              "column": 57,
              "line": 31
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { Page } from 'contentlayer/generated';\nimport type { I18nPageProps } from '@/types/Next';\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport LandingPageMDX from '@/components/layouts/lp/MdxComponent';\nimport { getPageByLanguageAndPathStrict } from '@/lib/pages/api';\nimport { getStaticParams, getScopedI18n } from '@/i18n/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata({ params }: I18nPageProps) {\n  const scopedT = await getScopedI18n(i18ns.vocab);\n  const language = params[I18nTaxonomy.LANGUAGE];\n\n  const document = getPageByLanguageAndPathStrict({ path: 'lp/sign-up', lang: language }) as Page;\n\n  const { metadescription: description, title: documentTitle } = document;\n  const title = buildPageTitle(scopedT('brand-short'), documentTitle);\n\n  return { description, title };\n}\n\nexport function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default function Page({ params }: I18nPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const document = getPageByLanguageAndPathStrict({ path: 'lp/sign-up', lang: language }) as Page;\n  return <LandingPageMDX code={document.body.code} />;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/not-found.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "102",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 42,
              "line": 12
            }
          }
        },
        {
          "id": "103",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 15
            },
            "start": {
              "column": 40,
              "line": 15
            }
          }
        },
        {
          "id": "104",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 15
            },
            "start": {
              "column": 64,
              "line": 15
            }
          }
        },
        {
          "id": "105",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 16
            },
            "start": {
              "column": 36,
              "line": 16
            }
          }
        },
        {
          "id": "106",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 18
            },
            "start": {
              "column": 10,
              "line": 18
            }
          }
        },
        {
          "id": "107",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 22,
              "line": 21
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport PagesRootElement from '@/components/layouts/base/PagesRootElement';\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport NotFound from '@/components/pages/Notfound';\nimport { getScopedI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const scopedT = await getScopedI18n(i18ns.vocab);\n\n  const title = buildPageTitle(scopedT('brand-short'), scopedT('404'));\n  const description: EmptyString = '';\n\n  return { description, title };\n}\n\nconst NotFoundPage = () => (\n  <PagesRootElement>\n    <NotFound />\n  </PagesRootElement>\n);\n\nexport default NotFoundPage;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/api/trace-error/route.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "108",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 46,
              "line": 7
            }
          }
        },
        {
          "id": "109",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 10
            },
            "start": {
              "column": 28,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport { NextResponse } from 'next/server';\n\n// {ToDo} Also ping RTM API to log the error on the admins Discord server.\nexport async function POST(request: Request) {\n  const error = await request.json();\n  console.error(error);\n  return NextResponse.json({ status: 200 });\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/error.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "110",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 86,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport default function Error({ error, reset }: { reset: () => void; error: Error }) {\n  redirect(ROUTES_ROOTS.WEBSITE);\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "111",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 73,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\n\nimport '@/app/globals.css';\n\nexport default function PhantomLayout({ children }: LayoutMinimalProps) {\n  return children;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/not-found.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "112",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 6
            },
            "start": {
              "column": 40,
              "line": 4
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nexport default function NotFoundPage() {\n  return null;\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/cache/blog.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "113",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(15,87): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 136,
              "line": 15
            }
          }
        },
        {
          "id": "114",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/cache/blog.ts(24,33): error TS18047: 'relatedPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "115",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/cache/blog.ts(24,33): error TS18047: 'relatedPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "116",
          "mutatorName": "EqualityOperator",
          "replacement": "relatedPosts !== null",
          "statusReason": "src/cache/blog.ts(24,33): error TS18047: 'relatedPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "117",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(21,33): error TS18047: 'relatedPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["469"],
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 30,
              "line": 19
            }
          }
        },
        {
          "id": "118",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "28", "135", "142", "151", "181", "190", "253", "256", "257", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 47,
              "line": 24
            }
          }
        },
        {
          "id": "119",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'includes')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 101,
              "line": 31
            }
          }
        },
        {
          "id": "120",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(39,9): error TS2322: Type 'void' is not assignable to type 'BlogSubcategoryFromUnknownCategory[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "135",
            "136",
            "137",
            "139",
            "142",
            "143",
            "144",
            "146",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 94,
              "line": 36
            }
          }
        },
        {
          "id": "121",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "122",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "123",
          "mutatorName": "EqualityOperator",
          "replacement": "BlogCache.subcategoriesCollection[language] !== undefined",
          "statusReason": "Cannot read properties of undefined (reading 'blog-testing-category')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "135",
            "136",
            "137",
            "139",
            "142",
            "143",
            "144",
            "146",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "124",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'blog-testing-category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": ["26", "28", "257", "324"],
          "location": {
            "end": {
              "column": 4,
              "line": 41
            },
            "start": {
              "column": 66,
              "line": 39
            }
          }
        },
        {
          "id": "125",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 45
            },
            "start": {
              "column": 7,
              "line": 45
            }
          }
        },
        {
          "id": "126",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 45
            },
            "start": {
              "column": 7,
              "line": 45
            }
          }
        },
        {
          "id": "127",
          "mutatorName": "EqualityOperator",
          "replacement": "BlogCache.subcategoriesCollection[language][category] !== undefined",
          "statusReason": "Cannot read properties of undefined (reading 'includes')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "135",
            "136",
            "137",
            "139",
            "142",
            "143",
            "144",
            "146",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 74,
              "line": 45
            },
            "start": {
              "column": 7,
              "line": 45
            }
          }
        },
        {
          "id": "128",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(49,103): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "135",
            "136",
            "137",
            "139",
            "142",
            "143",
            "144",
            "146",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 149,
              "line": 49
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryFromUnknownCategory, BlogCategory, BlogPostType } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport { getAllBlogPostsByCategoryAndLanguage } from '@/lib/blog/api';\nimport { LANGUAGES } from '##/config/i18n';\n\nnamespace BlogCache {\n  export const subcategoriesCollection = Object.fromEntries(LANGUAGES.map((language) => [language, {}])) as Record<\n    LanguageFlag,\n    Record<BlogCategory, BlogSubcategoryFromUnknownCategory[]>\n  >;\n}\n\nasync function buildSubcategoriesSet(category: BlogCategory, language: LanguageFlag): Promise<Set<BlogSubcategoryFromUnknownCategory>> {\n  const relatedPosts: MaybeNull<BlogPostType[]> = await getAllBlogPostsByCategoryAndLanguage(category, language);\n  const subcategoriesSet = new Set<BlogSubcategoryFromUnknownCategory>();\n\n  if (relatedPosts === null) {\n    const emptySet = new Set<BlogSubcategoryFromUnknownCategory>();\n    return emptySet;\n  }\n\n  for (const { subcategory } of relatedPosts) {\n    subcategoriesSet.add(subcategory as BlogSubcategoryFromUnknownCategory);\n  }\n\n  return subcategoriesSet;\n}\n\nasync function populateSubcategoriesCollectionCache(category: BlogCategory, language: LanguageFlag) {\n  const subcategsSet: Set<BlogSubcategoryFromUnknownCategory> = await buildSubcategoriesSet(category, language);\n  BlogCache.subcategoriesCollection[language][category] = Array.from(subcategsSet);\n}\n\nasync function subcategoriesByCategoryGetter(category: BlogCategory, language: LanguageFlag) {\n  // Stryker Workaround 1. Mutant will be killed with `if (false)` as expected, but `if (true)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (BlogCache.subcategoriesCollection[language] === undefined) {\n    BlogCache.subcategoriesCollection[language] = {} as Record<BlogCategory, BlogSubcategoryFromUnknownCategory[]>;\n  }\n\n  // Idem (see Stryker Workaround 1).\n  // Stryker disable next-line ConditionalExpression\n  if (BlogCache.subcategoriesCollection[language][category] === undefined) await populateSubcategoriesCollectionCache(category, language);\n  return BlogCache.subcategoriesCollection[language][category];\n}\n\nexport async function getBlogSubcategoriesByCategory(category: BlogCategory, language: LanguageFlag): Promise<BlogSubcategoryFromUnknownCategory[]> {\n  const subcategories: BlogSubcategoryFromUnknownCategory[] = await subcategoriesByCategoryGetter(category, language);\n  return subcategories;\n}\n"
    },
    "src/cache/generic.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "129",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/meta/discordapi.ts(27,41): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/authOptions.ts(35,17): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(45,39): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(57,21): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(80,39): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(201,39): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(241,39): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(278,39): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(315,39): error TS2339: Property 'discordProfilePicture' does not exist on type '{}'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 28,
              "line": 10
            }
          }
        },
        {
          "id": "130",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/meta/discordapi.ts(27,29): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/meta/discordapi.ts(27,63): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/authOptions.ts(35,5): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/authOptions.ts(35,39): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(45,27): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(45,61): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(57,9): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(57,43): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(80,27): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(80,61): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(201,27): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(201,61): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(241,27): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(241,61): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(278,27): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(278,61): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(315,27): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(315,61): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 11
            },
            "start": {
              "column": 26,
              "line": 11
            }
          }
        },
        {
          "id": "131",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected null to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": ["95"],
          "coveredBy": ["85", "86", "92", "93", "94", "95"],
          "location": {
            "end": {
              "column": 60,
              "line": 11
            },
            "start": {
              "column": 42,
              "line": 11
            }
          }
        },
        {
          "id": "132",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '__VALUE__' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": ["304"],
          "coveredBy": ["85", "86", "92", "93", "94", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 50,
              "line": 14
            }
          }
        },
        {
          "id": "133",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '__VALUE__' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": ["304"],
          "coveredBy": ["85", "86", "92", "93", "94", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 51,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "134",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'clock')",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["305"],
          "coveredBy": ["85", "86", "92", "93", "94", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 51,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "135",
          "mutatorName": "EqualityOperator",
          "replacement": "GenericInMemoryCache.data[key] !== undefined",
          "statusReason": "expected '__VALUE__' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["304"],
          "coveredBy": ["85", "86", "92", "93", "94", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 51,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "136",
          "mutatorName": "BooleanLiteral",
          "replacement": "clock",
          "statusReason": "Cannot destructure property 'cachedAt' of 'clock' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["303"],
          "coveredBy": ["85", "86", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 13,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "137",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '__VALUE__' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["304"],
          "coveredBy": ["85", "86", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 13,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "138",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot destructure property 'cachedAt' of 'clock' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["303"],
          "coveredBy": ["85", "86", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 13,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "139",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": ".toMatch() expects to receive a string, but got undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 45,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "140",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '__VALUE__' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["304"],
          "coveredBy": ["85", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 45,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "141",
          "mutatorName": "EqualityOperator",
          "replacement": "Math.abs(Date.now() - cachedAt) > ttl",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "142",
          "mutatorName": "EqualityOperator",
          "replacement": "Math.abs(Date.now() - cachedAt) < ttl",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "143",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Date.now() + cachedAt",
          "statusReason": "expected undefined to be '__VALUE__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["303"],
          "coveredBy": ["85", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 37,
              "line": 23
            },
            "start": {
              "column": 16,
              "line": 23
            }
          }
        },
        {
          "id": "144",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/generic.ts(56,9): error TS2322: Type 'void' is not assignable to type 'MaybeUndefined<Data>'.\nsrc/meta/discordapi.ts(27,25): error TS2352: Conversion of type 'void' to type 'MaybeNull<string>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92", "93", "94", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 34,
              "line": 26
            }
          }
        },
        {
          "id": "145",
          "mutatorName": "OptionalChaining",
          "replacement": "GenericInMemoryCache.data[key].value",
          "statusReason": "Cannot read properties of undefined (reading 'value')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["304"],
          "coveredBy": ["85", "86", "92", "93", "94", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 47,
              "line": 28
            },
            "start": {
              "column": 10,
              "line": 28
            }
          }
        },
        {
          "id": "146",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal { cachedAt: Any<Number>, ttl: 10000 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["303"],
          "coveredBy": ["303"],
          "location": {
            "end": {
              "column": 2,
              "line": 36
            },
            "start": {
              "column": 39,
              "line": 31
            }
          }
        },
        {
          "id": "147",
          "mutatorName": "OptionalChaining",
          "replacement": "GenericInMemoryCache.data[key].clock",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "148",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": ".toMatch() expects to receive a string, but got undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "86", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 2,
              "line": 66
            },
            "start": {
              "column": 64,
              "line": 39
            }
          }
        },
        {
          "id": "149",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal { cachedAt: Any<Number>, ttl: 10000 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["303"],
          "coveredBy": ["85", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 48,
              "line": 40
            }
          }
        },
        {
          "id": "150",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/cache/generic.ts(37,5): error TS2739: Type '{}' is missing the following properties from type 'Clock': cachedAt, ttl\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 6,
              "line": 44
            },
            "start": {
              "column": 44,
              "line": 41
            }
          }
        },
        {
          "id": "151",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { cachedAt: 1715836927570, ttl: 10000 } to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["303"],
          "coveredBy": ["303"],
          "location": {
            "end": {
              "column": 4,
              "line": 50
            },
            "start": {
              "column": 38,
              "line": 47
            }
          }
        },
        {
          "id": "152",
          "mutatorName": "BooleanLiteral",
          "replacement": "GenericInMemoryCache.data[key]",
          "statusReason": "Cannot set properties of undefined (setting 'value')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["303"],
          "coveredBy": ["85", "86", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 38,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "153",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "154",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "155",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 57
            },
            "start": {
              "column": 42,
              "line": 57
            }
          }
        },
        {
          "id": "156",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 57
            },
            "start": {
              "column": 42,
              "line": 57
            }
          }
        },
        {
          "id": "157",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof data !== 'object'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 57
            },
            "start": {
              "column": 42,
              "line": 57
            }
          }
        },
        {
          "id": "158",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/cache/generic.ts(55,42): error TS2367: This comparison appears to be unintentional because the types '\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 66,
              "line": 57
            },
            "start": {
              "column": 58,
              "line": 57
            }
          }
        },
        {
          "id": "159",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 62
            },
            "start": {
              "column": 7,
              "line": 62
            }
          }
        },
        {
          "id": "160",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 62
            },
            "start": {
              "column": 7,
              "line": 62
            }
          }
        },
        {
          "id": "161",
          "mutatorName": "EqualityOperator",
          "replacement": "ttl >= 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 62
            },
            "start": {
              "column": 7,
              "line": 62
            }
          }
        },
        {
          "id": "162",
          "mutatorName": "EqualityOperator",
          "replacement": "ttl <= 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 62
            },
            "start": {
              "column": 7,
              "line": 62
            }
          }
        },
        {
          "id": "163",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 63
            },
            "start": {
              "column": 12,
              "line": 63
            }
          }
        },
        {
          "id": "164",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 63
            },
            "start": {
              "column": 12,
              "line": 63
            }
          }
        },
        {
          "id": "165",
          "mutatorName": "EqualityOperator",
          "replacement": "ttl <= 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 63
            },
            "start": {
              "column": 12,
              "line": 63
            }
          }
        },
        {
          "id": "166",
          "mutatorName": "EqualityOperator",
          "replacement": "ttl >= 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 63
            },
            "start": {
              "column": 12,
              "line": 63
            }
          }
        },
        {
          "id": "168",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 71
            },
            "start": {
              "column": 7,
              "line": 71
            }
          }
        },
        {
          "id": "169",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 71
            },
            "start": {
              "column": 7,
              "line": 71
            }
          }
        },
        {
          "id": "170",
          "mutatorName": "EqualityOperator",
          "replacement": "value === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 71
            },
            "start": {
              "column": 7,
              "line": 71
            }
          }
        },
        {
          "id": "171",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'FAKE_URL' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": ["92"],
          "coveredBy": ["85", "86", "92", "93", "94", "95", "303", "304", "305"],
          "location": {
            "end": {
              "column": 2,
              "line": 80
            },
            "start": {
              "column": 28,
              "line": 78
            }
          }
        },
        {
          "id": "167",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/config/Auth/authOptions.ts(34,20): error TS2352: Conversion of type 'void' to type 'MaybeNull<string>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": ["85", "86", "92", "95", "305"],
          "location": {
            "end": {
              "column": 2,
              "line": 76
            },
            "start": {
              "column": 90,
              "line": 69
            }
          }
        }
      ],
      "source": "import type { MaybeObjectValue } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { MsTimestamp, MsValue } from '@rtm/shared-types/Numbers';\n\n// * ... Inspired from https://github.com/Julien-R44/bentocache\n\nnamespace GenericInMemoryCache {\n  export const data = {} as DataCache;\n}\n\nexport const keysFactory = {\n  discordProfilePicture: (id: string) => `discord:pp:${id}`\n};\n\nfunction invalidateExpiredCacheData(key: string) {\n  if (GenericInMemoryCache.data[key] === undefined) return;\n\n  const clock = GenericInMemoryCache.data[key].clock;\n  if (!clock) return;\n\n  const { cachedAt, ttl } = clock;\n  // Stryker Workaround 1. Pointless mutant\n  // Stryker disable next-line EqualityOperator\n  if (Math.abs(Date.now() - cachedAt) >= ttl) delete GenericInMemoryCache.data[key];\n}\n\nexport function get(key: string) {\n  invalidateExpiredCacheData(key);\n  return GenericInMemoryCache.data[key]?.value;\n}\n\nexport function getClock(key: string) {\n  invalidateExpiredCacheData(key);\n  // Stryker Workaround 2. Pointless mutant\n  // Stryker disable next-line OptionalChaining\n  return GenericInMemoryCache.data[key]?.clock;\n}\n\n// eslint-disable-next-line no-magic-numbers\nexport function set(key: string, data: Data, ttl: MsValue = 0) {\n  function setClock(key: string, ttl: MsValue) {\n    GenericInMemoryCache.data[key].clock = {\n      cachedAt: Date.now(),\n      ttl\n    };\n  }\n\n  function disposeClock(key: string) {\n    // @ts-expect-error - IDGAF lemme manipulate the RAM\n    GenericInMemoryCache.data[key].clock = undefined;\n  }\n\n  // Stryker Workaround 3. Pointless mutant `if (true)`\n  // Stryker disable next-line ConditionalExpression\n  if (!GenericInMemoryCache.data[key]) GenericInMemoryCache.data[key] = {} as DataCacheEntry;\n  // Stryker Workaround 4. Pointless mutants\n  // Stryker disable next-line ConditionalExpression,EqualityOperator\n  GenericInMemoryCache.data[key].value = typeof data === 'object' ? structuredClone(data) : data;\n\n  /* eslint-disable no-magic-numbers */\n  // Stryker Workaround 5. Pointless mutants\n  // Stryker disable ConditionalExpression,EqualityOperator\n  if (ttl > 0) setClock(key, ttl);\n  else if (ttl < 0) disposeClock(key);\n  // Stryker restore ConditionalExpression,EqualityOperator\n  /* eslint-enable no-magic-numbers */\n}\n\n// eslint-disable-next-line no-magic-numbers\nexport async function getOrSet(key: string, data: () => Promise<Data>, ttl: MsValue = 0) {\n  const value: MaybeObjectValue<Data> = get(key);\n  if (value !== undefined) return value;\n\n  const mountedData = await data();\n  set(key, mountedData, ttl);\n  return get(key);\n}\n\nexport function clearAll() {\n  for (const key of Object.keys(GenericInMemoryCache.data)) delete GenericInMemoryCache.data[key];\n}\n\ntype Data = boolean | string | number | object | null;\n\ntype Clock = { cachedAt: MsTimestamp; ttl: MsValue };\n\ntype DataCacheEntry = {\n  clock: Clock;\n  value: Data;\n};\n\ntype DataCache = Record<PropertyKey, DataCacheEntry>;\n"
    },
    "src/components/config/mdx/NextComponents.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "172",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 78,
              "line": 6
            }
          }
        },
        {
          "id": "173",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 8
            },
            "start": {
              "column": 10,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport Image from 'next/image';\n\nconst NextComponents: Record<PropertyKey, (...args: any[]) => JSX.Element> = {\n  // eslint-disable-next-line jsx-a11y/alt-text\n  Image: ({ ...props }) => <Image {...props} />\n};\n\nexport default NextComponents;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/mdx/PrimitiveComponents.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "174",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 71
            },
            "start": {
              "column": 83,
              "line": 10
            }
          }
        },
        {
          "id": "175",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 14
            },
            "start": {
              "column": 8,
              "line": 11
            }
          }
        },
        {
          "id": "176",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 13
            },
            "start": {
              "column": 24,
              "line": 13
            }
          }
        },
        {
          "id": "177",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "178",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 136,
              "line": 17
            },
            "start": {
              "column": 21,
              "line": 17
            }
          }
        },
        {
          "id": "179",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "180",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 126,
              "line": 23
            },
            "start": {
              "column": 21,
              "line": 23
            }
          }
        },
        {
          "id": "181",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 10,
              "line": 27
            }
          }
        },
        {
          "id": "182",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 29
            },
            "start": {
              "column": 28,
              "line": 29
            }
          }
        },
        {
          "id": "183",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 36
            },
            "start": {
              "column": 8,
              "line": 32
            }
          }
        },
        {
          "id": "184",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 34
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "185",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 34
            },
            "start": {
              "column": 109,
              "line": 34
            }
          }
        },
        {
          "id": "186",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "187",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 39
            },
            "start": {
              "column": 23,
              "line": 39
            }
          }
        },
        {
          "id": "188",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "189",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 127,
              "line": 43
            },
            "start": {
              "column": 21,
              "line": 43
            }
          }
        },
        {
          "id": "190",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 49
            },
            "start": {
              "column": 7,
              "line": 47
            }
          }
        },
        {
          "id": "191",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 48
            },
            "start": {
              "column": 23,
              "line": 48
            }
          }
        },
        {
          "id": "192",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "193",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 51
            },
            "start": {
              "column": 23,
              "line": 51
            }
          }
        },
        {
          "id": "194",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 55
            },
            "start": {
              "column": 7,
              "line": 53
            }
          }
        },
        {
          "id": "195",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 54
            },
            "start": {
              "column": 23,
              "line": 54
            }
          }
        },
        {
          "id": "196",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "197",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 57
            },
            "start": {
              "column": 23,
              "line": 57
            }
          }
        },
        {
          "id": "198",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 62
            },
            "start": {
              "column": 15,
              "line": 60
            }
          }
        },
        {
          "id": "199",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 61
            },
            "start": {
              "column": 31,
              "line": 61
            }
          }
        },
        {
          "id": "200",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 150,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "201",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 123,
              "line": 63
            },
            "start": {
              "column": 91,
              "line": 63
            }
          }
        },
        {
          "id": "202",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 121,
              "line": 64
            },
            "start": {
              "column": 6,
              "line": 64
            }
          }
        },
        {
          "id": "203",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 94,
              "line": 64
            },
            "start": {
              "column": 52,
              "line": 64
            }
          }
        },
        {
          "id": "204",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 117,
              "line": 65
            },
            "start": {
              "column": 6,
              "line": 65
            }
          }
        },
        {
          "id": "205",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 65
            },
            "start": {
              "column": 52,
              "line": 65
            }
          }
        },
        {
          "id": "206",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 66
            },
            "start": {
              "column": 7,
              "line": 66
            }
          }
        },
        {
          "id": "207",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 66
            },
            "start": {
              "column": 54,
              "line": 66
            }
          }
        },
        {
          "id": "208",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 67
            },
            "start": {
              "column": 7,
              "line": 67
            }
          }
        },
        {
          "id": "209",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 67
            },
            "start": {
              "column": 54,
              "line": 67
            }
          }
        },
        {
          "id": "210",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 68
            },
            "start": {
              "column": 9,
              "line": 68
            }
          }
        },
        {
          "id": "211",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 68
            },
            "start": {
              "column": 58,
              "line": 68
            }
          }
        },
        {
          "id": "212",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 69
            },
            "start": {
              "column": 7,
              "line": 69
            }
          }
        },
        {
          "id": "213",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 69
            },
            "start": {
              "column": 54,
              "line": 69
            }
          }
        },
        {
          "id": "214",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 70
            },
            "start": {
              "column": 7,
              "line": 70
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { ImgHTMLAttributes, HTMLAttributes } from 'react';\n\nimport MdxCopyToClipboard from '@/components/ui/blog/MdxCopyToClipboard';\nimport { cn } from '@/lib/tailwind';\n\n/* eslint-disable perfectionist/sort-objects */\nconst PrimitiveComponents: Record<PropertyKey, (...args: any[]) => JSX.Element> = {\n  img: ({ className, alt, ...props }: ImgHTMLAttributes<HTMLImageElement>) => (\n    // eslint-disable-next-line @next/next/no-img-element\n    <img className={cn('rounded-md border', className)} alt={alt} {...props} />\n  ),\n  th: ({ className, ...props }) => (\n    <th\n      className={cn('border px-4 py-2 font-bold ltr:text-left rtl:text-right [&[align=center]]:text-center [&[align=right]]:text-right', className)}\n      {...props}\n    />\n  ),\n  td: ({ className, ...props }) => (\n    <td\n      className={cn('border px-4 py-2 ltr:text-left rtl:text-right [&[align=center]]:text-center [&[align=right]]:text-right', className)}\n      {...props}\n    />\n  ),\n  table: ({ className, ...props }: HTMLAttributes<HTMLTableElement>) => (\n    <div className=\"my-6 w-full overflow-y-auto\">\n      <table className={cn('w-full', className)} {...props} />\n    </div>\n  ),\n  pre: ({ className, ...props }) => (\n    <MdxCopyToClipboard>\n      <pre className={cn('mb-4 mt-6 overflow-x-auto rounded-lg px-4 py-4', className)} {...props} tabIndex={-1} />\n    </MdxCopyToClipboard>\n  ),\n  /* eslint-disable perfectionist/sort-objects */\n  h1: ({ className, ...props }) => (\n    <h1 className={cn('mt-2 flex scroll-m-20 text-4xl font-bold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h2: ({ className, ...props }) => (\n    <h2\n      className={cn('mt-10 flex scroll-m-20 border-b pb-1 text-3xl font-semibold tracking-tight first:mt-0 [&>*]:no-underline', className)}\n      {...props}\n    />\n  ),\n  h3: ({ className, ...props }) => (\n    <h3 className={cn('mt-8 flex scroll-m-20 text-2xl font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h4: ({ className, ...props }) => (\n    <h4 className={cn('mt-8 flex scroll-m-20 text-xl font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h5: ({ className, ...props }) => (\n    <h5 className={cn('mt-8 flex scroll-m-20 text-lg font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h6: ({ className, ...props }) => (\n    <h6 className={cn('mt-8 flex scroll-m-20 text-base font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  /* eslint-enable perfectionist/sort-objects */\n  blockquote: ({ className, ...props }) => (\n    <blockquote className={cn('mt-6 border-l-2 pl-6 italic [&>*]:text-muted-foreground', className)} {...props} />\n  ),\n  tr: ({ className, ...props }: HTMLAttributes<HTMLTableRowElement>) => <tr className={cn('m-0 border-t p-0 even:bg-muted', className)} {...props} />,\n  a: ({ className, ...props }) => <a className={cn('font-medium underline underline-offset-4', className)} {...props} />,\n  p: ({ className, ...props }) => <p className={cn('leading-7 [&:not(:first-child)]:mt-6', className)} {...props} />,\n  ol: ({ className, ...props }) => <ol className={cn('my-6 ml-6 list-decimal', className)} {...props} />,\n  ul: ({ className, ...props }) => <ul className={cn('my-6 ml-6 list-disc', className)} {...props} />,\n  code: ({ className, ...props }) => <code className={cn('bg-inherit', className)} {...props} />,\n  li: ({ className, ...props }) => <li className={cn('mt-2', className)} {...props} />,\n  hr: ({ ...props }) => <hr className=\"my-4 md:my-8\" {...props} />\n};\n/* eslint-enable perfectionist/sort-objects */\n\nexport default PrimitiveComponents;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/mdx/SharedCTAs.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "215",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 74,
              "line": 7
            }
          }
        },
        {
          "id": "216",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 8
            },
            "start": {
              "column": 23,
              "line": 8
            }
          }
        },
        {
          "id": "217",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 9
            },
            "start": {
              "column": 17,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport MdxInviteTheBotButton from '@/components/ui/cta/MdxInviteTheBotButton';\nimport MdxSignupButton from '@/components/ui/cta/MdxSignupButton';\n\nconst SharedCTAs: Record<PropertyKey, (...args: any[]) => JSX.Element> = {\n  InviteTheBotButton: ({ ...props }) => <MdxInviteTheBotButton {...props} />,\n  SignupButton: ({ ...props }) => <MdxSignupButton {...props} />\n};\n\nexport default SharedCTAs;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/blogToc/desktopTocCollapseButtonIconStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "218",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 126,
              "line": 8
            },
            "start": {
              "column": 17,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'transition-transform duration-1000 m-auto w-[25px] h-[25px] p-1 text-primary-foreground lg:rtl:-scale-x-100';\n\nconst DesktopBlogTocCollapseButtonIconStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, 'relative bottom-[2px] -rotate-180 lg:rtl:rotate-180'),\n  isActiveClassList: COMMONS\n} as const;\n\nexport default DesktopBlogTocCollapseButtonIconStyle;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/body.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "219",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 4
            },
            "start": {
              "column": 18,
              "line": 4
            }
          }
        },
        {
          "id": "220",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 108,
              "line": 5
            },
            "start": {
              "column": 35,
              "line": 5
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nconst BODY_CLS = 'overflow-x-hidden bg-background font-sans antialiased';\nexport const BODY_CONTAINER_CLS = 'min-h-screen min-w-screen w-screen max-w-screen flex flex-col rtl-magic';\nexport default BODY_CLS;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/html.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "221",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 42,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { CSSProperties } from 'react';\n\nimport { DEFAULT_VARIANT_COLOR_SCHEME } from '@/config/themes';\n\nexport const HTML_STYLE: CSSProperties = {\n  colorScheme: DEFAULT_VARIANT_COLOR_SCHEME\n};\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/loader/colors.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "222",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 9
            },
            "start": {
              "column": 15,
              "line": 9
            }
          }
        },
        {
          "id": "223",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 10
            },
            "start": {
              "column": 26,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\ntype LoaderConfigType = {\n  BACKGROUND_COLOR: string;\n  COLOR: string;\n};\n\nconst COLOR = '#42546E';\nconst BACKGROUND_COLOR = '#000';\n\nconst LOADER_CONFIG: LoaderConfigType = {\n  BACKGROUND_COLOR,\n  COLOR\n} as const;\n\nexport default LOADER_CONFIG;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/main.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "224",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 4
            },
            "start": {
              "column": 25,
              "line": 4
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nexport const MAIN_CLS = 'text-foreground';\nexport default MAIN_CLS;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/navbar/NavbarButtonStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "225",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 148,
              "line": 9
            },
            "start": {
              "column": 24,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { cn } from '@/lib/tailwind';\n\nexport const COMMONS = 'transition-colors duration-200 flex h-fit flex-1 break-word items-center justify-center rounded-md px-3 py-2 font-semibold';\n\nconst { NOT_ACTIVE_CLASSNAME, ACTIVE_CLASSNAME } = BUTTON_CONFIG;\n\nconst NavbarButtonStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, NOT_ACTIVE_CLASSNAME),\n  isActiveClassList: cn(COMMONS, ACTIVE_CLASSNAME)\n} as const;\n\nexport default NavbarButtonStyle;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/navbar/NavbarDropdownButtonIconStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "226",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 8
            },
            "start": {
              "column": 17,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'transition-transform relative ml-[2px] h-5 w-5';\n\nconst NavbarDropdownButtonIconStyle: IButtonStyleBase = {\n  isActiveClassList: cn(COMMONS, 'top-[2px] -rotate-180 rtl:rotate-180'),\n  isNotActiveClassList: cn(COMMONS, 'top-[1.45px]')\n} as const;\n\nexport default NavbarDropdownButtonIconStyle;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/navbar/NavbarDropdownMenuButtonStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "227",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 17
            },
            "start": {
              "column": 61,
              "line": 17
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { COMMONS } from '@/components/config/styles/navbar/NavbarButtonStyle';\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { cn } from '@/lib/tailwind';\n\nconst { NOT_ACTIVE_CLASSNAME, ACTIVE_CLASSNAME } = BUTTON_CONFIG;\n\nconst NavbarDropdownMenuButtonStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, NOT_ACTIVE_CLASSNAME),\n  isActiveClassList: cn(COMMONS, ACTIVE_CLASSNAME)\n} as const;\n\nexport const NAVBAR_DROPDOWN_MENU_INNER_BUTTONS_CLASSLIST = 'flex items-center h-full px-4 py-2.5';\n\nexport default NavbarDropdownMenuButtonStyle;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/sidebar/SidebarButtonStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "228",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 9
            },
            "start": {
              "column": 17,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type IButtonStyleReactIcon from '@/components/config/styles/types/IButtonStyleReactIcon';\n\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'transition-colors duration-200 p-2.5 rounded-lg';\nconst { NOT_ACTIVE_CLASSNAME, ACTIVE_CLASSNAME } = BUTTON_CONFIG;\n\nconst SidebarButtonStyle: IButtonStyleReactIcon = {\n  isNotActiveClassList: cn(COMMONS, NOT_ACTIVE_CLASSNAME),\n  isActiveClassList: cn(COMMONS, ACTIVE_CLASSNAME),\n  sidebarIconProps: { fontSize: 25 }\n} as const;\n\nexport default SidebarButtonStyle;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/sidebar/SidebarCollapseButtonIconStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "229",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 126,
              "line": 8
            },
            "start": {
              "column": 17,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'transition-transform duration-1000 m-auto p-1 text-primary-foreground lg:rtl:-scale-x-100 w-[25px] h-[25px]';\n\nconst SidebarCollapseButtonIconStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, '-rotate-180 lg:rtl:rotate-180'),\n  isActiveClassList: COMMONS\n} as const;\n\nexport default SidebarCollapseButtonIconStyle;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/sidebar/SidebarCollapseButtonWrapperStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "230",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 109,
              "line": 8
            },
            "start": {
              "column": 17,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'z-10 transition-opacity delay-300 duration-1000 relative h-0 flex flex-col lg:w-0 lg:block';\n\nconst SidebarCollapseButtonWrapperStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, 'opacity-20 hover:opacity-100 hover:delay-0 hover:duration-300'),\n  isActiveClassList: cn(COMMONS, 'opacity-100')\n} as const;\n\nexport default SidebarCollapseButtonWrapperStyle;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/hooks/helpers/functions/usePagination.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "231",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/hooks/usePagination.ts(8,60): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number | (() => number)'.\nsrc/components/hooks/usePagination.ts(8,79): error TS2554: Expected 0 arguments, but got 2.\nsrc/components/hooks/usePagination.ts(11,49): error TS2554: Expected 0 arguments, but got 2.\nsrc/components/hooks/usePagination.ts(12,20): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'SetStateAction<number>'.\nsrc/components/hooks/helpers/functions/__tests__/prebuild.usePagination.test.ts(9,44): error TS2554: Expected 0 arguments, but got 2.\nsrc/components/hooks/helpers/functions/__tests__/prebuild.usePagination.test.ts(16,44): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 100,
              "line": 3
            },
            "start": {
              "column": 35,
              "line": 3
            }
          }
        },
        {
          "id": "232",
          "mutatorName": "ArithmeticOperator",
          "replacement": "total * perChunk",
          "statusReason": "expected 50 to be 2 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["404"],
          "coveredBy": ["404", "405", "463", "464"],
          "location": {
            "end": {
              "column": 99,
              "line": 3
            },
            "start": {
              "column": 83,
              "line": 3
            }
          }
        }
      ],
      "source": "import type { Quantity, Limit } from '@rtm/shared-types/Numbers';\n\nexport const computePagesAmount = (total: Quantity, perChunk: Limit) => Math.ceil(total / perChunk);\n"
    },
    "src/components/hooks/useIsLargeScreen.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "233",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 32,
              "line": 7
            }
          }
        },
        {
          "id": "234",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 8
            },
            "start": {
              "column": 39,
              "line": 8
            }
          }
        },
        {
          "id": "235",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 8
            },
            "start": {
              "column": 68,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport { useMediaQuery } from '@react-hook/media-query';\nimport { getBreakpoint } from '@/lib/tailwind';\n\nconst useIsLargeScreen = () => {\n  const isLargeScreen = useMediaQuery(`(min-width: ${getBreakpoint('lg')}px)`);\n  return isLargeScreen;\n};\n\nexport default useIsLargeScreen;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/hooks/useLockScreenScrollY.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "236",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 6
            },
            "start": {
              "column": 31,
              "line": 6
            }
          }
        },
        {
          "id": "237",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 6
            },
            "start": {
              "column": 32,
              "line": 6
            }
          }
        },
        {
          "id": "238",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 6
            },
            "start": {
              "column": 44,
              "line": 6
            }
          }
        },
        {
          "id": "239",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 9,
              "line": 13
            },
            "start": {
              "column": 30,
              "line": 8
            }
          }
        },
        {
          "id": "240",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 13
            },
            "start": {
              "column": 25,
              "line": 9
            }
          }
        },
        {
          "id": "241",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 12
            },
            "start": {
              "column": 12,
              "line": 12
            }
          }
        },
        {
          "id": "242",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 13
            },
            "start": {
              "column": 6,
              "line": 13
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\nimport { getBodyContainer } from '@/lib/html';\nimport { useLayoutEffect } from 'react';\n\nexport const EFFECT_CLASSES = ['h-100svh', 'overflow-y-hidden'];\n\nconst useLockScreenScrollY = () =>\n  useLayoutEffect(() => {\n    getBodyContainer().classList.add(...EFFECT_CLASSES);\n\n    return () => getBodyContainer().classList.remove(...EFFECT_CLASSES);\n  }, []);\n\nexport default useLockScreenScrollY;\n\n// Stryker restore all\n"
    },
    "src/components/hooks/usePagefind.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "243",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 54
            },
            "start": {
              "column": 51,
              "line": 13
            }
          }
        },
        {
          "id": "244",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 53
            },
            "start": {
              "column": 19,
              "line": 14
            }
          }
        },
        {
          "id": "245",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 51
            },
            "start": {
              "column": 43,
              "line": 15
            }
          }
        },
        {
          "id": "246",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 24
            },
            "start": {
              "column": 37,
              "line": 16
            }
          }
        },
        {
          "id": "247",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 17
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        },
        {
          "id": "248",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 17
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        },
        {
          "id": "249",
          "mutatorName": "LogicalOperator",
          "replacement": "process.env.NODE_ENV === 'development' && process.env.NODE_ENV === 'test'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 17
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        },
        {
          "id": "250",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 17
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        },
        {
          "id": "251",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'development'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 17
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        },
        {
          "id": "252",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 17
            },
            "start": {
              "column": 38,
              "line": 17
            }
          }
        },
        {
          "id": "253",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 17
            },
            "start": {
              "column": 55,
              "line": 17
            }
          }
        },
        {
          "id": "254",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'test'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 17
            },
            "start": {
              "column": 55,
              "line": 17
            }
          }
        },
        {
          "id": "255",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 17
            },
            "start": {
              "column": 80,
              "line": 17
            }
          }
        },
        {
          "id": "256",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 20
            },
            "start": {
              "column": 88,
              "line": 17
            }
          }
        },
        {
          "id": "257",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 96,
              "line": 22
            },
            "start": {
              "column": 73,
              "line": 22
            }
          }
        },
        {
          "id": "258",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 29
            },
            "start": {
              "column": 39,
              "line": 26
            }
          }
        },
        {
          "id": "259",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 41
            },
            "start": {
              "column": 11,
              "line": 31
            }
          }
        },
        {
          "id": "260",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 13,
              "line": 32
            }
          }
        },
        {
          "id": "261",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 13,
              "line": 32
            }
          }
        },
        {
          "id": "262",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof window.pagefind === 'undefined'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 13,
              "line": 32
            }
          }
        },
        {
          "id": "263",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 40,
              "line": 32
            }
          }
        },
        {
          "id": "264",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 39
            },
            "start": {
              "column": 53,
              "line": 32
            }
          }
        },
        {
          "id": "265",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 36
            },
            "start": {
              "column": 15,
              "line": 33
            }
          }
        },
        {
          "id": "266",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 38
            },
            "start": {
              "column": 19,
              "line": 36
            }
          }
        },
        {
          "id": "267",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 50
            },
            "start": {
              "column": 19,
              "line": 41
            }
          }
        },
        {
          "id": "268",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 43
            },
            "start": {
              "column": 11,
              "line": 43
            }
          }
        },
        {
          "id": "269",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 43
            },
            "start": {
              "column": 11,
              "line": 43
            }
          }
        },
        {
          "id": "270",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error && e.message && 'Invalid throw usage, intercepted in a traceError catch.'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 43
            },
            "start": {
              "column": 11,
              "line": 43
            }
          }
        },
        {
          "id": "271",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 43
            },
            "start": {
              "column": 12,
              "line": 43
            }
          }
        },
        {
          "id": "272",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error || e.message",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 43
            },
            "start": {
              "column": 12,
              "line": 43
            }
          }
        },
        {
          "id": "273",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 43
            },
            "start": {
              "column": 48,
              "line": 43
            }
          }
        },
        {
          "id": "274",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 46
            },
            "start": {
              "column": 29,
              "line": 46
            }
          }
        },
        {
          "id": "275",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 46
            },
            "start": {
              "column": 29,
              "line": 46
            }
          }
        },
        {
          "id": "276",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error && e.cause && undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 46
            },
            "start": {
              "column": 29,
              "line": 46
            }
          }
        },
        {
          "id": "277",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 46
            },
            "start": {
              "column": 30,
              "line": 46
            }
          }
        },
        {
          "id": "278",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error || e.cause",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 46
            },
            "start": {
              "column": 30,
              "line": 46
            }
          }
        },
        {
          "id": "279",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 47
            },
            "start": {
              "column": 29,
              "line": 47
            }
          }
        },
        {
          "id": "280",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 47
            },
            "start": {
              "column": 29,
              "line": 47
            }
          }
        },
        {
          "id": "281",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error && e.stack && undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 47
            },
            "start": {
              "column": 29,
              "line": 47
            }
          }
        },
        {
          "id": "282",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 47
            },
            "start": {
              "column": 30,
              "line": 47
            }
          }
        },
        {
          "id": "283",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error || e.stack",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 47
            },
            "start": {
              "column": 30,
              "line": 47
            }
          }
        },
        {
          "id": "284",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 48
            },
            "start": {
              "column": 33,
              "line": 48
            }
          }
        },
        {
          "id": "285",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 53
            },
            "start": {
              "column": 6,
              "line": 53
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport { BROKEN_PAGEFIND_STUB, DEV_PAGEFIND_STUB } from '@/config/pagefind';\nimport PagefindIntegrationError from '@/errors/PagefindIntegrationError';\nimport { initPagefind } from '@/lib/pagefind/helpers/perf';\nimport { traceError } from '@/lib/next';\nimport { useEffect } from 'react';\n\n// https://github.com/CloudCannon/pagefind/issues/596\nfunction usePagefind(currentLocale: LanguageFlag) {\n  useEffect(() => {\n    async function bootOrRebootPagefind() {\n      async function bootPagefind() {\n        if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {\n          window.pagefind = DEV_PAGEFIND_STUB;\n          return;\n        }\n        // @ts-ignore generated after build\n        const pagefindInstance = await import(/* webpackIgnore: true */ '/pagefind/pagefind.js');\n        window.pagefind = pagefindInstance;\n      }\n\n      async function rebootPagefind() {\n        await window.pagefind.destroy();\n        await initPagefind();\n      }\n\n      try {\n        if (typeof window.pagefind !== 'undefined') {\n          try {\n            await rebootPagefind();\n            return;\n          } catch {\n            await bootPagefind();\n          }\n        }\n        await bootPagefind();\n      } catch (e) {\n        const tracedError = new PagefindIntegrationError(\n          (e instanceof Error && e.message) || 'Invalid throw usage, intercepted in a traceError catch.'\n        );\n\n        tracedError.cause = (e instanceof Error && e.cause) || undefined;\n        tracedError.stack = (e instanceof Error && e.stack) || undefined;\n        traceError(tracedError, { userAgent: navigator.userAgent });\n        window.pagefind = BROKEN_PAGEFIND_STUB;\n      }\n    }\n    bootOrRebootPagefind();\n  }, [currentLocale]);\n}\n\nexport default usePagefind;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/hooks/usePagination.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "286",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/hooks/usePagination.ts(7,61): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["404", "405"],
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 73,
              "line": 7
            }
          }
        },
        {
          "id": "287",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 2 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["405"],
          "coveredBy": ["404", "405"],
          "location": {
            "end": {
              "column": 4,
              "line": 13
            },
            "start": {
              "column": 19,
              "line": 10
            }
          }
        },
        {
          "id": "288",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected 2 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["405"],
          "coveredBy": ["404", "405"],
          "location": {
            "end": {
              "column": 27,
              "line": 13
            },
            "start": {
              "column": 6,
              "line": 13
            }
          }
        }
      ],
      "source": "import type { Quantity, Limit } from '@rtm/shared-types/Numbers';\n\nimport { useEffect, useState } from 'react';\n\nimport { computePagesAmount } from './helpers/functions/usePagination';\n\nconst usePagination = <T>(items: T[], itemsPerPage: Limit): Quantity => {\n  const [pagesAmount, setPagesAmount] = useState<Quantity>(computePagesAmount(items.length, itemsPerPage));\n\n  useEffect(() => {\n    const freshPagesAmount = computePagesAmount(items.length, itemsPerPage);\n    setPagesAmount(freshPagesAmount);\n  }, [items, itemsPerPage]);\n\n  return pagesAmount;\n};\n\nexport default usePagination;\n"
    },
    "src/components/hooks/useResetScroll.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "289",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected \"resetScroll\" to be called with arguments: [ undefined, false ]\n\nReceived: \n\n\n\nNumber of calls: 0\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["224"],
          "coveredBy": ["224", "225", "226", "227", "228"],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 3,
              "line": 15
            }
          }
        },
        {
          "id": "290",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected \"resetScroll\" to be called with arguments: [ undefined, false ]\n\nReceived: \n\n\n\nNumber of calls: 0\n",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["224"],
          "coveredBy": ["224", "225", "226", "227", "228"],
          "location": {
            "end": {
              "column": 83,
              "line": 17
            },
            "start": {
              "column": 5,
              "line": 17
            }
          }
        },
        {
          "id": "291",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected \"resetScroll\" to be called with arguments: [ { current: <div></div> }, true ]\n\nReceived: \n\n\n\nNumber of calls: 0\n",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["228"],
          "coveredBy": ["224", "225", "226", "227", "228"],
          "location": {
            "end": {
              "column": 72,
              "line": 19
            },
            "start": {
              "column": 5,
              "line": 19
            }
          }
        }
      ],
      "source": "import type { HookDepsArrayPrimitives } from '@rtm/shared-types/React';\nimport type { RefObject } from 'react';\n\nimport resetScroll from '@rtm/shared-lib/portable/html/resetScroll';\nimport { useLayoutEffect } from 'react';\n\ninterface ResetScrollOptions {\n  additionalDep?: HookDepsArrayPrimitives;\n  alsoResetWindowScroll?: boolean;\n}\n\nfunction useResetScroll<T extends HTMLElement>(\n  scrollableElementToResetRef?: RefObject<T>,\n  { alsoResetWindowScroll, additionalDep }: ResetScrollOptions = {}\n) {\n  useLayoutEffect(\n    () => resetScroll(scrollableElementToResetRef, Boolean(alsoResetWindowScroll)),\n\n    [scrollableElementToResetRef, alsoResetWindowScroll, additionalDep]\n  );\n}\n\nexport default useResetScroll;\n"
    },
    "src/components/hooks/useScrollDirection.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "292",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 50
            },
            "start": {
              "column": 96,
              "line": 15
            }
          }
        },
        {
          "id": "293",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 16
            },
            "start": {
              "column": 75,
              "line": 16
            }
          }
        },
        {
          "id": "294",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 19
            },
            "start": {
              "column": 30,
              "line": 19
            }
          }
        },
        {
          "id": "295",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 20
            },
            "start": {
              "column": 27,
              "line": 20
            }
          }
        },
        {
          "id": "296",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 47
            },
            "start": {
              "column": 19,
              "line": 22
            }
          }
        },
        {
          "id": "297",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 35
            },
            "start": {
              "column": 41,
              "line": 25
            }
          }
        },
        {
          "id": "298",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "299",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "300",
          "mutatorName": "EqualityOperator",
          "replacement": "Math.abs(scrollY - prevScrollY.current) > THRESHOLD",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "301",
          "mutatorName": "EqualityOperator",
          "replacement": "Math.abs(scrollY - prevScrollY.current) < THRESHOLD",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "302",
          "mutatorName": "ArithmeticOperator",
          "replacement": "scrollY + prevScrollY.current",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 28
            },
            "start": {
              "column": 20,
              "line": 28
            }
          }
        },
        {
          "id": "303",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 33
            },
            "start": {
              "column": 65,
              "line": 28
            }
          }
        },
        {
          "id": "304",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 29
            },
            "start": {
              "column": 36,
              "line": 29
            }
          }
        },
        {
          "id": "305",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 29
            },
            "start": {
              "column": 36,
              "line": 29
            }
          }
        },
        {
          "id": "306",
          "mutatorName": "EqualityOperator",
          "replacement": "scrollY >= prevScrollY.current",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 29
            },
            "start": {
              "column": 36,
              "line": 29
            }
          }
        },
        {
          "id": "307",
          "mutatorName": "EqualityOperator",
          "replacement": "scrollY <= prevScrollY.current",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 29
            },
            "start": {
              "column": 36,
              "line": 29
            }
          }
        },
        {
          "id": "308",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 29
            },
            "start": {
              "column": 68,
              "line": 29
            }
          }
        },
        {
          "id": "309",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 29
            },
            "start": {
              "column": 77,
              "line": 29
            }
          }
        },
        {
          "id": "310",
          "mutatorName": "MethodExpression",
          "replacement": "Math.min(0, scrollY)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 31,
              "line": 32
            }
          }
        },
        {
          "id": "311",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 34
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "312",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 41
            },
            "start": {
              "column": 32,
              "line": 37
            }
          }
        },
        {
          "id": "313",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 38
            },
            "start": {
              "column": 11,
              "line": 38
            }
          }
        },
        {
          "id": "314",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 38
            },
            "start": {
              "column": 11,
              "line": 38
            }
          }
        },
        {
          "id": "315",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 39
            },
            "start": {
              "column": 26,
              "line": 39
            }
          }
        },
        {
          "id": "316",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 45
            },
            "start": {
              "column": 29,
              "line": 45
            }
          }
        },
        {
          "id": "317",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 46
            },
            "start": {
              "column": 12,
              "line": 46
            }
          }
        },
        {
          "id": "318",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 46
            },
            "start": {
              "column": 45,
              "line": 46
            }
          }
        },
        {
          "id": "319",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 47
            },
            "start": {
              "column": 6,
              "line": 47
            }
          }
        },
        {
          "id": "320",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 49
            },
            "start": {
              "column": 10,
              "line": 49
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\n// https://www.robinwieruch.de/react-hook-scroll-direction/\n\nimport type { SetStateAction, Dispatch } from 'react';\n\nimport { MINIMAL_THROTTLE_TIMING_IN_MS } from '@/config/throttling';\nimport { useEffect, useState, useRef } from 'react';\nimport throttle from 'throttleit';\n\nconst THRESHOLD = 0;\n\ntype ScrollDirection = 'down' | 'up';\n\nconst useScrollDirection = (): [ScrollDirection, Dispatch<SetStateAction<ScrollDirection>>] => {\n  const [scrollDirection, setScrollDirection] = useState<ScrollDirection>('down');\n\n  // eslint-disable-next-line no-magic-numbers\n  const prevScrollY = useRef(-1);\n  const blocking = useRef(false);\n\n  useEffect(() => {\n    prevScrollY.current = window.scrollY;\n\n    const updateScrollDirection = () => {\n      const { scrollY } = window;\n\n      if (Math.abs(scrollY - prevScrollY.current) >= THRESHOLD) {\n        const newScrollDirection = scrollY > prevScrollY.current ? 'down' : 'up';\n        setScrollDirection(newScrollDirection);\n        // eslint-disable-next-line no-magic-numbers\n        prevScrollY.current = Math.max(0, scrollY);\n      }\n      blocking.current = false;\n    };\n\n    const handleScroll = () => {\n      if (blocking.current) return;\n      blocking.current = true;\n      window.requestAnimationFrame(updateScrollDirection);\n    };\n\n    const throttledScrollHandler = throttle(handleScroll, MINIMAL_THROTTLE_TIMING_IN_MS);\n\n    window.addEventListener('scroll', throttledScrollHandler);\n    return () => window.removeEventListener('scroll', throttledScrollHandler);\n  }, []);\n\n  return [scrollDirection, setScrollDirection];\n};\n\nexport default useScrollDirection;\n\n// Stryker restore all\n"
    },
    "src/components/hooks/useToast.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "321",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 18,
              "line": 31
            }
          }
        },
        {
          "id": "322",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(count + 1) * Number.MAX_SAFE_INTEGER",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 33
            },
            "start": {
              "column": 11,
              "line": 33
            }
          }
        },
        {
          "id": "323",
          "mutatorName": "ArithmeticOperator",
          "replacement": "count - 1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 33
            },
            "start": {
              "column": 12,
              "line": 33
            }
          }
        },
        {
          "id": "324",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 77
            },
            "start": {
              "column": 47,
              "line": 63
            }
          }
        },
        {
          "id": "325",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 64
            },
            "start": {
              "column": 7,
              "line": 64
            }
          }
        },
        {
          "id": "326",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 64
            },
            "start": {
              "column": 7,
              "line": 64
            }
          }
        },
        {
          "id": "327",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 66
            },
            "start": {
              "column": 35,
              "line": 64
            }
          }
        },
        {
          "id": "328",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 74
            },
            "start": {
              "column": 36,
              "line": 68
            }
          }
        },
        {
          "id": "329",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 73
            },
            "start": {
              "column": 14,
              "line": 70
            }
          }
        },
        {
          "id": "330",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 71
            },
            "start": {
              "column": 13,
              "line": 71
            }
          }
        },
        {
          "id": "331",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 131
            },
            "start": {
              "column": 65,
              "line": 79
            }
          }
        },
        {
          "id": "332",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'ADD_TOAST':",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 9,
              "line": 86
            },
            "start": {
              "column": 5,
              "line": 81
            }
          }
        },
        {
          "id": "333",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 81
            },
            "start": {
              "column": 10,
              "line": 81
            }
          }
        },
        {
          "id": "334",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 86
            },
            "start": {
              "column": 14,
              "line": 82
            }
          }
        },
        {
          "id": "335",
          "mutatorName": "MethodExpression",
          "replacement": "[action.toast, ...state.toasts]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 85
            },
            "start": {
              "column": 17,
              "line": 85
            }
          }
        },
        {
          "id": "336",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 85
            },
            "start": {
              "column": 17,
              "line": 85
            }
          }
        },
        {
          "id": "337",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'UPDATE_TOAST':",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 9,
              "line": 92
            },
            "start": {
              "column": 5,
              "line": 88
            }
          }
        },
        {
          "id": "338",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 88
            },
            "start": {
              "column": 10,
              "line": 88
            }
          }
        },
        {
          "id": "339",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 92
            },
            "start": {
              "column": 14,
              "line": 89
            }
          }
        },
        {
          "id": "340",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 91
            },
            "start": {
              "column": 34,
              "line": 91
            }
          }
        },
        {
          "id": "341",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 91
            },
            "start": {
              "column": 42,
              "line": 91
            }
          }
        },
        {
          "id": "342",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 91
            },
            "start": {
              "column": 42,
              "line": 91
            }
          }
        },
        {
          "id": "343",
          "mutatorName": "EqualityOperator",
          "replacement": "t.id !== action.toast.id",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 91
            },
            "start": {
              "column": 42,
              "line": 91
            }
          }
        },
        {
          "id": "344",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 94,
              "line": 91
            },
            "start": {
              "column": 69,
              "line": 91
            }
          }
        },
        {
          "id": "345",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'DISMISS_TOAST':",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 118
            },
            "start": {
              "column": 5,
              "line": 94
            }
          }
        },
        {
          "id": "346",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 94
            },
            "start": {
              "column": 10,
              "line": 94
            }
          }
        },
        {
          "id": "347",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 118
            },
            "start": {
              "column": 27,
              "line": 94
            }
          }
        },
        {
          "id": "348",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 99
            },
            "start": {
              "column": 11,
              "line": 99
            }
          }
        },
        {
          "id": "349",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 99
            },
            "start": {
              "column": 11,
              "line": 99
            }
          }
        },
        {
          "id": "350",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 101
            },
            "start": {
              "column": 20,
              "line": 99
            }
          }
        },
        {
          "id": "351",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 105
            },
            "start": {
              "column": 14,
              "line": 101
            }
          }
        },
        {
          "id": "352",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 104
            },
            "start": {
              "column": 41,
              "line": 102
            }
          }
        },
        {
          "id": "353",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 117
            },
            "start": {
              "column": 14,
              "line": 107
            }
          }
        },
        {
          "id": "354",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 115
            },
            "start": {
              "column": 34,
              "line": 109
            }
          }
        },
        {
          "id": "355",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 110
            },
            "start": {
              "column": 11,
              "line": 110
            }
          }
        },
        {
          "id": "356",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 110
            },
            "start": {
              "column": 11,
              "line": 110
            }
          }
        },
        {
          "id": "357",
          "mutatorName": "LogicalOperator",
          "replacement": "t.id === toastId && toastId === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 110
            },
            "start": {
              "column": 11,
              "line": 110
            }
          }
        },
        {
          "id": "358",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 110
            },
            "start": {
              "column": 11,
              "line": 110
            }
          }
        },
        {
          "id": "359",
          "mutatorName": "EqualityOperator",
          "replacement": "t.id !== toastId",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 110
            },
            "start": {
              "column": 11,
              "line": 110
            }
          }
        },
        {
          "id": "360",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 110
            },
            "start": {
              "column": 31,
              "line": 110
            }
          }
        },
        {
          "id": "361",
          "mutatorName": "EqualityOperator",
          "replacement": "toastId !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 110
            },
            "start": {
              "column": 31,
              "line": 110
            }
          }
        },
        {
          "id": "362",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 114
            },
            "start": {
              "column": 15,
              "line": 111
            }
          }
        },
        {
          "id": "363",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 28,
              "line": 113
            },
            "start": {
              "column": 23,
              "line": 113
            }
          }
        },
        {
          "id": "364",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'REMOVE_TOAST':",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 9,
              "line": 129
            },
            "start": {
              "column": 5,
              "line": 119
            }
          }
        },
        {
          "id": "365",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 119
            },
            "start": {
              "column": 10,
              "line": 119
            }
          }
        },
        {
          "id": "366",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 120
            },
            "start": {
              "column": 11,
              "line": 120
            }
          }
        },
        {
          "id": "367",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 120
            },
            "start": {
              "column": 11,
              "line": 120
            }
          }
        },
        {
          "id": "368",
          "mutatorName": "EqualityOperator",
          "replacement": "action.toastId !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 120
            },
            "start": {
              "column": 11,
              "line": 120
            }
          }
        },
        {
          "id": "369",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 125
            },
            "start": {
              "column": 41,
              "line": 120
            }
          }
        },
        {
          "id": "370",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 124
            },
            "start": {
              "column": 16,
              "line": 121
            }
          }
        },
        {
          "id": "371",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 123
            },
            "start": {
              "column": 19,
              "line": 123
            }
          }
        },
        {
          "id": "372",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 129
            },
            "start": {
              "column": 14,
              "line": 126
            }
          }
        },
        {
          "id": "373",
          "mutatorName": "MethodExpression",
          "replacement": "state.toasts",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 128
            },
            "start": {
              "column": 17,
              "line": 128
            }
          }
        },
        {
          "id": "374",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 128
            },
            "start": {
              "column": 37,
              "line": 128
            }
          }
        },
        {
          "id": "375",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 128
            },
            "start": {
              "column": 44,
              "line": 128
            }
          }
        },
        {
          "id": "376",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 128
            },
            "start": {
              "column": 44,
              "line": 128
            }
          }
        },
        {
          "id": "377",
          "mutatorName": "EqualityOperator",
          "replacement": "t.id === action.toastId",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 128
            },
            "start": {
              "column": 44,
              "line": 128
            }
          }
        },
        {
          "id": "378",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 133
            },
            "start": {
              "column": 50,
              "line": 133
            }
          }
        },
        {
          "id": "379",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 135
            },
            "start": {
              "column": 26,
              "line": 135
            }
          }
        },
        {
          "id": "380",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 135
            },
            "start": {
              "column": 36,
              "line": 135
            }
          }
        },
        {
          "id": "381",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 142
            },
            "start": {
              "column": 35,
              "line": 137
            }
          }
        },
        {
          "id": "382",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 141
            },
            "start": {
              "column": 35,
              "line": 139
            }
          }
        },
        {
          "id": "383",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 173
            },
            "start": {
              "column": 37,
              "line": 146
            }
          }
        },
        {
          "id": "384",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 153
            },
            "start": {
              "column": 18,
              "line": 149
            }
          }
        },
        {
          "id": "385",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 153
            },
            "start": {
              "column": 14,
              "line": 150
            }
          }
        },
        {
          "id": "386",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 151
            },
            "start": {
              "column": 14,
              "line": 151
            }
          }
        },
        {
          "id": "387",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 152
            },
            "start": {
              "column": 13,
              "line": 152
            }
          }
        },
        {
          "id": "388",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 154
            },
            "start": {
              "column": 19,
              "line": 154
            }
          }
        },
        {
          "id": "389",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 154
            },
            "start": {
              "column": 34,
              "line": 154
            }
          }
        },
        {
          "id": "390",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 154
            },
            "start": {
              "column": 42,
              "line": 154
            }
          }
        },
        {
          "id": "391",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 166
            },
            "start": {
              "column": 12,
              "line": 156
            }
          }
        },
        {
          "id": "392",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 164
            },
            "start": {
              "column": 12,
              "line": 157
            }
          }
        },
        {
          "id": "393",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 161
            },
            "start": {
              "column": 40,
              "line": 159
            }
          }
        },
        {
          "id": "394",
          "mutatorName": "BooleanLiteral",
          "replacement": "open",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 160
            },
            "start": {
              "column": 13,
              "line": 160
            }
          }
        },
        {
          "id": "395",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 160
            },
            "start": {
              "column": 13,
              "line": 160
            }
          }
        },
        {
          "id": "396",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 160
            },
            "start": {
              "column": 13,
              "line": 160
            }
          }
        },
        {
          "id": "397",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 162
            },
            "start": {
              "column": 13,
              "line": 162
            }
          }
        },
        {
          "id": "398",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 165
            },
            "start": {
              "column": 11,
              "line": 165
            }
          }
        },
        {
          "id": "399",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 172
            },
            "start": {
              "column": 10,
              "line": 168
            }
          }
        },
        {
          "id": "400",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 192
            },
            "start": {
              "column": 21,
              "line": 175
            }
          }
        },
        {
          "id": "401",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 185
            },
            "start": {
              "column": 19,
              "line": 178
            }
          }
        },
        {
          "id": "402",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 184
            },
            "start": {
              "column": 18,
              "line": 180
            }
          }
        },
        {
          "id": "403",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 183
            },
            "start": {
              "column": 11,
              "line": 183
            }
          }
        },
        {
          "id": "404",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 183
            },
            "start": {
              "column": 11,
              "line": 183
            }
          }
        },
        {
          "id": "405",
          "mutatorName": "EqualityOperator",
          "replacement": "index >= -1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 183
            },
            "start": {
              "column": 11,
              "line": 183
            }
          }
        },
        {
          "id": "406",
          "mutatorName": "EqualityOperator",
          "replacement": "index <= -1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 183
            },
            "start": {
              "column": 11,
              "line": 183
            }
          }
        },
        {
          "id": "407",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 183
            },
            "start": {
              "column": 19,
              "line": 183
            }
          }
        },
        {
          "id": "408",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 13,
              "line": 185
            },
            "start": {
              "column": 6,
              "line": 185
            }
          }
        },
        {
          "id": "409",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 191
            },
            "start": {
              "column": 10,
              "line": 187
            }
          }
        },
        {
          "id": "410",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 189
            },
            "start": {
              "column": 14,
              "line": 189
            }
          }
        },
        {
          "id": "411",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 189
            },
            "start": {
              "column": 45,
              "line": 189
            }
          }
        },
        {
          "id": "412",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 189
            },
            "start": {
              "column": 53,
              "line": 189
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n// Inspired by react-hot-toast library (comment from shadcn)\n\n'use client';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast/Toast';\n\nimport { useEffect, useState } from 'react';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = {\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n  title?: React.ReactNode;\n  id: string;\n} & ToastProps;\n\nconst actionTypes = {\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n  ADD_TOAST: 'ADD_TOAST'\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  // eslint-disable-next-line no-magic-numbers\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType['DISMISS_TOAST'];\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: ActionType['UPDATE_TOAST'];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType['REMOVE_TOAST'];\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: ActionType['ADD_TOAST'];\n      toast: ToasterToast;\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        // eslint-disable-next-line no-magic-numbers\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT)\n      };\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t))\n      };\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false\n              }\n            : t\n        )\n      };\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: []\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId)\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      toast: { ...props, id },\n      type: 'UPDATE_TOAST'\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    toast: {\n      ...props,\n      onOpenChange: (open: boolean) => {\n        if (!open) dismiss();\n      },\n      open: true,\n      id\n    },\n    type: 'ADD_TOAST'\n  });\n\n  return {\n    dismiss,\n    id: id,\n    update\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = useState<State>(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      // eslint-disable-next-line no-magic-numbers\n      if (index > -1) listeners.splice(index, 1);\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n    toast\n  };\n}\n\nexport { useToast, toast };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/DocumentRoot.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "413",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 11
            },
            "start": {
              "column": 31,
              "line": 11
            }
          }
        },
        {
          "id": "414",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 11
            },
            "start": {
              "column": 44,
              "line": 11
            }
          }
        },
        {
          "id": "415",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 11
            },
            "start": {
              "column": 64,
              "line": 11
            }
          }
        },
        {
          "id": "416",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 76,
              "line": 11
            },
            "start": {
              "column": 71,
              "line": 11
            }
          }
        },
        {
          "id": "417",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 12
            },
            "start": {
              "column": 31,
              "line": 12
            }
          }
        },
        {
          "id": "418",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 12
            },
            "start": {
              "column": 44,
              "line": 12
            }
          }
        },
        {
          "id": "419",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 12
            },
            "start": {
              "column": 83,
              "line": 12
            }
          }
        },
        {
          "id": "420",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 12
            },
            "start": {
              "column": 90,
              "line": 12
            }
          }
        },
        {
          "id": "421",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 60,
              "line": 20
            }
          }
        },
        {
          "id": "422",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 22
            },
            "start": {
              "column": 6,
              "line": 22
            }
          }
        },
        {
          "id": "423",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 22
            },
            "start": {
              "column": 6,
              "line": 22
            }
          }
        },
        {
          "id": "424",
          "mutatorName": "LogicalOperator",
          "replacement": "!disableTopLoader || <NextTopLoader {...PROGRESSBAR_CONFIG} />",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 22
            },
            "start": {
              "column": 6,
              "line": 22
            }
          }
        },
        {
          "id": "425",
          "mutatorName": "BooleanLiteral",
          "replacement": "disableTopLoader",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 23,
              "line": 22
            },
            "start": {
              "column": 6,
              "line": 22
            }
          }
        },
        {
          "id": "426",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 23
            },
            "start": {
              "column": 6,
              "line": 23
            }
          }
        },
        {
          "id": "427",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 23
            },
            "start": {
              "column": 6,
              "line": 23
            }
          }
        },
        {
          "id": "428",
          "mutatorName": "LogicalOperator",
          "replacement": "withNavbar || <SitewideNavbar />",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 23
            },
            "start": {
              "column": 6,
              "line": 23
            }
          }
        },
        {
          "id": "429",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 25
            },
            "start": {
              "column": 6,
              "line": 25
            }
          }
        },
        {
          "id": "430",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 25
            },
            "start": {
              "column": 6,
              "line": 25
            }
          }
        },
        {
          "id": "431",
          "mutatorName": "LogicalOperator",
          "replacement": "!disableGoToTopButton || <GoToTopButton />",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 25
            },
            "start": {
              "column": 6,
              "line": 25
            }
          }
        },
        {
          "id": "432",
          "mutatorName": "BooleanLiteral",
          "replacement": "disableGoToTopButton",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 25
            },
            "start": {
              "column": 6,
              "line": 25
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport SitewideNavbar from '@/components/ui/navbar/SitewideNavbar';\nimport PROGRESSBAR_CONFIG from '@/config/progressbar';\nimport dynamic from 'next/dynamic';\n\nconst NextTopLoader = dynamic(() => import('./NextTopLoader'), { ssr: false });\nconst GoToTopButton = dynamic(() => import('@/components/ui/misc/GoToTopButton'), { ssr: false });\n\ninterface DocumentRootProps extends WithChildren {\n  disableGoToTopButton?: boolean;\n  disableTopLoader?: boolean;\n  withNavbar?: boolean;\n}\n\nconst DocumentRoot: FunctionComponent<DocumentRootProps> = ({ disableGoToTopButton, disableTopLoader, withNavbar, children }) => (\n  <>\n    {!disableTopLoader && <NextTopLoader {...PROGRESSBAR_CONFIG} />}\n    {withNavbar && <SitewideNavbar />}\n    {children}\n    {!disableGoToTopButton && <GoToTopButton />}\n  </>\n);\n\nexport default DocumentRoot;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/HtmlElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "433",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 83,
              "line": 15
            }
          }
        },
        {
          "id": "434",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 21
            },
            "start": {
              "column": 58,
              "line": 21
            }
          }
        },
        {
          "id": "435",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 21
            },
            "start": {
              "column": 77,
              "line": 21
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { LayoutBaseProps } from '@/types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { HTML_STYLE } from '@/components/config/styles/html';\nimport BODY_CLS from '@/components/config/styles/body';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport Locale from 'intl-locale-textinfo-polyfill';\nimport { cn } from '@/lib/tailwind';\nimport { fInter } from '@/fonts';\nimport { fcn } from '@/lib/next';\n\nconst HtmlElement: FunctionComponent<LayoutBaseProps> = ({ children, params }) => {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  const { direction: dir } = new Locale(language).textInfo;\n\n  return (\n    <html suppressHydrationWarning style={HTML_STYLE} lang={language} dir={dir}>\n      <body className={cn(BODY_CLS, fcn(fInter))} style={{ scrollbarGutter: 'stable' }}>\n        {children}\n      </body>\n    </html>\n  );\n};\n\nexport default HtmlElement;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/LandingPagesRootElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "436",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 148,
              "line": 11
            },
            "start": {
              "column": 70,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport DocumentRoot from '@/components/layouts/base/DocumentRoot';\n\ninterface HtmlElementProps extends WithChildren {}\n\nconst LandingPagesRootElement: FunctionComponent<HtmlElementProps> = ({ children }) => <DocumentRoot disableGoToTopButton>{children}</DocumentRoot>;\n\nexport default LandingPagesRootElement;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/NextTopLoader.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "437",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 175
            },
            "start": {
              "column": 27,
              "line": 80
            }
          }
        },
        {
          "id": "438",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 83
            },
            "start": {
              "column": 24,
              "line": 83
            }
          }
        },
        {
          "id": "439",
          "mutatorName": "LogicalOperator",
          "replacement": "propColor && defaultColor",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 86
            },
            "start": {
              "column": 17,
              "line": 86
            }
          }
        },
        {
          "id": "440",
          "mutatorName": "LogicalOperator",
          "replacement": "propHeight && defaultHeight",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 87
            },
            "start": {
              "column": 18,
              "line": 87
            }
          }
        },
        {
          "id": "441",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 89
            },
            "start": {
              "column": 21,
              "line": 89
            }
          }
        },
        {
          "id": "442",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 89
            },
            "start": {
              "column": 21,
              "line": 89
            }
          }
        },
        {
          "id": "443",
          "mutatorName": "LogicalOperator",
          "replacement": "!shadow || shadow !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 89
            },
            "start": {
              "column": 21,
              "line": 89
            }
          }
        },
        {
          "id": "444",
          "mutatorName": "BooleanLiteral",
          "replacement": "shadow",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 28,
              "line": 89
            },
            "start": {
              "column": 21,
              "line": 89
            }
          }
        },
        {
          "id": "445",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 89
            },
            "start": {
              "column": 32,
              "line": 89
            }
          }
        },
        {
          "id": "446",
          "mutatorName": "EqualityOperator",
          "replacement": "shadow === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 89
            },
            "start": {
              "column": 32,
              "line": 89
            }
          }
        },
        {
          "id": "447",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 89
            },
            "start": {
              "column": 55,
              "line": 89
            }
          }
        },
        {
          "id": "448",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 89
            },
            "start": {
              "column": 69,
              "line": 89
            }
          }
        },
        {
          "id": "449",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 89
            },
            "start": {
              "column": 94,
              "line": 89
            }
          }
        },
        {
          "id": "450",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 1111,
              "line": 93
            },
            "start": {
              "column": 8,
              "line": 93
            }
          }
        },
        {
          "id": "451",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 102
            },
            "start": {
              "column": 19,
              "line": 97
            }
          }
        },
        {
          "id": "452",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 99
            },
            "start": {
              "column": 22,
              "line": 99
            }
          }
        },
        {
          "id": "453",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 99
            },
            "start": {
              "column": 22,
              "line": 99
            }
          }
        },
        {
          "id": "454",
          "mutatorName": "LogicalOperator",
          "replacement": "md.mobile() !== null && md.tablet() !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 99
            },
            "start": {
              "column": 22,
              "line": 99
            }
          }
        },
        {
          "id": "455",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 99
            },
            "start": {
              "column": 22,
              "line": 99
            }
          }
        },
        {
          "id": "456",
          "mutatorName": "EqualityOperator",
          "replacement": "md.mobile() === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 99
            },
            "start": {
              "column": 22,
              "line": 99
            }
          }
        },
        {
          "id": "457",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 99
            },
            "start": {
              "column": 46,
              "line": 99
            }
          }
        },
        {
          "id": "458",
          "mutatorName": "EqualityOperator",
          "replacement": "md.tablet() === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 99
            },
            "start": {
              "column": 46,
              "line": 99
            }
          }
        },
        {
          "id": "459",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 102
            },
            "start": {
              "column": 6,
              "line": 102
            }
          }
        },
        {
          "id": "460",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 172
            },
            "start": {
              "column": 19,
              "line": 104
            }
          }
        },
        {
          "id": "461",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 115
            },
            "start": {
              "column": 25,
              "line": 105
            }
          }
        },
        {
          "id": "462",
          "mutatorName": "LogicalOperator",
          "replacement": "showSpinner && true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 106
            },
            "start": {
              "column": 20,
              "line": 106
            }
          }
        },
        {
          "id": "463",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 106
            },
            "start": {
              "column": 35,
              "line": 106
            }
          }
        },
        {
          "id": "464",
          "mutatorName": "LogicalOperator",
          "replacement": "initialPosition && 0.08",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 108
            },
            "start": {
              "column": 16,
              "line": 108
            }
          }
        },
        {
          "id": "465",
          "mutatorName": "LogicalOperator",
          "replacement": "crawlSpeed && 200",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 110
            },
            "start": {
              "column": 21,
              "line": 110
            }
          }
        },
        {
          "id": "466",
          "mutatorName": "LogicalOperator",
          "replacement": "easing && 'ease'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 111
            },
            "start": {
              "column": 15,
              "line": 111
            }
          }
        },
        {
          "id": "467",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 111
            },
            "start": {
              "column": 25,
              "line": 111
            }
          }
        },
        {
          "id": "468",
          "mutatorName": "LogicalOperator",
          "replacement": "crawl && true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 112
            },
            "start": {
              "column": 16,
              "line": 112
            }
          }
        },
        {
          "id": "469",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 112
            },
            "start": {
              "column": 25,
              "line": 112
            }
          }
        },
        {
          "id": "470",
          "mutatorName": "LogicalOperator",
          "replacement": "speed && 200",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 114
            },
            "start": {
              "column": 14,
              "line": 114
            }
          }
        },
        {
          "id": "471",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 127
            },
            "start": {
              "column": 71,
              "line": 117
            }
          }
        },
        {
          "id": "472",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 121
            },
            "start": {
              "column": 11,
              "line": 121
            }
          }
        },
        {
          "id": "473",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 121
            },
            "start": {
              "column": 11,
              "line": 121
            }
          }
        },
        {
          "id": "474",
          "mutatorName": "EqualityOperator",
          "replacement": "currentUrlObj.origin === newUrlObj.origin",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 121
            },
            "start": {
              "column": 11,
              "line": 121
            }
          }
        },
        {
          "id": "475",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 123
            },
            "start": {
              "column": 54,
              "line": 121
            }
          }
        },
        {
          "id": "476",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 122
            },
            "start": {
              "column": 16,
              "line": 122
            }
          }
        },
        {
          "id": "477",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 123
            },
            "start": {
              "column": 18,
              "line": 123
            }
          }
        },
        {
          "id": "478",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 123
            },
            "start": {
              "column": 18,
              "line": 123
            }
          }
        },
        {
          "id": "479",
          "mutatorName": "EqualityOperator",
          "replacement": "getPathnameWithoutI18nFlag(currentUrlObj.pathname) === getPathnameWithoutI18nFlag(newUrlObj.pathname)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 123
            },
            "start": {
              "column": 18,
              "line": 123
            }
          }
        },
        {
          "id": "480",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 125
            },
            "start": {
              "column": 121,
              "line": 123
            }
          }
        },
        {
          "id": "481",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 124
            },
            "start": {
              "column": 16,
              "line": 124
            }
          }
        },
        {
          "id": "482",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 126
            },
            "start": {
              "column": 14,
              "line": 126
            }
          }
        },
        {
          "id": "483",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 129
            },
            "start": {
              "column": 45,
              "line": 129
            }
          }
        },
        {
          "id": "484",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 135
            },
            "start": {
              "column": 87,
              "line": 130
            }
          }
        },
        {
          "id": "485",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 131
            },
            "start": {
              "column": 14,
              "line": 131
            }
          }
        },
        {
          "id": "486",
          "mutatorName": "LogicalOperator",
          "replacement": "element || element.tagName !== 'A'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 131
            },
            "start": {
              "column": 14,
              "line": 131
            }
          }
        },
        {
          "id": "487",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 131
            },
            "start": {
              "column": 25,
              "line": 131
            }
          }
        },
        {
          "id": "488",
          "mutatorName": "EqualityOperator",
          "replacement": "element.tagName === 'A'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 131
            },
            "start": {
              "column": 25,
              "line": 131
            }
          }
        },
        {
          "id": "489",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 131
            },
            "start": {
              "column": 45,
              "line": 131
            }
          }
        },
        {
          "id": "490",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 133
            },
            "start": {
              "column": 50,
              "line": 131
            }
          }
        },
        {
          "id": "491",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 167
            },
            "start": {
              "column": 45,
              "line": 137
            }
          }
        },
        {
          "id": "492",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 138
            },
            "start": {
              "column": 11,
              "line": 138
            }
          }
        },
        {
          "id": "493",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 138
            },
            "start": {
              "column": 11,
              "line": 138
            }
          }
        },
        {
          "id": "494",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 163
            },
            "start": {
              "column": 11,
              "line": 139
            }
          }
        },
        {
          "id": "495",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 142
            },
            "start": {
              "column": 13,
              "line": 142
            }
          }
        },
        {
          "id": "496",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 142
            },
            "start": {
              "column": 13,
              "line": 142
            }
          }
        },
        {
          "id": "497",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 162
            },
            "start": {
              "column": 21,
              "line": 142
            }
          }
        },
        {
          "id": "498",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 145
            },
            "start": {
              "column": 34,
              "line": 145
            }
          }
        },
        {
          "id": "499",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 145
            },
            "start": {
              "column": 34,
              "line": 145
            }
          }
        },
        {
          "id": "500",
          "mutatorName": "EqualityOperator",
          "replacement": "(anchor as HTMLAnchorElement).target !== '_blank'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 145
            },
            "start": {
              "column": 34,
              "line": 145
            }
          }
        },
        {
          "id": "501",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 145
            },
            "start": {
              "column": 75,
              "line": 145
            }
          }
        },
        {
          "id": "502",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 148
            },
            "start": {
              "column": 15,
              "line": 148
            }
          }
        },
        {
          "id": "503",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 148
            },
            "start": {
              "column": 15,
              "line": 148
            }
          }
        },
        {
          "id": "504",
          "mutatorName": "LogicalOperator",
          "replacement": "(isSamePage || isExternalLink) && isOnMobileOrTablet",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 148
            },
            "start": {
              "column": 15,
              "line": 148
            }
          }
        },
        {
          "id": "505",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 148
            },
            "start": {
              "column": 15,
              "line": 148
            }
          }
        },
        {
          "id": "506",
          "mutatorName": "LogicalOperator",
          "replacement": "isSamePage && isExternalLink",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 148
            },
            "start": {
              "column": 15,
              "line": 148
            }
          }
        },
        {
          "id": "507",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 161
            },
            "start": {
              "column": 18,
              "line": 151
            }
          }
        },
        {
          "id": "508",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 160
            },
            "start": {
              "column": 45,
              "line": 154
            }
          }
        },
        {
          "id": "509",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 156
            },
            "start": {
              "column": 15,
              "line": 156
            }
          }
        },
        {
          "id": "510",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 158
            },
            "start": {
              "column": 64,
              "line": 156
            }
          }
        },
        {
          "id": "511",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 157
            },
            "start": {
              "column": 37,
              "line": 157
            }
          }
        },
        {
          "id": "512",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 166
            },
            "start": {
              "column": 15,
              "line": 163
            }
          }
        },
        {
          "id": "513",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 169
            },
            "start": {
              "column": 31,
              "line": 169
            }
          }
        },
        {
          "id": "514",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 171
            },
            "start": {
              "column": 12,
              "line": 171
            }
          }
        },
        {
          "id": "515",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 171
            },
            "start": {
              "column": 47,
              "line": 171
            }
          }
        },
        {
          "id": "516",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 172
            },
            "start": {
              "column": 6,
              "line": 172
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport { getPathnameWithoutI18nFlag } from '@/lib/i18n';\nimport { useEffect, useState } from 'react';\nimport MobileDetect from 'mobile-detect';\n\n// A Next.js Top Loading Bar component made using nprogress, works with Next.js 13.\n// https://github.com/TheSGJ/nextjs-toploader\n// https://www.npmjs.com/package/nextjs-toploader\n// Copyright (c) 2023 Shri Ganesh Jha\n\nimport type { Percentage, MsValue, PxValue } from '@rtm/shared-types/Numbers';\n\nimport nProgress from 'nprogress';\n\nexport type NextTopLoaderProps = {\n  /**\n   * The initial position for the TopLoader in percentage, 0.08 is 8%.\n   * @default 0.08\n   */\n  initialPosition?: Percentage;\n  /**\n   * Defines a shadow for the TopLoader.\n   * @default \"0 0 10px ${color},0 0 5px ${color}\"\n   * ... Disable it by setting it to `false`\n   */\n  shadow?: string | false;\n  /**\n   * To show spinner or not.\n   * @default true\n   */\n  showSpinner?: boolean;\n  /**\n   * The increament delay speed in milliseconds.\n   * @default 200\n   */\n  crawlSpeed?: MsValue;\n  /**\n   * The height for the TopLoader in pixels (px).\n   * @default 3\n   */\n  height?: PxValue;\n  /**\n   * Auto increamenting behaviour for the TopLoader.\n   * @default true\n   */\n  crawl?: boolean;\n  /**\n   * Animation settings using easing (a CSS easing string).\n   * @default \"ease\"\n   */\n  easing?: string;\n  /**\n   * Animation speed in ms for the TopLoader.\n   * @default 200\n   */\n  speed?: MsValue;\n  /**\n   * Color for the TopLoader.\n   * @default \"#29d\"\n   */\n  color?: string;\n};\n\nconst NextTopLoader = ({\n  height: propHeight,\n  color: propColor,\n  initialPosition,\n  showSpinner,\n  crawlSpeed,\n  easing,\n  shadow,\n  crawl,\n  speed\n}: NextTopLoaderProps) => {\n  const [isOnMobileOrTablet, setIsOnMobileOrTablet] = useState<MaybeNull<boolean>>(null);\n\n  const defaultColor = '#29d';\n  const defaultHeight = 3;\n\n  const color = propColor ?? defaultColor;\n  const height = propHeight ?? defaultHeight;\n\n  const boxShadow = !shadow && shadow !== undefined ? '' : shadow ? `box-shadow:${shadow}` : `box-shadow:0 0 10px ${color},0 0 5px ${color}`;\n\n  const styles = (\n    <style>\n      {`#nprogress{pointer-events:none}#nprogress .bar{background:${color};position:fixed;z-index:1031;top:0;left:0;width:100%;height:${height}px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;${boxShadow};opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:1031;top:15px;right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:${color};border-left-color:${color};border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`}\n    </style>\n  );\n\n  useEffect(() => {\n    const md = new MobileDetect(window.navigator.userAgent);\n    const onMobile = md.mobile() !== null || md.tablet() !== null;\n\n    setIsOnMobileOrTablet(onMobile);\n  }, []);\n\n  useEffect(() => {\n    nProgress.configure({\n      showSpinner: showSpinner ?? true,\n      // eslint-disable-next-line no-magic-numbers\n      minimum: initialPosition ?? 0.08,\n      // eslint-disable-next-line no-magic-numbers\n      trickleSpeed: crawlSpeed ?? 200,\n      easing: easing ?? 'ease',\n      trickle: crawl ?? true,\n      // eslint-disable-next-line no-magic-numbers\n      speed: speed ?? 200\n    });\n\n    function isAnchorOfCurrentUrl(currentUrl: string, newUrl: string) {\n      const currentUrlObj = new URL(currentUrl);\n      const newUrlObj = new URL(newUrl);\n\n      if (currentUrlObj.origin !== newUrlObj.origin) {\n        return true;\n      } else if (getPathnameWithoutI18nFlag(currentUrlObj.pathname) !== getPathnameWithoutI18nFlag(newUrlObj.pathname)) {\n        return false;\n      }\n      return true;\n    }\n\n    const npgclass = document.querySelector('html');\n    function findClosestAnchor(element: HTMLElement | null): HTMLAnchorElement | null {\n      while (element && element.tagName !== 'A') {\n        element = element.parentElement;\n      }\n      return element as HTMLAnchorElement;\n    }\n\n    function handleClick(event: MouseEvent) {\n      if (event.ctrlKey) return;\n      try {\n        const target = event.target as HTMLElement;\n        const anchor = findClosestAnchor(target);\n        if (anchor) {\n          const currentUrl = window.location.href;\n          const newUrl = (anchor as HTMLAnchorElement).href;\n          const isExternalLink = (anchor as HTMLAnchorElement).target === '_blank';\n          const isSamePage = isAnchorOfCurrentUrl(currentUrl, newUrl);\n\n          if (isSamePage || isExternalLink || isOnMobileOrTablet) return;\n\n          nProgress.start();\n          (() => {\n            const history = window.history;\n            const pushState = history.pushState;\n            history.pushState = function () {\n              nProgress.done();\n              [].forEach.call(npgclass, function (el: Element) {\n                el.classList.remove('nprogress-busy');\n              });\n              return pushState.apply(history, arguments as any);\n            };\n          })();\n        }\n      } catch {\n        nProgress.start();\n        nProgress.done();\n      }\n    }\n\n    document.addEventListener('click', handleClick);\n\n    return () => document.removeEventListener('click', handleClick);\n  }, [crawl, crawlSpeed, easing, initialPosition, showSpinner, speed, isOnMobileOrTablet]);\n\n  return styles;\n};\n\nexport default NextTopLoader;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/PagesRootElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "517",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 131,
              "line": 11
            },
            "start": {
              "column": 63,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport DocumentRoot from '@/components/layouts/base/DocumentRoot';\n\ninterface HtmlElementProps extends WithChildren {}\n\nconst PagesRootElement: FunctionComponent<HtmlElementProps> = ({ children }) => <DocumentRoot withNavbar>{children}</DocumentRoot>;\n\nexport default PagesRootElement;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/PagesWithFooterRootElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "518",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 73,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport Footer from '@/components/ui/Footer';\n\ninterface HtmlElementProps extends WithChildren {}\n\nconst PagesWithFooterRootElement: FunctionComponent<HtmlElementProps> = ({ children }) => (\n  <>\n    {children}\n    <Footer />\n  </>\n);\n\nexport default PagesWithFooterRootElement;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/blog/MdxComponent.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "519",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 86,
              "line": 14
            }
          }
        },
        {
          "id": "520",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 91,
              "line": 24
            }
          }
        },
        {
          "id": "521",
          "mutatorName": "LogicalOperator",
          "replacement": "classNameValue && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 21,
              "line": 26
            }
          }
        },
        {
          "id": "522",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 39,
              "line": 26
            }
          }
        },
        {
          "id": "523",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 29
            },
            "start": {
              "column": 28,
              "line": 29
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent, ReactNode } from 'react';\n\nimport PrimitiveComponents from '@/components/config/mdx/PrimitiveComponents';\nimport NextComponents from '@/components/config/mdx/NextComponents';\nimport SharedCTAs from '@/components/config/mdx/SharedCTAs';\nimport { useMDXComponent } from 'next-contentlayer/hooks';\nimport { MDX_BODY_ID } from '@/config/elementsId';\nimport { cn } from '@/lib/tailwind';\n\nconst components: Record<PropertyKey, (...args: any[]) => JSX.Element | ReactNode> = {\n  ...PrimitiveComponents,\n  ...NextComponents,\n  ...SharedCTAs\n};\n\ninterface MdxProps extends Partial<WithClassname> {\n  code: string;\n}\n\nconst BlogPostMDX: FunctionComponent<MdxProps> = ({ className: classNameValue, code }) => {\n  const MDXComponent = useMDXComponent(code);\n  const className = classNameValue ?? '';\n\n  return (\n    <article className={cn('mdx break-word mb-4', className)} id={MDX_BODY_ID}>\n      <MDXComponent components={components} />\n    </article>\n  );\n};\n\nexport default BlogPostMDX;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/dashboard/DashboardLayoutClient.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "524",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 29
            }
          }
        },
        {
          "id": "525",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 34,
              "line": 35
            }
          }
        },
        {
          "id": "526",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 36
            },
            "start": {
              "column": 28,
              "line": 36
            }
          }
        },
        {
          "id": "527",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 47
            },
            "start": {
              "column": 27,
              "line": 47
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { DashboardRoutesSidebarReactElements, DashboardRoutesTitles, DashboardRoutes } from '@/config/DashboardSidebar/utils/RoutesMapping';\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport DashboardSidebar from '@/components/layouts/dashboard/DashboardSidebar';\nimport useLockScreenScrollY from '@/components/hooks/useLockScreenScrollY';\nimport MAIN_NEXT_UI_CLS from '@/components/config/styles/main';\nimport useResetScroll from '@/components/hooks/useResetScroll';\nimport { useSelectedLayoutSegment } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\nimport { useRef } from 'react';\n\ninterface DashboardLayoutClientProps extends LayoutMinimalProps {\n  dashboardRoutesSidebarComponents: DashboardRoutesSidebarReactElements;\n  dashboardRoutesTitles: DashboardRoutesTitles;\n  dashboardRoutes: DashboardRoutes;\n}\n\nconst DashboardLayoutClient: FunctionComponent<DashboardLayoutClientProps> = ({\n  dashboardRoutesSidebarComponents,\n  dashboardRoutesTitles,\n  dashboardRoutes,\n  children\n}) => {\n  useLockScreenScrollY();\n\n  const mainElementRef = useRef<HTMLDivElement>(null);\n  const segment = useSelectedLayoutSegment();\n\n  useResetScroll(mainElementRef, {\n    alsoResetWindowScroll: false,\n    additionalDep: segment\n  });\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-y-hidden lg:flex-row\" data-pagefind-ignore=\"all\">\n      <DashboardSidebar\n        dashboardRoutesSidebarComponents={dashboardRoutesSidebarComponents}\n        dashboardRoutesTitles={dashboardRoutesTitles}\n        dashboardRoutes={dashboardRoutes}\n      />\n      <main className={cn('flex-1 overflow-y-auto px-4 py-7 lg:px-8 lg:py-4', MAIN_NEXT_UI_CLS)} ref={mainElementRef}>\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default DashboardLayoutClient;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/dashboard/DashboardSidebar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "528",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(39,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 71
            },
            "start": {
              "column": 19,
              "line": 39
            }
          }
        },
        {
          "id": "529",
          "mutatorName": "ArithmeticOperator",
          "replacement": "keys.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 42
            },
            "start": {
              "column": 24,
              "line": 42
            }
          }
        },
        {
          "id": "530",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(46,24): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 70
            },
            "start": {
              "column": 40,
              "line": 46
            }
          }
        },
        {
          "id": "531",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(48,12): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(48,26): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(48,32): error TS2493: Tuple type '[]' of length '0' has no element at index '2'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(49,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(51,56): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(53,50): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(62,11): error TS2322: Type 'undefined' is not assignable to type 'Url'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 130,
              "line": 48
            },
            "start": {
              "column": 44,
              "line": 48
            }
          }
        },
        {
          "id": "532",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 56
            },
            "start": {
              "column": 16,
              "line": 56
            }
          }
        },
        {
          "id": "533",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 58
            },
            "start": {
              "column": 25,
              "line": 58
            }
          }
        },
        {
          "id": "534",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(45,10): error TS2322: Type '{ children: (ReactElement<any, string | JSXElementConstructor<any>> | Element)[]; className: string; \"aria-current\": \"\" | undefined; role: \"menuitem\"; title: string; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"page\" | \"time\" | \"false\" | \"true\" | \"step\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"page\" | \"time\" | \"false\" | \"true\" | \"step\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 59
            },
            "start": {
              "column": 38,
              "line": 59
            }
          }
        },
        {
          "id": "535",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 67
            },
            "start": {
              "column": 10,
              "line": 67
            }
          }
        },
        {
          "id": "536",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 67
            },
            "start": {
              "column": 10,
              "line": 67
            }
          }
        },
        {
          "id": "537",
          "mutatorName": "LogicalOperator",
          "replacement": "k !== lastKey || sidebarBtnsSeparator",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 67
            },
            "start": {
              "column": 10,
              "line": 67
            }
          }
        },
        {
          "id": "538",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 67
            },
            "start": {
              "column": 10,
              "line": 67
            }
          }
        },
        {
          "id": "539",
          "mutatorName": "EqualityOperator",
          "replacement": "k === lastKey",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 67
            },
            "start": {
              "column": 10,
              "line": 67
            }
          }
        },
        {
          "id": "540",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(74,7): error TS2322: Type '({ dashboardRoutesSidebarComponents, dashboardRoutesTitles, dashboardRoutes }: DashboardSidebarProps) => void' is not assignable to type 'FunctionComponent<DashboardSidebarProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 141
            },
            "start": {
              "column": 150,
              "line": 74
            }
          }
        },
        {
          "id": "541",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 75
            },
            "start": {
              "column": 40,
              "line": 75
            }
          }
        },
        {
          "id": "542",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 124
            },
            "start": {
              "column": 19,
              "line": 82
            }
          }
        },
        {
          "id": "543",
          "mutatorName": "BooleanLiteral",
          "replacement": "sidebarInstance",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(93,50): error TS2339: Property 'classList' does not exist on type 'never'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(94,28): error TS2339: Property 'classList' does not exist on type 'never'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(100,47): error TS2339: Property 'classList' does not exist on type 'never'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(101,26): error TS2339: Property 'classList' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 84
            },
            "start": {
              "column": 9,
              "line": 84
            }
          }
        },
        {
          "id": "544",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 84
            },
            "start": {
              "column": 9,
              "line": 84
            }
          }
        },
        {
          "id": "545",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 84
            },
            "start": {
              "column": 9,
              "line": 84
            }
          }
        },
        {
          "id": "546",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(65,11): error TS7034: Variable 'EFFECT_CLASSES' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(93,70): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(94,45): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(100,67): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(101,43): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 86
            },
            "start": {
              "column": 28,
              "line": 86
            }
          }
        },
        {
          "id": "547",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 86
            },
            "start": {
              "column": 29,
              "line": 86
            }
          }
        },
        {
          "id": "548",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 86
            },
            "start": {
              "column": 47,
              "line": 86
            }
          }
        },
        {
          "id": "549",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 93
            },
            "start": {
              "column": 39,
              "line": 88
            }
          }
        },
        {
          "id": "550",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 89
            },
            "start": {
              "column": 42,
              "line": 89
            }
          }
        },
        {
          "id": "551",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 90
            },
            "start": {
              "column": 43,
              "line": 90
            }
          }
        },
        {
          "id": "552",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 91
            },
            "start": {
              "column": 41,
              "line": 91
            }
          }
        },
        {
          "id": "553",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 92
            },
            "start": {
              "column": 30,
              "line": 92
            }
          }
        },
        {
          "id": "554",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 111
            },
            "start": {
              "column": 37,
              "line": 95
            }
          }
        },
        {
          "id": "555",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 97
            },
            "start": {
              "column": 11,
              "line": 97
            }
          }
        },
        {
          "id": "556",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 97
            },
            "start": {
              "column": 11,
              "line": 97
            }
          }
        },
        {
          "id": "557",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 106
            },
            "start": {
              "column": 26,
              "line": 97
            }
          }
        },
        {
          "id": "558",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 98
            },
            "start": {
              "column": 43,
              "line": 98
            }
          }
        },
        {
          "id": "559",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 99
            },
            "start": {
              "column": 13,
              "line": 99
            }
          }
        },
        {
          "id": "560",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 99
            },
            "start": {
              "column": 13,
              "line": 99
            }
          }
        },
        {
          "id": "561",
          "mutatorName": "EqualityOperator",
          "replacement": "direction !== 'rtl'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 99
            },
            "start": {
              "column": 13,
              "line": 99
            }
          }
        },
        {
          "id": "562",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(78,13): error TS2367: This comparison appears to be unintentional because the types 'Direction' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 99
            },
            "start": {
              "column": 27,
              "line": 99
            }
          }
        },
        {
          "id": "563",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 102
            },
            "start": {
              "column": 34,
              "line": 99
            }
          }
        },
        {
          "id": "564",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 100
            },
            "start": {
              "column": 47,
              "line": 100
            }
          }
        },
        {
          "id": "565",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 105,
              "line": 100
            },
            "start": {
              "column": 101,
              "line": 100
            }
          }
        },
        {
          "id": "566",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 101
            },
            "start": {
              "column": 46,
              "line": 101
            }
          }
        },
        {
          "id": "567",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 105
            },
            "start": {
              "column": 16,
              "line": 102
            }
          }
        },
        {
          "id": "568",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 103
            },
            "start": {
              "column": 46,
              "line": 103
            }
          }
        },
        {
          "id": "569",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 104,
              "line": 103
            },
            "start": {
              "column": 100,
              "line": 103
            }
          }
        },
        {
          "id": "570",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 104
            },
            "start": {
              "column": 47,
              "line": 104
            }
          }
        },
        {
          "id": "571",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 109
            },
            "start": {
              "column": 14,
              "line": 106
            }
          }
        },
        {
          "id": "572",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 107
            },
            "start": {
              "column": 44,
              "line": 107
            }
          }
        },
        {
          "id": "573",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 108
            },
            "start": {
              "column": 43,
              "line": 108
            }
          }
        },
        {
          "id": "574",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 102,
              "line": 108
            },
            "start": {
              "column": 98,
              "line": 108
            }
          }
        },
        {
          "id": "575",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 110
            },
            "start": {
              "column": 30,
              "line": 110
            }
          }
        },
        {
          "id": "576",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "577",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "578",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "579",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 119
            },
            "start": {
              "column": 23,
              "line": 113
            }
          }
        },
        {
          "id": "580",
          "mutatorName": "BooleanLiteral",
          "replacement": "wasCollapsed.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 114
            },
            "start": {
              "column": 11,
              "line": 114
            }
          }
        },
        {
          "id": "581",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 114
            },
            "start": {
              "column": 11,
              "line": 114
            }
          }
        },
        {
          "id": "582",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 114
            },
            "start": {
              "column": 11,
              "line": 114
            }
          }
        },
        {
          "id": "583",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 121
            },
            "start": {
              "column": 9,
              "line": 121
            }
          }
        },
        {
          "id": "584",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 121
            },
            "start": {
              "column": 9,
              "line": 121
            }
          }
        },
        {
          "id": "585",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 124
            },
            "start": {
              "column": 6,
              "line": 124
            }
          }
        },
        {
          "id": "586",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 130,
              "line": 129
            },
            "start": {
              "column": 20,
              "line": 129
            }
          }
        },
        {
          "id": "587",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 133
            },
            "start": {
              "column": 29,
              "line": 133
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type {\n  DashboardRoutesSidebarReactElements,\n  DashboardRoutesTitles,\n  DashboardRoutesKeys,\n  DashboardRoutes\n} from '@/config/DashboardSidebar/utils/RoutesMapping';\nimport type { FunctionComponent, ReactElement } from 'react';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport SidebarButtonStyle from '@/components/config/styles/sidebar/SidebarButtonStyle';\nimport getRefCurrentPtr from '@rtm/shared-lib/portable/react/getRefCurrentPtr';\nimport { hrefAndPathnameExactMatch, hrefMatchesPathname } from '@/lib/str';\nimport { getClientSideI18n, useCurrentLocale } from '@/i18n/client';\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { getDirection } from '@rtm/shared-lib/html';\nimport { useEffect, useState, useRef } from 'react';\nimport { usePathname } from 'next/navigation';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nimport DashboardSidebarCollapseButton from './DashboardSidebarCollapseButton';\n\ninterface DashboardSidebarProps {\n  dashboardRoutesSidebarComponents: DashboardRoutesSidebarReactElements;\n  dashboardRoutesTitles: DashboardRoutesTitles;\n  dashboardRoutes: DashboardRoutes;\n}\n\nconst { isNotActiveClassList, isActiveClassList } = SidebarButtonStyle;\n\nfunction sidebarBtnsGenerator(\n  currentPathname: AppPath,\n  dashboardRoutes: DashboardRoutes,\n  dashboardRoutesTitles: DashboardRoutesTitles,\n  dashboardRoutesSidebarComponents: DashboardRoutesSidebarReactElements\n): ReactElement[] {\n  const keys = Object.keys(dashboardRoutesSidebarComponents);\n  // eslint-disable-next-line no-magic-numbers\n  const lastKey = keys[keys.length - 1];\n  const sidebarBtnsSeparator = <hr className=\"m-auto my-2 hidden w-5/6 lg:block\" />;\n\n  const globalT = getClientSideI18n();\n  return keys.map((k): ReactElement => {\n    const k2 = k as DashboardRoutesKeys;\n    const [btnComponent, href, i18nPath] = [dashboardRoutesSidebarComponents[k2], dashboardRoutes[k2], dashboardRoutesTitles[k2]];\n    const title = globalT(i18nPath);\n\n    const sidebarButtonClassName = hrefMatchesPathname(href, currentPathname, ROUTES_ROOTS.DASHBOARD) ? isActiveClassList : isNotActiveClassList;\n\n    const exactMatch = hrefAndPathnameExactMatch(href, currentPathname);\n\n    return (\n      <li key={`${k}-sidebar-btn-component`}>\n        <Link\n          className={cn('flex w-fit max-w-full flex-col rounded-lg', sidebarButtonClassName)}\n          aria-current={exactMatch ? 'page' : undefined}\n          role=\"menuitem\"\n          title={title}\n          href={href}\n        >\n          <span className=\"sr-only\">{title}</span>\n          {btnComponent}\n        </Link>\n        {k !== lastKey && sidebarBtnsSeparator}\n      </li>\n    );\n  });\n}\n\n// {ToDo} https://github.com/Tirraa/dashboard_rtm/issues/126\nconst DashboardSidebar: FunctionComponent<DashboardSidebarProps> = ({ dashboardRoutesSidebarComponents, dashboardRoutesTitles, dashboardRoutes }) => {\n  const wasCollapsed = useRef<boolean>(false);\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(wasCollapsed.current);\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  const isLargeScreen = useIsLargeScreen();\n  const currentLocale = useCurrentLocale();\n  const currentPathname = usePathname();\n\n  useEffect(() => {\n    const sidebarInstance = getRefCurrentPtr(sidebarRef);\n    if (!sidebarInstance) return;\n\n    const EFFECT_CLASSES = ['transition-all', 'duration-300'];\n\n    function applyUncollapsedStyles() {\n      sidebarInstance.style.marginLeft = '0';\n      sidebarInstance.style.marginRight = '0';\n      sidebarInstance.style.marginTop = '0';\n      wasCollapsed.current = false;\n    }\n\n    function applyCollapsedStyles() {\n      const direction = getDirection();\n      if (isLargeScreen) {\n        sidebarInstance.style.marginTop = '0';\n        if (direction === 'rtl') {\n          sidebarInstance.style.marginRight = '-' + sidebarInstance.getBoundingClientRect().width + 'px';\n          sidebarInstance.style.marginLeft = '0';\n        } else {\n          sidebarInstance.style.marginLeft = '-' + sidebarInstance.getBoundingClientRect().width + 'px';\n          sidebarInstance.style.marginRight = '0';\n        }\n      } else {\n        sidebarInstance.style.marginLeft = '0';\n        sidebarInstance.style.marginTop = '-' + sidebarInstance.getBoundingClientRect().height + 'px';\n      }\n      wasCollapsed.current = true;\n    }\n\n    if (!isCollapsed) {\n      if (!wasCollapsed.current) sidebarInstance.classList.remove(...EFFECT_CLASSES);\n      else sidebarInstance.classList.add(...EFFECT_CLASSES);\n\n      applyUncollapsedStyles();\n      return;\n    }\n\n    if (wasCollapsed.current) sidebarInstance.classList.remove(...EFFECT_CLASSES);\n    else sidebarInstance.classList.add(...EFFECT_CLASSES);\n    applyCollapsedStyles();\n  }, [isCollapsed, sidebarRef, isLargeScreen, currentLocale]);\n\n  return (\n    <>\n      <aside\n        className={'z-20 w-full justify-center border-t-[1px] border-muted-foreground bg-black dark:bg-card lg:w-fit lg:border-0'}\n        ref={sidebarRef}\n      >\n        <nav className=\"py-4 text-white lg:overflow-y-auto lg:px-[22px]\">\n          <ul className={cn('flex flex-wrap justify-center gap-2 lg:block')} role=\"menu\">\n            {sidebarBtnsGenerator(currentPathname, dashboardRoutes, dashboardRoutesTitles, dashboardRoutesSidebarComponents)}\n          </ul>\n        </nav>\n      </aside>\n      <DashboardSidebarCollapseButton setIsCollapsed={setIsCollapsed} isCollapsed={isCollapsed} />\n    </>\n  );\n};\n\nexport default DashboardSidebar;\n"
    },
    "src/components/layouts/dashboard/DashboardSidebarButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "588",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 16
            },
            "start": {
              "column": 20,
              "line": 16
            }
          }
        },
        {
          "id": "589",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 103,
              "line": 18
            }
          }
        },
        {
          "id": "590",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 20
            },
            "start": {
              "column": 36,
              "line": 20
            }
          }
        },
        {
          "id": "591",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 20
            },
            "start": {
              "column": 36,
              "line": 20
            }
          }
        },
        {
          "id": "592",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof pSize !== 'number'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 20
            },
            "start": {
              "column": 36,
              "line": 20
            }
          }
        },
        {
          "id": "593",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 20
            },
            "start": {
              "column": 53,
              "line": 20
            }
          }
        },
        {
          "id": "594",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 20
            },
            "start": {
              "column": 72,
              "line": 20
            }
          }
        },
        {
          "id": "595",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 20
            },
            "start": {
              "column": 72,
              "line": 20
            }
          }
        },
        {
          "id": "596",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof pSize !== 'string'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 20
            },
            "start": {
              "column": 72,
              "line": 20
            }
          }
        },
        {
          "id": "597",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 20
            },
            "start": {
              "column": 89,
              "line": 20
            }
          }
        },
        {
          "id": "598",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 21
            },
            "start": {
              "column": 53,
              "line": 21
            }
          }
        },
        {
          "id": "599",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 23
            },
            "start": {
              "column": 48,
              "line": 23
            }
          }
        },
        {
          "id": "600",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 23
            },
            "start": {
              "column": 48,
              "line": 23
            }
          }
        },
        {
          "id": "601",
          "mutatorName": "EqualityOperator",
          "replacement": "sizeInPx === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 23
            },
            "start": {
              "column": 48,
              "line": 23
            }
          }
        },
        {
          "id": "602",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 23
            },
            "start": {
              "column": 68,
              "line": 23
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { MaybeObjectValue, MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { IconProps } from '@radix-ui/react-icons/dist/types';\nimport type { FunctionComponent, ComponentType } from 'react';\nimport type { PxValue } from '@rtm/shared-types/Numbers';\n\nimport SidebarButtonStyle from '@/components/config/styles/sidebar/SidebarButtonStyle';\n\ninterface DashboardSidebarButtonProps {\n  __SidebarIcon: ComponentType<IconProps>;\n}\n\nconst { sidebarIconProps } = SidebarButtonStyle;\nconst ICON_PROPS = { ...sidebarIconProps };\n\nconst DashboardSidebarButton: FunctionComponent<DashboardSidebarButtonProps> = ({ __SidebarIcon }) => {\n  const pSize: MaybeObjectValue<PxValue | string> = ICON_PROPS.fontSize;\n  const size: MaybeNull<PxValue> = typeof pSize === 'number' ? pSize : typeof pSize === 'string' ? parseFloat(pSize) : null;\n  const sizeInPx: MaybeNull<string> = size ? size + 'px' : null;\n\n  return <__SidebarIcon {...ICON_PROPS} style={sizeInPx !== null ? { height: sizeInPx, width: sizeInPx } : undefined} />;\n};\n\nexport default DashboardSidebarButton;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "603",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(21,7): error TS2322: Type '({ setIsCollapsed, isCollapsed }: DashboardSidebarCollapseButtonProps) => void' is not assignable to type 'FunctionComponent<DashboardSidebarCollapseButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 133,
              "line": 21
            }
          }
        },
        {
          "id": "604",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 23
            },
            "start": {
              "column": 46,
              "line": 23
            }
          }
        },
        {
          "id": "605",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 231,
              "line": 25
            },
            "start": {
              "column": 5,
              "line": 25
            }
          }
        },
        {
          "id": "606",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(27,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"auth\" | \"_infos\" | \"blog-tags\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 7 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 27
            },
            "start": {
              "column": 33,
              "line": 27
            }
          }
        },
        {
          "id": "607",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(28,43): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n  Overload 2 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 28
            },
            "start": {
              "column": 43,
              "line": 28
            }
          }
        },
        {
          "id": "608",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(28,69): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n  Overload 2 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 28
            },
            "start": {
              "column": 69,
              "line": 28
            }
          }
        },
        {
          "id": "609",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(34,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property '\"aria-expanded\"' are incompatible.\n      Type '\"\" | \"true\"' is not assignable to type 'Booleanish | undefined'.\n        Type '\"\"' is not assignable to type 'Booleanish | undefined'.\nsrc/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(38,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property '\"aria-expanded\"' are incompatible.\n      Type '\"\" | \"true\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 29
            },
            "start": {
              "column": 38,
              "line": 29
            }
          }
        },
        {
          "id": "610",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(34,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property '\"aria-expanded\"' are incompatible.\n      Type '\"\" | \"false\"' is not assignable to type 'Booleanish | undefined'.\n        Type '\"\"' is not assignable to type 'Booleanish | undefined'.\nsrc/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(38,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property '\"aria-expanded\"' are incompatible.\n      Type '\"\" | \"false\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 29
            },
            "start": {
              "column": 48,
              "line": 29
            }
          }
        },
        {
          "id": "611",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(34,131): error TS2322: Type '\"\"' is not assignable to type '\"submit\" | \"reset\" | \"button\" | undefined'.\nsrc/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(38,124): error TS2322: Type '\"\"' is not assignable to type '\"submit\" | \"reset\" | \"button\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 30
            },
            "start": {
              "column": 16,
              "line": 30
            }
          }
        },
        {
          "id": "612",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 100,
              "line": 33
            },
            "start": {
              "column": 66,
              "line": 33
            }
          }
        },
        {
          "id": "613",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 99,
              "line": 33
            },
            "start": {
              "column": 87,
              "line": 33
            }
          }
        },
        {
          "id": "614",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 34
            },
            "start": {
              "column": 58,
              "line": 34
            }
          }
        },
        {
          "id": "615",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 38
            },
            "start": {
              "column": 58,
              "line": 38
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport SidebarCollapseButtonWrapperStyle from '@/components/config/styles/sidebar/SidebarCollapseButtonWrapperStyle';\nimport SidebarCollapseButtonIconStyle from '@/components/config/styles/sidebar/SidebarCollapseButtonIconStyle';\nimport { ArrowRightIcon, ArrowDownIcon } from '@radix-ui/react-icons';\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\ninterface DashboardSidebarCollapseButtonProps {\n  setIsCollapsed: (isCollapsed: boolean) => unknown;\n  isCollapsed: boolean;\n}\n\nconst { isNotActiveClassList: btnIconIsNotActiveClassList, isActiveClassList: btnIconIsActiveClassList } = SidebarCollapseButtonIconStyle;\n\nconst { isNotActiveClassList: btnWrapperIsNotActiveClassList, isActiveClassList: btnWrapperIsActiveClassList } = SidebarCollapseButtonWrapperStyle;\n\nconst DashboardSidebarCollapseButton: FunctionComponent<DashboardSidebarCollapseButtonProps> = ({ setIsCollapsed, isCollapsed }) => {\n  const sidebarCollapseBtnIconClassList = isCollapsed ? btnIconIsActiveClassList : btnIconIsNotActiveClassList;\n  const sidebarCollapseBtnWrapperClassList = !isCollapsed ? btnWrapperIsActiveClassList : btnWrapperIsNotActiveClassList;\n  const sidebarCollapseBtnClassList =\n    'relative bottom-1 m-auto h-8 w-12 rounded-full rounded-b-full rounded-t-none bg-black dark:bg-card lg:bottom-0 lg:right-2 lg:w-8 lg:rounded-l-none lg:rounded-r-full rtl:lg:-right-2 rtl:lg:rounded-l-full rtl:lg:rounded-r-none';\n\n  const scopedT = useScopedI18n(`${i18ns.dashboard}.sr-only`);\n  const ariaLabel = isCollapsed ? scopedT('show-sidebar') : scopedT('hide-sidebar');\n  const ariaExpanded = isCollapsed ? 'false' : 'true';\n  const type = 'button';\n\n  return (\n    <div className={sidebarCollapseBtnWrapperClassList} onClick={() => setIsCollapsed(!isCollapsed)}>\n      <button className={cn(sidebarCollapseBtnClassList, 'hidden lg:inline')} aria-expanded={ariaExpanded} aria-label={ariaLabel} type={type}>\n        <ArrowRightIcon className={sidebarCollapseBtnIconClassList} />\n      </button>\n\n      <button className={cn(sidebarCollapseBtnClassList, 'lg:hidden')} aria-expanded={ariaExpanded} aria-label={ariaLabel} type={type}>\n        <ArrowDownIcon className={sidebarCollapseBtnIconClassList} />\n      </button>\n    </div>\n  );\n};\n\nexport default DashboardSidebarCollapseButton;\n"
    },
    "src/components/layouts/lp/MdxComponent.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "616",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 86,
              "line": 14
            }
          }
        },
        {
          "id": "617",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 94,
              "line": 24
            }
          }
        },
        {
          "id": "618",
          "mutatorName": "LogicalOperator",
          "replacement": "classNameValue && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 21,
              "line": 26
            }
          }
        },
        {
          "id": "619",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 39,
              "line": 26
            }
          }
        },
        {
          "id": "620",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 29
            },
            "start": {
              "column": 28,
              "line": 29
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent, ReactNode } from 'react';\n\nimport PrimitiveComponents from '@/components/config/mdx/PrimitiveComponents';\nimport NextComponents from '@/components/config/mdx/NextComponents';\nimport SharedCTAs from '@/components/config/mdx/SharedCTAs';\nimport { useMDXComponent } from 'next-contentlayer/hooks';\nimport { MDX_BODY_ID } from '@/config/elementsId';\nimport { cn } from '@/lib/tailwind';\n\nconst components: Record<PropertyKey, (...args: any[]) => JSX.Element | ReactNode> = {\n  ...PrimitiveComponents,\n  ...NextComponents,\n  ...SharedCTAs\n};\n\ninterface MdxProps extends Partial<WithClassname> {\n  code: string;\n}\n\nconst LandingPageMDX: FunctionComponent<MdxProps> = ({ className: classNameValue, code }) => {\n  const MDXComponent = useMDXComponent(code);\n  const className = classNameValue ?? '';\n\n  return (\n    <article className={cn('mdx break-word mb-4', className)} id={MDX_BODY_ID}>\n      <MDXComponent components={components} />\n    </article>\n  );\n};\n\nexport default LandingPageMDX;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/navbar/NavbarButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "621",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(28,7): error TS2322: Type '({ onClick: onClickFun, i18nTitle, icon }: Pick<NavbarButtonProps, \"i18nTitle\" | \"onClick\"> & OptionalIcon) => void' is not assignable to type 'FunctionComponent<Pick<NavbarButtonProps, \"i18nTitle\" | \"onClick\"> & OptionalIcon>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 150,
              "line": 28
            }
          }
        },
        {
          "id": "622",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(33,109): error TS2722: Cannot invoke an object which is possibly 'undefined'.\nsrc/components/layouts/navbar/NavbarButton.tsx(38,90): error TS2722: Cannot invoke an object which is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "623",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(33,109): error TS2722: Cannot invoke an object which is possibly 'undefined'.\nsrc/components/layouts/navbar/NavbarButton.tsx(38,90): error TS2722: Cannot invoke an object which is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "624",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 42
            },
            "start": {
              "column": 19,
              "line": 31
            }
          }
        },
        {
          "id": "625",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 33
            },
            "start": {
              "column": 51,
              "line": 33
            }
          }
        },
        {
          "id": "626",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 33
            },
            "start": {
              "column": 98,
              "line": 33
            }
          }
        },
        {
          "id": "627",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 38
            },
            "start": {
              "column": 51,
              "line": 38
            }
          }
        },
        {
          "id": "628",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 38
            },
            "start": {
              "column": 79,
              "line": 38
            }
          }
        },
        {
          "id": "629",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 45
            },
            "start": {
              "column": 49,
              "line": 45
            }
          }
        },
        {
          "id": "630",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 50
            },
            "start": {
              "column": 49,
              "line": 50
            }
          }
        },
        {
          "id": "631",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(54,7): error TS2322: Type '({ path: href, i18nTitle, icon }: Pick<AtomicNavDataEntity, \"i18nTitle\" | \"path\"> & OptionalIcon) => void' is not assignable to type 'FunctionComponent<Pick<AtomicNavDataEntity, \"i18nTitle\" | \"path\"> & OptionalIcon>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 76
            },
            "start": {
              "column": 142,
              "line": 54
            }
          }
        },
        {
          "id": "632",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 11,
              "line": 62
            },
            "start": {
              "column": 7,
              "line": 62
            }
          }
        },
        {
          "id": "633",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 11,
              "line": 62
            },
            "start": {
              "column": 7,
              "line": 62
            }
          }
        },
        {
          "id": "634",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 69
            },
            "start": {
              "column": 13,
              "line": 62
            }
          }
        },
        {
          "id": "635",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 64
            },
            "start": {
              "column": 38,
              "line": 64
            }
          }
        },
        {
          "id": "636",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(64,8): error TS2322: Type '{ children: (string | number | bigint | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | Promise<...>)[]; className: string; \"aria-current\": \"\" | undefined; target: LinkTargetAttr; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 64
            },
            "start": {
              "column": 87,
              "line": 64
            }
          }
        },
        {
          "id": "637",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(72,6): error TS2322: Type '{ children: string; \"aria-current\": \"\" | undefined; className: string; target: LinkTargetAttr; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 72
            },
            "start": {
              "column": 38,
              "line": 72
            }
          }
        },
        {
          "id": "638",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(75,7): error TS2322: Type '({ i18nTitle, onClick, path, icon }: NavbarButtonProps) => void' is not assignable to type 'FunctionComponent<NavbarButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 92
            },
            "start": {
              "column": 100,
              "line": 78
            }
          }
        },
        {
          "id": "639",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(76,9): error TS2322: Type '() => void' is not assignable to type '() => ReactNode'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 83
            },
            "start": {
              "column": 66,
              "line": 79
            }
          }
        },
        {
          "id": "640",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(78,63): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 80
            },
            "start": {
              "column": 9,
              "line": 80
            }
          }
        },
        {
          "id": "641",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 80
            },
            "start": {
              "column": 9,
              "line": 80
            }
          }
        },
        {
          "id": "642",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(78,63): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 81
            },
            "start": {
              "column": 14,
              "line": 81
            }
          }
        },
        {
          "id": "643",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(78,64): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 81
            },
            "start": {
              "column": 14,
              "line": 81
            }
          }
        },
        {
          "id": "644",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(82,9): error TS2322: Type '() => void' is not assignable to type '() => ReactNode'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 89
            },
            "start": {
              "column": 63,
              "line": 85
            }
          }
        },
        {
          "id": "645",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(84,75): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 86
            },
            "start": {
              "column": 9,
              "line": 86
            }
          }
        },
        {
          "id": "646",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 86
            },
            "start": {
              "column": 9,
              "line": 86
            }
          }
        },
        {
          "id": "647",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(84,75): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 87
            },
            "start": {
              "column": 14,
              "line": 87
            }
          }
        },
        {
          "id": "648",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(84,76): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 87
            },
            "start": {
              "column": 14,
              "line": 87
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent, MouseEventHandler, ReactNode } from 'react';\nimport type { AtomicNavDataEntity } from '@/types/NavData';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport NavbarButtonStyle from '@/components/config/styles/navbar/NavbarButtonStyle';\nimport { hrefAndPathnameExactMatch, hrefMatchesPathname } from '@/lib/str';\nimport getLinkTarget from '@rtm/shared-lib/portable/react/getLinkTarget';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { Button } from '@/components/ui/Button';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\ntype OptionalIcon = { icon?: ReactNode };\ntype OptionalPath = { path?: AppPath };\ntype OptionalOnClick = { onClick?: MouseEventHandler<HTMLButtonElement> };\n\ntype RequiredPath = Required<OptionalPath>;\ntype RequiredOnClick = Required<OptionalOnClick>;\n\ninterface INavbarButtonProps extends Pick<AtomicNavDataEntity, 'i18nTitle'>, OptionalPath, OptionalOnClick, OptionalIcon {}\ntype NavbarButtonProps = (RequiredOnClick | RequiredPath) & INavbarButtonProps;\n\nconst { isNotActiveClassList, isActiveClassList } = NavbarButtonStyle;\n\nconst ButtonAsIs: FunctionComponent<Pick<NavbarButtonProps, 'i18nTitle' | 'onClick'> & OptionalIcon> = ({ onClick: onClickFun, i18nTitle, icon }) => {\n  const globalT = getClientSideI18n();\n\n  if (onClickFun) {\n    return icon ? (\n      <Button className={cn(isNotActiveClassList, 'items-center gap-2 bg-transparent')} onClick={(event) => onClickFun(event)}>\n        {icon}\n        {globalT(i18nTitle)}\n      </Button>\n    ) : (\n      <Button className={cn(isNotActiveClassList, 'bg-transparent')} onClick={(event) => onClickFun(event)}>\n        {globalT(i18nTitle)}\n      </Button>\n    );\n  }\n\n  return icon ? (\n    <Button className={cn(isNotActiveClassList, 'bg-transparent')}>\n      {icon}\n      {globalT(i18nTitle)}\n    </Button>\n  ) : (\n    <Button className={cn(isNotActiveClassList, 'bg-transparent')}>{globalT(i18nTitle)}</Button>\n  );\n};\n\nconst ButtonAsLink: FunctionComponent<Pick<AtomicNavDataEntity, 'i18nTitle' | 'path'> & OptionalIcon> = ({ path: href, i18nTitle, icon }) => {\n  const globalT = getClientSideI18n();\n  const currentPathname = usePathname();\n  const isActive = hrefMatchesPathname(href, currentPathname);\n  const className = isActive ? isActiveClassList : isNotActiveClassList;\n  const target = getLinkTarget(href);\n  const exactMatch = hrefAndPathnameExactMatch(href, currentPathname);\n\n  if (icon) {\n    return (\n      <Link className={cn(className, 'flex items-center')} aria-current={exactMatch ? 'page' : undefined} target={target} href={href}>\n        {icon}\n        {globalT(i18nTitle)}\n      </Link>\n    );\n  }\n\n  return (\n    <Link aria-current={exactMatch ? 'page' : undefined} className={className} target={target} href={href}>\n      {globalT(i18nTitle)}\n    </Link>\n  );\n};\n\nconst NavbarButton: FunctionComponent<NavbarButtonProps> = ({ i18nTitle, onClick, path, icon }) => {\n  const generateNavbarButtonWithoutIcon: () => ReactNode = () => {\n    if (onClick) return <ButtonAsIs i18nTitle={i18nTitle} onClick={onClick} />;\n    else if (path) return <ButtonAsLink i18nTitle={i18nTitle} path={path} />;\n    return null;\n  };\n\n  const generateNavbarButtonWithIcon: () => ReactNode = () => {\n    if (onClick) return <ButtonAsIs i18nTitle={i18nTitle} onClick={onClick} icon={icon} />;\n    else if (path) return <ButtonAsLink i18nTitle={i18nTitle} icon={icon} path={path} />;\n    return null;\n  };\n\n  return icon ? generateNavbarButtonWithIcon() : generateNavbarButtonWithoutIcon();\n};\n\nexport default NavbarButton;\n"
    },
    "src/components/layouts/navbar/NavbarDropdown.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "649",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(61,9): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 65
            },
            "start": {
              "column": 136,
              "line": 30
            }
          }
        },
        {
          "id": "650",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(65,9): error TS2322: Type 'void[]' is not assignable to type 'ReactNode'.\n  Type 'void[]' is not assignable to type 'Iterable<ReactNode>'.\n    The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n      Type 'IteratorResult<void, any>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n        Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n          Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorYieldResult<ReactNode>'.\n            Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 64
            },
            "start": {
              "column": 62,
              "line": 33
            }
          }
        },
        {
          "id": "651",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 98,
              "line": 37
            },
            "start": {
              "column": 95,
              "line": 37
            }
          }
        },
        {
          "id": "652",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 109,
              "line": 43
            },
            "start": {
              "column": 23,
              "line": 43
            }
          }
        },
        {
          "id": "653",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 45
            },
            "start": {
              "column": 111,
              "line": 43
            }
          }
        },
        {
          "id": "654",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 46
            },
            "start": {
              "column": 14,
              "line": 46
            }
          }
        },
        {
          "id": "655",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 47
            },
            "start": {
              "column": 16,
              "line": 47
            }
          }
        },
        {
          "id": "656",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 54
            },
            "start": {
              "column": 71,
              "line": 52
            }
          }
        },
        {
          "id": "657",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(51,10): error TS2322: Type '{ children: string; className: string; \"aria-current\": \"\" | undefined; target: LinkTargetAttr; title: string; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"page\" | \"time\" | \"step\" | \"false\" | \"true\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"page\" | \"time\" | \"step\" | \"false\" | \"true\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 55
            },
            "start": {
              "column": 38,
              "line": 55
            }
          }
        },
        {
          "id": "658",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(67,7): error TS2322: Type '({ embeddedEntities, path: href, i18nTitle }: NavbarButtonProps) => void' is not assignable to type 'FunctionComponent<NavbarButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 100
            },
            "start": {
              "column": 111,
              "line": 67
            }
          }
        },
        {
          "id": "659",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 76
            },
            "start": {
              "column": 53,
              "line": 76
            }
          }
        },
        {
          "id": "660",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 79
            },
            "start": {
              "column": 19,
              "line": 77
            }
          }
        },
        {
          "id": "661",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 78
            },
            "start": {
              "column": 9,
              "line": 78
            }
          }
        },
        {
          "id": "662",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 78
            },
            "start": {
              "column": 9,
              "line": 78
            }
          }
        },
        {
          "id": "663",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 78
            },
            "start": {
              "column": 9,
              "line": 78
            }
          }
        },
        {
          "id": "664",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 78
            },
            "start": {
              "column": 37,
              "line": 78
            }
          }
        },
        {
          "id": "665",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 79
            },
            "start": {
              "column": 6,
              "line": 79
            }
          }
        },
        {
          "id": "666",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 82
            },
            "start": {
              "column": 5,
              "line": 82
            }
          }
        },
        {
          "id": "667",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 82
            },
            "start": {
              "column": 5,
              "line": 82
            }
          }
        },
        {
          "id": "668",
          "mutatorName": "LogicalOperator",
          "replacement": "hrefMatchesPathname(href, currentPathname) && isOpened",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 82
            },
            "start": {
              "column": 5,
              "line": 82
            }
          }
        },
        {
          "id": "669",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 85
            },
            "start": {
              "column": 24,
              "line": 85
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { NavbarDropdownElement, EmbeddedEntities } from '@/types/NavData';\nimport type { FunctionComponent, RefObject } from 'react';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport NavbarDropdownMenuButtonStyle, {\n  NAVBAR_DROPDOWN_MENU_INNER_BUTTONS_CLASSLIST\n} from '@/components/config/styles/navbar/NavbarDropdownMenuButtonStyle';\nimport { DropdownMenuContent, DropdownMenuTrigger, DropdownMenuItem, DropdownMenu } from '@/components/ui/DropdownMenu';\nimport NavbarDropdownButtonIconStyle from '@/components/config/styles/navbar/NavbarDropdownButtonIconStyle';\nimport { hrefAndPathnameExactMatch, hrefMatchesPathname } from '@/lib/str';\nimport { getRefCurrentPtr, getLinkTarget } from '@rtm/shared-lib/react';\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\nimport { useEffect, useState, useRef } from 'react';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\ninterface NavbarButtonProps extends NavbarDropdownElement {}\n\nconst { isNotActiveClassList: navbarDropdownIsNotActiveClassList, isActiveClassList: navbarDropdownIsActiveClassList } =\n  NavbarDropdownMenuButtonStyle;\n\nconst { isNotActiveClassList: navbarDropdownBtnIconIsNotActiveClassList, isActiveClassList: navbarDropdownBtnIconIsActiveClassList } =\n  NavbarDropdownButtonIconStyle;\n\nconst menuItemsGenerator = (embeddedEntities: EmbeddedEntities, currentPathname: AppPath, triggerRef: RefObject<HTMLButtonElement>) => {\n  const globalT = getClientSideI18n();\n\n  return embeddedEntities.map(({ path: href, i18nTitle }) => {\n    const title = globalT(i18nTitle);\n    const target = getLinkTarget(href);\n    const triggerRefInstance = getRefCurrentPtr(triggerRef);\n    const minWidth = triggerRefInstance ? window.getComputedStyle(triggerRefInstance).width : '0';\n    const isActive = hrefMatchesPathname(href, currentPathname);\n    const exactMatch = hrefAndPathnameExactMatch(href, currentPathname);\n\n    return (\n      <DropdownMenuItem\n        className={cn('p-0 dark:bg-opacity-20 dark:text-muted-foreground dark:hover:text-primary-foreground', {\n          'bg-primary focus:bg-primary focus:text-white': isActive\n        })}\n        key={`${href}-${title}-navbar-menu-item`}\n        style={{ minWidth }}\n        textValue={title}\n        asChild\n      >\n        <Link\n          className={cn(NAVBAR_DROPDOWN_MENU_INNER_BUTTONS_CLASSLIST, {\n            'font-bold text-white opacity-100 dark:text-white': isActive\n          })}\n          aria-current={exactMatch ? 'page' : undefined}\n          target={target}\n          title={title}\n          href={href}\n        >\n          {title}\n        </Link>\n      </DropdownMenuItem>\n    );\n  });\n};\n\nconst NavbarDropdown: FunctionComponent<NavbarButtonProps> = ({ embeddedEntities, path: href, i18nTitle }) => {\n  const currentPathname = usePathname();\n  const globalT = getClientSideI18n();\n  const isLargeScreen = useIsLargeScreen();\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const pathname = usePathname();\n\n  const title = globalT(i18nTitle);\n\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  useEffect(() => {\n    if (!isLargeScreen) setIsOpened(false);\n  }, [isLargeScreen]);\n\n  const navbarDropdownClassName =\n    hrefMatchesPathname(href, currentPathname) || isOpened ? navbarDropdownIsActiveClassList : navbarDropdownIsNotActiveClassList;\n  const navbarDropdownBtnClassName = isOpened ? navbarDropdownBtnIconIsActiveClassList : navbarDropdownBtnIconIsNotActiveClassList;\n\n  const onOpenChange = (opened: boolean) => setIsOpened(opened);\n\n  return (\n    <DropdownMenu withDeepResetOnLgBreakpointEvents onOpenChange={onOpenChange} open={isOpened}>\n      <DropdownMenuTrigger ref={triggerRef} asChild>\n        <button className={navbarDropdownClassName}>\n          {title}\n          <ChevronDownIcon className={navbarDropdownBtnClassName} aria-hidden=\"true\" />\n        </button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent data-pagefind-ignore=\"all\" aria-label={title}>\n        {menuItemsGenerator(embeddedEntities, pathname, triggerRef)}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default NavbarDropdown;\n"
    },
    "src/components/layouts/navbar/NavbarLanguageMenu.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "670",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(37,33): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 34
            },
            "start": {
              "column": 32,
              "line": 17
            }
          }
        },
        {
          "id": "671",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 17,
              "line": 18
            }
          }
        },
        {
          "id": "672",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 23
            },
            "start": {
              "column": 11,
              "line": 23
            }
          }
        },
        {
          "id": "673",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "674",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "675",
          "mutatorName": "EqualityOperator",
          "replacement": "currentLocale !== language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "676",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 119,
              "line": 25
            },
            "start": {
              "column": 50,
              "line": 25
            }
          }
        },
        {
          "id": "677",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 26
            },
            "start": {
              "column": 54,
              "line": 26
            }
          }
        },
        {
          "id": "678",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        },
        {
          "id": "679",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        },
        {
          "id": "680",
          "mutatorName": "EqualityOperator",
          "replacement": "language === currentLocale",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        },
        {
          "id": "681",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 28
            },
            "start": {
              "column": 47,
              "line": 28
            }
          }
        },
        {
          "id": "682",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(36,7): error TS2322: Type '({ isMobile }: NavbarLanguageMenuProps) => void' is not assignable to type 'FunctionComponent<NavbarLanguageMenuProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 59
            },
            "start": {
              "column": 90,
              "line": 36
            }
          }
        },
        {
          "id": "683",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(39,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"auth\" | \"_infos\" | \"blog-tags\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 7 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 39
            },
            "start": {
              "column": 33,
              "line": 39
            }
          }
        },
        {
          "id": "684",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 40
            },
            "start": {
              "column": 45,
              "line": 40
            }
          }
        },
        {
          "id": "685",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 41
            },
            "start": {
              "column": 24,
              "line": 41
            }
          }
        },
        {
          "id": "686",
          "mutatorName": "BooleanLiteral",
          "replacement": "open",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 45
            },
            "start": {
              "column": 40,
              "line": 45
            }
          }
        },
        {
          "id": "687",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(45,56): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 45
            },
            "start": {
              "column": 56,
              "line": 45
            }
          }
        },
        {
          "id": "688",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(45,97): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 127,
              "line": 45
            },
            "start": {
              "column": 97,
              "line": 45
            }
          }
        },
        {
          "id": "689",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 121,
              "line": 49
            },
            "start": {
              "column": 23,
              "line": 49
            }
          }
        },
        {
          "id": "690",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 52
            },
            "start": {
              "column": 123,
              "line": 49
            }
          }
        },
        {
          "id": "691",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMobile",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 51
            },
            "start": {
              "column": 29,
              "line": 51
            }
          }
        },
        {
          "id": "692",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(52,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 53
            },
            "start": {
              "column": 29,
              "line": 53
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { ChangeLocaleFun, LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { WithIsMobile } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { DropdownMenuContent, DropdownMenuTrigger, DropdownMenuItem, DropdownMenu } from '@/components/ui/DropdownMenu';\nimport { useCurrentLocale, useChangeLocale, useScopedI18n } from '@/i18n/client';\nimport localesLabels, { localesEmojis } from '@/i18n/localesLabels';\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { LANGUAGES, i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport { useState } from 'react';\n\ninterface NavbarLanguageMenuProps extends WithIsMobile {}\n\nconst dropdownItemsGenerator = (changeLocale: ChangeLocaleFun, currentLocale: LanguageFlag) =>\n  LANGUAGES.map((language) => (\n    <DropdownMenuItem className=\"relative my-1 px-3 py-2\" textValue={localesLabels[language]} key={language} asChild>\n      <button\n        className={cn(\n          BUTTON_CONFIG.CLASSNAME,\n          'w-full',\n          currentLocale === language\n            ? cn(BUTTON_CONFIG.ACTIVE_CLASSNAME, 'hover:bg-primary hover:text-white focus:bg-primary focus:text-white')\n            : cn(BUTTON_CONFIG.NOT_ACTIVE_CLASSNAME, 'text-black')\n        )}\n        onClick={language !== currentLocale ? () => changeLocale(language) : undefined}\n      >\n        <span className=\"absolute ltr:right-2 rtl:left-2\">{localesEmojis[language]}</span>\n        <span>{localesLabels[language]}</span>\n      </button>\n    </DropdownMenuItem>\n  ));\n\nconst NavbarLanguageMenu: FunctionComponent<NavbarLanguageMenuProps> = ({ isMobile }) => {\n  const changeLocale = useChangeLocale();\n  const currentLocale = useCurrentLocale();\n  const scopedT = useScopedI18n(`${i18ns.navbar}.sr-only`);\n  const [open, setOpen] = useState<boolean>(false);\n  const onOpenChange = (opened: boolean) => setOpen(opened);\n\n  return (\n    <DropdownMenu withDeepResetOnLgBreakpointEvents onOpenChange={onOpenChange} open={open}>\n      <DropdownMenuTrigger aria-label={!open ? scopedT('open-language-switcher-menu') : scopedT('close-language-switcher-menu')} asChild>\n        <button className=\"h-full bg-transparent text-primary-foreground\">{localesEmojis[currentLocale]}</button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className={cn('min-w-[125px] dark:border-card lg:relative lg:dark:border-inherit ltr:lg:right-10 rtl:lg:left-10', {\n          'dark:bg-card [&>button]:h-12': isMobile,\n          'relative top-1': !isMobile\n        })}\n        aria-label={scopedT('language-switcher-menu')}\n      >\n        {dropdownItemsGenerator(changeLocale, currentLocale)}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default NavbarLanguageMenu;\n"
    },
    "src/components/layouts/navbar/NavbarLoginButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "693",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(27,7): error TS2322: Type '({ currentPathname, session }: NavbarLoginButtonMobileProps) => void' is not assignable to type 'FunctionComponent<NavbarLoginButtonMobileProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 116,
              "line": 27
            }
          }
        },
        {
          "id": "694",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 29
            },
            "start": {
              "column": 21,
              "line": 29
            }
          }
        },
        {
          "id": "695",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "696",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "697",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 39
            },
            "start": {
              "column": 16,
              "line": 31
            }
          }
        },
        {
          "id": "698",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 33
            },
            "start": {
              "column": 24,
              "line": 33
            }
          }
        },
        {
          "id": "699",
          "mutatorName": "OptionalChaining",
          "replacement": "session.user",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 34
            },
            "start": {
              "column": 74,
              "line": 34
            }
          }
        },
        {
          "id": "700",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(36,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"logout\" | \"signup\" | \"login\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"logout\" | \"signup\" | \"login\"'.\n  Overload 2 of 2, '(key: \"logout\" | \"signup\" | \"login\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"logout\" | \"signup\" | \"login\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 36
            },
            "start": {
              "column": 44,
              "line": 36
            }
          }
        },
        {
          "id": "701",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 42
            },
            "start": {
              "column": 22,
              "line": 42
            }
          }
        },
        {
          "id": "702",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 42
            },
            "start": {
              "column": 35,
              "line": 42
            }
          }
        },
        {
          "id": "703",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 42
            },
            "start": {
              "column": 46,
              "line": 42
            }
          }
        },
        {
          "id": "704",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(44,42): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"logout\" | \"signup\" | \"login\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"logout\" | \"signup\" | \"login\"'.\n  Overload 2 of 2, '(key: \"logout\" | \"signup\" | \"login\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"logout\" | \"signup\" | \"login\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 44
            },
            "start": {
              "column": 42,
              "line": 44
            }
          }
        },
        {
          "id": "705",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(49,7): error TS2322: Type '({ isMobile }: NavbarLoginButtonProps) => void' is not assignable to type 'FunctionComponent<NavbarLoginButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 67
            },
            "start": {
              "column": 88,
              "line": 49
            }
          }
        },
        {
          "id": "706",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "707",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "708",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "709",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "710",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 64
            },
            "start": {
              "column": 16,
              "line": 56
            }
          }
        },
        {
          "id": "711",
          "mutatorName": "OptionalChaining",
          "replacement": "session.user",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 59
            },
            "start": {
              "column": 57,
              "line": 59
            }
          }
        },
        {
          "id": "712",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 60
            },
            "start": {
              "column": 18,
              "line": 60
            }
          }
        },
        {
          "id": "713",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(61,9): error TS2322: Type '\"\"' is not assignable to type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 61
            },
            "start": {
              "column": 20,
              "line": 61
            }
          }
        },
        {
          "id": "714",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 66
            },
            "start": {
              "column": 33,
              "line": 66
            }
          }
        },
        {
          "id": "715",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 66
            },
            "start": {
              "column": 46,
              "line": 66
            }
          }
        },
        {
          "id": "716",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 66
            },
            "start": {
              "column": 57,
              "line": 66
            }
          }
        },
        {
          "id": "717",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(65,99): error TS2322: Type '\"\"' is not assignable to type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 66
            },
            "start": {
              "column": 110,
              "line": 66
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { WithIsMobile, WithSession } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport NAVBAR_ICON_STYLE from '@/components/config/styles/navbar/NavbarIconStyle';\nimport { SignalSlashIcon, KeyIcon } from '@heroicons/react/16/solid';\nimport UserImage from '@/components/ui/hoc/UserImage';\nimport { useSession, signIn } from 'next-auth/react';\nimport handleSignOut from '@/lib/misc/handleSignOut';\nimport { Button } from '@/components/ui/Button';\nimport { usePathname } from 'next/navigation';\nimport { useScopedI18n } from '@/i18n/client';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { i18ns } from '##/config/i18n';\n\nimport NavbarButton from './NavbarButton';\n\ninterface NavbarLoginButtonMobileProps extends WithSession {\n  currentPathname: string;\n}\n\ninterface NavbarLoginButtonProps extends WithIsMobile {}\n\nconst { SIZE_PX_VALUE: SIZE } = NAVBAR_ICON_STYLE;\n\nconst NavbarLoginButtonMobile: FunctionComponent<NavbarLoginButtonMobileProps> = ({ currentPathname, session }) => {\n  const scopedT = useScopedI18n(i18ns.auth);\n  const className = 'h-full min-w-0 p-0';\n\n  if (session) {\n    return (\n      <Button onClick={() => handleSignOut(currentPathname)} withTransparentBackground className={className}>\n        <UserImage className=\"absolute rounded-full brightness-75\" user={session?.user} height={SIZE} width={SIZE} />\n        <SignalSlashIcon className=\"relative shadow-xl\" height={SIZE} width={SIZE} />\n        <span className=\"sr-only\">{scopedT('logout')}</span>\n      </Button>\n    );\n  }\n\n  return (\n    <Button onClick={() => signIn('discord', { callbackUrl: ROUTES_ROOTS.DASHBOARD })} withTransparentBackground className={className}>\n      <KeyIcon height={SIZE} width={SIZE} />\n      <span className=\"sr-only\">{scopedT('login')}</span>\n    </Button>\n  );\n};\n\nconst NavbarLoginButton: FunctionComponent<NavbarLoginButtonProps> = ({ isMobile }) => {\n  const { data: session } = useSession();\n  const currentPathname = usePathname();\n  const { auth } = i18ns;\n\n  if (isMobile) return <NavbarLoginButtonMobile currentPathname={currentPathname} session={session} />;\n\n  if (session) {\n    return (\n      <NavbarButton\n        icon={<UserImage className=\"rounded-full\" user={session?.user} height={SIZE} width={SIZE} />}\n        onClick={() => handleSignOut(currentPathname)}\n        i18nTitle={`${auth}.logout`}\n      />\n    );\n  }\n\n  return <NavbarButton onClick={() => signIn('discord', { callbackUrl: ROUTES_ROOTS.DASHBOARD })} i18nTitle={`${auth}.login`} />;\n};\n\nexport default NavbarLoginButton;\n"
    },
    "src/components/layouts/navbar/NavbarThemeButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "718",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(20,7): error TS2322: Type '() => void' is not assignable to type 'FunctionComponent<NavbarLoginButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 74
            },
            "start": {
              "column": 76,
              "line": 20
            }
          }
        },
        {
          "id": "719",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 22
            },
            "start": {
              "column": 55,
              "line": 22
            }
          }
        },
        {
          "id": "720",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 23
            },
            "start": {
              "column": 68,
              "line": 23
            }
          }
        },
        {
          "id": "721",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(25,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"auth\" | \"_infos\" | \"blog-tags\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 7 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 25
            },
            "start": {
              "column": 33,
              "line": 25
            }
          }
        },
        {
          "id": "722",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 27
            },
            "start": {
              "column": 13,
              "line": 27
            }
          }
        },
        {
          "id": "723",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 27
            },
            "start": {
              "column": 32,
              "line": 27
            }
          }
        },
        {
          "id": "724",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 27
            },
            "start": {
              "column": 39,
              "line": 27
            }
          }
        },
        {
          "id": "725",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 19,
              "line": 29
            }
          }
        },
        {
          "id": "726",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 30
            },
            "start": {
              "column": 25,
              "line": 30
            }
          }
        },
        {
          "id": "727",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 30
            },
            "start": {
              "column": 25,
              "line": 30
            }
          }
        },
        {
          "id": "728",
          "mutatorName": "EqualityOperator",
          "replacement": "theme === DEFAULT_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 30
            },
            "start": {
              "column": 25,
              "line": 30
            }
          }
        },
        {
          "id": "729",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 13,
              "line": 31
            },
            "start": {
              "column": 6,
              "line": 31
            }
          }
        },
        {
          "id": "730",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 45
            },
            "start": {
              "column": 11,
              "line": 34
            }
          }
        },
        {
          "id": "731",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 35
            },
            "start": {
              "column": 48,
              "line": 35
            }
          }
        },
        {
          "id": "732",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "733",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "734",
          "mutatorName": "EqualityOperator",
          "replacement": "theme !== DEFAULT_DARK_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "735",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 39
            },
            "start": {
              "column": 13,
              "line": 39
            }
          }
        },
        {
          "id": "736",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 39
            },
            "start": {
              "column": 13,
              "line": 39
            }
          }
        },
        {
          "id": "737",
          "mutatorName": "EqualityOperator",
          "replacement": "theme !== DEFAULT_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 39
            },
            "start": {
              "column": 13,
              "line": 39
            }
          }
        },
        {
          "id": "738",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 7,
              "line": 47
            },
            "start": {
              "column": 5,
              "line": 47
            }
          }
        },
        {
          "id": "739",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 50
            },
            "start": {
              "column": 21,
              "line": 50
            }
          }
        },
        {
          "id": "740",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMounted",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 57
            },
            "start": {
              "column": 7,
              "line": 57
            }
          }
        },
        {
          "id": "741",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 57
            },
            "start": {
              "column": 7,
              "line": 57
            }
          }
        },
        {
          "id": "742",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 57
            },
            "start": {
              "column": 7,
              "line": 57
            }
          }
        },
        {
          "id": "743",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 59
            },
            "start": {
              "column": 7,
              "line": 59
            }
          }
        },
        {
          "id": "744",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 59
            },
            "start": {
              "column": 7,
              "line": 59
            }
          }
        },
        {
          "id": "745",
          "mutatorName": "LogicalOperator",
          "replacement": "changeThemeValue === DEFAULT_VARIANT && theme === DEFAULT_DARK_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 59
            },
            "start": {
              "column": 7,
              "line": 59
            }
          }
        },
        {
          "id": "746",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 59
            },
            "start": {
              "column": 7,
              "line": 59
            }
          }
        },
        {
          "id": "747",
          "mutatorName": "EqualityOperator",
          "replacement": "changeThemeValue !== DEFAULT_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 59
            },
            "start": {
              "column": 7,
              "line": 59
            }
          }
        },
        {
          "id": "748",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 59
            },
            "start": {
              "column": 47,
              "line": 59
            }
          }
        },
        {
          "id": "749",
          "mutatorName": "EqualityOperator",
          "replacement": "theme !== DEFAULT_DARK_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 59
            },
            "start": {
              "column": 47,
              "line": 59
            }
          }
        },
        {
          "id": "750",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 66
            },
            "start": {
              "column": 79,
              "line": 59
            }
          }
        },
        {
          "id": "751",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 61
            },
            "start": {
              "column": 24,
              "line": 61
            }
          }
        },
        {
          "id": "752",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(63,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 63
            },
            "start": {
              "column": 44,
              "line": 63
            }
          }
        },
        {
          "id": "753",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 69
            },
            "start": {
              "column": 22,
              "line": 69
            }
          }
        },
        {
          "id": "754",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(71,42): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 71
            },
            "start": {
              "column": 42,
              "line": 71
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport NAVBAR_ICON_STYLE from '@/components/config/styles/navbar/NavbarIconStyle';\nimport { DEFAULT_DARK_VARIANT, DEFAULT_VARIANT } from '@/config/themes';\nimport { MoonIcon, SunIcon } from '@heroicons/react/16/solid';\nimport { Button } from '@/components/ui/Button';\nimport { useScopedI18n } from '@/i18n/client';\nimport { useEffect, useState } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { useTheme } from 'next-themes';\n\ninterface NavbarLoginButtonProps {}\n\nconst { SIZE_PX_VALUE: SIZE } = NAVBAR_ICON_STYLE;\n\n// https://github.com/pacocoursey/next-themes/issues/220#issuecomment-1818410035\n\nconst NavbarThemeButton: FunctionComponent<NavbarLoginButtonProps> = () => {\n  const { setTheme, theme } = useTheme();\n  const [isMounted, setIsMounted] = useState<boolean>(false);\n  const [changeThemeValue, setChangeThemeValue] = useState<string>('');\n\n  const scopedT = useScopedI18n(`${i18ns.navbar}.sr-only`);\n\n  useEffect(() => setIsMounted(true), []);\n\n  useEffect(() => {\n    setChangeThemeValue(theme !== DEFAULT_VARIANT ? DEFAULT_VARIANT : DEFAULT_DARK_VARIANT);\n  }, [theme]);\n\n  useEffect(\n    () => {\n      const checkDarkTheme = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const newValue =\n        theme === DEFAULT_DARK_VARIANT\n          ? DEFAULT_VARIANT\n          : theme === DEFAULT_VARIANT\n            ? DEFAULT_DARK_VARIANT\n            : checkDarkTheme\n              ? DEFAULT_VARIANT\n              : DEFAULT_DARK_VARIANT;\n      setChangeThemeValue(newValue);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const className = 'h-full w-fit text-primary-foreground';\n\n  const placeholder = (\n    <Button withTransparentBackground className={className} size=\"icon\">\n      <svg height={SIZE} width={SIZE} />\n    </Button>\n  );\n  if (!isMounted) return placeholder;\n\n  if (changeThemeValue === DEFAULT_VARIANT || theme === DEFAULT_DARK_VARIANT) {\n    return (\n      <Button onClick={() => setTheme(DEFAULT_VARIANT)} withTransparentBackground className={className} size=\"icon\">\n        <SunIcon height={SIZE} width={SIZE} />\n        <span className=\"sr-only\">{scopedT('switch-to-light-mode')}</span>\n      </Button>\n    );\n  }\n\n  return (\n    <Button onClick={() => setTheme(DEFAULT_DARK_VARIANT)} withTransparentBackground className={className} size=\"icon\">\n      <MoonIcon height={SIZE} width={SIZE} />\n      <span className=\"sr-only\">{scopedT('switch-to-dark-mode')}</span>\n    </Button>\n  );\n};\n\nexport default NavbarThemeButton;\n"
    },
    "src/components/layouts/navbar/NavbarToggle.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "755",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(53,76): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 52,
              "line": 18
            }
          }
        },
        {
          "id": "756",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(57,76): error TS2322: Type 'void[]' is not assignable to type 'ReactNode'.\n  Type 'void[]' is not assignable to type 'Iterable<ReactNode>'.\n    The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n      Type 'IteratorResult<void, any>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n        Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n          Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorYieldResult<ReactNode>'.\n            Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 32
            },
            "start": {
              "column": 37,
              "line": 21
            }
          }
        },
        {
          "id": "757",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 24
            },
            "start": {
              "column": 18,
              "line": 24
            }
          }
        },
        {
          "id": "758",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 25
            },
            "start": {
              "column": 14,
              "line": 25
            }
          }
        },
        {
          "id": "759",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(35,7): error TS2322: Type '({ items }: NavbarToggleProps) => void' is not assignable to type 'FunctionComponent<NavbarToggleProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 72
            },
            "start": {
              "column": 75,
              "line": 35
            }
          }
        },
        {
          "id": "760",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 36
            },
            "start": {
              "column": 53,
              "line": 36
            }
          }
        },
        {
          "id": "761",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 37
            },
            "start": {
              "column": 24,
              "line": 37
            }
          }
        },
        {
          "id": "762",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(41,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"auth\" | \"_infos\" | \"blog-tags\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 7 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 40
            },
            "start": {
              "column": 33,
              "line": 40
            }
          }
        },
        {
          "id": "763",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 48
            },
            "start": {
              "column": 19,
              "line": 44
            }
          }
        },
        {
          "id": "764",
          "mutatorName": "BooleanLiteral",
          "replacement": "togglerInstance",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(48,21): error TS2339: Property 'dataset' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 46
            },
            "start": {
              "column": 9,
              "line": 46
            }
          }
        },
        {
          "id": "765",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 46
            },
            "start": {
              "column": 9,
              "line": 46
            }
          }
        },
        {
          "id": "766",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 46
            },
            "start": {
              "column": 9,
              "line": 46
            }
          }
        },
        {
          "id": "767",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 47
            },
            "start": {
              "column": 47,
              "line": 47
            }
          }
        },
        {
          "id": "768",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 47
            },
            "start": {
              "column": 56,
              "line": 47
            }
          }
        },
        {
          "id": "769",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 48
            },
            "start": {
              "column": 6,
              "line": 48
            }
          }
        },
        {
          "id": "770",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 52
            },
            "start": {
              "column": 19,
              "line": 50
            }
          }
        },
        {
          "id": "771",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 51
            }
          }
        },
        {
          "id": "772",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 51
            }
          }
        },
        {
          "id": "773",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 51
            },
            "start": {
              "column": 36,
              "line": 51
            }
          }
        },
        {
          "id": "774",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 52
            },
            "start": {
              "column": 6,
              "line": 52
            }
          }
        },
        {
          "id": "775",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 577,
              "line": 55
            },
            "start": {
              "column": 5,
              "line": 55
            }
          }
        },
        {
          "id": "776",
          "mutatorName": "BooleanLiteral",
          "replacement": "isOpened",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 59
            },
            "start": {
              "column": 40,
              "line": 59
            }
          }
        },
        {
          "id": "777",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(60,60): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 59
            },
            "start": {
              "column": 60,
              "line": 59
            }
          }
        },
        {
          "id": "778",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(60,93): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 115,
              "line": 59
            },
            "start": {
              "column": 93,
              "line": 59
            }
          }
        },
        {
          "id": "779",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(65,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"open-search-menu\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"open-search-menu\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"open-search-menu\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"open-search-menu\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 65
            },
            "start": {
              "column": 29,
              "line": 65
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { NavbarItems } from '@/types/NavData';\nimport type { FunctionComponent } from 'react';\n\nimport { DropdownMenuContent, DropdownMenuTrigger, DropdownMenuItem, DropdownMenu } from '@/components/ui/DropdownMenu';\nimport dispatchClickOnLinkOrButtonFirstChild from '@rtm/shared-lib/portable/html/dispatchClickOnLinkOrButtonFirstChild';\nimport getRefCurrentPtr from '@rtm/shared-lib/portable/react/getRefCurrentPtr';\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { getClientSideI18n, useScopedI18n } from '@/i18n/client';\nimport { useEffect, useState, useRef } from 'react';\nimport { i18ns } from '##/config/i18n';\n\ninterface NavbarToggleProps {\n  items: NavbarItems;\n}\n\nconst menuItemsGenerator = (items: NavbarItems) => {\n  const globalT = getClientSideI18n();\n\n  return items.map((item, index) => {\n    return (\n      <DropdownMenuItem\n        onClick={(event) => dispatchClickOnLinkOrButtonFirstChild(event.target)}\n        key={`navbar-hamburger-menu-item-${index}`}\n        textValue={globalT(item.i18nTitle)}\n        className=\"my-1 p-0\"\n      >\n        {item.jsx}\n      </DropdownMenuItem>\n    );\n  });\n};\n\nconst NavbarToggle: FunctionComponent<NavbarToggleProps> = ({ items }) => {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const onOpenChange = (opened: boolean) => setIsOpened(opened);\n\n  const isLargeScreen = useIsLargeScreen();\n  const scopedT = useScopedI18n(`${i18ns.navbar}.sr-only`);\n\n  const togglerRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    const togglerInstance = getRefCurrentPtr(togglerRef);\n    if (!togglerInstance) return;\n    togglerInstance.dataset.open = isOpened ? 'true' : 'false';\n  }, [togglerRef, isOpened]);\n\n  useEffect(() => {\n    if (isLargeScreen) setIsOpened(false);\n  }, [isLargeScreen]);\n\n  const className =\n    \"flex h-full w-full flex-col items-center justify-center text-white transition-opacity before:block before:h-px before:w-6 before:-translate-y-1 before:rotate-0 before:bg-current before:transition-transform before:duration-150 before:content-[''] after:block after:h-px after:w-6 after:translate-y-1 after:rotate-0 after:bg-current after:transition-transform after:duration-150 after:content-[''] data-[pressed=true]:opacity-70 data-[open=true]:before:translate-y-px data-[open=true]:before:rotate-45 data-[open=true]:after:translate-y-0 data-[open=true]:after:-rotate-45\";\n\n  return (\n    <DropdownMenu withDeepResetOnLgBreakpointEvents onOpenChange={onOpenChange} open={isOpened}>\n      <DropdownMenuTrigger aria-label={!isOpened ? scopedT('open-hamburger-menu') : scopedT('close-hamburger-menu')} asChild>\n        <button className={className} ref={togglerRef} />\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent\n        className=\"relative min-w-[145px] dark:border-card dark:bg-card ltr:right-4 rtl:left-4\"\n        aria-label={scopedT('hamburger-menu')}\n        data-pagefind-ignore=\"all\"\n      >\n        <nav className=\"max-w-[156px] text-center text-black [&>*>*]:h-12\">{menuItemsGenerator(items)}</nav>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default NavbarToggle;\n"
    },
    "src/components/layouts/navbar/search/NavbarSearchButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "780",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 51,
              "line": 9
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport { navbarSearchBtnProps } from '@/config/searchMenu';\n\nimport NavbarSearchButtonInner from './NavbarSearchButtonInner';\n\nconst NavbarSearchButton: FunctionComponent<{}> = () => (\n  <NavbarSearchButtonInner\n    tabValueInitialState={navbarSearchBtnProps.tabValueInitialState}\n    quickAccessBtns={navbarSearchBtnProps.quickAccessBtns}\n    tabInputLabels={navbarSearchBtnProps.tabInputLabels}\n    allTabValues={navbarSearchBtnProps.allTabValues}\n    tabTriggers={navbarSearchBtnProps.tabTriggers}\n    banners={navbarSearchBtnProps.banners}\n  />\n);\n\nexport default NavbarSearchButton;\n"
    },
    "src/components/layouts/navbar/search/NavbarSearchButtonDialogSearchBoxDefaultView.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "781",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonDialogSearchBoxDefaultView.tsx(21,7): error TS2322: Type '({ updateMemorizedTabValueAndSetTabValue, quickMenuLeftRightCustomHandler, focusInputField, quickAccessBtns, tabValue, banners }: NavbarSearchButtonDialogSearchBoxDefaultViewProps) => void' is not assignable to type 'FunctionComponent<NavbarSearchButtonDialogSearchBoxDefaultViewProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 104
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "782",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonDialogSearchBoxDefaultView.tsx(34,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 73,
              "line": 34
            },
            "start": {
              "column": 27,
              "line": 34
            }
          }
        },
        {
          "id": "783",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonDialogSearchBoxDefaultView.tsx(39,9): error TS2322: Type 'void[]' is not assignable to type 'ReactNode'.\n  Type 'void[]' is not assignable to type 'Iterable<ReactNode>'.\n    The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n      Type 'IteratorResult<void, any>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n        Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n          Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorYieldResult<ReactNode>'.\n            Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 72
            },
            "start": {
              "column": 74,
              "line": 39
            }
          }
        },
        {
          "id": "784",
          "mutatorName": "ArithmeticOperator",
          "replacement": "banners.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 42
            },
            "start": {
              "column": 28,
              "line": 42
            }
          }
        },
        {
          "id": "785",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 45
            },
            "start": {
              "column": 23,
              "line": 45
            }
          }
        },
        {
          "id": "786",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 45
            },
            "start": {
              "column": 23,
              "line": 45
            }
          }
        },
        {
          "id": "787",
          "mutatorName": "EqualityOperator",
          "replacement": "index !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 45
            },
            "start": {
              "column": 23,
              "line": 45
            }
          }
        },
        {
          "id": "788",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 45
            },
            "start": {
              "column": 61,
              "line": 45
            }
          }
        },
        {
          "id": "789",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 45
            },
            "start": {
              "column": 61,
              "line": 45
            }
          }
        },
        {
          "id": "790",
          "mutatorName": "EqualityOperator",
          "replacement": "index !== maxIndex",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 45
            },
            "start": {
              "column": 61,
              "line": 45
            }
          }
        },
        {
          "id": "791",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 49
            },
            "start": {
              "column": 47,
              "line": 49
            }
          }
        },
        {
          "id": "792",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 362,
              "line": 52
            },
            "start": {
              "column": 21,
              "line": 52
            }
          }
        },
        {
          "id": "793",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 53
            },
            "start": {
              "column": 21,
              "line": 53
            }
          }
        },
        {
          "id": "794",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 53
            },
            "start": {
              "column": 39,
              "line": 53
            }
          }
        },
        {
          "id": "795",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 53
            },
            "start": {
              "column": 39,
              "line": 53
            }
          }
        },
        {
          "id": "796",
          "mutatorName": "EqualityOperator",
          "replacement": "pos !== EBannerPosition.FIRST",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 53
            },
            "start": {
              "column": 39,
              "line": 53
            }
          }
        },
        {
          "id": "797",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 54
            },
            "start": {
              "column": 21,
              "line": 54
            }
          }
        },
        {
          "id": "798",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 54
            },
            "start": {
              "column": 39,
              "line": 54
            }
          }
        },
        {
          "id": "799",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 54
            },
            "start": {
              "column": 39,
              "line": 54
            }
          }
        },
        {
          "id": "800",
          "mutatorName": "EqualityOperator",
          "replacement": "pos !== EBannerPosition.LAST",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 54
            },
            "start": {
              "column": 39,
              "line": 54
            }
          }
        },
        {
          "id": "801",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 58
            },
            "start": {
              "column": 21,
              "line": 55
            }
          }
        },
        {
          "id": "802",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 57
            },
            "start": {
              "column": 25,
              "line": 57
            }
          }
        },
        {
          "id": "803",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 57
            },
            "start": {
              "column": 25,
              "line": 57
            }
          }
        },
        {
          "id": "804",
          "mutatorName": "EqualityOperator",
          "replacement": "tabValue !== category",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 57
            },
            "start": {
              "column": 25,
              "line": 57
            }
          }
        },
        {
          "id": "805",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 63
            },
            "start": {
              "column": 34,
              "line": 60
            }
          }
        },
        {
          "id": "806",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonDialogSearchBoxDefaultView.tsx(74,34): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 74
            },
            "start": {
              "column": 34,
              "line": 74
            }
          }
        },
        {
          "id": "807",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonDialogSearchBoxDefaultView.tsx(76,13): error TS2322: Type 'void[]' is not assignable to type 'ReactNode'.\n  Type 'void[]' is not assignable to type 'Iterable<ReactNode>'.\n    The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n      Type 'IteratorResult<void, any>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n        Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n          Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorYieldResult<ReactNode>'.\n            Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 98
            },
            "start": {
              "column": 75,
              "line": 76
            }
          }
        },
        {
          "id": "808",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 242,
              "line": 84
            },
            "start": {
              "column": 25,
              "line": 84
            }
          }
        },
        {
          "id": "809",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 87
            },
            "start": {
              "column": 25,
              "line": 85
            }
          }
        },
        {
          "id": "810",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonDialogSearchBoxDefaultView.tsx(82,22): error TS2322: Type '{ children: Element[]; className: string; \"aria-current\": \"\" | undefined; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"page\" | \"time\" | \"false\" | \"true\" | \"step\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"page\" | \"time\" | \"false\" | \"true\" | \"step\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 89
            },
            "start": {
              "column": 50,
              "line": 89
            }
          }
        }
      ],
      "source": "import type { QuickAccessBtnMetadatas, BannersMetadatas } from '@/config/searchMenu';\nimport type { KeyboardEvent as ReactKeyboardEvent, FunctionComponent } from 'react';\n\nimport * as NavigationMenu from '@radix-ui/react-navigation-menu';\nimport { hrefAndPathnameExactMatch } from '@/lib/str';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { usePathname } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\ninterface NavbarSearchButtonDialogSearchBoxDefaultViewProps {\n  quickMenuLeftRightCustomHandler: (e: ReactKeyboardEvent<HTMLAnchorElement>) => void;\n  updateMemorizedTabValueAndSetTabValue: (v: WeakTabValue) => void;\n  quickAccessBtns: [string, QuickAccessBtnMetadatas][];\n  banners: [string, BannersMetadatas][];\n  focusInputField: () => void;\n  tabValue: WeakTabValue;\n}\n\nconst NavbarSearchButtonDialogSearchBoxDefaultView: FunctionComponent<NavbarSearchButtonDialogSearchBoxDefaultViewProps> = ({\n  updateMemorizedTabValueAndSetTabValue,\n  quickMenuLeftRightCustomHandler,\n  focusInputField,\n  quickAccessBtns,\n  tabValue,\n  banners\n}) => {\n  const globalT = getClientSideI18n();\n  const currentPathname = usePathname();\n\n  return (\n    <NavigationMenu.Root\n      aria-label={globalT(`${i18ns.searchMenuSrOnly}.choose-search-mode`)}\n      className=\"contents [&>div]:contents\"\n      orientation=\"vertical\"\n    >\n      <NavigationMenu.List className=\"contents\">\n        {banners.map(([category, { icon: __Icon, i18nTitle }], index) => {\n          const title = globalT(i18nTitle);\n          // eslint-disable-next-line no-magic-numbers\n          const maxIndex = banners.length - 1;\n\n          // eslint-disable-next-line no-magic-numbers\n          const pos = index === 0 ? EBannerPosition.FIRST : index === maxIndex ? EBannerPosition.LAST : EBannerPosition.MIDDLE;\n\n          return (\n            <NavigationMenu.Item className=\"contents\" key={category}>\n              <NavigationMenu.Link onKeyDown={(e) => quickMenuLeftRightCustomHandler(e)} asChild>\n                <button\n                  className={cn(\n                    'search-menu-banner flex w-full flex-1 cursor-pointer justify-between bg-accent font-semibold transition-colors hover:bg-primary hover:text-white focus:bg-primary focus:text-white focus:outline-none [&>svg]:hover:border-transparent [&>svg]:focus:border-transparent [&>svg]:dark:hover:border-transparent [&>svg]:dark:focus:border-transparent',\n                    { 'rounded-t-md': pos === EBannerPosition.FIRST },\n                    { 'rounded-b-md': pos === EBannerPosition.LAST },\n                    {\n                      'pointer-events-none opacity-50 hover:cursor-default dark:opacity-75 [&>svg]:border-transparent [&>svg]:dark:border-transparent':\n                        tabValue === category\n                    }\n                  )}\n                  onClick={() => {\n                    updateMemorizedTabValueAndSetTabValue(category as WeakTabValue);\n                    focusInputField();\n                  }}\n                  aria-label={title}\n                >\n                  <__Icon className=\"flex h-full max-h-full min-h-10 w-auto min-w-10 max-w-[10%] rounded-md border border-black border-transparent dark:border-white\" />\n                  <span className=\"search-menu-banner-span my-auto flex-1 text-left max-sm:text-base\">{title}</span>\n                </button>\n              </NavigationMenu.Link>\n            </NavigationMenu.Item>\n          );\n        })}\n\n        <nav aria-label={globalT(`${i18ns.searchMenuSrOnly}.quick-access`)} className=\"search-menu-footer flex w-full flex-col\">\n          <div className=\"search-menu-footer-items flex w-full flex-wrap justify-center\">\n            {quickAccessBtns.map(([href, { icon: __Icon, i18nTitle }]) => {\n              const exactMatch = hrefAndPathnameExactMatch(href, currentPathname);\n\n              return (\n                <NavigationMenu.Item className=\"flex w-full flex-1 items-center justify-center\" key={href}>\n                  <NavigationMenu.Link asChild>\n                    <Link\n                      className={cn(\n                        'flex h-fit flex-1 flex-col items-center justify-center rounded-md bg-accent p-4 font-semibold transition-colors hover:bg-primary hover:text-white focus:bg-primary focus:text-white focus:outline-none lg:min-w-[200px]',\n                        {\n                          'pointer-events-none opacity-50': exactMatch\n                        }\n                      )}\n                      aria-current={exactMatch ? 'page' : undefined}\n                      href={href}\n                    >\n                      <__Icon className=\"h-10 w-10\" />\n                      <span className=\"sr-only\">{globalT(i18nTitle)}</span>\n                    </Link>\n                  </NavigationMenu.Link>\n                </NavigationMenu.Item>\n              );\n            })}\n          </div>\n        </nav>\n      </NavigationMenu.List>\n    </NavigationMenu.Root>\n  );\n};\n\nexport default NavbarSearchButtonDialogSearchBoxDefaultView;\n\nenum EBannerPosition {\n  FIRST,\n  MIDDLE,\n  LAST\n}\n\ntype WeakTabValue = string;\n"
    },
    "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "811",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButton.tsx(10,4): error TS2786: 'NavbarSearchButtonInner' cannot be used as a JSX component.\n  Its type '<AllTabValues extends [\"All\", \"Page\", \"BlogPost\"]>({ quickAccessBtns: orgQuickAccessBtns, allTabValues: orgAllTabValues, tabTriggers: orgTabTriggers, tabValueInitialState, banners: orgBanners, tabInputLabels }: NavbarSearchButtonProps<AllTabValues>) => void' is not a valid JSX element type.\n    Type '<AllTabValues extends [\"All\", \"Page\", \"BlogPost\"]>({ quickAccessBtns: orgQuickAccessBtns, allTabValues: orgAllTabValues, tabTriggers: orgTabTriggers, tabValueInitialState, banners: orgBanners, tabInputLabels }: NavbarSearchButtonProps<AllTabValues>) => void' is not assignable to type '(props: any, deprecatedLegacyContext?: any) => ReactNode'.\n      Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 325
            },
            "start": {
              "column": 46,
              "line": 50
            }
          }
        },
        {
          "id": "812",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 63
            },
            "start": {
              "column": 96,
              "line": 56
            }
          }
        },
        {
          "id": "813",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 57
            },
            "start": {
              "column": 9,
              "line": 57
            }
          }
        },
        {
          "id": "814",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 57
            },
            "start": {
              "column": 9,
              "line": 57
            }
          }
        },
        {
          "id": "815",
          "mutatorName": "EqualityOperator",
          "replacement": "e.key === 'ArrowLeft'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 57
            },
            "start": {
              "column": 9,
              "line": 57
            }
          }
        },
        {
          "id": "816",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 57
            },
            "start": {
              "column": 19,
              "line": 57
            }
          }
        },
        {
          "id": "817",
          "mutatorName": "BooleanLiteral",
          "replacement": "prevScreenBtnInstance",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(62,27): error TS2339: Property 'focus' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "818",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "819",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "820",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 63
            },
            "start": {
              "column": 6,
              "line": 63
            }
          }
        },
        {
          "id": "821",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 72
            },
            "start": {
              "column": 97,
              "line": 65
            }
          }
        },
        {
          "id": "822",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "823",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "824",
          "mutatorName": "EqualityOperator",
          "replacement": "e.key === 'ArrowRight'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "825",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 66
            },
            "start": {
              "column": 19,
              "line": 66
            }
          }
        },
        {
          "id": "826",
          "mutatorName": "BooleanLiteral",
          "replacement": "nextScreenBtnInstance",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(71,27): error TS2339: Property 'focus' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 69
            },
            "start": {
              "column": 9,
              "line": 69
            }
          }
        },
        {
          "id": "827",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 69
            },
            "start": {
              "column": 9,
              "line": 69
            }
          }
        },
        {
          "id": "828",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 69
            },
            "start": {
              "column": 9,
              "line": 69
            }
          }
        },
        {
          "id": "829",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 72
            },
            "start": {
              "column": 6,
              "line": 72
            }
          }
        },
        {
          "id": "830",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 78
            },
            "start": {
              "column": 51,
              "line": 75
            }
          }
        },
        {
          "id": "831",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 79
            },
            "start": {
              "column": 5,
              "line": 79
            }
          }
        },
        {
          "id": "832",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,11): error TS2339: Property 'quickAccessBtns' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,28): error TS2339: Property 'allTabValues' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,42): error TS2339: Property 'tabTriggers' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,55): error TS2339: Property 'banners' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(262,34): error TS7031: Binding element 'category' implicitly has an 'any' type.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(262,44): error TS7031: Binding element 'i18nTitle' implicitly has an 'any' type.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(289,32): error TS7006: Parameter 'v' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 9,
              "line": 89
            },
            "start": {
              "column": 5,
              "line": 83
            }
          }
        },
        {
          "id": "833",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(84,37): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ quickAccessBtns: Record<string, QuickAccessBtnMetadatas>; allTabValues: readonly string[]; tabTriggers: Record<string, \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | ... 98 more ... | \"blog-categories.patch-notes-bis._meta-description\">; banners: Record<...>; }'.\n  Type '{}' is missing the following properties from type '{ quickAccessBtns: Record<string, QuickAccessBtnMetadatas>; allTabValues: readonly string[]; tabTriggers: Record<string, \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | ... 98 more ... | \"blog-categories.patch-notes-bis._meta-description\">; banners: Record<...>; }': quickAccessBtns, allTabValues, tabTriggers, banners\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(165,47): error TS2345: Argument of type 'string' is not assignable to parameter of type 'TabValue'.\n  'TabValue' could be instantiated with an arbitrary type which could be unrelated to 'string'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(187,47): error TS2345: Argument of type 'string' is not assignable to parameter of type 'TabValue'.\n  'TabValue' could be instantiated with an arbitrary type which could be unrelated to 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 89
            },
            "start": {
              "column": 37,
              "line": 84
            }
          }
        },
        {
          "id": "834",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 90
            },
            "start": {
              "column": 5,
              "line": 90
            }
          }
        },
        {
          "id": "835",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 94
            },
            "start": {
              "column": 53,
              "line": 94
            }
          }
        },
        {
          "id": "836",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 103
            },
            "start": {
              "column": 66,
              "line": 103
            }
          }
        },
        {
          "id": "837",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 104
            },
            "start": {
              "column": 55,
              "line": 104
            }
          }
        },
        {
          "id": "838",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 113
            },
            "start": {
              "column": 65,
              "line": 108
            }
          }
        },
        {
          "id": "839",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 112
            },
            "start": {
              "column": 9,
              "line": 110
            }
          }
        },
        {
          "id": "840",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 118
            },
            "start": {
              "column": 19,
              "line": 115
            }
          }
        },
        {
          "id": "841",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 116
            },
            "start": {
              "column": 9,
              "line": 116
            }
          }
        },
        {
          "id": "842",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 116
            },
            "start": {
              "column": 9,
              "line": 116
            }
          }
        },
        {
          "id": "843",
          "mutatorName": "LogicalOperator",
          "replacement": "pathnameAtOpen.current === null && pathnameAtOpen.current === currentPathname",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 116
            },
            "start": {
              "column": 9,
              "line": 116
            }
          }
        },
        {
          "id": "844",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 116
            },
            "start": {
              "column": 9,
              "line": 116
            }
          }
        },
        {
          "id": "845",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameAtOpen.current !== null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 116
            },
            "start": {
              "column": 9,
              "line": 116
            }
          }
        },
        {
          "id": "846",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 116
            },
            "start": {
              "column": 44,
              "line": 116
            }
          }
        },
        {
          "id": "847",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameAtOpen.current !== currentPathname",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 116
            },
            "start": {
              "column": 44,
              "line": 116
            }
          }
        },
        {
          "id": "848",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 117
            },
            "start": {
              "column": 17,
              "line": 117
            }
          }
        },
        {
          "id": "849",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 118
            },
            "start": {
              "column": 6,
              "line": 118
            }
          }
        },
        {
          "id": "850",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 134
            },
            "start": {
              "column": 19,
              "line": 120
            }
          }
        },
        {
          "id": "851",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "852",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "853",
          "mutatorName": "LogicalOperator",
          "replacement": "results === null && results.length <= 0",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(122,29): error TS18047: 'results' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "854",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(122,18): error TS18047: 'results' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "855",
          "mutatorName": "EqualityOperator",
          "replacement": "results !== null",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(122,29): error TS18047: 'results' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "856",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 122
            },
            "start": {
              "column": 29,
              "line": 122
            }
          }
        },
        {
          "id": "857",
          "mutatorName": "EqualityOperator",
          "replacement": "results.length < 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 122
            },
            "start": {
              "column": 29,
              "line": 122
            }
          }
        },
        {
          "id": "858",
          "mutatorName": "EqualityOperator",
          "replacement": "results.length > 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 122
            },
            "start": {
              "column": 29,
              "line": 122
            }
          }
        },
        {
          "id": "859",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 125
            },
            "start": {
              "column": 50,
              "line": 122
            }
          }
        },
        {
          "id": "860",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 123
            },
            "start": {
              "column": 45,
              "line": 123
            }
          }
        },
        {
          "id": "861",
          "mutatorName": "BooleanLiteral",
          "replacement": "shouldResetResultsBoxScroll.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 127
            },
            "start": {
              "column": 9,
              "line": 127
            }
          }
        },
        {
          "id": "862",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 127
            },
            "start": {
              "column": 9,
              "line": 127
            }
          }
        },
        {
          "id": "863",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 127
            },
            "start": {
              "column": 9,
              "line": 127
            }
          }
        },
        {
          "id": "864",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 128
            },
            "start": {
              "column": 43,
              "line": 128
            }
          }
        },
        {
          "id": "865",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 131
            },
            "start": {
              "column": 9,
              "line": 131
            }
          }
        },
        {
          "id": "866",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 131
            },
            "start": {
              "column": 9,
              "line": 131
            }
          }
        },
        {
          "id": "867",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeContainer !== null",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(133,20): error TS2339: Property 'scrollTo' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 131
            },
            "start": {
              "column": 9,
              "line": 131
            }
          }
        },
        {
          "id": "868",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 134
            },
            "start": {
              "column": 6,
              "line": 134
            }
          }
        },
        {
          "id": "869",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(155,43): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(170,47): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(192,47): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(260,51): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 137
            },
            "start": {
              "column": 5,
              "line": 137
            }
          }
        },
        {
          "id": "870",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 7,
              "line": 138
            },
            "start": {
              "column": 5,
              "line": 138
            }
          }
        },
        {
          "id": "871",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 145
            },
            "start": {
              "column": 45,
              "line": 141
            }
          }
        },
        {
          "id": "872",
          "mutatorName": "BooleanLiteral",
          "replacement": "inputFieldInstance",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(144,24): error TS2339: Property 'focus' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 143
            },
            "start": {
              "column": 9,
              "line": 143
            }
          }
        },
        {
          "id": "873",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 143
            },
            "start": {
              "column": 9,
              "line": 143
            }
          }
        },
        {
          "id": "874",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 143
            },
            "start": {
              "column": 9,
              "line": 143
            }
          }
        },
        {
          "id": "875",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 145
            },
            "start": {
              "column": 6,
              "line": 145
            }
          }
        },
        {
          "id": "876",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(269,80): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 136,
              "line": 148
            },
            "start": {
              "column": 5,
              "line": 148
            }
          }
        },
        {
          "id": "877",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 149
            },
            "start": {
              "column": 5,
              "line": 149
            }
          }
        },
        {
          "id": "878",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 156
            },
            "start": {
              "column": 41,
              "line": 152
            }
          }
        },
        {
          "id": "879",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 156
            },
            "start": {
              "column": 6,
              "line": 156
            }
          }
        },
        {
          "id": "880",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 160
            },
            "start": {
              "column": 19,
              "line": 158
            }
          }
        },
        {
          "id": "881",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 159
            },
            "start": {
              "column": 9,
              "line": 159
            }
          }
        },
        {
          "id": "882",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 159
            },
            "start": {
              "column": 9,
              "line": 159
            }
          }
        },
        {
          "id": "883",
          "mutatorName": "EqualityOperator",
          "replacement": "searchText !== SEARCH_TEXT_INITIAL_STATE",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 159
            },
            "start": {
              "column": 9,
              "line": 159
            }
          }
        },
        {
          "id": "884",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 160
            },
            "start": {
              "column": 6,
              "line": 160
            }
          }
        },
        {
          "id": "885",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 171
            },
            "start": {
              "column": 22,
              "line": 164
            }
          }
        },
        {
          "id": "886",
          "mutatorName": "ArithmeticOperator",
          "replacement": "allTabValues.indexOf(tabValue) + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 166
            },
            "start": {
              "column": 25,
              "line": 166
            }
          }
        },
        {
          "id": "887",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 168
            },
            "start": {
              "column": 24,
              "line": 168
            }
          }
        },
        {
          "id": "888",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 168
            },
            "start": {
              "column": 24,
              "line": 168
            }
          }
        },
        {
          "id": "889",
          "mutatorName": "EqualityOperator",
          "replacement": "indexOf <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 168
            },
            "start": {
              "column": 24,
              "line": 168
            }
          }
        },
        {
          "id": "890",
          "mutatorName": "EqualityOperator",
          "replacement": "indexOf >= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 168
            },
            "start": {
              "column": 24,
              "line": 168
            }
          }
        },
        {
          "id": "891",
          "mutatorName": "ArithmeticOperator",
          "replacement": "allTabValues.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 168
            },
            "start": {
              "column": 38,
              "line": 168
            }
          }
        },
        {
          "id": "892",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 177
            },
            "start": {
              "column": 25,
              "line": 173
            }
          }
        },
        {
          "id": "893",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 174
            },
            "start": {
              "column": 13,
              "line": 174
            }
          }
        },
        {
          "id": "894",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 174
            },
            "start": {
              "column": 13,
              "line": 174
            }
          }
        },
        {
          "id": "895",
          "mutatorName": "EqualityOperator",
          "replacement": "e.key === 'ArrowRight'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 174
            },
            "start": {
              "column": 13,
              "line": 174
            }
          }
        },
        {
          "id": "896",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 174
            },
            "start": {
              "column": 23,
              "line": 174
            }
          }
        },
        {
          "id": "897",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(178,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 178
            },
            "start": {
              "column": 27,
              "line": 178
            }
          }
        },
        {
          "id": "898",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 179
            },
            "start": {
              "column": 17,
              "line": 179
            }
          }
        },
        {
          "id": "899",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 193
            },
            "start": {
              "column": 22,
              "line": 189
            }
          }
        },
        {
          "id": "900",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(indexOf + 1) * allTabValues.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 192
            },
            "start": {
              "column": 60,
              "line": 192
            }
          }
        },
        {
          "id": "901",
          "mutatorName": "ArithmeticOperator",
          "replacement": "indexOf - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 192
            },
            "start": {
              "column": 61,
              "line": 192
            }
          }
        },
        {
          "id": "902",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 198
            },
            "start": {
              "column": 25,
              "line": 194
            }
          }
        },
        {
          "id": "903",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 195
            },
            "start": {
              "column": 13,
              "line": 195
            }
          }
        },
        {
          "id": "904",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 195
            },
            "start": {
              "column": 13,
              "line": 195
            }
          }
        },
        {
          "id": "905",
          "mutatorName": "EqualityOperator",
          "replacement": "e.key === 'ArrowLeft'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 195
            },
            "start": {
              "column": 13,
              "line": 195
            }
          }
        },
        {
          "id": "906",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 195
            },
            "start": {
              "column": 23,
              "line": 195
            }
          }
        },
        {
          "id": "907",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(199,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 199
            },
            "start": {
              "column": 27,
              "line": 199
            }
          }
        },
        {
          "id": "908",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 200
            },
            "start": {
              "column": 17,
              "line": 200
            }
          }
        },
        {
          "id": "909",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 224
            },
            "start": {
              "column": 45,
              "line": 220
            }
          }
        },
        {
          "id": "910",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 221
            },
            "start": {
              "column": 13,
              "line": 221
            }
          }
        },
        {
          "id": "911",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 221
            },
            "start": {
              "column": 13,
              "line": 221
            }
          }
        },
        {
          "id": "912",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(228,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 228
            },
            "start": {
              "column": 29,
              "line": 228
            }
          }
        },
        {
          "id": "913",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 243
            },
            "start": {
              "column": 31,
              "line": 236
            }
          }
        },
        {
          "id": "914",
          "mutatorName": "BooleanLiteral",
          "replacement": "isOpened",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 237
            },
            "start": {
              "column": 15,
              "line": 237
            }
          }
        },
        {
          "id": "915",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 237
            },
            "start": {
              "column": 15,
              "line": 237
            }
          }
        },
        {
          "id": "916",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 237
            },
            "start": {
              "column": 15,
              "line": 237
            }
          }
        },
        {
          "id": "917",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 240
            },
            "start": {
              "column": 26,
              "line": 237
            }
          }
        },
        {
          "id": "918",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 241
            },
            "start": {
              "column": 30,
              "line": 241
            }
          }
        },
        {
          "id": "919",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 245
            },
            "start": {
              "column": 11,
              "line": 245
            }
          }
        },
        {
          "id": "920",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 250
            },
            "start": {
              "column": 33,
              "line": 248
            }
          }
        },
        {
          "id": "921",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 249
            },
            "start": {
              "column": 30,
              "line": 249
            }
          }
        },
        {
          "id": "922",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(251,9): error TS2322: Type '\"\"' is not assignable to type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 251
            },
            "start": {
              "column": 31,
              "line": 251
            }
          }
        },
        {
          "id": "923",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 253
            },
            "start": {
              "column": 26,
              "line": 253
            }
          }
        },
        {
          "id": "924",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 261
            },
            "start": {
              "column": 33,
              "line": 259
            }
          }
        },
        {
          "id": "925",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(263,11): error TS2322: Type '\"\" | \"vertical\"' is not assignable to type '\"vertical\" | \"horizontal\" | undefined'.\n  Type '\"\"' is not assignable to type '\"vertical\" | \"horizontal\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 263
            },
            "start": {
              "column": 40,
              "line": 263
            }
          }
        },
        {
          "id": "926",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(263,11): error TS2322: Type '\"\" | \"horizontal\"' is not assignable to type '\"horizontal\" | \"vertical\" | undefined'.\n  Type '\"\"' is not assignable to type '\"horizontal\" | \"vertical\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 263
            },
            "start": {
              "column": 55,
              "line": 263
            }
          }
        },
        {
          "id": "927",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 270
            },
            "start": {
              "column": 32,
              "line": 268
            }
          }
        },
        {
          "id": "928",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 269
            },
            "start": {
              "column": 32,
              "line": 269
            }
          }
        },
        {
          "id": "929",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 272
            },
            "start": {
              "column": 58,
              "line": 272
            }
          }
        },
        {
          "id": "930",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 272
            },
            "start": {
              "column": 71,
              "line": 272
            }
          }
        },
        {
          "id": "931",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 277
            },
            "start": {
              "column": 30,
              "line": 277
            }
          }
        },
        {
          "id": "932",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(277,52): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 277
            },
            "start": {
              "column": 52,
              "line": 277
            }
          }
        },
        {
          "id": "933",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 288
            },
            "start": {
              "column": 27,
              "line": 288
            }
          }
        },
        {
          "id": "934",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 291
            },
            "start": {
              "column": 48,
              "line": 288
            }
          }
        },
        {
          "id": "935",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 290
            },
            "start": {
              "column": 17,
              "line": 290
            }
          }
        },
        {
          "id": "936",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 290
            },
            "start": {
              "column": 17,
              "line": 290
            }
          }
        },
        {
          "id": "937",
          "mutatorName": "LogicalOperator",
          "replacement": "searchText !== SEARCH_TEXT_INITIAL_STATE || results !== null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 290
            },
            "start": {
              "column": 17,
              "line": 290
            }
          }
        },
        {
          "id": "938",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 290
            },
            "start": {
              "column": 17,
              "line": 290
            }
          }
        },
        {
          "id": "939",
          "mutatorName": "EqualityOperator",
          "replacement": "searchText === SEARCH_TEXT_INITIAL_STATE",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 290
            },
            "start": {
              "column": 17,
              "line": 290
            }
          }
        },
        {
          "id": "940",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 290
            },
            "start": {
              "column": 61,
              "line": 290
            }
          }
        },
        {
          "id": "941",
          "mutatorName": "EqualityOperator",
          "replacement": "results === null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 290
            },
            "start": {
              "column": 61,
              "line": 290
            }
          }
        },
        {
          "id": "942",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 293
            },
            "start": {
              "column": 23,
              "line": 293
            }
          }
        },
        {
          "id": "943",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 318
            },
            "start": {
              "column": 31,
              "line": 295
            }
          }
        },
        {
          "id": "944",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 297
            },
            "start": {
              "column": 31,
              "line": 297
            }
          }
        },
        {
          "id": "945",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 299
            },
            "start": {
              "column": 91,
              "line": 297
            }
          }
        },
        {
          "id": "946",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 298
            },
            "start": {
              "column": 27,
              "line": 298
            }
          }
        },
        {
          "id": "947",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 298
            },
            "start": {
              "column": 27,
              "line": 298
            }
          }
        },
        {
          "id": "948",
          "mutatorName": "EqualityOperator",
          "replacement": "tabValue === v",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 298
            },
            "start": {
              "column": 27,
              "line": 298
            }
          }
        },
        {
          "id": "949",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 300
            },
            "start": {
              "column": 27,
              "line": 300
            }
          }
        },
        {
          "id": "950",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 304
            },
            "start": {
              "column": 18,
              "line": 304
            }
          }
        },
        {
          "id": "951",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 304
            },
            "start": {
              "column": 18,
              "line": 304
            }
          }
        },
        {
          "id": "952",
          "mutatorName": "EqualityOperator",
          "replacement": "searchText !== SEARCH_TEXT_INITIAL_STATE",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 304
            },
            "start": {
              "column": 18,
              "line": 304
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { QuickAccessBtnMetadatas, navbarSearchBtnProps, BannersMetadatas } from '@/config/searchMenu';\nimport type { KeyboardEvent as ReactKeyboardEvent, ChangeEventHandler, ReactElement } from 'react';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\nimport type { Index } from '@rtm/shared-types/Numbers';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport {\n  doUpdateMemorizedTabValueAndSetTabValue,\n  createNavbarSearchButtonProps,\n  doBuildTabTrigger\n} from '@/components/ui/search/helpers/functions/navbarSearchButton';\nimport { MagnifyingGlassIcon, ChevronRightIcon, ChevronLeftIcon } from '@radix-ui/react-icons';\nimport { DialogContent, DialogTrigger, DialogHeader, Dialog } from '@/components/ui/Dialog';\nimport { SEARCH_TEXT_INITIAL_STATE, RESULTS_INITIAL_STATE } from '@/config/searchMenu';\nimport { tryToPreloadPagefind, tryToInitPagefind } from '@/lib/pagefind/helpers/perf';\nimport { useCallback, useEffect, useState, Fragment, useMemo, useRef } from 'react';\nimport { TabsContent, TabsList, Tabs } from '@/components/ui/Tabs';\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { SEARCH_MODAL_ID } from '@/config/elementsId';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { Input } from '@/components/ui/Input';\nimport { usePathname } from 'next/navigation';\nimport { capitalize } from '@/lib/str';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nimport NavbarSearchButtonDialogSearchBoxDefaultView from './NavbarSearchButtonDialogSearchBoxDefaultView';\nimport ProgressiveResults from './ProgressiveResults';\n\ninterface NavbarSearchButtonProps<AllTabValues extends readonly string[]> {\n  tabInputLabels: Record<AllTabValues[Index], I18nVocabTarget>;\n  quickAccessBtns: Record<AppPath, QuickAccessBtnMetadatas>;\n  tabTriggers: Record<AllTabValues[Index], I18nVocabTarget>;\n  banners: Record<AllTabValues[Index], BannersMetadatas>;\n  tabValueInitialState: AllTabValues[Index];\n  allTabValues: AllTabValues;\n}\n\nconst NavbarSearchButtonInner = <AllTabValues extends typeof navbarSearchBtnProps.allTabValues>({\n  quickAccessBtns: orgQuickAccessBtns,\n  allTabValues: orgAllTabValues,\n  tabTriggers: orgTabTriggers,\n  tabValueInitialState,\n  banners: orgBanners,\n  tabInputLabels\n}: NavbarSearchButtonProps<AllTabValues>) => {\n  type TabValue = AllTabValues[Index];\n\n  const prevScreenBtnRef = useRef<HTMLButtonElement>(null);\n  const nextScreenBtnRef = useRef<HTMLButtonElement>(null);\n\n  const quickMenuLeftCustomHandler = useCallback((e: ReactKeyboardEvent<HTMLAnchorElement>) => {\n    if (e.key !== 'ArrowLeft') return;\n\n    const prevScreenBtnInstance = getRefCurrentPtr(prevScreenBtnRef);\n    if (!prevScreenBtnInstance) return;\n    e.preventDefault();\n    prevScreenBtnInstance.focus();\n  }, []);\n\n  const quickMenuRightCustomHandler = useCallback((e: ReactKeyboardEvent<HTMLAnchorElement>) => {\n    if (e.key !== 'ArrowRight') return;\n\n    const nextScreenBtnInstance = getRefCurrentPtr(nextScreenBtnRef);\n    if (!nextScreenBtnInstance) return;\n    e.preventDefault();\n    nextScreenBtnInstance.focus();\n  }, []);\n\n  const quickMenuLeftRightCustomHandler = useCallback(\n    (e: ReactKeyboardEvent<HTMLAnchorElement>) => {\n      quickMenuLeftCustomHandler(e);\n      quickMenuRightCustomHandler(e);\n    },\n    [quickMenuLeftCustomHandler, quickMenuRightCustomHandler]\n  );\n\n  const { quickAccessBtns, allTabValues, tabTriggers, banners } = useMemo(\n    () =>\n      createNavbarSearchButtonProps({\n        quickAccessBtns: orgQuickAccessBtns,\n        allTabValues: orgAllTabValues,\n        tabTriggers: orgTabTriggers,\n        banners: orgBanners\n      }),\n    [orgQuickAccessBtns, orgAllTabValues, orgTabTriggers, orgBanners]\n  );\n\n  const currentPathname = usePathname();\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const [searchText, setSearchText] = useState<string>(SEARCH_TEXT_INITIAL_STATE);\n  const [results, setResults] = useState<MaybeNull<ReactElement[]>>(RESULTS_INITIAL_STATE);\n  const [tabValue, setTabValue] = useState(tabValueInitialState);\n  const pathnameAtOpen = useRef<MaybeNull<AppPath>>(null);\n  const inputFieldRef = useRef<HTMLInputElement>(null);\n  const resultsContainerRef = useRef<HTMLDivElement>(null);\n  const isLargeScreen = useIsLargeScreen();\n  const memorizedTabValue = useRef(tabValue);\n  const [transitionClass, setTransitionClass] = useState<string>('');\n  const shouldResetResultsBoxScroll = useRef<boolean>(true);\n\n  const globalT = getClientSideI18n();\n\n  const onChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setSearchText(e.target.value);\n    try {\n      tryToPreloadPagefind(e.target.value);\n    } catch {}\n  };\n\n  useEffect(() => {\n    if (pathnameAtOpen.current === null || pathnameAtOpen.current === currentPathname) return;\n    setIsOpened(false);\n  }, [currentPathname]);\n\n  useEffect(() => {\n    // eslint-disable-next-line no-magic-numbers\n    if (results === null || results.length <= 0) {\n      shouldResetResultsBoxScroll.current = true;\n      return;\n    }\n\n    if (!shouldResetResultsBoxScroll.current) return;\n    shouldResetResultsBoxScroll.current = false;\n\n    const maybeContainer = getRefCurrentPtr(resultsContainerRef);\n    if (maybeContainer === null) return;\n    // eslint-disable-next-line no-magic-numbers\n    maybeContainer.scrollTo(0, 0);\n  }, [results]);\n\n  const updateMemorizedTabValueAndSetTabValue = useCallback(\n    (v: TabValue) => doUpdateMemorizedTabValueAndSetTabValue(v, memorizedTabValue, setTabValue),\n    []\n  );\n\n  const focusInputField = useCallback(() => {\n    const inputFieldInstance = getRefCurrentPtr(inputFieldRef);\n    if (!inputFieldInstance) return;\n    inputFieldInstance.focus();\n  }, []);\n\n  const buildTabTrigger = useCallback(\n    (tabValue: TabValue, i18nTitle: I18nVocabTarget) => doBuildTabTrigger(tabValue, globalT(i18nTitle), memorizedTabValue, setTabValue),\n    [globalT]\n  );\n\n  const resetDialog = useCallback(() => {\n    setSearchText(SEARCH_TEXT_INITIAL_STATE);\n    setResults(RESULTS_INITIAL_STATE);\n    updateMemorizedTabValueAndSetTabValue(tabValueInitialState);\n  }, [tabValueInitialState, updateMemorizedTabValueAndSetTabValue]);\n\n  useEffect(() => {\n    if (searchText === SEARCH_TEXT_INITIAL_STATE) setResults(RESULTS_INITIAL_STATE);\n  }, [searchText]);\n\n  const prevScreenBtn = (\n    <button\n      onClick={() => {\n        // eslint-disable-next-line no-magic-numbers\n        const indexOf = allTabValues.indexOf(tabValue) - 1;\n        // eslint-disable-next-line no-magic-numbers\n        const newIdx = indexOf < 0 ? allTabValues.length - 1 : indexOf;\n        // eslint-disable-next-line no-magic-numbers\n        updateMemorizedTabValueAndSetTabValue(allTabValues[newIdx]);\n      }}\n      className=\"search-menu-prev-next-btn sticky top-[calc(50%-1rem)] h-fit scale-125 self-center rounded-full bg-accent transition-all hover:scale-150 hover:bg-primary hover:text-white focus:scale-150 focus:bg-primary focus:text-white dark:opacity-75 hover:dark:opacity-100 dark:focus:opacity-100\"\n      onKeyDown={(e) => {\n        if (e.key !== 'ArrowRight') return;\n        e.preventDefault();\n        focusInputField();\n      }}\n      aria-label={globalT(`${i18ns.searchMenuSrOnly}.prev-screen`)}\n      disabled={!isLargeScreen}\n      ref={prevScreenBtnRef}\n    >\n      <ChevronLeftIcon className=\"search-menu-prev-next-icon max-lg:hidden\" />\n    </button>\n  );\n\n  const nextScreenBtn = (\n    <button\n      className=\"search-menu-prev-next-btn sticky top-[calc(50%-1rem)] h-fit scale-125 self-center rounded-full bg-accent transition-all hover:scale-150 hover:bg-primary hover:text-white focus:scale-150 focus:bg-primary focus:text-white dark:opacity-75 hover:dark:opacity-100 focus:dark:opacity-100\"\n      onClick={() => {\n        const indexOf = allTabValues.indexOf(tabValue);\n        // eslint-disable-next-line no-magic-numbers\n        updateMemorizedTabValueAndSetTabValue(allTabValues[(indexOf + 1) % allTabValues.length]);\n      }}\n      onKeyDown={(e) => {\n        if (e.key !== 'ArrowLeft') return;\n        e.preventDefault();\n        focusInputField();\n      }}\n      aria-label={globalT(`${i18ns.searchMenuSrOnly}.next-screen`)}\n      disabled={!isLargeScreen}\n      ref={nextScreenBtnRef}\n    >\n      <ChevronRightIcon className=\"search-menu-prev-next-icon max-lg:hidden\" />\n    </button>\n  );\n\n  const defaultSearchBoxView = (\n    <NavbarSearchButtonDialogSearchBoxDefaultView\n      updateMemorizedTabValueAndSetTabValue={updateMemorizedTabValueAndSetTabValue as (v: string) => void}\n      quickMenuLeftRightCustomHandler={quickMenuLeftRightCustomHandler}\n      focusInputField={focusInputField}\n      quickAccessBtns={quickAccessBtns}\n      tabValue={tabValue}\n      banners={banners}\n    />\n  );\n\n  return (\n    <Dialog\n      onOpenChange={(_isOpened: boolean) => {\n        if (_isOpened) resetDialog();\n        pathnameAtOpen.current = _isOpened ? currentPathname : null;\n        setIsOpened(_isOpened);\n      }}\n      open={isOpened}\n    >\n      <DialogTrigger\n        aria-label={globalT(`${i18ns.navbar}.sr-only.open-search-menu`)}\n        onMouseOver={tryToInitPagefind}\n        onFocus={tryToInitPagefind}\n        className=\"h-full w-4\"\n      >\n        <MagnifyingGlassIcon />\n      </DialogTrigger>\n      <DialogContent\n        onAnimationEnd={() => {\n          if (!isOpened) {\n            resetDialog();\n            return;\n          }\n          setTransitionClass('transition-none');\n          focusInputField();\n        }}\n        className={cn(\n          'search-menu-dialog flex h-fit max-h-[90vh] min-h-[90vh] w-full max-w-[90vw] overflow-y-auto overflow-x-hidden',\n          transitionClass\n        )}\n        onAnimationStart={() => {\n          setTransitionClass('');\n        }}\n        closeButtonI18nTitle={`${i18ns.searchMenuSrOnly}.close-search-menu`}\n        closeButtonClassName=\"search-menu-close-btn\"\n        onOpenAutoFocus={(e) => e.preventDefault()}\n        data-pagefind-ignore=\"all\"\n        dir=\"ltr\"\n      >\n        {prevScreenBtn}\n        <Tabs\n          onValueChange={(v) => {\n            updateMemorizedTabValueAndSetTabValue(v as TabValue);\n          }}\n          className=\"search-menu-gap-y flex w-full flex-col lg:px-5\"\n          orientation={isLargeScreen ? 'horizontal' : 'vertical'}\n          value={tabValue}\n        >\n          <DialogHeader className=\"search-menu-gap-y\">\n            <TabsList className=\"mx-auto flex h-fit w-full flex-col flex-wrap lg:flex-row\" loop>\n              {tabTriggers.map(([category, i18nTitle]) => (\n                <Fragment key={`tab-${category as TabValue}`}>{buildTabTrigger(category as TabValue, i18nTitle)}</Fragment>\n              ))}\n            </TabsList>\n            <div className=\"flex w-full flex-col\" style={{ marginTop: '0' }}>\n              <label htmlFor=\"modal-search\" className=\"sr-only\">\n                {globalT(tabInputLabels[tabValue] as I18nVocabTarget)}\n              </label>\n              <Input\n                placeholder={`${capitalize(globalT(`${i18ns.vocab}.start-typing`))}…`}\n                value={isOpened ? searchText : SEARCH_TEXT_INITIAL_STATE}\n                className=\"search-menu-input\"\n                id={SEARCH_MODAL_ID}\n                onChange={onChange}\n                ref={inputFieldRef}\n                type=\"text\"\n              />\n            </div>\n          </DialogHeader>\n          <div\n            className={cn('flex-1 rounded-md', {\n              'min-h-0 overflow-y-auto break-words border border-input px-8 max-lg:px-4 [&>*>*>*>*>*]:mb-8 first:[&>*>*>*>*>*]:my-8 max-lg:[&>*>*>*>*>*]:mb-4 max-lg:first:[&>*>*>*>*>*]:my-4':\n                searchText !== SEARCH_TEXT_INITIAL_STATE && results !== null\n            })}\n            ref={resultsContainerRef}\n            tabIndex={-1}\n          >\n            {allTabValues.map((v) => (\n              <TabsContent\n                className={cn('mt-0 flex h-full max-h-full w-full flex-col items-center', {\n                  hidden: tabValue !== v\n                })}\n                tabIndex={-1}\n                value={v}\n                key={v}\n              >\n                {searchText === SEARCH_TEXT_INITIAL_STATE ? (\n                  defaultSearchBoxView\n                ) : (\n                  <ProgressiveResults\n                    quickMenuLeftRightCustomHandler={quickMenuLeftRightCustomHandler}\n                    firstLoadPlaceholder={defaultSearchBoxView}\n                    resultsContainerRef={resultsContainerRef}\n                    searchDocumentType={tabValue}\n                    searchText={searchText}\n                    setResults={setResults}\n                    results={results}\n                  />\n                )}\n              </TabsContent>\n            ))}\n          </div>\n        </Tabs>\n        {nextScreenBtn}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default NavbarSearchButtonInner;\n"
    },
    "src/components/layouts/navbar/search/NoResultFound.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "953",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/NoResultFound.tsx(12,7): error TS2322: Type '() => void' is not assignable to type 'FunctionComponent<NoResultFoundProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 68,
              "line": 12
            }
          }
        },
        {
          "id": "954",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/NoResultFound.tsx(13,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"search-menu\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"navbar\" | \"filters\" | \"errors\" | \"blog-toc\" | \"blog-tags-filters\" | \"auth\" | \"metadescriptions\" | \"_infos\" | \"blog-tags\" | ... 16 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 13
            },
            "start": {
              "column": 33,
              "line": 13
            }
          }
        },
        {
          "id": "955",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/search/NoResultFound.tsx(18,69): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"nothing-found\" | \"sr-only.choose-search-mode\" | \"sr-only.close-search-menu\" | \"sr-only.dashboard-access\" | \"sr-only.homepage-access\" | \"sr-only.quick-access\" | \"sr-only.blog-access\" | ... 5 more ... | \"options.all\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"nothing-found\" | \"sr-only.choose-search-mode\" | \"sr-only.close-search-menu\" | \"sr-only.dashboard-access\" | \"sr-only.homepage-access\" | \"sr-only.quick-access\" | \"sr-only.blog-access\" | ... 5 more ... | \"options.all\"'.\n  Overload 2 of 2, '(key: \"nothing-found\" | \"sr-only.choose-search-mode\" | \"sr-only.close-search-menu\" | \"sr-only.dashboard-access\" | \"sr-only.homepage-access\" | \"sr-only.quick-access\" | \"sr-only.blog-access\" | ... 5 more ... | \"options.all\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"nothing-found\" | \"sr-only.choose-search-mode\" | \"sr-only.close-search-menu\" | \"sr-only.dashboard-access\" | \"sr-only.homepage-access\" | \"sr-only.quick-access\" | \"sr-only.blog-access\" | ... 5 more ... | \"options.all\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 84,
              "line": 18
            },
            "start": {
              "column": 69,
              "line": 18
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport { Alert } from '@/components/ui/Alert';\nimport { useScopedI18n } from '@/i18n/client';\nimport { SearchX } from 'lucide-react';\nimport { i18ns } from '##/config/i18n';\n\ninterface NoResultFoundProps {}\n\nconst NoResultFound: FunctionComponent<NoResultFoundProps> = () => {\n  const scopedT = useScopedI18n(`${i18ns.searchMenu}`);\n\n  return (\n    <div className=\"m-auto flex select-none flex-col gap-4\">\n      <SearchX className=\"search-menu-no-result-found-icon m-auto\" />\n      <Alert className=\"search-menu-no-result-found w-fit\">{scopedT('nothing-found')}</Alert>\n    </div>\n  );\n};\n\nexport default NoResultFound;\n"
    },
    "src/components/layouts/navbar/search/ProgressiveResults.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "956",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(34,7): error TS2322: Type '({ quickMenuLeftRightCustomHandler, firstLoadPlaceholder, resultsContainerRef, searchDocumentType, setResults, searchText, results }: ProgressiveResultsProps) => void' is not assignable to type 'FunctionComponent<ProgressiveResultsProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 223
            },
            "start": {
              "column": 7,
              "line": 42
            }
          }
        },
        {
          "id": "957",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(47,85): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 47
            },
            "start": {
              "column": 84,
              "line": 47
            }
          }
        },
        {
          "id": "958",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 48
            },
            "start": {
              "column": 73,
              "line": 48
            }
          }
        },
        {
          "id": "959",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 60
            },
            "start": {
              "column": 51,
              "line": 55
            }
          }
        },
        {
          "id": "960",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 57
            },
            "start": {
              "column": 9,
              "line": 57
            }
          }
        },
        {
          "id": "961",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 57
            },
            "start": {
              "column": 9,
              "line": 57
            }
          }
        },
        {
          "id": "962",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeContainer !== null",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(59,20): error TS2339: Property 'scrollTo' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 57
            },
            "start": {
              "column": 9,
              "line": 57
            }
          }
        },
        {
          "id": "963",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 60
            },
            "start": {
              "column": 6,
              "line": 60
            }
          }
        },
        {
          "id": "964",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 67
            },
            "start": {
              "column": 19,
              "line": 62
            }
          }
        },
        {
          "id": "965",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(65,30): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 65
            },
            "start": {
              "column": 29,
              "line": 65
            }
          }
        },
        {
          "id": "966",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 67
            },
            "start": {
              "column": 6,
              "line": 67
            }
          }
        },
        {
          "id": "967",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 71
            },
            "start": {
              "column": 19,
              "line": 69
            }
          }
        },
        {
          "id": "968",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 71
            },
            "start": {
              "column": 6,
              "line": 71
            }
          }
        },
        {
          "id": "969",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 75
            },
            "start": {
              "column": 19,
              "line": 73
            }
          }
        },
        {
          "id": "970",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 75
            },
            "start": {
              "column": 6,
              "line": 75
            }
          }
        },
        {
          "id": "971",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 79
            },
            "start": {
              "column": 19,
              "line": 77
            }
          }
        },
        {
          "id": "972",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 79
            },
            "start": {
              "column": 6,
              "line": 79
            }
          }
        },
        {
          "id": "973",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 127
            },
            "start": {
              "column": 56,
              "line": 81
            }
          }
        },
        {
          "id": "974",
          "mutatorName": "MethodExpression",
          "replacement": "search.results",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 86
            },
            "start": {
              "column": 32,
              "line": 83
            }
          }
        },
        {
          "id": "975",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentSearchResultsSliceStartIndexRef.current - RESULTS_SLICE_LEN",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 73,
              "line": 85
            },
            "start": {
              "column": 7,
              "line": 85
            }
          }
        },
        {
          "id": "976",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(87,43): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 87
            },
            "start": {
              "column": 42,
              "line": 87
            }
          }
        },
        {
          "id": "977",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(100,30): error TS2339: Property 'meta' does not exist on type 'never'.\nsrc/components/layouts/navbar/search/ProgressiveResults.tsx(101,28): error TS2339: Property 'excerpt' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 90
            },
            "start": {
              "column": 66,
              "line": 90
            }
          }
        },
        {
          "id": "978",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 92
            },
            "start": {
              "column": 21,
              "line": 92
            }
          }
        },
        {
          "id": "979",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= searchResultsSlice.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 92
            },
            "start": {
              "column": 21,
              "line": 92
            }
          }
        },
        {
          "id": "980",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= searchResultsSlice.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 92
            },
            "start": {
              "column": 21,
              "line": 92
            }
          }
        },
        {
          "id": "981",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 92
            },
            "start": {
              "column": 52,
              "line": 92
            }
          }
        },
        {
          "id": "982",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 118
            },
            "start": {
              "column": 57,
              "line": 92
            }
          }
        },
        {
          "id": "983",
          "mutatorName": "BooleanLiteral",
          "replacement": "data",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(100,30): error TS2339: Property 'meta' does not exist on type 'never'.\nsrc/components/layouts/navbar/search/ProgressiveResults.tsx(101,28): error TS2339: Property 'excerpt' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 94
            },
            "start": {
              "column": 11,
              "line": 94
            }
          }
        },
        {
          "id": "984",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 94
            },
            "start": {
              "column": 11,
              "line": 94
            }
          }
        },
        {
          "id": "985",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 94
            },
            "start": {
              "column": 11,
              "line": 94
            }
          }
        },
        {
          "id": "986",
          "mutatorName": "BooleanLiteral",
          "replacement": "url",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 97
            },
            "start": {
              "column": 11,
              "line": 97
            }
          }
        },
        {
          "id": "987",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 97
            },
            "start": {
              "column": 11,
              "line": 97
            }
          }
        },
        {
          "id": "988",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 97
            },
            "start": {
              "column": 11,
              "line": 97
            }
          }
        },
        {
          "id": "989",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentSearchResultsSliceStartIndexRef.current - i",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 92,
              "line": 104
            },
            "start": {
              "column": 42,
              "line": 104
            }
          }
        },
        {
          "id": "990",
          "mutatorName": "ArithmeticOperator",
          "replacement": "search.results.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 119,
              "line": 104
            },
            "start": {
              "column": 94,
              "line": 104
            }
          }
        },
        {
          "id": "991",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(108,11): error TS2741: Property 'key' is missing in type '{}' but required in type '{ onKeyDown?: KeyboardEventHandler<HTMLAnchorElement> | undefined; className?: string | undefined; key: string; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 119,
              "line": 108
            },
            "start": {
              "column": 36,
              "line": 108
            }
          }
        },
        {
          "id": "992",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 101,
              "line": 108
            },
            "start": {
              "column": 93,
              "line": 108
            }
          }
        },
        {
          "id": "993",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 110
            },
            "start": {
              "column": 16,
              "line": 110
            }
          }
        },
        {
          "id": "994",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 110
            },
            "start": {
              "column": 16,
              "line": 110
            }
          }
        },
        {
          "id": "995",
          "mutatorName": "EqualityOperator",
          "replacement": "searchResultsSlice.length < i + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 110
            },
            "start": {
              "column": 16,
              "line": 110
            }
          }
        },
        {
          "id": "996",
          "mutatorName": "EqualityOperator",
          "replacement": "searchResultsSlice.length > i + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 110
            },
            "start": {
              "column": 16,
              "line": 110
            }
          }
        },
        {
          "id": "997",
          "mutatorName": "ArithmeticOperator",
          "replacement": "i - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 110
            },
            "start": {
              "column": 45,
              "line": 110
            }
          }
        },
        {
          "id": "998",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(120,11): error TS7034: Variable 'newResults' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/components/layouts/navbar/search/ProgressiveResults.tsx(122,29): error TS7005: Variable 'newResults' implicitly has an 'any[]' type.\nsrc/components/layouts/navbar/search/ProgressiveResults.tsx(123,16): error TS7005: Variable 'newResults' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 120
            },
            "start": {
              "column": 24,
              "line": 120
            }
          }
        },
        {
          "id": "999",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentSearchResultsSliceStartIndexRef.current - RESULTS_SLICE_LEN",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 118,
              "line": 121
            },
            "start": {
              "column": 52,
              "line": 121
            }
          }
        },
        {
          "id": "1000",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 126
            },
            "start": {
              "column": 27,
              "line": 126
            }
          }
        },
        {
          "id": "1001",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 126
            },
            "start": {
              "column": 27,
              "line": 126
            }
          }
        },
        {
          "id": "1002",
          "mutatorName": "EqualityOperator",
          "replacement": "newCurrentSearchResultsSliceStartIndex <= search.results.length - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 126
            },
            "start": {
              "column": 27,
              "line": 126
            }
          }
        },
        {
          "id": "1003",
          "mutatorName": "EqualityOperator",
          "replacement": "newCurrentSearchResultsSliceStartIndex >= search.results.length - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 126
            },
            "start": {
              "column": 27,
              "line": 126
            }
          }
        },
        {
          "id": "1004",
          "mutatorName": "ArithmeticOperator",
          "replacement": "search.results.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 126
            },
            "start": {
              "column": 68,
              "line": 126
            }
          }
        },
        {
          "id": "1005",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 104,
              "line": 127
            },
            "start": {
              "column": 6,
              "line": 127
            }
          }
        },
        {
          "id": "1006",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(155,15): error TS2722: Cannot invoke an object which is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 101,
              "line": 129
            },
            "start": {
              "column": 49,
              "line": 129
            }
          }
        },
        {
          "id": "1007",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 129
            },
            "start": {
              "column": 103,
              "line": 129
            }
          }
        },
        {
          "id": "1008",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 189
            },
            "start": {
              "column": 19,
              "line": 131
            }
          }
        },
        {
          "id": "1009",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 132
            },
            "start": {
              "column": 9,
              "line": 132
            }
          }
        },
        {
          "id": "1010",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 132
            },
            "start": {
              "column": 9,
              "line": 132
            }
          }
        },
        {
          "id": "1011",
          "mutatorName": "EqualityOperator",
          "replacement": "searchText !== SEARCH_TEXT_INITIAL_STATE",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 132
            },
            "start": {
              "column": 9,
              "line": 132
            }
          }
        },
        {
          "id": "1012",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 137
            },
            "start": {
              "column": 23,
              "line": 137
            }
          }
        },
        {
          "id": "1013",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 181
            },
            "start": {
              "column": 76,
              "line": 139
            }
          }
        },
        {
          "id": "1014",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 148
            },
            "start": {
              "column": 39,
              "line": 140
            }
          }
        },
        {
          "id": "1015",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 143
            },
            "start": {
              "column": 23,
              "line": 143
            }
          }
        },
        {
          "id": "1016",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(145,25): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(intervalId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 144
            },
            "start": {
              "column": 13,
              "line": 144
            }
          }
        },
        {
          "id": "1017",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(145,25): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(intervalId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 144
            },
            "start": {
              "column": 13,
              "line": 144
            }
          }
        },
        {
          "id": "1018",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 147
            },
            "start": {
              "column": 28,
              "line": 144
            }
          }
        },
        {
          "id": "1019",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 157
            },
            "start": {
              "column": 11,
              "line": 150
            }
          }
        },
        {
          "id": "1020",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 151
            },
            "start": {
              "column": 13,
              "line": 151
            }
          }
        },
        {
          "id": "1021",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 151
            },
            "start": {
              "column": 13,
              "line": 151
            }
          }
        },
        {
          "id": "1022",
          "mutatorName": "LogicalOperator",
          "replacement": "window.pagefind || window.pagefind.isBroken",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(151,48): error TS2339: Property 'isBroken' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 151
            },
            "start": {
              "column": 13,
              "line": 151
            }
          }
        },
        {
          "id": "1023",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 108,
              "line": 151
            },
            "start": {
              "column": 74,
              "line": 151
            }
          }
        },
        {
          "id": "1024",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 152
            },
            "start": {
              "column": 13,
              "line": 152
            }
          }
        },
        {
          "id": "1025",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 152
            },
            "start": {
              "column": 13,
              "line": 152
            }
          }
        },
        {
          "id": "1026",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 154
            },
            "start": {
              "column": 23,
              "line": 154
            }
          }
        },
        {
          "id": "1027",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 180
            },
            "start": {
              "column": 19,
              "line": 157
            }
          }
        },
        {
          "id": "1028",
          "mutatorName": "UpdateOperator",
          "replacement": "retries--",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "1029",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 160
            },
            "start": {
              "column": 13,
              "line": 160
            }
          }
        },
        {
          "id": "1030",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(162,36): error TS18046: 'e' is of type 'unknown'.\nsrc/components/layouts/navbar/search/ProgressiveResults.tsx(165,54): error TS18046: 'e' is of type 'unknown'.\nsrc/components/layouts/navbar/search/ProgressiveResults.tsx(166,54): error TS18046: 'e' is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 160
            },
            "start": {
              "column": 13,
              "line": 160
            }
          }
        },
        {
          "id": "1031",
          "mutatorName": "EqualityOperator",
          "replacement": "retries > maxRetries",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 160
            },
            "start": {
              "column": 13,
              "line": 160
            }
          }
        },
        {
          "id": "1032",
          "mutatorName": "EqualityOperator",
          "replacement": "retries < maxRetries",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 160
            },
            "start": {
              "column": 13,
              "line": 160
            }
          }
        },
        {
          "id": "1033",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 177
            },
            "start": {
              "column": 36,
              "line": 160
            }
          }
        },
        {
          "id": "1034",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(162,13): error TS2345: Argument of type 'boolean' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 162
            },
            "start": {
              "column": 13,
              "line": 162
            }
          }
        },
        {
          "id": "1035",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(162,13): error TS2345: Argument of type 'boolean' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 162
            },
            "start": {
              "column": 13,
              "line": 162
            }
          }
        },
        {
          "id": "1036",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error && e.message && 'Invalid throw usage, intercepted in a traceError catch.'",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(162,13): error TS2345: Argument of type 'string | boolean' is not assignable to parameter of type 'string'.\n  Type 'boolean' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 162
            },
            "start": {
              "column": 13,
              "line": 162
            }
          }
        },
        {
          "id": "1037",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 162
            },
            "start": {
              "column": 14,
              "line": 162
            }
          }
        },
        {
          "id": "1038",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error || e.message",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(162,36): error TS18046: 'e' is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 162
            },
            "start": {
              "column": 14,
              "line": 162
            }
          }
        },
        {
          "id": "1039",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 162
            },
            "start": {
              "column": 50,
              "line": 162
            }
          }
        },
        {
          "id": "1040",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 165
            },
            "start": {
              "column": 31,
              "line": 165
            }
          }
        },
        {
          "id": "1041",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 165
            },
            "start": {
              "column": 31,
              "line": 165
            }
          }
        },
        {
          "id": "1042",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error && e.cause && undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 165
            },
            "start": {
              "column": 31,
              "line": 165
            }
          }
        },
        {
          "id": "1043",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 165
            },
            "start": {
              "column": 32,
              "line": 165
            }
          }
        },
        {
          "id": "1044",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error || e.cause",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(165,54): error TS18046: 'e' is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 165
            },
            "start": {
              "column": 32,
              "line": 165
            }
          }
        },
        {
          "id": "1045",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(166,11): error TS2322: Type 'boolean' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 166
            },
            "start": {
              "column": 31,
              "line": 166
            }
          }
        },
        {
          "id": "1046",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(166,11): error TS2322: Type 'boolean' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 166
            },
            "start": {
              "column": 31,
              "line": 166
            }
          }
        },
        {
          "id": "1047",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error && e.stack && undefined",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(166,11): error TS2322: Type 'false | \"\" | undefined' is not assignable to type 'string | undefined'.\n  Type 'boolean' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 166
            },
            "start": {
              "column": 31,
              "line": 166
            }
          }
        },
        {
          "id": "1048",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 166
            },
            "start": {
              "column": 32,
              "line": 166
            }
          }
        },
        {
          "id": "1049",
          "mutatorName": "LogicalOperator",
          "replacement": "e instanceof Error || e.stack",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(166,54): error TS18046: 'e' is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 166
            },
            "start": {
              "column": 32,
              "line": 166
            }
          }
        },
        {
          "id": "1050",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 167
            },
            "start": {
              "column": 35,
              "line": 167
            }
          }
        },
        {
          "id": "1051",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 173
            },
            "start": {
              "column": 17,
              "line": 169
            }
          }
        },
        {
          "id": "1052",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(170,34): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 170
            },
            "start": {
              "column": 34,
              "line": 170
            }
          }
        },
        {
          "id": "1053",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(171,28): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 171
            },
            "start": {
              "column": 28,
              "line": 171
            }
          }
        },
        {
          "id": "1054",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(172,13): error TS2322: Type '\"\"' is not assignable to type '\"default\" | \"destructive\" | null | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 172
            },
            "start": {
              "column": 22,
              "line": 172
            }
          }
        },
        {
          "id": "1055",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(175,23): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 175
            },
            "start": {
              "column": 22,
              "line": 175
            }
          }
        },
        {
          "id": "1056",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 179
            },
            "start": {
              "column": 23,
              "line": 179
            }
          }
        },
        {
          "id": "1057",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 188
            },
            "start": {
              "column": 18,
              "line": 183
            }
          }
        },
        {
          "id": "1058",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(185,23): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(intervalId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 184
            },
            "start": {
              "column": 11,
              "line": 184
            }
          }
        },
        {
          "id": "1059",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(185,23): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(intervalId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'MaybeNull<Timeout>' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 184
            },
            "start": {
              "column": 11,
              "line": 184
            }
          }
        },
        {
          "id": "1060",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 187
            },
            "start": {
              "column": 26,
              "line": 184
            }
          }
        },
        {
          "id": "1061",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 189
            },
            "start": {
              "column": 6,
              "line": 189
            }
          }
        },
        {
          "id": "1062",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(195,6): error TS18047: 'results' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 191
            },
            "start": {
              "column": 7,
              "line": 191
            }
          }
        },
        {
          "id": "1063",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(195,6): error TS18047: 'results' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 191
            },
            "start": {
              "column": 7,
              "line": 191
            }
          }
        },
        {
          "id": "1064",
          "mutatorName": "EqualityOperator",
          "replacement": "results !== null",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(195,6): error TS18047: 'results' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 191
            },
            "start": {
              "column": 7,
              "line": 191
            }
          }
        },
        {
          "id": "1065",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 221
            },
            "start": {
              "column": 5,
              "line": 195
            }
          }
        },
        {
          "id": "1066",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 221
            },
            "start": {
              "column": 5,
              "line": 195
            }
          }
        },
        {
          "id": "1067",
          "mutatorName": "LogicalOperator",
          "replacement": "// eslint-disable-next-line no-magic-numbers\nresults.length > 0 && <>\n        <NavigationMenu.Root aria-label={globalT(`${i18ns.searchMenu}.sr-only.results`)} className=\"contents [&>div]:contents\" orientation=\"vertical\">\n          <NavigationMenu.List className=\"contents\">\n            {results}\n            {displayShowMoreBtn && <NavigationMenu.Item key={'show-more-btn'}>\n                <NavigationMenu.Link asChild>\n                  <button onClick={async () => {\n            const oldLastResultInstance = getRefCurrentPtr(lastResultRef);\n            setDisplayShowMoreBtn(false);\n            await computeAndSetResults();\n            if (oldLastResultInstance) oldLastResultInstance.focus();\n          }} className=\"search-menu-see-more-btn bg-primary font-semibold text-white\">\n                    {globalT(`${i18ns.vocab}.see-more`)}\n                  </button>\n                </NavigationMenu.Link>\n              </NavigationMenu.Item>}\n          </NavigationMenu.List>\n        </NavigationMenu.Root>\n        <div className=\"relative bottom-[1px] min-h-[1px] w-full\" />\n      </> && <NoResultFound />",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 221
            },
            "start": {
              "column": 5,
              "line": 195
            }
          }
        },
        {
          "id": "1068",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 221
            },
            "start": {
              "column": 6,
              "line": 195
            }
          }
        },
        {
          "id": "1069",
          "mutatorName": "LogicalOperator",
          "replacement": "results.length > 0 || <>\n        <NavigationMenu.Root aria-label={globalT(`${i18ns.searchMenu}.sr-only.results`)} className=\"contents [&>div]:contents\" orientation=\"vertical\">\n          <NavigationMenu.List className=\"contents\">\n            {results}\n            {displayShowMoreBtn && <NavigationMenu.Item key={'show-more-btn'}>\n                <NavigationMenu.Link asChild>\n                  <button onClick={async () => {\n            const oldLastResultInstance = getRefCurrentPtr(lastResultRef);\n            setDisplayShowMoreBtn(false);\n            await computeAndSetResults();\n            if (oldLastResultInstance) oldLastResultInstance.focus();\n          }} className=\"search-menu-see-more-btn bg-primary font-semibold text-white\">\n                    {globalT(`${i18ns.vocab}.see-more`)}\n                  </button>\n                </NavigationMenu.Link>\n              </NavigationMenu.Item>}\n          </NavigationMenu.List>\n        </NavigationMenu.Root>\n        <div className=\"relative bottom-[1px] min-h-[1px] w-full\" />\n      </>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 221
            },
            "start": {
              "column": 6,
              "line": 195
            }
          }
        },
        {
          "id": "1070",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 195
            },
            "start": {
              "column": 6,
              "line": 195
            }
          }
        },
        {
          "id": "1071",
          "mutatorName": "EqualityOperator",
          "replacement": "results.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 195
            },
            "start": {
              "column": 6,
              "line": 195
            }
          }
        },
        {
          "id": "1072",
          "mutatorName": "EqualityOperator",
          "replacement": "results.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 195
            },
            "start": {
              "column": 6,
              "line": 195
            }
          }
        },
        {
          "id": "1073",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(197,50): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 197
            },
            "start": {
              "column": 50,
              "line": 197
            }
          }
        },
        {
          "id": "1074",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 216
            },
            "start": {
              "column": 14,
              "line": 200
            }
          }
        },
        {
          "id": "1075",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 216
            },
            "start": {
              "column": 14,
              "line": 200
            }
          }
        },
        {
          "id": "1076",
          "mutatorName": "LogicalOperator",
          "replacement": "displayShowMoreBtn || <NavigationMenu.Item key={'show-more-btn'}>\n                <NavigationMenu.Link asChild>\n                  <button onClick={async () => {\n      const oldLastResultInstance = getRefCurrentPtr(lastResultRef);\n      setDisplayShowMoreBtn(false);\n      await computeAndSetResults();\n      if (oldLastResultInstance) oldLastResultInstance.focus();\n    }} className=\"search-menu-see-more-btn bg-primary font-semibold text-white\">\n                    {globalT(`${i18ns.vocab}.see-more`)}\n                  </button>\n                </NavigationMenu.Link>\n              </NavigationMenu.Item>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 216
            },
            "start": {
              "column": 14,
              "line": 200
            }
          }
        },
        {
          "id": "1077",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 201
            },
            "start": {
              "column": 41,
              "line": 201
            }
          }
        },
        {
          "id": "1078",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 209
            },
            "start": {
              "column": 42,
              "line": 204
            }
          }
        },
        {
          "id": "1079",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 206
            },
            "start": {
              "column": 45,
              "line": 206
            }
          }
        },
        {
          "id": "1080",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 208
            },
            "start": {
              "column": 27,
              "line": 208
            }
          }
        },
        {
          "id": "1081",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 208
            },
            "start": {
              "column": 27,
              "line": 208
            }
          }
        },
        {
          "id": "1082",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/search/ProgressiveResults.tsx(212,30): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.results\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 212
            },
            "start": {
              "column": 30,
              "line": 212
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { KeyboardEvent as ReactKeyboardEvent, FunctionComponent, ReactElement, RefObject } from 'react';\nimport type { SearchDocumentFlag } from '@/lib/pagefind/helpers/search';\nimport type { MsValue, Count, Limit } from '@rtm/shared-types/Numbers';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport { SEARCH_TEXT_INITIAL_STATE, RESULTS_SLICE_LEN, THROTTLE_DELAY } from '@/config/searchMenu';\nimport { buildResultOnFocus } from '@/components/ui/search/helpers/functions/navbarSearchButton';\nimport { searchDocument, getCleanedURL } from '@/lib/pagefind/helpers/search';\nimport { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport PagefindIntegrationError from '@/errors/PagefindIntegrationError';\nimport * as NavigationMenu from '@radix-ui/react-navigation-menu';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { useToast } from '@/components/hooks/useToast';\nimport Result from '@/components/ui/search/Result';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { traceError } from '@/lib/next';\nimport { i18ns } from '##/config/i18n';\nimport throttle from 'throttleit';\n\nimport NoResultFound from './NoResultFound';\n\ninterface ProgressiveResultsProps {\n  quickMenuLeftRightCustomHandler: (e: ReactKeyboardEvent<HTMLAnchorElement>) => void;\n  setResults: (results: MaybeNull<ReactElement[]>) => void;\n  resultsContainerRef: RefObject<HTMLDivElement>;\n  searchDocumentType: SearchDocumentFlag;\n  results: MaybeNull<ReactElement[]>;\n  firstLoadPlaceholder: ReactElement;\n  searchText: string;\n}\n\nconst ProgressiveResults: FunctionComponent<ProgressiveResultsProps> = ({\n  quickMenuLeftRightCustomHandler,\n  firstLoadPlaceholder,\n  resultsContainerRef,\n  searchDocumentType,\n  setResults,\n  searchText,\n  results\n}) => {\n  const globalT = getClientSideI18n();\n  const { toast } = useToast();\n  // eslint-disable-next-line no-magic-numbers\n  const [currentSearchResultsSliceStartIndex, setCurrentSearchResultsSliceStartIndex] = useState<number>(0);\n  const [currentSearchResults, setCurrentSearchResults] = useState<ReactElement[]>([]);\n  const [displayShowMoreBtn, setDisplayShowMoreBtn] = useState<boolean>(false);\n\n  const currentSearchResultsRef = useRef<ReactElement[]>(currentSearchResults);\n  const currentSearchResultsSliceStartIndexRef = useRef<number>(currentSearchResultsSliceStartIndex);\n  const resultsRef = useRef<MaybeNull<ReactElement[]>>(results);\n  const lastResultRef = useRef<HTMLAnchorElement>(null);\n\n  const resetResultsBoxScroll = useCallback(() => {\n    const maybeContainer = getRefCurrentPtr(resultsContainerRef);\n    if (maybeContainer === null) return;\n    // eslint-disable-next-line no-magic-numbers\n    maybeContainer.scrollTo(0, 0);\n  }, [resultsContainerRef]);\n\n  useEffect(() => {\n    // eslint-disable-next-line no-magic-numbers\n    setCurrentSearchResultsSliceStartIndex(0);\n    setCurrentSearchResults([]);\n    resetResultsBoxScroll();\n  }, [searchText, resetResultsBoxScroll]);\n\n  useEffect(() => {\n    currentSearchResultsRef.current = currentSearchResults;\n  }, [currentSearchResults]);\n\n  useEffect(() => {\n    resultsRef.current = results;\n  }, [results]);\n\n  useEffect(() => {\n    currentSearchResultsSliceStartIndexRef.current = currentSearchResultsSliceStartIndex;\n  }, [currentSearchResultsSliceStartIndex]);\n\n  const computeAndSetResults = useCallback(async () => {\n    const search = await searchDocument(searchText, searchDocumentType);\n    const searchResultsSlice = search.results.slice(\n      currentSearchResultsSliceStartIndexRef.current,\n      currentSearchResultsSliceStartIndexRef.current + RESULTS_SLICE_LEN\n    );\n    const freshResults: ReactElement[] = [];\n\n    // eslint-disable-next-line promise/catch-or-return\n    const mountedData = await Promise.all(searchResultsSlice.map((r) => r.data()));\n\n    for (let i = 0; i < searchResultsSlice.length; i++) {\n      const data = mountedData[i];\n      if (!data) continue;\n\n      const { url } = data;\n      if (!url) continue;\n\n      const cleanedUrl = getCleanedURL(url);\n      const metaTitle = data.meta.title;\n      const excerpt = data.excerpt;\n\n      // eslint-disable-next-line no-magic-numbers\n      const onFocus = buildResultOnFocus(currentSearchResultsSliceStartIndexRef.current + i, search.results.length - 1, resultsContainerRef);\n\n      freshResults.push(\n        <Result\n          navigationMenuItemProps={{ onKeyDown: quickMenuLeftRightCustomHandler, className: 'w-full', key: String(i) }}\n          // eslint-disable-next-line no-magic-numbers\n          ref={searchResultsSlice.length <= i + 1 ? lastResultRef : undefined}\n          key={searchResultsSlice[i].id}\n          metaTitle={metaTitle}\n          onFocus={onFocus}\n          excerpt={excerpt}\n          href={cleanedUrl}\n        />\n      );\n    }\n\n    const newResults = [...currentSearchResultsRef.current, ...freshResults];\n    const newCurrentSearchResultsSliceStartIndex = currentSearchResultsSliceStartIndexRef.current + RESULTS_SLICE_LEN;\n    setCurrentSearchResults(newResults);\n    setResults(newResults);\n    setCurrentSearchResultsSliceStartIndex(newCurrentSearchResultsSliceStartIndex);\n    // eslint-disable-next-line no-magic-numbers\n    setDisplayShowMoreBtn(newCurrentSearchResultsSliceStartIndex < search.results.length - 1);\n  }, [setResults, searchText, searchDocumentType, resultsContainerRef, quickMenuLeftRightCustomHandler]);\n\n  const throttledComputeAndSetResults = useMemo(() => throttle(computeAndSetResults, THROTTLE_DELAY), [computeAndSetResults]);\n\n  useEffect(() => {\n    if (searchText === SEARCH_TEXT_INITIAL_STATE) return;\n\n    let retries: Count = 0;\n    const maxRetries: Limit = 4;\n    const intervalMs: MsValue = 250;\n    let isComputing = false;\n\n    let retryInterval: MaybeNull<NodeJS.Timeout> = setInterval(async () => {\n      function disposeRetryInterval() {\n        // eslint-disable-next-line no-magic-numbers\n        retries = 0;\n        isComputing = false;\n        if (retryInterval) {\n          clearInterval(retryInterval);\n          retryInterval = null;\n        }\n      }\n\n      try {\n        if (window.pagefind && window.pagefind.isBroken) throw new Error('window.pagefind.isBroken is true');\n        if (isComputing) return;\n\n        isComputing = true;\n        await throttledComputeAndSetResults();\n        disposeRetryInterval();\n      } catch (e) {\n        retries++;\n\n        if (retries >= maxRetries) {\n          const tracedError = new PagefindIntegrationError(\n            (e instanceof Error && e.message) || 'Invalid throw usage, intercepted in a traceError catch.'\n          );\n\n          tracedError.cause = (e instanceof Error && e.cause) || undefined;\n          tracedError.stack = (e instanceof Error && e.stack) || undefined;\n          traceError(tracedError, { userAgent: navigator.userAgent });\n\n          toast({\n            description: globalT(`${i18ns.brokenPagefindIntegrationError}.message`),\n            title: globalT(`${i18ns.brokenPagefindIntegrationError}.title`),\n            variant: 'destructive'\n          });\n\n          setResults([]);\n          disposeRetryInterval();\n        }\n\n        isComputing = false;\n      }\n    }, intervalMs);\n\n    return () => {\n      if (retryInterval) {\n        clearInterval(retryInterval);\n        retryInterval = null;\n      }\n    };\n  }, [searchText, searchDocumentType, throttledComputeAndSetResults, toast, globalT, setResults]);\n\n  if (results === null) return firstLoadPlaceholder;\n\n  return (\n    // eslint-disable-next-line no-magic-numbers\n    (results.length > 0 && (\n      <>\n        <NavigationMenu.Root aria-label={globalT(`${i18ns.searchMenu}.sr-only.results`)} className=\"contents [&>div]:contents\" orientation=\"vertical\">\n          <NavigationMenu.List className=\"contents\">\n            {results}\n            {displayShowMoreBtn && (\n              <NavigationMenu.Item key={'show-more-btn'}>\n                <NavigationMenu.Link asChild>\n                  <button\n                    onClick={async () => {\n                      const oldLastResultInstance = getRefCurrentPtr(lastResultRef);\n                      setDisplayShowMoreBtn(false);\n                      await computeAndSetResults();\n                      if (oldLastResultInstance) oldLastResultInstance.focus();\n                    }}\n                    className=\"search-menu-see-more-btn bg-primary font-semibold text-white\"\n                  >\n                    {globalT(`${i18ns.vocab}.see-more`)}\n                  </button>\n                </NavigationMenu.Link>\n              </NavigationMenu.Item>\n            )}\n          </NavigationMenu.List>\n        </NavigationMenu.Root>\n        <div className=\"relative bottom-[1px] min-h-[1px] w-full\" />\n      </>\n    )) || <NoResultFound />\n  );\n};\n\nexport default ProgressiveResults;\n"
    },
    "src/components/layouts/pages/MdxComponent.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1083",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 86,
              "line": 14
            }
          }
        },
        {
          "id": "1084",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 87,
              "line": 24
            }
          }
        },
        {
          "id": "1085",
          "mutatorName": "LogicalOperator",
          "replacement": "classNameValue && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 21,
              "line": 26
            }
          }
        },
        {
          "id": "1086",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 39,
              "line": 26
            }
          }
        },
        {
          "id": "1087",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 29
            },
            "start": {
              "column": 28,
              "line": 29
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent, ReactNode } from 'react';\n\nimport PrimitiveComponents from '@/components/config/mdx/PrimitiveComponents';\nimport NextComponents from '@/components/config/mdx/NextComponents';\nimport SharedCTAs from '@/components/config/mdx/SharedCTAs';\nimport { useMDXComponent } from 'next-contentlayer/hooks';\nimport { MDX_BODY_ID } from '@/config/elementsId';\nimport { cn } from '@/lib/tailwind';\n\nconst components: Record<PropertyKey, (...args: any[]) => JSX.Element | ReactNode> = {\n  ...PrimitiveComponents,\n  ...NextComponents,\n  ...SharedCTAs\n};\n\ninterface MdxProps extends Partial<WithClassname> {\n  code: string;\n}\n\nconst PageMDX: FunctionComponent<MdxProps> = ({ className: classNameValue, code }) => {\n  const MDXComponent = useMDXComponent(code);\n  const className = classNameValue ?? '';\n\n  return (\n    <article className={cn('mdx break-word mb-4', className)} id={MDX_BODY_ID}>\n      <MDXComponent components={components} />\n    </article>\n  );\n};\n\nexport default PageMDX;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/Notfound.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1088",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 64,
              "line": 11
            }
          }
        },
        {
          "id": "1089",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 16
            },
            "start": {
              "column": 39,
              "line": 16
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { FunctionComponent } from 'react';\n\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\ninterface NotFoundProps {}\n\nconst NotFound: FunctionComponent<NotFoundProps> = async () => {\n  const globalT = await getServerSideI18n();\n\n  return (\n    <div className=\"flex h-full flex-1 items-center justify-center\">\n      <h1 className=\"m-auto\">{globalT(`${i18ns.vocab}.404`)}</h1>\n    </div>\n  );\n};\n\nexport default NotFound;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/blog/BlogPost.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1090",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(23,7): error TS2322: Type '({ className: classNameValue, language, post }: BlogPostInnerProps) => Promise<void>' is not assignable to type 'FunctionComponent<BlogPostInnerProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'Promise<AwaitedReactNode>'.\n      Type 'void' is not assignable to type 'AwaitedReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 119,
              "line": 23
            }
          }
        },
        {
          "id": "1091",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 28
            },
            "start": {
              "column": 19,
              "line": 28
            }
          }
        },
        {
          "id": "1092",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 28
            },
            "start": {
              "column": 19,
              "line": 28
            }
          }
        },
        {
          "id": "1093",
          "mutatorName": "EqualityOperator",
          "replacement": "post.tags.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 28
            },
            "start": {
              "column": 19,
              "line": 28
            }
          }
        },
        {
          "id": "1094",
          "mutatorName": "EqualityOperator",
          "replacement": "post.tags.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 28
            },
            "start": {
              "column": 19,
              "line": 28
            }
          }
        },
        {
          "id": "1095",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 30
            },
            "start": {
              "column": 19,
              "line": 30
            }
          }
        },
        {
          "id": "1096",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 30
            },
            "start": {
              "column": 19,
              "line": 30
            }
          }
        },
        {
          "id": "1097",
          "mutatorName": "EqualityOperator",
          "replacement": "post.headings.length >= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 30
            },
            "start": {
              "column": 19,
              "line": 30
            }
          }
        },
        {
          "id": "1098",
          "mutatorName": "EqualityOperator",
          "replacement": "post.headings.length <= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 30
            },
            "start": {
              "column": 19,
              "line": 30
            }
          }
        },
        {
          "id": "1099",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 31
            },
            "start": {
              "column": 27,
              "line": 31
            }
          }
        },
        {
          "id": "1100",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 31
            },
            "start": {
              "column": 27,
              "line": 31
            }
          }
        },
        {
          "id": "1101",
          "mutatorName": "LogicalOperator",
          "replacement": "BlogConfig.SHOW_DRAFTS_BADGE || post.draft",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 31
            },
            "start": {
              "column": 27,
              "line": 31
            }
          }
        },
        {
          "id": "1102",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 32
            },
            "start": {
              "column": 41,
              "line": 32
            }
          }
        },
        {
          "id": "1103",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(32,56): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"tags\" | \"draft\" | \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | ... 13 more ... | \"sr-only.goToTop\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"tags\" | \"draft\" | \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | ... 13 more ... | \"sr-only.goToTop\"'.\n  Overload 2 of 2, '(key: \"tags\" | \"draft\" | \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | ... 13 more ... | \"sr-only.goToTop\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"tags\" | \"draft\" | \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | ... 13 more ... | \"sr-only.goToTop\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 32
            },
            "start": {
              "column": 56,
              "line": 32
            }
          }
        },
        {
          "id": "1104",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 32
            },
            "start": {
              "column": 67,
              "line": 32
            }
          }
        },
        {
          "id": "1105",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 35
            },
            "start": {
              "column": 28,
              "line": 35
            }
          }
        },
        {
          "id": "1106",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 43
            },
            "start": {
              "column": 10,
              "line": 39
            }
          }
        },
        {
          "id": "1107",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 43
            },
            "start": {
              "column": 10,
              "line": 39
            }
          }
        },
        {
          "id": "1108",
          "mutatorName": "LogicalOperator",
          "replacement": "hasTags || <div className=\"mt-1 flex flex-wrap justify-center gap-2 md:mx-auto md:w-fit md:justify-normal\">\n            {tagsGenerator({\n    ...post,\n    scopedT: scopedT2\n  })}\n          </div>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 43
            },
            "start": {
              "column": 10,
              "line": 39
            }
          }
        },
        {
          "id": "1109",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(41,28): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ scopedT: { <Key_2 extends \"xylophone\" | \"cello\" | \"bagpipes\" | \"drums\", Value_2 extends LocaleValue = ((`blog-tags.${Key_2}#zero` | `blog-tags.${Key_2}#one` | `blog-tags.${Key_2}#two` | `blog-tags.${Key_2}#few` | `blog-tags.${Key_2}#many` | `blog-tags.${Key_2}#other`) & (\"search-menu.nothing-found\" | ... 99 more ....'.\n  Property 'scopedT' is missing in type '{}' but required in type '{ scopedT: { <Key_2 extends \"xylophone\" | \"cello\" | \"bagpipes\" | \"drums\", Value_2 extends LocaleValue = ((`blog-tags.${Key_2}#zero` | `blog-tags.${Key_2}#one` | `blog-tags.${Key_2}#two` | `blog-tags.${Key_2}#few` | `blog-tags.${Key_2}#many` | `blog-tags.${Key_2}#other`) & (\"search-menu.nothing-found\" | ... 99 more ....'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 41
            },
            "start": {
              "column": 28,
              "line": 41
            }
          }
        },
        {
          "id": "1110",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "1111",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "1112",
          "mutatorName": "LogicalOperator",
          "replacement": "showToC || <BlogPostTocMobile headings={post.headings} />",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "1113",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 48
            },
            "start": {
              "column": 10,
              "line": 48
            }
          }
        },
        {
          "id": "1114",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 48
            },
            "start": {
              "column": 10,
              "line": 48
            }
          }
        },
        {
          "id": "1115",
          "mutatorName": "LogicalOperator",
          "replacement": "showToC || <BlogPostTocDesktop headings={post.headings} />",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 48
            },
            "start": {
              "column": 10,
              "line": 48
            }
          }
        },
        {
          "id": "1116",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(29,7): error TS2322: Type '({ className: classNameValue, params }: _BlogPostPageProps) => Promise<void>' is not assignable to type 'FunctionComponent<_BlogPostPageProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLikeOfReactNode'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = ReactNode, TResult2 = never>(onfulfilled?: ((value: ReactNode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 66
            },
            "start": {
              "column": 106,
              "line": 54
            }
          }
        },
        {
          "id": "1117",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(30,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/pages/blog/BlogPost.tsx(30,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/pages/blog/BlogPost.tsx(30,33): error TS2493: Tuple type '[]' of length '0' has no element at index '2'.\nsrc/components/pages/blog/BlogPost.tsx(32,76): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/BlogPost.tsx(37,67): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/BlogPost.tsx(40,52): error TS2322: Type 'undefined' is not assignable to type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 141,
              "line": 55
            },
            "start": {
              "column": 45,
              "line": 55
            }
          }
        },
        {
          "id": "1118",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidPair",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "1119",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(40,72): error TS2322: Type 'MaybeNull<BlogPostType>' is not assignable to type 'BlogPostType'.\n  Type 'null' is not assignable to type 'BlogPostType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "1120",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "1121",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(40,72): error TS2322: Type 'null' is not assignable to type 'BlogPostType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "1122",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(40,72): error TS2322: Type 'MaybeNull<BlogPostType>' is not assignable to type 'BlogPostType'.\n  Type 'null' is not assignable to type 'BlogPostType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "1123",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(40,72): error TS2322: Type 'MaybeNull<BlogPostType>' is not assignable to type 'BlogPostType'.\n  Type 'null' is not assignable to type 'BlogPostType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        }
      ],
      "source": "import type { BlogPostPageProps, BlogPostProps, BlogPostType } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { isValidBlogCategoryAndSubcategoryPair, getBlogPostUnstrict } from '@/lib/blog/api';\nimport BlogPostTocDesktop from '@/components/ui/blog/toc/desktop/BlogPostTocDesktop';\nimport BlogPostTocMobile from '@/components/ui/blog/toc/mobile/BlogPostTocMobile';\nimport BlogPostMDX from '@/components/layouts/blog/MdxComponent';\nimport tagsGenerator from '@/components/ui/blog/tagsGenerator';\nimport BlogPostDate from '@/components/ui/blog/BlogPostDate';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getScopedI18n } from '@/i18n/server';\nimport BlogConfig from '@/config/Blog/server';\nimport { notFound } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\ninterface BlogPostInnerProps extends BlogPostProps {}\ninterface _BlogPostPageProps extends BlogPostPageProps, Partial<WithClassname> {}\n\nconst BlogPostInner: FunctionComponent<BlogPostInnerProps> = async ({ className: classNameValue, language, post }) => {\n  const scopedT = await getScopedI18n(i18ns.vocab);\n  const scopedT2 = await getScopedI18n(i18ns.blogTags);\n\n  // eslint-disable-next-line no-magic-numbers\n  const hasTags = post.tags.length > 0;\n  // eslint-disable-next-line no-magic-numbers\n  const showToC = post.headings.length > 1;\n  const showDraftSuffix = BlogConfig.SHOW_DRAFTS_BADGE && post.draft;\n  const draftSuffix = showDraftSuffix ? ' (' + scopedT('draft') + ')' : undefined;\n\n  return (\n    <section className={cn('mx-12 w-auto max-w-[730px] lg:w-[45vw]', classNameValue)}>\n      <header className=\"my-2 p-2 text-center\">\n        <h1>{post.title}</h1>\n        <BlogPostDate suffix={draftSuffix} language={language} date={post.date} />\n        {hasTags && (\n          <div className=\"mt-1 flex flex-wrap justify-center gap-2 md:mx-auto md:w-fit md:justify-normal\">\n            {tagsGenerator({ ...post, scopedT: scopedT2 })}\n          </div>\n        )}\n      </header>\n      <div className=\"flex max-w-full flex-col lg:flex-row\">\n        {showToC && <BlogPostTocMobile headings={post.headings} />}\n        <BlogPostMDX code={post.body.code} />\n        {showToC && <BlogPostTocDesktop headings={post.headings} />}\n      </div>\n    </section>\n  );\n};\n\nconst BlogPost: FunctionComponent<_BlogPostPageProps> = async ({ className: classNameValue, params }) => {\n  const [category, subcategory, language] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[I18nTaxonomy.LANGUAGE]];\n\n  const isValidPair: boolean = await isValidBlogCategoryAndSubcategoryPair(category, subcategory, language);\n  if (!isValidPair) notFound();\n\n  const slug = params[BlogTaxonomy.SLUG];\n\n  const post: MaybeNull<BlogPostType> = await getBlogPostUnstrict(category, subcategory, slug, language);\n  if (!post) notFound();\n\n  return <BlogPostInner className={classNameValue} language={language} post={post} />;\n};\n\nexport default BlogPost;\n"
    },
    "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1124",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(16,7): error TS2322: Type '({ params }: CategoryRelatedSubcategoriesAndBlogPostsProps) => Promise<void>' is not assignable to type 'FunctionComponent<CategoryRelatedSubcategoriesAndBlogPostsProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'Promise<AwaitedReactNode>'.\n      Type 'void' is not assignable to type 'AwaitedReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 53
            },
            "start": {
              "column": 138,
              "line": 16
            }
          }
        },
        {
          "id": "1125",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(17,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(17,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(34,59): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(44,65): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(48,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"undefined._title\"' is not assignable to parameter of type '\"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"undefined._title\"' is not assignable to parameter of type '\"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 17
            },
            "start": {
              "column": 32,
              "line": 17
            }
          }
        },
        {
          "id": "1126",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(20,46): error TS2322: Type 'string' is not assignable to type 'BlogPostType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 20
            },
            "start": {
              "column": 45,
              "line": 20
            }
          }
        },
        {
          "id": "1127",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(34,3): error TS2322: Type 'BlogPostType[] | undefined' is not assignable to type 'BlogPostType[]'.\n  Type 'undefined' is not assignable to type 'BlogPostType[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(35,40): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 123,
              "line": 25
            },
            "start": {
              "column": 44,
              "line": 22
            }
          }
        },
        {
          "id": "1128",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 123,
              "line": 25
            },
            "start": {
              "column": 9,
              "line": 25
            }
          }
        },
        {
          "id": "1129",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 25
            },
            "start": {
              "column": 32,
              "line": 25
            }
          }
        },
        {
          "id": "1130",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 25
            },
            "start": {
              "column": 71,
              "line": 25
            }
          }
        },
        {
          "id": "1131",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 25
            },
            "start": {
              "column": 71,
              "line": 25
            }
          }
        },
        {
          "id": "1132",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostCategory === BlogConfig.TESTING_CATEGORY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 25
            },
            "start": {
              "column": 71,
              "line": 25
            }
          }
        },
        {
          "id": "1133",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(32,3): error TS2322: Type 'BlogPostType[] | undefined' is not assignable to type 'BlogPostType[]'.\n  Type 'undefined' is not assignable to type 'BlogPostType[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(34,43): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 32
            },
            "start": {
              "column": 47,
              "line": 27
            }
          }
        },
        {
          "id": "1134",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 29
            },
            "start": {
              "column": 9,
              "line": 29
            }
          }
        },
        {
          "id": "1135",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 29
            },
            "start": {
              "column": 32,
              "line": 29
            }
          }
        },
        {
          "id": "1136",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 29
            },
            "start": {
              "column": 65,
              "line": 29
            }
          }
        },
        {
          "id": "1137",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 32
            },
            "start": {
              "column": 9,
              "line": 30
            }
          }
        },
        {
          "id": "1138",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 31
            },
            "start": {
              "column": 11,
              "line": 31
            }
          }
        },
        {
          "id": "1139",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 31
            },
            "start": {
              "column": 75,
              "line": 31
            }
          }
        },
        {
          "id": "1140",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 31
            },
            "start": {
              "column": 75,
              "line": 31
            }
          }
        },
        {
          "id": "1141",
          "mutatorName": "LogicalOperator",
          "replacement": "currentPostCategory !== BlogConfig.TESTING_CATEGORY || !currentPostDraft",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 31
            },
            "start": {
              "column": 75,
              "line": 31
            }
          }
        },
        {
          "id": "1142",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 31
            },
            "start": {
              "column": 75,
              "line": 31
            }
          }
        },
        {
          "id": "1143",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostCategory === BlogConfig.TESTING_CATEGORY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 31
            },
            "start": {
              "column": 75,
              "line": 31
            }
          }
        },
        {
          "id": "1144",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 31
            },
            "start": {
              "column": 130,
              "line": 31
            }
          }
        },
        {
          "id": "1145",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(38,40): error TS2345: Argument of type 'MaybeNull<BlogPostType[]>' is not assignable to parameter of type 'BlogPostType[]'.\n  Type 'null' is not assignable to type 'BlogPostType[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(39,43): error TS2345: Argument of type 'MaybeNull<BlogPostType[]>' is not assignable to parameter of type 'BlogPostType[]'.\n  Type 'null' is not assignable to type 'BlogPostType[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "1146",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(38,40): error TS2345: Argument of type 'MaybeNull<BlogPostType[]>' is not assignable to parameter of type 'BlogPostType[]'.\n  Type 'null' is not assignable to type 'BlogPostType[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(39,43): error TS2345: Argument of type 'MaybeNull<BlogPostType[]>' is not assignable to parameter of type 'BlogPostType[]'.\n  Type 'null' is not assignable to type 'BlogPostType[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "1147",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection !== null",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(38,40): error TS2345: Argument of type 'null' is not assignable to parameter of type 'BlogPostType[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(39,43): error TS2345: Argument of type 'null' is not assignable to parameter of type 'BlogPostType[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "1148",
          "mutatorName": "MethodExpression",
          "replacement": "gettedOnTheFlyPosts",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 43
            },
            "start": {
              "column": 17,
              "line": 41
            }
          }
        },
        {
          "id": "1149",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(41,42): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type '(a: BlogPostType, b: BlogPostType) => number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 42
            },
            "start": {
              "column": 42,
              "line": 41
            }
          }
        },
        {
          "id": "1150",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(48,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 49
            },
            "start": {
              "column": 44,
              "line": 49
            }
          }
        }
      ],
      "source": "import type { BlogCategoryPageProps, BlogPostType } from '@/types/Blog';\nimport type { FunctionComponent } from 'react';\n\nimport blogCategoryPageBuilder from '@/lib/blog/blogCategoryPageBuilder';\nimport { getAllBlogPostsByCategory } from '@/lib/blog/api';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getScopedI18n } from '@/i18n/server';\nimport BlogConfig from '@/config/Blog/server';\nimport ComputedBlogCtx from '@/lib/blog/ctx';\nimport { notFound } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\n\ninterface CategoryRelatedSubcategoriesAndBlogPostsProps extends BlogCategoryPageProps {}\n\nconst CategoryRelatedSubcategoriesAndBlogPosts: FunctionComponent<CategoryRelatedSubcategoriesAndBlogPostsProps> = async ({ params }) => {\n  const [language, category] = [params[I18nTaxonomy.LANGUAGE], params[BlogTaxonomy.CATEGORY]];\n  const scopedT = await getScopedI18n(i18ns.blogCategories);\n\n  let gettedOnTheFlyPosts: BlogPostType[] = [];\n  // {ToDo} Smells like code duplicates, see blog API and review this!\n  const getBlogPostsWithAllowedDraftsCtx = (postsCollection: BlogPostType[]): BlogPostType[] =>\n    ComputedBlogCtx.TESTING\n      ? postsCollection\n      : postsCollection.filter(({ category: currentPostCategory }) => currentPostCategory !== BlogConfig.TESTING_CATEGORY);\n\n  const getBlogPostsWithDisallowedDraftsCtx = (postsCollection: BlogPostType[]): BlogPostType[] =>\n    ComputedBlogCtx.TESTING\n      ? postsCollection.filter(({ draft: currentPostDraft }) => !currentPostDraft)\n      : postsCollection.filter(\n          ({ category: currentPostCategory, draft: currentPostDraft }) => currentPostCategory !== BlogConfig.TESTING_CATEGORY && !currentPostDraft\n        );\n\n  const postsCollection = await getAllBlogPostsByCategory(category);\n  if (postsCollection === null) notFound();\n\n  gettedOnTheFlyPosts = ComputedBlogCtx.ALLOWED_DRAFTS\n    ? getBlogPostsWithAllowedDraftsCtx(postsCollection)\n    : getBlogPostsWithDisallowedDraftsCtx(postsCollection);\n\n  const posts = gettedOnTheFlyPosts.sort((post1, post2) =>\n    BlogConfig.DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_POSTS_ON_BLOG_CATEGORY_PAGE(new Date(post1.date), new Date(post2.date))\n  );\n\n  const content = await blogCategoryPageBuilder(posts, category, language);\n\n  return (\n    <div className=\"w-full\">\n      <h1 className=\"text-center\">{scopedT(`${category}._title`)}</h1>\n      {content}\n    </div>\n  );\n};\n\nexport default CategoryRelatedSubcategoriesAndBlogPosts;\n"
    },
    "src/components/pages/blog/FiltersSelectWidget.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1151",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/FiltersSelectWidget.tsx(23,7): error TS2322: Type '({ setSelectedFilterSwitch, selectContentClassName, newSelectedFilter, triggerClassName, selectedFilter, filtersAssoc }: FiltersSelectWidgetProps) => void' is not assignable to type 'FunctionComponent<FiltersSelectWidgetProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 82
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1152",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 33
            },
            "start": {
              "column": 45,
              "line": 33
            }
          }
        },
        {
          "id": "1153",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/FiltersSelectWidget.tsx(64,55): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 34
            },
            "start": {
              "column": 24,
              "line": 34
            }
          }
        },
        {
          "id": "1154",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 9,
              "line": 48
            },
            "start": {
              "column": 5,
              "line": 37
            }
          }
        },
        {
          "id": "1155",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 48
            },
            "start": {
              "column": 24,
              "line": 38
            }
          }
        },
        {
          "id": "1156",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 40
            },
            "start": {
              "column": 25,
              "line": 40
            }
          }
        },
        {
          "id": "1157",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 42
            },
            "start": {
              "column": 40,
              "line": 40
            }
          }
        },
        {
          "id": "1158",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 41
            },
            "start": {
              "column": 86,
              "line": 41
            }
          }
        },
        {
          "id": "1159",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 41
            },
            "start": {
              "column": 86,
              "line": 41
            }
          }
        },
        {
          "id": "1160",
          "mutatorName": "EqualityOperator",
          "replacement": "index !== selectedFilter",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 41
            },
            "start": {
              "column": 86,
              "line": 41
            }
          }
        },
        {
          "id": "1161",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 43
            },
            "start": {
              "column": 16,
              "line": 43
            }
          }
        },
        {
          "id": "1162",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 49
            },
            "start": {
              "column": 5,
              "line": 49
            }
          }
        },
        {
          "id": "1163",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 63
            },
            "start": {
              "column": 41,
              "line": 54
            }
          }
        },
        {
          "id": "1164",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 57
            },
            "start": {
              "column": 13,
              "line": 57
            }
          }
        },
        {
          "id": "1165",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 57
            },
            "start": {
              "column": 13,
              "line": 57
            }
          }
        },
        {
          "id": "1166",
          "mutatorName": "EqualityOperator",
          "replacement": "filter !== selectedFilter",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 57
            },
            "start": {
              "column": 13,
              "line": 57
            }
          }
        },
        {
          "id": "1167",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 59
            },
            "start": {
              "column": 40,
              "line": 57
            }
          }
        },
        {
          "id": "1168",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 62
            },
            "start": {
              "column": 16,
              "line": 59
            }
          }
        },
        {
          "id": "1169",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 61
            },
            "start": {
              "column": 35,
              "line": 61
            }
          }
        },
        {
          "id": "1170",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 64
            },
            "start": {
              "column": 21,
              "line": 64
            }
          }
        },
        {
          "id": "1171",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 69
            },
            "start": {
              "column": 30,
              "line": 69
            }
          }
        },
        {
          "id": "1172",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 71
            },
            "start": {
              "column": 54,
              "line": 69
            }
          }
        },
        {
          "id": "1173",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 72
            },
            "start": {
              "column": 23,
              "line": 72
            }
          }
        },
        {
          "id": "1174",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/FiltersSelectWidget.tsx(73,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 73
            },
            "start": {
              "column": 29,
              "line": 73
            }
          }
        },
        {
          "id": "1175",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/FiltersSelectWidget.tsx(78,42): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 78
            },
            "start": {
              "column": 42,
              "line": 78
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FunctionComponent, MutableRefObject } from 'react';\nimport type { FiltersAssoc } from '@/config/Blog/client';\nimport type { Id } from '@rtm/shared-types/Numbers';\n\nimport { SelectContent, SelectTrigger, SelectGroup, SelectValue, SelectItem, Select } from '@/components/ui/Select';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { useState, useMemo } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nexport interface FiltersSelectWidgetProps {\n  newSelectedFilter: MutableRefObject<MaybeNull<Id>>;\n  setSelectedFilterSwitch: (s: boolean) => unknown;\n  selectContentClassName?: string;\n  filtersAssoc: FiltersAssoc;\n  triggerClassName?: string;\n  selectedFilter: Id;\n}\n\nconst FiltersSelectWidget: FunctionComponent<FiltersSelectWidgetProps> = ({\n  setSelectedFilterSwitch,\n  selectContentClassName,\n  newSelectedFilter,\n  triggerClassName,\n  selectedFilter,\n  filtersAssoc\n}) => {\n  const globalT = getClientSideI18n();\n\n  const [open, setOpen] = useState<boolean>(false);\n  const onOpenChange = (opened: boolean) => setOpen(opened);\n\n  const selectItems = useMemo(\n    () =>\n      filtersAssoc.map((config, index) => (\n        <SelectItem\n          className={cn('max-lg:h-12', {\n            'hover:bg-accent active:pointer-events-none max-lg:pointer-events-none': index === selectedFilter\n          })}\n          key={`select-item-${index}`}\n          value={String(index)}\n        >\n          {globalT(config.i18nTitle)}\n        </SelectItem>\n      )),\n    [filtersAssoc, globalT, selectedFilter]\n  );\n\n  return (\n    <Select\n      onValueChange={(value: string) => {\n        const filter = Number(value);\n\n        if (filter === selectedFilter) {\n          newSelectedFilter.current = null;\n        } else {\n          newSelectedFilter.current = filter;\n          setSelectedFilterSwitch(true);\n        }\n      }}\n      onOpenChange={(isOpen: boolean) => onOpenChange(isOpen)}\n      value={String(selectedFilter)}\n      open={open}\n    >\n      <SelectTrigger\n        chevronClassName={cn('transition-transform', {\n          'ltr:-rotate-180 rtl:rotate-180': open\n        })}\n        className={cn('mx-[2px] min-w-[124px] lg:min-w-[176px]', triggerClassName)}\n        aria-label={globalT(`${i18ns.filters}.select-a-filter`)}\n      >\n        <SelectValue />\n      </SelectTrigger>\n      <SelectContent className={selectContentClassName}>\n        <SelectGroup aria-label={globalT(`${i18ns.srOnly}.sort-by`)}>{selectItems}</SelectGroup>\n      </SelectContent>\n    </Select>\n  );\n};\n\nexport default FiltersSelectWidget;\n"
    },
    "src/components/pages/blog/PaginationWidget.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1176",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(22,7): error TS2322: Type '({ pagesAmount, currentPage, className }: PaginationWidgetProps) => void' is not assignable to type 'FunctionComponent<PaginationWidgetProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 113,
              "line": 22
            }
          }
        },
        {
          "id": "1177",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(40,40): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 33,
              "line": 28
            }
          }
        },
        {
          "id": "1178",
          "mutatorName": "MethodExpression",
          "replacement": "Math.min(FIRST_PAGE_PARAM, currentPage - 1)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 39,
              "line": 28
            }
          }
        },
        {
          "id": "1179",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentPage + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 28
            },
            "start": {
              "column": 66,
              "line": 28
            }
          }
        },
        {
          "id": "1180",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 28
            },
            "start": {
              "column": 84,
              "line": 28
            }
          }
        },
        {
          "id": "1181",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(41,32): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 30
            },
            "start": {
              "column": 33,
              "line": 30
            }
          }
        },
        {
          "id": "1182",
          "mutatorName": "MethodExpression",
          "replacement": "Math.max(pagesAmount, currentPage + 1)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 30
            },
            "start": {
              "column": 39,
              "line": 30
            }
          }
        },
        {
          "id": "1183",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentPage - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 30
            },
            "start": {
              "column": 61,
              "line": 30
            }
          }
        },
        {
          "id": "1184",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 105,
              "line": 30
            },
            "start": {
              "column": 79,
              "line": 30
            }
          }
        },
        {
          "id": "1185",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 108,
              "line": 33
            },
            "start": {
              "column": 5,
              "line": 33
            }
          }
        },
        {
          "id": "1186",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 34
            },
            "start": {
              "column": 5,
              "line": 34
            }
          }
        },
        {
          "id": "1187",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "1188",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "1189",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount < 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "1190",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount > 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "1191",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 44
            },
            "start": {
              "column": 31,
              "line": 44
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { Quantity, Count } from '@rtm/shared-types/Numbers';\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { FIRST_PAGE_PARAM, PAGE_KEY } from '@/components/ui/helpers/PaginatedElements/constants';\nimport { PaginationContent, PaginationItem, Pagination } from '@/components/ui/Pagination';\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { useSearchParams, usePathname } from 'next/navigation';\nimport { useCallback, useMemo } from 'react';\nimport { cn } from '@/lib/tailwind';\n\nimport { doBuildPaginationItems, buildPreviousBtn, buildNextBtn } from './helpers/functions/paginationWidget';\n\nexport interface PaginationWidgetProps extends Partial<WithClassname> {\n  pagesAmount: Quantity;\n  currentPage: Count;\n}\n\n// {ToDo} https://github.com/Tirraa/dashboard_rtm/issues/126\nconst PaginationWidget: FunctionComponent<PaginationWidgetProps> = ({ pagesAmount, currentPage, className }) => {\n  const searchParams = useSearchParams();\n  const pathname = usePathname();\n  const isLargeScreen = useIsLargeScreen();\n\n  // eslint-disable-next-line no-magic-numbers\n  const prevBtnPageId = useMemo(() => Math.max(FIRST_PAGE_PARAM, currentPage - 1), [currentPage]);\n  // eslint-disable-next-line no-magic-numbers\n  const nextBtnPageId = useMemo(() => Math.min(pagesAmount, currentPage + 1), [pagesAmount, currentPage]);\n\n  const buildPaginationItems = useCallback(\n    () => doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, PAGE_KEY),\n    [pagesAmount, currentPage, pathname, searchParams, isLargeScreen]\n  );\n\n  // eslint-disable-next-line no-magic-numbers\n  if (pagesAmount <= 1) return null;\n\n  const previousBtn = buildPreviousBtn(prevBtnPageId, pathname, searchParams, currentPage, PAGE_KEY);\n  const nextBtn = buildNextBtn(nextBtnPageId, pathname, searchParams, currentPage, pagesAmount, PAGE_KEY);\n\n  return (\n    <Pagination className={cn('m-0 w-fit', className)}>\n      <PaginationContent>\n        <PaginationItem>{previousBtn}</PaginationItem>\n        {buildPaginationItems()}\n        <PaginationItem>{nextBtn}</PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  );\n};\n\nexport default PaginationWidget;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1192",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(42,7): error TS2322: Type '({ postsCollection, elementsPerPage, expectedTagsIds, title, tags }: SubcategoryRelatedBlogPostsClientProps) => void' is not assignable to type 'FunctionComponent<SubcategoryRelatedBlogPostsClientProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 216
            },
            "start": {
              "column": 7,
              "line": 48
            }
          }
        },
        {
          "id": "1193",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(67,38): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(112,47): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(126,63): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(189,11): error TS2322: Type 'undefined' is not assignable to type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(207,11): error TS2322: Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 115,
              "line": 52
            },
            "start": {
              "column": 34,
              "line": 52
            }
          }
        },
        {
          "id": "1194",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 131,
              "line": 52
            },
            "start": {
              "column": 117,
              "line": 52
            }
          }
        },
        {
          "id": "1195",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(60,45): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(169,9): error TS18048: 'selectedTagsIds' is possibly 'undefined'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(188,11): error TS2322: Type 'undefined' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(206,11): error TS2322: Type 'undefined' is not assignable to type 'number[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 112,
              "line": 54
            },
            "start": {
              "column": 35,
              "line": 54
            }
          }
        },
        {
          "id": "1196",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 145,
              "line": 54
            },
            "start": {
              "column": 114,
              "line": 54
            }
          }
        },
        {
          "id": "1197",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 56
            },
            "start": {
              "column": 77,
              "line": 56
            }
          }
        },
        {
          "id": "1198",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(67,54): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,74): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 60
            },
            "start": {
              "column": 5,
              "line": 60
            }
          }
        },
        {
          "id": "1199",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 61
            },
            "start": {
              "column": 5,
              "line": 61
            }
          }
        },
        {
          "id": "1200",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(67,54): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,74): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 64
            },
            "start": {
              "column": 48,
              "line": 64
            }
          }
        },
        {
          "id": "1201",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 64
            },
            "start": {
              "column": 89,
              "line": 64
            }
          }
        },
        {
          "id": "1202",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(72,37): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'unknown[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(76,30): error TS2322: Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(87,82): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(106,82): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(186,24): error TS18048: 'paginatedElements' is possibly 'undefined'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(204,24): error TS18048: 'paginatedElements' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 67
            },
            "start": {
              "column": 5,
              "line": 67
            }
          }
        },
        {
          "id": "1203",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 68
            },
            "start": {
              "column": 5,
              "line": 68
            }
          }
        },
        {
          "id": "1204",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(72,37): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'unknown[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(76,30): error TS2322: Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(87,82): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(106,82): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(186,24): error TS18048: 'paginatedElements' is possibly 'undefined'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(204,24): error TS18048: 'paginatedElements' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 71
            },
            "start": {
              "column": 37,
              "line": 71
            }
          }
        },
        {
          "id": "1205",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 71
            },
            "start": {
              "column": 71,
              "line": 71
            }
          }
        },
        {
          "id": "1206",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(76,102): error TS2322: Type 'undefined' is not assignable to type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(87,52): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(106,52): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(127,57): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(190,11): error TS2322: Type 'undefined' is not assignable to type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(208,11): error TS2322: Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 73
            },
            "start": {
              "column": 31,
              "line": 73
            }
          }
        },
        {
          "id": "1207",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 73
            },
            "start": {
              "column": 99,
              "line": 73
            }
          }
        },
        {
          "id": "1208",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 130,
              "line": 76
            },
            "start": {
              "column": 5,
              "line": 76
            }
          }
        },
        {
          "id": "1209",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 77
            },
            "start": {
              "column": 5,
              "line": 77
            }
          }
        },
        {
          "id": "1210",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 101
            },
            "start": {
              "column": 19,
              "line": 84
            }
          }
        },
        {
          "id": "1211",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(90,61): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,47): error TS2345: Argument of type 'MaybeNull<number>' is not assignable to parameter of type 'number'.\n  Type 'null' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 85
            },
            "start": {
              "column": 9,
              "line": 85
            }
          }
        },
        {
          "id": "1212",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,47): error TS2345: Argument of type 'MaybeNull<number>' is not assignable to parameter of type 'number'.\n  Type 'null' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 85
            },
            "start": {
              "column": 9,
              "line": 85
            }
          }
        },
        {
          "id": "1213",
          "mutatorName": "LogicalOperator",
          "replacement": "!selectedFilterSwitch && newSelectedFilter.current === null",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,47): error TS2345: Argument of type 'MaybeNull<number>' is not assignable to parameter of type 'number'.\n  Type 'null' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 85
            },
            "start": {
              "column": 9,
              "line": 85
            }
          }
        },
        {
          "id": "1214",
          "mutatorName": "BooleanLiteral",
          "replacement": "selectedFilterSwitch",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 85
            },
            "start": {
              "column": 9,
              "line": 85
            }
          }
        },
        {
          "id": "1215",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,47): error TS2345: Argument of type 'MaybeNull<number>' is not assignable to parameter of type 'number'.\n  Type 'null' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 85
            },
            "start": {
              "column": 34,
              "line": 85
            }
          }
        },
        {
          "id": "1216",
          "mutatorName": "EqualityOperator",
          "replacement": "newSelectedFilter.current !== null",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,47): error TS2345: Argument of type 'null' is not assignable to parameter of type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 85
            },
            "start": {
              "column": 34,
              "line": 85
            }
          }
        },
        {
          "id": "1217",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 89
            },
            "start": {
              "column": 37,
              "line": 89
            }
          }
        },
        {
          "id": "1218",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(90,54): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 90
            },
            "start": {
              "column": 38,
              "line": 90
            }
          }
        },
        {
          "id": "1219",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(90,55): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 90
            },
            "start": {
              "column": 38,
              "line": 90
            }
          }
        },
        {
          "id": "1220",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 95
            },
            "start": {
              "column": 37,
              "line": 95
            }
          }
        },
        {
          "id": "1221",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 99
            },
            "start": {
              "column": 23,
              "line": 99
            }
          }
        },
        {
          "id": "1222",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 99
            },
            "start": {
              "column": 33,
              "line": 99
            }
          }
        },
        {
          "id": "1223",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 100
            },
            "start": {
              "column": 29,
              "line": 100
            }
          }
        },
        {
          "id": "1224",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 129,
              "line": 101
            },
            "start": {
              "column": 6,
              "line": 101
            }
          }
        },
        {
          "id": "1225",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 165
            },
            "start": {
              "column": 19,
              "line": 103
            }
          }
        },
        {
          "id": "1226",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(109,61): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(111,63): error TS2345: Argument of type 'MaybeNull<number[]>' is not assignable to parameter of type 'number[]'.\n  Type 'null' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(163,5): error TS7053: Element implicitly has an 'any' type because expression of type 'ETagsSwitch' can't be used to index type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n  Property '[ETagsSwitch.OFF]' does not exist on type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 104
            },
            "start": {
              "column": 9,
              "line": 104
            }
          }
        },
        {
          "id": "1227",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(111,63): error TS2345: Argument of type 'MaybeNull<number[]>' is not assignable to parameter of type 'number[]'.\n  Type 'null' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(163,5): error TS7053: Element implicitly has an 'any' type because expression of type 'ETagsSwitch' can't be used to index type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n  Property '[ETagsSwitch.OFF]' does not exist on type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 104
            },
            "start": {
              "column": 9,
              "line": 104
            }
          }
        },
        {
          "id": "1228",
          "mutatorName": "LogicalOperator",
          "replacement": "selectedTagSwitch === ETagsSwitch.OFF && newSelectedTagsIds.current === null",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(111,63): error TS2345: Argument of type 'MaybeNull<number[]>' is not assignable to parameter of type 'number[]'.\n  Type 'null' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(163,5): error TS7053: Element implicitly has an 'any' type because expression of type 'ETagsSwitch' can't be used to index type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n  Property '[ETagsSwitch.OFF]' does not exist on type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 104
            },
            "start": {
              "column": 9,
              "line": 104
            }
          }
        },
        {
          "id": "1229",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(163,5): error TS7053: Element implicitly has an 'any' type because expression of type 'ETagsSwitch' can't be used to index type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n  Property '[ETagsSwitch.OFF]' does not exist on type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 104
            },
            "start": {
              "column": 9,
              "line": 104
            }
          }
        },
        {
          "id": "1230",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagSwitch !== ETagsSwitch.OFF",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(163,5): error TS7053: Element implicitly has an 'any' type because expression of type 'ETagsSwitch.OFF' can't be used to index type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n  Property '[ETagsSwitch.OFF]' does not exist on type '{ readonly 0: (__newSelectedTagsIds: number[]) => void; readonly 1: (__newSelectedTagsIds: number[]) => void; readonly 2: (__newSelectedTagsIds: number[]) => void; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 104
            },
            "start": {
              "column": 9,
              "line": 104
            }
          }
        },
        {
          "id": "1231",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(111,63): error TS2345: Argument of type 'MaybeNull<number[]>' is not assignable to parameter of type 'number[]'.\n  Type 'null' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(163,33): error TS2345: Argument of type 'MaybeNull<number[]>' is not assignable to parameter of type 'number[]'.\n  Type 'null' is not assignable to type 'number[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 104
            },
            "start": {
              "column": 50,
              "line": 104
            }
          }
        },
        {
          "id": "1232",
          "mutatorName": "EqualityOperator",
          "replacement": "newSelectedTagsIds.current !== null",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(111,63): error TS2345: Argument of type 'null' is not assignable to parameter of type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(163,33): error TS2345: Argument of type 'null' is not assignable to parameter of type 'number[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 104
            },
            "start": {
              "column": 50,
              "line": 104
            }
          }
        },
        {
          "id": "1233",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 108
            },
            "start": {
              "column": 37,
              "line": 108
            }
          }
        },
        {
          "id": "1234",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(109,54): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 109
            },
            "start": {
              "column": 38,
              "line": 109
            }
          }
        },
        {
          "id": "1235",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(109,55): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 109
            },
            "start": {
              "column": 38,
              "line": 109
            }
          }
        },
        {
          "id": "1236",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 123
            },
            "start": {
              "column": 65,
              "line": 114
            }
          }
        },
        {
          "id": "1237",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 118
            },
            "start": {
              "column": 39,
              "line": 118
            }
          }
        },
        {
          "id": "1238",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 122
            },
            "start": {
              "column": 25,
              "line": 122
            }
          }
        },
        {
          "id": "1239",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 122
            },
            "start": {
              "column": 35,
              "line": 122
            }
          }
        },
        {
          "id": "1240",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 144
            },
            "start": {
              "column": 67,
              "line": 125
            }
          }
        },
        {
          "id": "1241",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 129
            },
            "start": {
              "column": 42,
              "line": 129
            }
          }
        },
        {
          "id": "1242",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(130,62): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 130
            },
            "start": {
              "column": 43,
              "line": 130
            }
          }
        },
        {
          "id": "1243",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(130,63): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 130
            },
            "start": {
              "column": 43,
              "line": 130
            }
          }
        },
        {
          "id": "1244",
          "mutatorName": "LogicalOperator",
          "replacement": "keys.find(key => newKeys.includes(key)) && null",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(132,13): error TS2322: Type '\"\" | null | undefined' is not assignable to type 'MaybeNull<string>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 132
            },
            "start": {
              "column": 58,
              "line": 132
            }
          }
        },
        {
          "id": "1245",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 98,
              "line": 132
            },
            "start": {
              "column": 68,
              "line": 132
            }
          }
        },
        {
          "id": "1246",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 133
            },
            "start": {
              "column": 11,
              "line": 133
            }
          }
        },
        {
          "id": "1247",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 133
            },
            "start": {
              "column": 11,
              "line": 133
            }
          }
        },
        {
          "id": "1248",
          "mutatorName": "EqualityOperator",
          "replacement": "firstCommonKey !== null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 133
            },
            "start": {
              "column": 11,
              "line": 133
            }
          }
        },
        {
          "id": "1249",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 136
            },
            "start": {
              "column": 36,
              "line": 133
            }
          }
        },
        {
          "id": "1250",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 139
            },
            "start": {
              "column": 39,
              "line": 139
            }
          }
        },
        {
          "id": "1251",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 143
            },
            "start": {
              "column": 25,
              "line": 143
            }
          }
        },
        {
          "id": "1252",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 143
            },
            "start": {
              "column": 35,
              "line": 143
            }
          }
        },
        {
          "id": "1253",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 155
            },
            "start": {
              "column": 64,
              "line": 146
            }
          }
        },
        {
          "id": "1254",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 147
            },
            "start": {
              "column": 11,
              "line": 147
            }
          }
        },
        {
          "id": "1255",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 147
            },
            "start": {
              "column": 11,
              "line": 147
            }
          }
        },
        {
          "id": "1256",
          "mutatorName": "EqualityOperator",
          "replacement": "memorizedPageBeforeFiltering.current !== null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 147
            },
            "start": {
              "column": 11,
              "line": 147
            }
          }
        },
        {
          "id": "1257",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 150
            },
            "start": {
              "column": 58,
              "line": 147
            }
          }
        },
        {
          "id": "1258",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 109,
              "line": 152
            },
            "start": {
              "column": 39,
              "line": 152
            }
          }
        },
        {
          "id": "1259",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 154
            },
            "start": {
              "column": 25,
              "line": 154
            }
          }
        },
        {
          "id": "1260",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 154
            },
            "start": {
              "column": 35,
              "line": 154
            }
          }
        },
        {
          "id": "1261",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 146,
              "line": 165
            },
            "start": {
              "column": 6,
              "line": 165
            }
          }
        },
        {
          "id": "1262",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 171
            },
            "start": {
              "column": 19,
              "line": 167
            }
          }
        },
        {
          "id": "1263",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 169
            },
            "start": {
              "column": 9,
              "line": 169
            }
          }
        },
        {
          "id": "1264",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 169
            },
            "start": {
              "column": 9,
              "line": 169
            }
          }
        },
        {
          "id": "1265",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagsIds.length === 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 169
            },
            "start": {
              "column": 9,
              "line": 169
            }
          }
        },
        {
          "id": "1266",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 171
            },
            "start": {
              "column": 6,
              "line": 171
            }
          }
        },
        {
          "id": "1267",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 194
            },
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "1268",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 194
            },
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "1269",
          "mutatorName": "LogicalOperator",
          "replacement": "showTopToolbar || <SubcategoryRelatedBlogPostsClientToolbar filtersAssoc={BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE} memorizedPageBeforeFiltering={memorizedPageBeforeFiltering} setSelectedFilterSwitch={setSelectedFilterSwitch} setSelectedTagSwitch={setSelectedTagSwitch} newSelectedTagsIds={newSelectedTagsIds} postsAmount={paginatedElements.length} newSelectedFilter={newSelectedFilter} selectedTagsIds={selectedTagsIds} selectedFilter={selectedFilter} currentPage={currentPage} pagesAmount={pagesAmount} tags={tags} />",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 194
            },
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "1270",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 213
            },
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "1271",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 213
            },
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "1272",
          "mutatorName": "LogicalOperator",
          "replacement": "showBottomToolbar || <SubcategoryRelatedBlogPostsClientToolbar filtersAssoc={BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE} memorizedPageBeforeFiltering={memorizedPageBeforeFiltering} setSelectedFilterSwitch={setSelectedFilterSwitch} setSelectedTagSwitch={setSelectedTagSwitch} newSelectedTagsIds={newSelectedTagsIds} postsAmount={paginatedElements.length} newSelectedFilter={newSelectedFilter} selectedTagsIds={selectedTagsIds} selectedFilter={selectedFilter} currentPage={currentPage} pagesAmount={pagesAmount} isBottomWidget tags={tags} />",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 213
            },
            "start": {
              "column": 8,
              "line": 197
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { BlogPostPreviewComponentWithMetadatas, BlogTagId } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { BlogTag } from '##/config/contentlayer/blog/blogTags';\nimport type { ReactElementKey } from '@rtm/shared-types/React';\nimport type { Limit, Id } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent } from 'react';\n\nimport {\n  doGetMaybeFilteredPostsCollection,\n  doComputePaginatedElements,\n  getSortedPostsCollection,\n  shouldShowBottomToolbar,\n  shouldShowTopToolbar\n} from '@/components/ui/helpers/PaginatedElements/functions/client';\nimport { computeReconciliatedPageIndex, getSanitizedCurrentPage } from '@/components/ui/helpers/PaginatedElements/functions/pagination';\nimport { getPaginatedElementsCurrentSlice } from '@/components/ui/helpers/PaginatedElements/functions/paginatedElements';\nimport { PAGE_KEY } from '@/components/ui/helpers/PaginatedElements/constants';\nimport BlogConfigClient, { MAX_FILTER_INDEX } from '@/config/Blog/client';\nimport { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport PaginatedElements from '@/components/ui/PaginatedElements';\nimport { createURLSearchParams } from '@rtm/shared-lib/html';\nimport usePagination from '@/components/hooks/usePagination';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { packIds } from '@rtm/shared-lib/misc';\n\nimport { getSanitizedCurrentFilterIndex } from '../helpers/functions/filtersSelectWidget';\nimport { getUnpackedAndSanitizedFilters } from '../helpers/functions/filters';\nimport SubcategoryRelatedBlogPostsClientToolbar from './Toolbar';\nimport { FILTERS_KEY, TAGS_KEY } from '../helpers/constants';\nimport { ETagsSwitch } from './helpers/enums';\n\ninterface SubcategoryRelatedBlogPostsClientProps {\n  postsCollection: BlogPostPreviewComponentWithMetadatas[];\n  expectedTagsIds: Set<BlogTagId>;\n  elementsPerPage: Limit;\n  tags: BlogTag[];\n  title: string;\n}\n\nconst SubcategoryRelatedBlogPostsClient: FunctionComponent<SubcategoryRelatedBlogPostsClientProps> = ({\n  postsCollection,\n  elementsPerPage,\n  expectedTagsIds,\n  title,\n  tags\n}) => {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n\n  const selectedFilter = useMemo(() => getSanitizedCurrentFilterIndex(searchParams, MAX_FILTER_INDEX, FILTERS_KEY), [searchParams]);\n\n  const selectedTagsIds = useMemo(() => getUnpackedAndSanitizedFilters(searchParams, expectedTagsIds, TAGS_KEY), [searchParams, expectedTagsIds]);\n\n  const [selectedFilterSwitch, setSelectedFilterSwitch] = useState<boolean>(false);\n  const [selectedTagSwitch, setSelectedTagSwitch] = useState<ETagsSwitch>(ETagsSwitch.OFF);\n\n  const getMaybeFilteredPostsCollection = useCallback(\n    () => doGetMaybeFilteredPostsCollection(selectedTagsIds, postsCollection),\n    [postsCollection, selectedTagsIds]\n  );\n\n  const maybeFilteredPostsCollection = useMemo(() => getMaybeFilteredPostsCollection(), [getMaybeFilteredPostsCollection]);\n\n  const computePaginatedElements = useCallback(\n    () => doComputePaginatedElements(selectedFilter, maybeFilteredPostsCollection),\n    [maybeFilteredPostsCollection, selectedFilter]\n  );\n\n  const paginatedElements = useMemo(() => computePaginatedElements(), [computePaginatedElements]);\n  const pagesAmount = usePagination(paginatedElements, elementsPerPage);\n  const currentPage = useMemo(() => getSanitizedCurrentPage(searchParams, pagesAmount, PAGE_KEY), [pagesAmount, searchParams]);\n\n  const paginated = useMemo(\n    () => <PaginatedElements paginatedElements={paginatedElements} elementsPerPage={elementsPerPage} currentPage={currentPage} />,\n    [paginatedElements, elementsPerPage, currentPage]\n  );\n\n  const newSelectedFilter = useRef<MaybeNull<Id>>(null);\n  const newSelectedTagsIds = useRef<MaybeNull<Id[]>>(null);\n  const memorizedPageBeforeFiltering = useRef<MaybeNull<Id>>(null);\n\n  useEffect(() => {\n    if (!selectedFilterSwitch || newSelectedFilter.current === null) return;\n\n    const slice = getPaginatedElementsCurrentSlice(currentPage, elementsPerPage, paginatedElements);\n\n    const keys: ReactElementKey[] = [];\n    for (const element of slice) if (element.key) keys.push(element.key);\n\n    const toSorted = getSortedPostsCollection(newSelectedFilter.current, maybeFilteredPostsCollection);\n\n    const newPageIndex = computeReconciliatedPageIndex(keys, toSorted, elementsPerPage);\n    const q = createURLSearchParams({ [FILTERS_KEY]: newSelectedFilter.current, [PAGE_KEY]: newPageIndex }, searchParams);\n\n    newSelectedFilter.current = null;\n\n    router.replace(q, { scroll: false });\n    setSelectedFilterSwitch(false);\n  }, [selectedFilterSwitch, currentPage, elementsPerPage, maybeFilteredPostsCollection, paginatedElements, router, searchParams]);\n\n  useEffect(() => {\n    if (selectedTagSwitch === ETagsSwitch.OFF || newSelectedTagsIds.current === null) return;\n\n    const slice = getPaginatedElementsCurrentSlice(currentPage, elementsPerPage, paginatedElements);\n\n    const keys: ReactElementKey[] = [];\n    for (const element of slice) if (element.key) keys.push(element.key);\n\n    const toMaybeFiltered = doGetMaybeFilteredPostsCollection(newSelectedTagsIds.current, postsCollection);\n    const toSorted = getSortedPostsCollection(selectedFilter, toMaybeFiltered);\n\n    function handleSelecting(__newSelectedTagsIds: BlogTagId[]) {\n      const newPageIndex = computeReconciliatedPageIndex(keys, toSorted, elementsPerPage);\n\n      const packedTagsIds = packIds(__newSelectedTagsIds);\n      const q = createURLSearchParams({ [TAGS_KEY]: packedTagsIds, [PAGE_KEY]: newPageIndex }, searchParams);\n\n      newSelectedTagsIds.current = null;\n\n      router.replace(q, { scroll: false });\n    }\n\n    function handleUnselecting(__newSelectedTagsIds: BlogTagId[]) {\n      const newPaginatedElements = doComputePaginatedElements(selectedFilter, toMaybeFiltered);\n      const newSlice = getPaginatedElementsCurrentSlice(currentPage, elementsPerPage, newPaginatedElements);\n\n      const newKeys: ReactElementKey[] = [];\n      for (const element of newSlice) if (element.key) newKeys.push(element.key);\n\n      const firstCommonKey: MaybeNull<ReactElementKey> = keys.find((key) => newKeys.includes(key)) ?? null;\n      if (firstCommonKey === null) {\n        handleSelecting(__newSelectedTagsIds);\n        return;\n      }\n\n      const packedTagsIds = packIds(__newSelectedTagsIds);\n      const q = createURLSearchParams({ [TAGS_KEY]: packedTagsIds }, searchParams);\n\n      newSelectedTagsIds.current = null;\n\n      router.replace(q, { scroll: false });\n    }\n\n    function handleClearing(__newSelectedTagsIds: BlogTagId[]) {\n      if (memorizedPageBeforeFiltering.current === null) {\n        handleUnselecting(__newSelectedTagsIds);\n        return;\n      }\n\n      const q = createURLSearchParams({ [PAGE_KEY]: memorizedPageBeforeFiltering.current, [TAGS_KEY]: null }, searchParams);\n\n      router.replace(q, { scroll: false });\n    }\n\n    const handlers = {\n      [ETagsSwitch.UNSELECTING]: handleUnselecting,\n      [ETagsSwitch.SELECTING]: handleSelecting,\n      [ETagsSwitch.CLEARING]: handleClearing\n    } as const;\n\n    handlers[selectedTagSwitch](newSelectedTagsIds.current);\n    setSelectedTagSwitch(ETagsSwitch.OFF);\n  }, [selectedTagSwitch, currentPage, elementsPerPage, paginatedElements, postsCollection, selectedFilter, selectedTagsIds, router, searchParams]);\n\n  useEffect(() => {\n    // eslint-disable-next-line no-magic-numbers\n    if (selectedTagsIds.length !== 0) return;\n    memorizedPageBeforeFiltering.current = getSanitizedCurrentPage(searchParams, pagesAmount, PAGE_KEY);\n  }, [searchParams, selectedTagsIds, pagesAmount]);\n\n  const showTopToolbar = shouldShowTopToolbar(postsCollection);\n  const showBottomToolbar = shouldShowBottomToolbar(pagesAmount);\n\n  return (\n    <section className=\"w-full\">\n      <h1 className=\"mb-2 ltr:text-left rtl:text-right\">{title}</h1>\n      {showTopToolbar && (\n        <SubcategoryRelatedBlogPostsClientToolbar\n          filtersAssoc={BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE}\n          memorizedPageBeforeFiltering={memorizedPageBeforeFiltering}\n          setSelectedFilterSwitch={setSelectedFilterSwitch}\n          setSelectedTagSwitch={setSelectedTagSwitch}\n          newSelectedTagsIds={newSelectedTagsIds}\n          postsAmount={paginatedElements.length}\n          newSelectedFilter={newSelectedFilter}\n          selectedTagsIds={selectedTagsIds}\n          selectedFilter={selectedFilter}\n          currentPage={currentPage}\n          pagesAmount={pagesAmount}\n          tags={tags}\n        />\n      )}\n      {/* {ToDo} https://github.com/Tirraa/dashboard_rtm/issues/126 */}\n      <div className=\"mb-4 flex min-w-full flex-col [&>article:not(:last-of-type)]:mb-6\">{paginated}</div>\n      {showBottomToolbar && (\n        <SubcategoryRelatedBlogPostsClientToolbar\n          filtersAssoc={BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE}\n          memorizedPageBeforeFiltering={memorizedPageBeforeFiltering}\n          setSelectedFilterSwitch={setSelectedFilterSwitch}\n          setSelectedTagSwitch={setSelectedTagSwitch}\n          newSelectedTagsIds={newSelectedTagsIds}\n          postsAmount={paginatedElements.length}\n          newSelectedFilter={newSelectedFilter}\n          selectedTagsIds={selectedTagsIds}\n          selectedFilter={selectedFilter}\n          currentPage={currentPage}\n          pagesAmount={pagesAmount}\n          isBottomWidget\n          tags={tags}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default SubcategoryRelatedBlogPostsClient;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1273",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(22,7): error TS2322: Type '({ params }: BlogSubcategoryPageProps) => Promise<void>' is not assignable to type 'FunctionComponent<BlogSubcategoryPageProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'Promise<AwaitedReactNode>'.\n      Type 'void' is not assignable to type 'AwaitedReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 63
            },
            "start": {
              "column": 104,
              "line": 22
            }
          }
        },
        {
          "id": "1274",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(23,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(23,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(23,33): error TS2493: Tuple type '[]' of length '0' has no element at index '2'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(25,89): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(29,70): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(31,98): error TS2322: Type 'undefined' is not assignable to type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 141,
              "line": 23
            },
            "start": {
              "column": 45,
              "line": 23
            }
          }
        },
        {
          "id": "1275",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidPair",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "1276",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "1277",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "1278",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(28,9): error TS2322: Type 'undefined[]' is not assignable to type 'BlogPostPreviewComponentWithMetadatas[]'.\n  Type 'undefined' is not assignable to type 'BlogPostPreviewComponentWithMetadatas'.\n    Type 'undefined' is not assignable to type 'Pick<BlogPostType, \"language\" | \"tags\" | \"date\" | \"tagsIndexes\" | \"title\" | \"_id\">'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 30
            }
          }
        },
        {
          "id": "1279",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(28,9): error TS2322: Type '{}[]' is not assignable to type 'BlogPostPreviewComponentWithMetadatas[]'.\n  Type '{}' is not assignable to type 'BlogPostPreviewComponentWithMetadatas'.\n    Type '{}' is missing the following properties from type 'Pick<BlogPostType, \"language\" | \"tags\" | \"date\" | \"tagsIndexes\" | \"title\" | \"_id\">': language, tags, date, tagsIndexes, and 2 more.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 20,
              "line": 30
            }
          }
        },
        {
          "id": "1280",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 31
            },
            "start": {
              "column": 48,
              "line": 31
            }
          }
        },
        {
          "id": "1281",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "1282",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 40
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "1283",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 42
            },
            "start": {
              "column": 12,
              "line": 42
            }
          }
        },
        {
          "id": "1284",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 42
            },
            "start": {
              "column": 12,
              "line": 42
            }
          }
        },
        {
          "id": "1285",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 42
            },
            "start": {
              "column": 12,
              "line": 42
            }
          }
        },
        {
          "id": "1286",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 113,
              "line": 45
            },
            "start": {
              "column": 45,
              "line": 45
            }
          }
        },
        {
          "id": "1287",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(50,25): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"blog-testing-category.fake-subcategory.title\" | \"blog-testing-category.fake-subcategory.meta-description\" | \"blog-testing-category._title\" | \"blog-testing-category._meta-description\" | ... 11 more ... | \"patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 50
            },
            "start": {
              "column": 25,
              "line": 50
            }
          }
        },
        {
          "id": "1288",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Server.tsx(52,46): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(iterable?: Iterable<number> | null | undefined): Set<number>', gave the following error.\n    Argument of type 'undefined[]' is not assignable to parameter of type 'Iterable<number>'.\n      The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n        Type 'IteratorResult<undefined, any>' is not assignable to type 'IteratorResult<number, any>'.\n          Type 'IteratorYieldResult<undefined>' is not assignable to type 'IteratorResult<number, any>'.\n            Type 'IteratorYieldResult<undefined>' is not assignable to type 'IteratorYieldResult<number>'.\n              Type 'undefined' is not assignable to type 'number'.\n  Overload 2 of 2, '(values?: readonly number[] | null | undefined): Set<number>', gave the following error.\n    Argument of type 'undefined[]' is not assignable to parameter of type 'readonly number[]'.\n      Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 52
            },
            "start": {
              "column": 55,
              "line": 52
            }
          }
        }
      ],
      "source": "import type { BlogPostPreviewComponentWithMetadatas, BlogCategoriesAndSubcategoriesAssoc, BlogSubcategoryPageProps, BlogTagId } from '@/types/Blog';\nimport type { BlogTag } from '##/config/contentlayer/blog/blogTags';\nimport type { FunctionComponent } from 'react';\n\nimport {\n  getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict,\n  isValidBlogCategoryAndSubcategoryPairInAnyLanguage,\n  blogSubcategoryShouldTriggerNotFound\n} from '@/lib/blog/api';\nimport BlogPostsNotFound from '@/components/ui/blog/BlogPostsNotFound';\nimport { indexedBlogTagOptions } from '##/lib/builders/unifiedImport';\nimport BlogPostPreview from '@/components/ui/blog/BlogPostPreview';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getScopedI18n } from '@/i18n/server';\nimport BlogConfig from '@/config/Blog/server';\nimport { notFound } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\n\nimport SubcategoryRelatedBlogPostsClient from './Client';\n\nconst SubcategoryRelatedBlogPosts: FunctionComponent<BlogSubcategoryPageProps> = async ({ params }) => {\n  const [category, subcategory, language] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[I18nTaxonomy.LANGUAGE]];\n\n  const isValidPair: boolean = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n  if (!isValidPair) notFound();\n\n  const postsCollection: BlogPostPreviewComponentWithMetadatas[] = (\n    await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(category, subcategory, language)\n  ).map((post) => ({\n    blogPostPreviewComp: <BlogPostPreview key={`${post._raw.flattenedPath}-paginated-blog-post`} language={language} post={post} />,\n    tagsIndexes: post.tagsIndexes,\n    language: post.language,\n    title: post.title,\n    tags: post.tags,\n    date: post.date,\n    _id: post._id\n  }));\n\n  if (blogSubcategoryShouldTriggerNotFound(postsCollection)) notFound();\n  // eslint-disable-next-line no-magic-numbers\n  else if (postsCollection.length === 0) return <BlogPostsNotFound />;\n\n  const tags = Array.from(\n    new Set<BlogTag>(postsCollection.reduce((accumulator, currentValue) => accumulator.concat(currentValue.tags), [] as BlogTag[]))\n  );\n\n  const scopedT = await getScopedI18n(i18ns.blogCategories);\n  const narrowedCategoryAndSubcategoryAssoc = `${category}.${subcategory}` as BlogCategoriesAndSubcategoriesAssoc;\n  const title = scopedT(`${narrowedCategoryAndSubcategoryAssoc}.title`);\n\n  const expectedTagsIds = new Set<BlogTagId>(tags.map((tag) => indexedBlogTagOptions[tag]));\n\n  return (\n    <SubcategoryRelatedBlogPostsClient\n      elementsPerPage={BlogConfig.DISPLAYED_BLOG_POSTS_ON_SUBCATEGORY_RELATED_PAGE_PAGINATION_LIMIT}\n      postsCollection={postsCollection}\n      expectedTagsIds={expectedTagsIds}\n      title={title}\n      tags={tags}\n    />\n  );\n};\n\nexport default SubcategoryRelatedBlogPosts;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1289",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(18,7): error TS2322: Type '(props: SubcategoryRelatedBlogPostsClientToolbarProps) => void | Element' is not assignable to type 'FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarProps>'.\n  Type 'void | Element' is not assignable to type 'ReactNode'.\n    Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 75,
              "line": 15
            }
          }
        },
        {
          "id": "1290",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 16
            },
            "start": {
              "column": 18,
              "line": 16
            }
          }
        },
        {
          "id": "1291",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 18
            },
            "start": {
              "column": 62,
              "line": 18
            }
          }
        },
        {
          "id": "1292",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 19
            },
            "start": {
              "column": 66,
              "line": 19
            }
          }
        },
        {
          "id": "1293",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 20
            },
            "start": {
              "column": 65,
              "line": 20
            }
          }
        },
        {
          "id": "1294",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1295",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1296",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 24
            },
            "start": {
              "column": 7,
              "line": 24
            }
          }
        },
        {
          "id": "1297",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 24
            },
            "start": {
              "column": 7,
              "line": 24
            }
          }
        },
        {
          "id": "1298",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(29,7): error TS2322: Type '(props: SubcategoryRelatedBlogPostsClientToolbarProps) => void' is not assignable to type 'FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 127,
              "line": 29
            }
          }
        },
        {
          "id": "1299",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 19,
              "line": 34
            }
          }
        },
        {
          "id": "1300",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(36,12): error TS2307: Cannot find module '' or its corresponding type declarations.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 36
            },
            "start": {
              "column": 12,
              "line": 36
            }
          }
        },
        {
          "id": "1301",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 137,
              "line": 36
            },
            "start": {
              "column": 85,
              "line": 36
            }
          }
        },
        {
          "id": "1302",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 136,
              "line": 36
            },
            "start": {
              "column": 113,
              "line": 36
            }
          }
        },
        {
          "id": "1303",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 37
            },
            "start": {
              "column": 6,
              "line": 37
            }
          }
        },
        {
          "id": "1304",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(39,11): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(39,11): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'MaybeNull<FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarInnerProps>>' is not a valid JSX element type.\n    Type 'null' is not assignable to type 'ElementType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "1305",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(39,11): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(39,11): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'MaybeNull<FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarInnerProps>>' is not a valid JSX element type.\n    Type 'null' is not assignable to type 'ElementType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "1306",
          "mutatorName": "EqualityOperator",
          "replacement": "Component !== null",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(39,11): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(39,11): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'null' is not a valid JSX element type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { SubcategoryRelatedBlogPostsClientToolbarInnerProps } from '@/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { Quantity } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent } from 'react';\n\nimport { useEffect, useState } from 'react';\nimport { cn } from '@/lib/tailwind';\n\nimport shouldShowPaginationWidget from './helpers/functions/shouldShowPaginationWidget';\n\ninterface SubcategoryRelatedBlogPostsClientToolbarProps extends SubcategoryRelatedBlogPostsClientToolbarInnerProps {}\n\nfunction buildPlaceholder(isBottomWidget: boolean, pagesAmount: Quantity) {\n  const margin = 'my-4';\n\n  const bottomWidgetPlaceholder = <div className={cn(margin, 'min-h-[40px]')} />;\n  const topWidgetTwoColsPlaceholder = <div className={cn(margin, 'min-h-[84px]')} />;\n  const topWidgetOneColPlaceholder = <div className={cn(margin, 'min-h-[40px]')} />;\n\n  if (isBottomWidget) return bottomWidgetPlaceholder;\n  // eslint-disable-next-line no-magic-numbers\n  if (shouldShowPaginationWidget(pagesAmount)) return topWidgetTwoColsPlaceholder;\n  return topWidgetOneColPlaceholder;\n}\n\n// https://v3.gatsbyjs.com/docs/mdx/importing-and-using-components/#lazy-loading-components\nconst SubcategoryRelatedBlogPostsClientToolbar: FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarProps> = (props) => {\n  const { isBottomWidget, pagesAmount } = props;\n  const placeholder = buildPlaceholder(Boolean(isBottomWidget), pagesAmount);\n\n  const [Component, setComponent] = useState<MaybeNull<FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarInnerProps>>>(null);\n  useEffect(() => {\n    // eslint-disable-next-line promise/catch-or-return\n    import('@/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner').then((component) => setComponent(() => component.default));\n  }, []);\n  if (Component === null) return placeholder;\n  return <Component {...props} />;\n};\nexport default SubcategoryRelatedBlogPostsClientToolbar;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1307",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner.tsx(20,7): error TS2322: Type '({ memorizedPageBeforeFiltering, setSelectedFilterSwitch, setSelectedTagSwitch, newSelectedTagsIds, newSelectedFilter, selectedTagsIds, isBottomWidget, selectedFilter, filtersAssoc, currentPage, pagesAmount, postsAmount, tags }: SubcategoryRelatedBlogPostsClientToolbarInnerProps) => void' is not assignable to type 'FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarInnerProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 71
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "1308",
          "mutatorName": "BooleanLiteral",
          "replacement": "isBottomWidget",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 39
            },
            "start": {
              "column": 39,
              "line": 39
            }
          }
        },
        {
          "id": "1309",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner.tsx(40,27): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ memorizedPageBeforeFiltering: MutableRefObject<MaybeNull<number>>; newSelectedTagsIds: MutableRefObject<MaybeNull<number[]>>; setSelectedTagSwitch: (s: ETagsSwitch) => unknown; selectedTagsIds: number[]; tags: (\"xylophone\" | ... 2 more ... | \"drums\")[]; }'.\n  Type '{}' is missing the following properties from type '{ memorizedPageBeforeFiltering: MutableRefObject<MaybeNull<number>>; newSelectedTagsIds: MutableRefObject<MaybeNull<number[]>>; setSelectedTagSwitch: (s: ETagsSwitch) => unknown; selectedTagsIds: number[]; tags: (\"xylophone\" | ... 2 more ... | \"drums\")[]; }': memorizedPageBeforeFiltering, newSelectedTagsIds, setSelectedTagSwitch, selectedTagsIds, tags\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 124,
              "line": 40
            },
            "start": {
              "column": 27,
              "line": 40
            }
          }
        },
        {
          "id": "1310",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner.tsx(39,9): error TS2322: Type 'ReactElement<any, string | JSXElementConstructor<any>>[] | string[]' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n  Type 'string[]' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n    Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 9,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "1311",
          "mutatorName": "BooleanLiteral",
          "replacement": "isBottomWidget",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 43
            },
            "start": {
              "column": 24,
              "line": 43
            }
          }
        },
        {
          "id": "1312",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner.tsx(45,9): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ pagesAmount: number; postsAmount: number; currentPage: number; }'.\n  Type '{}' is missing the following properties from type '{ pagesAmount: number; postsAmount: number; currentPage: number; }': pagesAmount, postsAmount, currentPage\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 45
            },
            "start": {
              "column": 9,
              "line": 45
            }
          }
        },
        {
          "id": "1313",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner.tsx(46,9): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ newSelectedFilter: MutableRefObject<MaybeNull<number>>; setSelectedFilterSwitch: (s: boolean) => unknown; filtersAssoc: FiltersAssoc; selectedFilter: number; }'.\n  Type '{}' is missing the following properties from type '{ newSelectedFilter: MutableRefObject<MaybeNull<number>>; setSelectedFilterSwitch: (s: boolean) => unknown; filtersAssoc: FiltersAssoc; selectedFilter: number; }': newSelectedFilter, setSelectedFilterSwitch, filtersAssoc, selectedFilter\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 46
            }
          }
        },
        {
          "id": "1314",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/ToolbarInner.tsx(53,55): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ pagesAmount: number; currentPage: number; }'.\n  Type '{}' is missing the following properties from type '{ pagesAmount: number; currentPage: number; }': pagesAmount, currentPage\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 55,
              "line": 53
            }
          }
        },
        {
          "id": "1315",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "1316",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "1317",
          "mutatorName": "EqualityOperator",
          "replacement": "rightWidgets.length + leftWidgets.length < 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "1318",
          "mutatorName": "EqualityOperator",
          "replacement": "rightWidgets.length + leftWidgets.length > 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "1319",
          "mutatorName": "ArithmeticOperator",
          "replacement": "rightWidgets.length - leftWidgets.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 56
            }
          }
        },
        {
          "id": "1320",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 60
            },
            "start": {
              "column": 21,
              "line": 60
            }
          }
        },
        {
          "id": "1321",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 63
            },
            "start": {
              "column": 60,
              "line": 60
            }
          }
        },
        {
          "id": "1322",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 24,
              "line": 62
            }
          }
        },
        {
          "id": "1323",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 24,
              "line": 62
            }
          }
        },
        {
          "id": "1324",
          "mutatorName": "LogicalOperator",
          "replacement": "isBottomWidget && leftWidgets.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 24,
              "line": 62
            }
          }
        },
        {
          "id": "1325",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 42,
              "line": 62
            }
          }
        },
        {
          "id": "1326",
          "mutatorName": "EqualityOperator",
          "replacement": "leftWidgets.length < 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 42,
              "line": 62
            }
          }
        },
        {
          "id": "1327",
          "mutatorName": "EqualityOperator",
          "replacement": "leftWidgets.length > 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 42,
              "line": 62
            }
          }
        },
        {
          "id": "1328",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 66
            },
            "start": {
              "column": 8,
              "line": 66
            }
          }
        },
        {
          "id": "1329",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 66
            },
            "start": {
              "column": 8,
              "line": 66
            }
          }
        },
        {
          "id": "1330",
          "mutatorName": "LogicalOperator",
          "replacement": "leftWidgets.length > 0 || leftWidgets",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 66
            },
            "start": {
              "column": 8,
              "line": 66
            }
          }
        },
        {
          "id": "1331",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 66
            },
            "start": {
              "column": 8,
              "line": 66
            }
          }
        },
        {
          "id": "1332",
          "mutatorName": "EqualityOperator",
          "replacement": "leftWidgets.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 66
            },
            "start": {
              "column": 8,
              "line": 66
            }
          }
        },
        {
          "id": "1333",
          "mutatorName": "EqualityOperator",
          "replacement": "leftWidgets.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 66
            },
            "start": {
              "column": 8,
              "line": 66
            }
          }
        },
        {
          "id": "1334",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 68
            },
            "start": {
              "column": 8,
              "line": 68
            }
          }
        },
        {
          "id": "1335",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 68
            },
            "start": {
              "column": 8,
              "line": 68
            }
          }
        },
        {
          "id": "1336",
          "mutatorName": "LogicalOperator",
          "replacement": "rightWidgets.length > 0 || <div className=\"flex flex-col\">{rightWidgets}</div>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 68
            },
            "start": {
              "column": 8,
              "line": 68
            }
          }
        },
        {
          "id": "1337",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 68
            },
            "start": {
              "column": 8,
              "line": 68
            }
          }
        },
        {
          "id": "1338",
          "mutatorName": "EqualityOperator",
          "replacement": "rightWidgets.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 68
            },
            "start": {
              "column": 8,
              "line": 68
            }
          }
        },
        {
          "id": "1339",
          "mutatorName": "EqualityOperator",
          "replacement": "rightWidgets.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 68
            },
            "start": {
              "column": 8,
              "line": 68
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent, ReactElement } from 'react';\nimport type { Quantity } from '@rtm/shared-types/Numbers';\n\nimport { useSearchParams, usePathname } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\n\nimport type { FiltersSelectWidgetProps } from '../FiltersSelectWidget';\nimport type { TagsCommandWidgetProps } from '../TagsCommandWidget';\nimport type { PaginationWidgetProps } from '../PaginationWidget';\n\nimport { buildBottomRightWidgets, buildTopRightWidgets, buildTopLeftWidgets } from './helpers/functions/toolbarInner';\n\nexport interface SubcategoryRelatedBlogPostsClientToolbarInnerProps extends TagsCommandWidgetProps, PaginationWidgetProps, FiltersSelectWidgetProps {\n  isBottomWidget?: boolean;\n  postsAmount: Quantity;\n}\n\nconst SubcategoryRelatedBlogPostsClientToolbarInner: FunctionComponent<SubcategoryRelatedBlogPostsClientToolbarInnerProps> = ({\n  memorizedPageBeforeFiltering,\n  setSelectedFilterSwitch,\n  setSelectedTagSwitch,\n  newSelectedTagsIds,\n  newSelectedFilter,\n  selectedTagsIds,\n  isBottomWidget,\n  selectedFilter,\n  filtersAssoc,\n\n  currentPage,\n  pagesAmount,\n  postsAmount,\n  tags\n}) => {\n  const searchParams = useSearchParams();\n  const pathname = usePathname();\n\n  const leftWidgets: ReactElement[] = !isBottomWidget\n    ? buildTopLeftWidgets({ memorizedPageBeforeFiltering, setSelectedTagSwitch, newSelectedTagsIds, selectedTagsIds, tags })\n    : [];\n\n  const rightWidgets = !isBottomWidget\n    ? buildTopRightWidgets(\n        { pagesAmount, postsAmount, currentPage },\n        {\n          setSelectedFilterSwitch,\n          newSelectedFilter,\n          selectedFilter,\n          filtersAssoc\n        }\n      )\n    : buildBottomRightWidgets(pathname, searchParams, { pagesAmount, currentPage });\n\n  // eslint-disable-next-line no-magic-numbers\n  if (rightWidgets.length + leftWidgets.length <= 0) return null;\n\n  return (\n    <nav\n      className={cn('my-4 flex items-end justify-between', {\n        // eslint-disable-next-line no-magic-numbers\n        'justify-end': isBottomWidget || leftWidgets.length <= 0\n      })}\n    >\n      {/* eslint-disable-next-line no-magic-numbers */}\n      {leftWidgets.length > 0 && leftWidgets}\n      {/* eslint-disable-next-line no-magic-numbers */}\n      {rightWidgets.length > 0 && <div className=\"flex flex-col\">{rightWidgets}</div>}\n    </nav>\n  );\n};\n\nexport default SubcategoryRelatedBlogPostsClientToolbarInner;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/shouldShowPaginationWidget.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1340",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowPaginationWidget.test.ts(8,39): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowPaginationWidget.test.ts(10,39): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowPaginationWidget.test.ts(12,39): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(145,59): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(152,7): error TS2322: Type 'undefined' is not assignable to type 'boolean'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(172,59): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(178,7): error TS2322: Type 'undefined' is not assignable to type 'boolean'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Toolbar.tsx(24,34): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 4
            },
            "start": {
              "column": 36,
              "line": 4
            }
          }
        },
        {
          "id": "1341",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["115", "116", "119", "120", "121", "465"],
          "location": {
            "end": {
              "column": 87,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        },
        {
          "id": "1342",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `buildBottomRightWidgets > should match snapshot 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["115", "116", "119", "120", "121", "465"],
          "location": {
            "end": {
              "column": 87,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        },
        {
          "id": "1343",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount >= 1",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["115", "116", "119", "120", "121", "465"],
          "location": {
            "end": {
              "column": 87,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        },
        {
          "id": "1344",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount <= 1",
          "statusReason": "Snapshot `buildBottomRightWidgets > should match snapshot 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["115", "116", "119", "120", "121", "465"],
          "location": {
            "end": {
              "column": 87,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        }
      ],
      "source": "import type { Quantity } from '@rtm/shared-types/Numbers';\n\n// eslint-disable-next-line no-magic-numbers\nconst shouldShowPaginationWidget = (pagesAmount: Quantity): boolean => pagesAmount > 1;\n\nexport default shouldShowPaginationWidget;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/shouldShowTagsCommandWidget.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1345",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowTagsCommandWidget.test.ts(8,40): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowTagsCommandWidget.test.ts(10,40): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowTagsCommandWidget.test.ts(12,40): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(112,61): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 4
            },
            "start": {
              "column": 37,
              "line": 4
            }
          }
        },
        {
          "id": "1346",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["117"],
          "coveredBy": ["117", "118", "462"],
          "location": {
            "end": {
              "column": 86,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        },
        {
          "id": "1347",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [] to strictly equal [ { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["118"],
          "coveredBy": ["117", "118", "462"],
          "location": {
            "end": {
              "column": 86,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        },
        {
          "id": "1348",
          "mutatorName": "EqualityOperator",
          "replacement": "tagsAmount >= 1",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["117"],
          "coveredBy": ["117", "118", "462"],
          "location": {
            "end": {
              "column": 86,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        },
        {
          "id": "1349",
          "mutatorName": "EqualityOperator",
          "replacement": "tagsAmount <= 1",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["117"],
          "coveredBy": ["117", "118", "462"],
          "location": {
            "end": {
              "column": 86,
              "line": 4
            },
            "start": {
              "column": 72,
              "line": 4
            }
          }
        }
      ],
      "source": "import type { Quantity } from '@rtm/shared-types/Numbers';\n\n// eslint-disable-next-line no-magic-numbers\nconst shouldShowTagsCommandWidget = (tagsAmount: Quantity): boolean => tagsAmount > 1;\n\nexport default shouldShowTagsCommandWidget;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1350",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(146,65): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(159,7): error TS2322: Type 'undefined' is not assignable to type 'boolean'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 21
            },
            "start": {
              "column": 39,
              "line": 21
            }
          }
        },
        {
          "id": "1351",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 90,
              "line": 21
            },
            "start": {
              "column": 75,
              "line": 21
            }
          }
        },
        {
          "id": "1352",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [] to strictly equal [ { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["120"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 90,
              "line": 21
            },
            "start": {
              "column": 75,
              "line": 21
            }
          }
        },
        {
          "id": "1353",
          "mutatorName": "EqualityOperator",
          "replacement": "postsAmount >= 1",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 90,
              "line": 21
            },
            "start": {
              "column": 75,
              "line": 21
            }
          }
        },
        {
          "id": "1354",
          "mutatorName": "EqualityOperator",
          "replacement": "postsAmount <= 1",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 90,
              "line": 21
            },
            "start": {
              "column": 75,
              "line": 21
            }
          }
        },
        {
          "id": "1355",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(82,5): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(90,45): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 33
            },
            "start": {
              "column": 26,
              "line": 23
            }
          }
        },
        {
          "id": "1356",
          "mutatorName": "BooleanLiteral",
          "replacement": "showPaginationWidget",
          "statusReason": "Snapshot `buildBottomRightWidgets > should match snapshot 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 24,
              "line": 31
            },
            "start": {
              "column": 3,
              "line": 31
            }
          }
        },
        {
          "id": "1357",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `buildBottomRightWidgets > should match snapshot 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["116"],
          "location": {
            "end": {
              "column": 133,
              "line": 33
            },
            "start": {
              "column": 81,
              "line": 33
            }
          }
        },
        {
          "id": "1358",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `buildBottomRightWidgets > should match snapshot 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["116"],
          "location": {
            "end": {
              "column": 115,
              "line": 33
            },
            "start": {
              "column": 109,
              "line": 33
            }
          }
        },
        {
          "id": "1359",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(48,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 2,
              "line": 77
            },
            "start": {
              "column": 19,
              "line": 48
            }
          }
        },
        {
          "id": "1360",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(49,37): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 38,
              "line": 49
            },
            "start": {
              "column": 36,
              "line": 49
            }
          }
        },
        {
          "id": "1361",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 49,
              "line": 51
            },
            "start": {
              "column": 7,
              "line": 51
            }
          }
        },
        {
          "id": "1362",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [] to strictly equal [ { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["120"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 49,
              "line": 51
            },
            "start": {
              "column": 7,
              "line": 51
            }
          }
        },
        {
          "id": "1363",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["120"],
          "coveredBy": ["120", "121"],
          "location": {
            "end": {
              "column": 4,
              "line": 63
            },
            "start": {
              "column": 51,
              "line": 51
            }
          }
        },
        {
          "id": "1364",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 49,
              "line": 65
            },
            "start": {
              "column": 7,
              "line": 65
            }
          }
        },
        {
          "id": "1365",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ { …(9) } ] to strictly equal [ { …(9) }, { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["121"],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 49,
              "line": 65
            },
            "start": {
              "column": 7,
              "line": 65
            }
          }
        },
        {
          "id": "1366",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [ { …(9) } ] to strictly equal [ { …(9) }, { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["121"],
          "coveredBy": ["121"],
          "location": {
            "end": {
              "column": 4,
              "line": 74
            },
            "start": {
              "column": 51,
              "line": 65
            }
          }
        },
        {
          "id": "1367",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(87,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 2,
              "line": 103
            },
            "start": {
              "column": 19,
              "line": 87
            }
          }
        },
        {
          "id": "1368",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(88,37): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 38,
              "line": 88
            },
            "start": {
              "column": 36,
              "line": 88
            }
          }
        },
        {
          "id": "1369",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Snapshot `buildBottomRightWidgets > should match snapshot 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 30,
              "line": 89
            },
            "start": {
              "column": 26,
              "line": 89
            }
          }
        },
        {
          "id": "1370",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(100,27): error TS2345: Argument of type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n  Type 'null' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 29,
              "line": 100
            },
            "start": {
              "column": 7,
              "line": 100
            }
          }
        },
        {
          "id": "1371",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(100,28): error TS2345: Argument of type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n  Type 'null' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 29,
              "line": 100
            },
            "start": {
              "column": 7,
              "line": 100
            }
          }
        },
        {
          "id": "1372",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeDropdown === null",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(100,45): error TS2345: Argument of type 'null' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 29,
              "line": 100
            },
            "start": {
              "column": 7,
              "line": 100
            }
          }
        },
        {
          "id": "1373",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(111,5): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["117", "118"],
          "location": {
            "end": {
              "column": 2,
              "line": 130
            },
            "start": {
              "column": 20,
              "line": 111
            }
          }
        },
        {
          "id": "1374",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(114,37): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["117", "118"],
          "location": {
            "end": {
              "column": 38,
              "line": 114
            },
            "start": {
              "column": 36,
              "line": 114
            }
          }
        },
        {
          "id": "1375",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(9) } ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["117"],
          "coveredBy": ["117", "118"],
          "location": {
            "end": {
              "column": 28,
              "line": 116
            },
            "start": {
              "column": 7,
              "line": 116
            }
          }
        },
        {
          "id": "1376",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [] to strictly equal [ { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["118"],
          "coveredBy": ["117", "118"],
          "location": {
            "end": {
              "column": 28,
              "line": 116
            },
            "start": {
              "column": 7,
              "line": 116
            }
          }
        },
        {
          "id": "1377",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(9) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["118"],
          "coveredBy": ["118"],
          "location": {
            "end": {
              "column": 4,
              "line": 127
            },
            "start": {
              "column": 30,
              "line": 116
            }
          }
        },
        {
          "id": "1378",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(144,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 2,
              "line": 162
            },
            "start": {
              "column": 19,
              "line": 144
            }
          }
        },
        {
          "id": "1379",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(149,5): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ showPaginationWidget: boolean; pagesAmount: number; currentPage: number; }'.\n  Type '{}' is missing the following properties from type '{ showPaginationWidget: boolean; pagesAmount: number; currentPage: number; }': showPaginationWidget, pagesAmount, currentPage\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 6,
              "line": 153
            },
            "start": {
              "column": 5,
              "line": 149
            }
          }
        },
        {
          "id": "1380",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(154,5): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ newSelectedFilter: MutableRefObject<MaybeNull<number>>; setSelectedFilterSwitch: (s: boolean) => unknown; showFiltersSelectWidget: boolean; filtersAssoc: FiltersAssoc; selectedFilter: number; }'.\n  Type '{}' is missing the following properties from type '{ newSelectedFilter: MutableRefObject<MaybeNull<number>>; setSelectedFilterSwitch: (s: boolean) => unknown; showFiltersSelectWidget: boolean; filtersAssoc: FiltersAssoc; selectedFilter: number; }': newSelectedFilter, setSelectedFilterSwitch, showFiltersSelectWidget, filtersAssoc, selectedFilter\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["119", "120", "121"],
          "location": {
            "end": {
              "column": 6,
              "line": 160
            },
            "start": {
              "column": 5,
              "line": 154
            }
          }
        },
        {
          "id": "1381",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(171,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 2,
              "line": 183
            },
            "start": {
              "column": 19,
              "line": 171
            }
          }
        },
        {
          "id": "1382",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(175,5): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ showPaginationWidget: boolean; pagesAmount: number; currentPage: number; }'.\n  Type '{}' is missing the following properties from type '{ showPaginationWidget: boolean; pagesAmount: number; currentPage: number; }': showPaginationWidget, pagesAmount, currentPage\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116"],
          "location": {
            "end": {
              "column": 6,
              "line": 179
            },
            "start": {
              "column": 5,
              "line": 175
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { Quantity, Count, Id } from '@rtm/shared-types/Numbers';\nimport type { BlogTag } from '##/config/contentlayer/blog/blogTags';\nimport type { MutableRefObject, ReactElement } from 'react';\nimport type { FiltersAssoc } from '@/config/Blog/client';\nimport type { AppPath } from '@rtm/shared-types/Next';\nimport type { BlogTagId } from '@/types/Blog';\n\nimport { PAGE_KEY } from '@/components/ui/helpers/PaginatedElements/constants';\n\nimport type { ETagsSwitch } from '../enums';\n\nimport { buildDropdown } from '../../../helpers/functions/paginationWidget';\nimport shouldShowTagsCommandWidget from './shouldShowTagsCommandWidget';\nimport shouldShowPaginationWidget from './shouldShowPaginationWidget';\nimport FiltersSelectWidget from '../../../FiltersSelectWidget';\nimport TagsCommandWidget from '../../../TagsCommandWidget';\nimport PaginationWidget from '../../../PaginationWidget';\n\n// eslint-disable-next-line no-magic-numbers\nconst shouldShowFiltersSelectWidget = (postsAmount: Quantity): boolean => postsAmount > 1;\n\nconst getMaybeDropdown = (\n  showPaginationWidget: boolean,\n  pagesAmount: Quantity,\n  currentPage: Count,\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  isBottomWidget?: boolean\n): MaybeNull<ReactElement> =>\n  !showPaginationWidget\n    ? null\n    : buildDropdown(pagesAmount, currentPage, pathname, searchParams, PAGE_KEY, { dropdownContentClassName: 'z-20', isBottomWidget });\n\nfunction buildWidgetsForTopRight(\n  paginationWidgetProps: {\n    showPaginationWidget: boolean;\n    pagesAmount: Quantity;\n    currentPage: Count;\n  },\n  filtersWidgetProps: {\n    newSelectedFilter: MutableRefObject<MaybeNull<Id>>;\n    setSelectedFilterSwitch: (s: boolean) => unknown;\n    showFiltersSelectWidget: boolean;\n    filtersAssoc: FiltersAssoc;\n    selectedFilter: Id;\n  }\n): ReactElement[] {\n  const elements: ReactElement[] = [];\n\n  if (filtersWidgetProps.showFiltersSelectWidget) {\n    elements.push(\n      <FiltersSelectWidget\n        setSelectedFilterSwitch={filtersWidgetProps.setSelectedFilterSwitch}\n        newSelectedFilter={filtersWidgetProps.newSelectedFilter}\n        selectedFilter={filtersWidgetProps.selectedFilter}\n        filtersAssoc={filtersWidgetProps.filtersAssoc}\n        triggerClassName=\"z-20 mb-1 self-end\"\n        selectContentClassName=\"z-20\"\n        key=\"filters-widget\"\n      />\n    );\n  }\n\n  if (paginationWidgetProps.showPaginationWidget) {\n    elements.push(\n      <PaginationWidget\n        pagesAmount={paginationWidgetProps.pagesAmount}\n        currentPage={paginationWidgetProps.currentPage}\n        className=\"w-full justify-end\"\n        key=\"pagination-widget\"\n      />\n    );\n  }\n\n  return elements;\n}\n\nfunction buildWidgetsForBottomRight(\n  paginationWidgetProps: {\n    showPaginationWidget: boolean;\n    pagesAmount: Quantity;\n    currentPage: Count;\n  },\n  pathname: AppPath,\n  searchParams: URLSearchParams\n): ReactElement[] {\n  const elements: ReactElement[] = [];\n  const isBottomWidget = true;\n\n  const maybeDropdown = getMaybeDropdown(\n    paginationWidgetProps.showPaginationWidget,\n    paginationWidgetProps.pagesAmount,\n    paginationWidgetProps.currentPage,\n    pathname,\n    searchParams,\n    isBottomWidget\n  );\n\n  if (maybeDropdown !== null) elements.push(maybeDropdown);\n\n  return elements;\n}\n\nexport function buildTopLeftWidgets(tagsCommandWidgetProps: {\n  memorizedPageBeforeFiltering: MutableRefObject<MaybeNull<Id>>;\n  newSelectedTagsIds: MutableRefObject<MaybeNull<Id[]>>;\n  setSelectedTagSwitch: (s: ETagsSwitch) => unknown;\n  selectedTagsIds: BlogTagId[];\n  tags: BlogTag[];\n}): ReactElement[] {\n  const showTagsCommandWidget = shouldShowTagsCommandWidget(tagsCommandWidgetProps.tags.length);\n\n  const elements: ReactElement[] = [];\n\n  if (showTagsCommandWidget) {\n    elements.push(\n      <TagsCommandWidget\n        memorizedPageBeforeFiltering={tagsCommandWidgetProps.memorizedPageBeforeFiltering}\n        setSelectedTagSwitch={tagsCommandWidgetProps.setSelectedTagSwitch}\n        newSelectedTagsIds={tagsCommandWidgetProps.newSelectedTagsIds}\n        selectedTagsIds={tagsCommandWidgetProps.selectedTagsIds}\n        tags={tagsCommandWidgetProps.tags}\n        key=\"tags-filter-widget\"\n      />\n    );\n  }\n\n  return elements;\n}\n\nexport function buildTopRightWidgets(\n  paginationWidgetProps: {\n    pagesAmount: Quantity;\n    postsAmount: Quantity;\n    currentPage: Count;\n  },\n  filtersWidgetProps: {\n    newSelectedFilter: MutableRefObject<MaybeNull<Id>>;\n    setSelectedFilterSwitch: (s: boolean) => unknown;\n    filtersAssoc: FiltersAssoc;\n    selectedFilter: Id;\n  }\n): ReactElement[] {\n  const showPaginationWidget = shouldShowPaginationWidget(paginationWidgetProps.pagesAmount);\n  const showFiltersSelectWidget = shouldShowFiltersSelectWidget(paginationWidgetProps.postsAmount);\n\n  return buildWidgetsForTopRight(\n    {\n      pagesAmount: paginationWidgetProps.pagesAmount,\n      currentPage: paginationWidgetProps.currentPage,\n      showPaginationWidget\n    },\n    {\n      setSelectedFilterSwitch: filtersWidgetProps.setSelectedFilterSwitch,\n      newSelectedFilter: filtersWidgetProps.newSelectedFilter,\n      selectedFilter: filtersWidgetProps.selectedFilter,\n      filtersAssoc: filtersWidgetProps.filtersAssoc,\n      showFiltersSelectWidget\n    }\n  );\n}\n\nexport function buildBottomRightWidgets(\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  paginationWidgetProps: {\n    pagesAmount: Quantity;\n    currentPage: Count;\n  }\n): ReactElement[] {\n  const showPaginationWidget = shouldShowPaginationWidget(paginationWidgetProps.pagesAmount);\n\n  return buildWidgetsForBottomRight(\n    {\n      pagesAmount: paginationWidgetProps.pagesAmount,\n      currentPage: paginationWidgetProps.currentPage,\n      showPaginationWidget\n    },\n    pathname,\n    searchParams\n  );\n}\n"
    },
    "src/components/pages/blog/TagsCommandWidget.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1383",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 509,
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 31
            },
            "start": {
              "column": 23,
              "line": 31
            }
          }
        },
        {
          "id": "1384",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(33,7): error TS2322: Type '({ memorizedPageBeforeFiltering, setSelectedTagSwitch, newSelectedTagsIds, selectedTagsIds, tags }: TagsCommandWidgetProps) => void' is not assignable to type 'FunctionComponent<TagsCommandWidgetProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 158
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "1385",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 43
            },
            "start": {
              "column": 53,
              "line": 43
            }
          }
        },
        {
          "id": "1386",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(46,36): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 46
            },
            "start": {
              "column": 36,
              "line": 46
            }
          }
        },
        {
          "id": "1387",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(47,33): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 47
            },
            "start": {
              "column": 33,
              "line": 47
            }
          }
        },
        {
          "id": "1388",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(48,32): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 48
            },
            "start": {
              "column": 32,
              "line": 48
            }
          }
        },
        {
          "id": "1389",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 9,
              "line": 82
            },
            "start": {
              "column": 5,
              "line": 51
            }
          }
        },
        {
          "id": "1390",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(120,27): error TS2322: Type 'void[]' is not assignable to type 'ReactNode'.\n  Type 'void[]' is not assignable to type 'Iterable<ReactNode>'.\n    The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n      Type 'IteratorResult<void, any>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n        Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n          Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorYieldResult<ReactNode>'.\n            Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 82
            },
            "start": {
              "column": 25,
              "line": 52
            }
          }
        },
        {
          "id": "1391",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(53,33): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 53
            },
            "start": {
              "column": 33,
              "line": 53
            }
          }
        },
        {
          "id": "1392",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 67
            },
            "start": {
              "column": 32,
              "line": 57
            }
          }
        },
        {
          "id": "1393",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 58
            },
            "start": {
              "column": 15,
              "line": 58
            }
          }
        },
        {
          "id": "1394",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(61,17): error TS18047: 'newSelectedTagsIds.current' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 58
            },
            "start": {
              "column": 15,
              "line": 58
            }
          }
        },
        {
          "id": "1395",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 63
            },
            "start": {
              "column": 27,
              "line": 58
            }
          }
        },
        {
          "id": "1396",
          "mutatorName": "MethodExpression",
          "replacement": "selectedTagsIds",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 59
            },
            "start": {
              "column": 42,
              "line": 59
            }
          }
        },
        {
          "id": "1397",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 59
            },
            "start": {
              "column": 65,
              "line": 59
            }
          }
        },
        {
          "id": "1398",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 59
            },
            "start": {
              "column": 73,
              "line": 59
            }
          }
        },
        {
          "id": "1399",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 59
            },
            "start": {
              "column": 73,
              "line": 59
            }
          }
        },
        {
          "id": "1400",
          "mutatorName": "EqualityOperator",
          "replacement": "id === tagId",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 59
            },
            "start": {
              "column": 73,
              "line": 59
            }
          }
        },
        {
          "id": "1401",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 61
            },
            "start": {
              "column": 17,
              "line": 61
            }
          }
        },
        {
          "id": "1402",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 61
            },
            "start": {
              "column": 17,
              "line": 61
            }
          }
        },
        {
          "id": "1403",
          "mutatorName": "EqualityOperator",
          "replacement": "newSelectedTagsIds.current.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 61
            },
            "start": {
              "column": 17,
              "line": 61
            }
          }
        },
        {
          "id": "1404",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 66
            },
            "start": {
              "column": 18,
              "line": 63
            }
          }
        },
        {
          "id": "1405",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 64
            },
            "start": {
              "column": 42,
              "line": 64
            }
          }
        },
        {
          "id": "1406",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 70
            },
            "start": {
              "column": 34,
              "line": 70
            }
          }
        },
        {
          "id": "1407",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 70
            },
            "start": {
              "column": 81,
              "line": 70
            }
          }
        },
        {
          "id": "1408",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 73
            },
            "start": {
              "column": 17,
              "line": 73
            }
          }
        },
        {
          "id": "1409",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 74
            },
            "start": {
              "column": 30,
              "line": 74
            }
          }
        },
        {
          "id": "1410",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 74
            },
            "start": {
              "column": 69,
              "line": 74
            }
          }
        },
        {
          "id": "1411",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 77
            },
            "start": {
              "column": 40,
              "line": 77
            }
          }
        },
        {
          "id": "1412",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 83
            },
            "start": {
              "column": 5,
              "line": 83
            }
          }
        },
        {
          "id": "1413",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 88
            },
            "start": {
              "column": 19,
              "line": 86
            }
          }
        },
        {
          "id": "1414",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 88
            },
            "start": {
              "column": 6,
              "line": 88
            }
          }
        },
        {
          "id": "1415",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 97
            },
            "start": {
              "column": 19,
              "line": 90
            }
          }
        },
        {
          "id": "1416",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 95
            },
            "start": {
              "column": 78,
              "line": 91
            }
          }
        },
        {
          "id": "1417",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 93
            },
            "start": {
              "column": 11,
              "line": 93
            }
          }
        },
        {
          "id": "1418",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 93
            },
            "start": {
              "column": 11,
              "line": 93
            }
          }
        },
        {
          "id": "1419",
          "mutatorName": "LogicalOperator",
          "replacement": "isOpenedRef.current && selectedTagsIds.length === 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 93
            },
            "start": {
              "column": 11,
              "line": 93
            }
          }
        },
        {
          "id": "1420",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 93
            },
            "start": {
              "column": 34,
              "line": 93
            }
          }
        },
        {
          "id": "1421",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagsIds.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 93
            },
            "start": {
              "column": 34,
              "line": 93
            }
          }
        },
        {
          "id": "1422",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 97
            },
            "start": {
              "column": 6,
              "line": 97
            }
          }
        },
        {
          "id": "1423",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 119
            },
            "start": {
              "column": 27,
              "line": 116
            }
          }
        },
        {
          "id": "1424",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/TagsCommandWidget.tsx(117,43): error TS2322: Type 'string' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 117
            },
            "start": {
              "column": 42,
              "line": 117
            }
          }
        },
        {
          "id": "1425",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 129
            },
            "start": {
              "column": 28,
              "line": 129
            }
          }
        },
        {
          "id": "1426",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 103,
              "line": 129
            },
            "start": {
              "column": 99,
              "line": 129
            }
          }
        },
        {
          "id": "1427",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 135
            },
            "start": {
              "column": 65,
              "line": 132
            }
          }
        },
        {
          "id": "1428",
          "mutatorName": "BooleanLiteral",
          "replacement": "isOpened",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 133
            },
            "start": {
              "column": 51,
              "line": 133
            }
          }
        },
        {
          "id": "1429",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 138
            },
            "start": {
              "column": 27,
              "line": 138
            }
          }
        },
        {
          "id": "1430",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 138
            },
            "start": {
              "column": 90,
              "line": 138
            }
          }
        },
        {
          "id": "1431",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 142
            },
            "start": {
              "column": 12,
              "line": 142
            }
          }
        },
        {
          "id": "1432",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 142
            },
            "start": {
              "column": 12,
              "line": 142
            }
          }
        },
        {
          "id": "1433",
          "mutatorName": "LogicalOperator",
          "replacement": "selectedTagsIds.length > 0 || activeFiltersIndicator",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 142
            },
            "start": {
              "column": 12,
              "line": 142
            }
          }
        },
        {
          "id": "1434",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 142
            },
            "start": {
              "column": 12,
              "line": 142
            }
          }
        },
        {
          "id": "1435",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagsIds.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 142
            },
            "start": {
              "column": 12,
              "line": 142
            }
          }
        },
        {
          "id": "1436",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagsIds.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 142
            },
            "start": {
              "column": 12,
              "line": 142
            }
          }
        },
        {
          "id": "1437",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 152
            },
            "start": {
              "column": 14,
              "line": 152
            }
          }
        },
        {
          "id": "1438",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 152
            },
            "start": {
              "column": 14,
              "line": 152
            }
          }
        },
        {
          "id": "1439",
          "mutatorName": "LogicalOperator",
          "replacement": "selectedTagsIds.length > 0 || clearFiltersBtn",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 152
            },
            "start": {
              "column": 14,
              "line": 152
            }
          }
        },
        {
          "id": "1440",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 152
            },
            "start": {
              "column": 14,
              "line": 152
            }
          }
        },
        {
          "id": "1441",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagsIds.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 152
            },
            "start": {
              "column": 14,
              "line": 152
            }
          }
        },
        {
          "id": "1442",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagsIds.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 152
            },
            "start": {
              "column": 14,
              "line": 152
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { BlogTag } from '##/config/contentlayer/blog/blogTags';\nimport type { FunctionComponent, MutableRefObject } from 'react';\nimport type { Id } from '@rtm/shared-types/Numbers';\nimport type { BlogTagId } from '@/types/Blog';\n\nimport { CommandSeparator, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, Command } from '@/components/ui/Command';\nimport { PopoverTrigger, PopoverContent, Popover } from '@/components/ui/Popover';\nimport { indexedBlogTagOptions } from '##/lib/builders/unifiedImport';\nimport { PlusCircledIcon, CheckIcon } from '@radix-ui/react-icons';\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { Separator } from '@/components/ui/Separator';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { useSearchParams } from 'next/navigation';\nimport { Badge } from '@/components/ui/Badge';\nimport { capitalize } from '@/lib/str';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nimport { ETagsSwitch } from './SubcategoryRelatedBlogPosts/helpers/enums';\n\nexport interface TagsCommandWidgetProps {\n  memorizedPageBeforeFiltering: MutableRefObject<MaybeNull<Id>>;\n  newSelectedTagsIds: MutableRefObject<MaybeNull<Id[]>>;\n  setSelectedTagSwitch: (s: ETagsSwitch) => unknown;\n  selectedTagsIds: BlogTagId[];\n  tags: BlogTag[];\n}\n\nconst classNameBase = 'flex h-10 items-center rounded-md px-2 py-4';\n\nconst TagsCommandWidget: FunctionComponent<TagsCommandWidgetProps> = ({\n  memorizedPageBeforeFiltering,\n  setSelectedTagSwitch,\n  newSelectedTagsIds,\n  selectedTagsIds,\n  tags\n}) => {\n  const globalT = getClientSideI18n();\n  const searchParams = useSearchParams();\n\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const isOpenedRef = useRef<boolean>(isOpened);\n\n  const title = capitalize(globalT(`${i18ns.vocab}.tags`));\n  const noResultFound = globalT(`${i18ns.blogTagsFilters}.no-result-found`);\n  const clearFilters = globalT(`${i18ns.blogTagsFilters}.clear-filters`);\n\n  const buildCommandItems = useCallback(\n    () =>\n      tags.map((tag) => {\n        const tagName = globalT(`${i18ns.blogTags}.${tag}`);\n        const tagId = indexedBlogTagOptions[tag];\n        const isSelected = selectedTagsIds.includes(tagId);\n\n        const onSelect = () => {\n          if (isSelected) {\n            newSelectedTagsIds.current = selectedTagsIds.filter((id) => id !== tagId);\n            // eslint-disable-next-line no-magic-numbers\n            if (newSelectedTagsIds.current.length === 0) setSelectedTagSwitch(ETagsSwitch.CLEARING);\n            else setSelectedTagSwitch(ETagsSwitch.UNSELECTING);\n          } else {\n            newSelectedTagsIds.current = [...selectedTagsIds, tagId];\n            setSelectedTagSwitch(ETagsSwitch.SELECTING);\n          }\n        };\n\n        return (\n          <CommandItem onSelect={() => onSelect()} className=\"h-12 lg:h-8\" key={`filter-${tag}`}>\n            <div\n              className={cn(\n                'flex h-4 w-4 items-center justify-center rounded-sm border border-primary ltr:mr-2 rtl:ml-2',\n                isSelected ? 'bg-primary text-primary-foreground' : '[&_svg]:invisible'\n              )}\n            >\n              <CheckIcon className={cn('h-4 w-4')} />\n            </div>\n            <span>{tagName}</span>\n          </CommandItem>\n        );\n      }),\n    [globalT, selectedTagsIds, tags, setSelectedTagSwitch, newSelectedTagsIds]\n  );\n\n  useEffect(() => {\n    isOpenedRef.current = isOpened;\n  }, [isOpened]);\n\n  useEffect(() => {\n    function killswitchMemorizedPageBeforeFilteringOnPaginationWidgetClick() {\n      // eslint-disable-next-line no-magic-numbers\n      if (isOpenedRef.current || selectedTagsIds.length === 0) return;\n      memorizedPageBeforeFiltering.current = null;\n    }\n    killswitchMemorizedPageBeforeFilteringOnPaginationWidgetClick();\n  }, [searchParams, selectedTagsIds, memorizedPageBeforeFiltering]);\n\n  const activeFiltersIndicator = (\n    <>\n      <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\n      <Badge className=\"rounded-sm px-1 font-normal lg:hidden\" variant=\"secondary\">\n        {selectedTagsIds.length}\n      </Badge>\n      <Badge className=\"hidden space-x-1 rounded-sm px-1 font-normal lg:flex\" variant=\"secondary\">\n        {selectedTagsIds.length}\n      </Badge>\n    </>\n  );\n\n  const clearFiltersBtn = (\n    <>\n      <CommandSeparator />\n      <CommandGroup>\n        <CommandItem\n          onSelect={() => {\n            newSelectedTagsIds.current = [];\n            setSelectedTagSwitch(ETagsSwitch.CLEARING);\n          }}\n          className=\"justify-center text-center\"\n        >\n          {clearFilters}\n        </CommandItem>\n      </CommandGroup>\n    </>\n  );\n\n  return (\n    <Popover onOpenChange={(_isOpened: boolean) => setIsOpened(_isOpened)} open={isOpened} modal={true}>\n      <PopoverTrigger asChild>\n        <button\n          className={cn(classNameBase, BUTTON_CONFIG.CLASSNAME, {\n            [BUTTON_CONFIG.NOT_ACTIVE_CLASSNAME]: !isOpened,\n            [BUTTON_CONFIG.ACTIVE_CLASSNAME]: isOpened\n          })}\n        >\n          <PlusCircledIcon\n            className={cn('h-5 w-5 transition-transform duration-300 ltr:mr-2 rtl:ml-2', { 'ltr:-rotate-45 rtl:rotate-45': isOpened })}\n          />\n          {title}\n          {/* eslint-disable-next-line no-magic-numbers */}\n          {selectedTagsIds.length > 0 && activeFiltersIndicator}\n        </button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <Command label={title}>\n          <CommandInput placeholder={title} />\n          <CommandList>\n            <CommandEmpty>{noResultFound}</CommandEmpty>\n            <CommandGroup>{buildCommandItems()}</CommandGroup>\n            {/* eslint-disable-next-line no-magic-numbers */}\n            {selectedTagsIds.length > 0 && clearFiltersBtn}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default TagsCommandWidget;\n"
    },
    "src/components/pages/blog/helpers/constants.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1443",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 4
            },
            "start": {
              "column": 25,
              "line": 4
            }
          }
        },
        {
          "id": "1444",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 5
            },
            "start": {
              "column": 28,
              "line": 5
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nexport const TAGS_KEY = 'tags';\nexport const FILTERS_KEY = 'filter';\nexport const FIRST_FILTER_INDEX = 0;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/blog/helpers/functions/filters.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1445",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(60,45): error TS2345: Argument of type 'void | never[]' is not assignable to parameter of type 'number[]'.\n  Type 'void' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(169,25): error TS2339: Property 'length' does not exist on type 'void | never[]'.\n  Property 'length' does not exist on type 'void'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(188,11): error TS2322: Type 'void | never[]' is not assignable to type 'number[]'.\n  Type 'void' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(206,11): error TS2322: Type 'void | never[]' is not assignable to type 'number[]'.\n  Type 'void' is not assignable to type 'number[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["411"],
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 84,
              "line": 9
            }
          }
        },
        {
          "id": "1446",
          "mutatorName": "MethodExpression",
          "replacement": "unpackIds(packedIds)",
          "statusReason": "expected [ +0, 1, 2 ] to strictly equal [ +0, 1 ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["411"],
          "coveredBy": ["411"],
          "location": {
            "end": {
              "column": 84,
              "line": 12
            },
            "start": {
              "column": 28,
              "line": 12
            }
          }
        },
        {
          "id": "1447",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected [] to strictly equal [ +0, 1 ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["411"],
          "coveredBy": ["411"],
          "location": {
            "end": {
              "column": 83,
              "line": 12
            },
            "start": {
              "column": 56,
              "line": 12
            }
          }
        },
        {
          "id": "1448",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(60,45): error TS2345: Argument of type 'void' is not assignable to parameter of type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(169,25): error TS2339: Property 'length' does not exist on type 'void'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(188,11): error TS2322: Type 'void' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(206,11): error TS2322: Type 'void' is not assignable to type 'number[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["411", "412"],
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 121,
              "line": 21
            }
          }
        },
        {
          "id": "1449",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/helpers/functions/filters.ts(25,81): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["411", "412"],
          "location": {
            "end": {
              "column": 25,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "1450",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/helpers/functions/filters.ts(25,81): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["411", "412"],
          "location": {
            "end": {
              "column": 25,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "1451",
          "mutatorName": "EqualityOperator",
          "replacement": "packedIds !== null",
          "statusReason": "src/components/pages/blog/helpers/functions/filters.ts(25,81): error TS2345: Argument of type 'null' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["411", "412"],
          "location": {
            "end": {
              "column": 25,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "1452",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(60,45): error TS2345: Argument of type 'number[] | string[]' is not assignable to parameter of type 'number[]'.\n  Type 'string[]' is not assignable to type 'number[]'.\n    Type 'string' is not assignable to type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(188,11): error TS2322: Type 'number[] | string[]' is not assignable to type 'number[]'.\n  Type 'string[]' is not assignable to type 'number[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(206,11): error TS2322: Type 'number[] | string[]' is not assignable to type 'number[]'.\n  Type 'string[]' is not assignable to type 'number[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["412"],
          "location": {
            "end": {
              "column": 36,
              "line": 23
            },
            "start": {
              "column": 34,
              "line": 23
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { Id } from '@rtm/shared-types/Numbers';\n\nimport { sortNumbers, unpackIds } from '@rtm/shared-lib/misc';\n\n/**\n * @throws {RangeError}\n */\nfunction buildUnpackedAndSanitizedFilters(packedIds: string, expectedIds: Set<Id>) {\n  const unpackedAndSanitizedFilters = sortNumbers(\n    // eslint-disable-next-line no-magic-numbers\n    Array.from(new Set<Id>(unpackIds(packedIds).filter((id) => expectedIds.has(id))))\n  );\n\n  return unpackedAndSanitizedFilters;\n}\n\n/**\n * @throws {RangeError}\n */\nexport function getUnpackedAndSanitizedFilters(searchParams: URLSearchParams, expectedIds: Set<Id>, filtersKey: string) {\n  const packedIds: MaybeNull<string> = searchParams.get(filtersKey);\n  if (packedIds === null) return [];\n\n  const generatedUnpackedAndSanitizedFilters = buildUnpackedAndSanitizedFilters(packedIds, expectedIds);\n  return generatedUnpackedAndSanitizedFilters;\n}\n"
    },
    "src/components/pages/blog/helpers/functions/filtersSelectWidget.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1453",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(67,38): error TS2345: Argument of type 'void' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(112,47): error TS2345: Argument of type 'void' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(126,63): error TS2345: Argument of type 'void' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(189,11): error TS2322: Type 'void' is not assignable to type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(207,11): error TS2322: Type 'void' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["202", "203", "204", "205", "206", "207"],
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 117,
              "line": 6
            }
          }
        },
        {
          "id": "1454",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 10
            },
            "start": {
              "column": 31,
              "line": 10
            }
          }
        },
        {
          "id": "1455",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 10
            },
            "start": {
              "column": 31,
              "line": 10
            }
          }
        },
        {
          "id": "1456",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeUnsafeFilterFromUrl !== null",
          "statusReason": "expected +0 to be 1 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["206"],
          "coveredBy": ["202", "203", "204", "205", "206", "207"],
          "location": {
            "end": {
              "column": 64,
              "line": 10
            },
            "start": {
              "column": 31,
              "line": 10
            }
          }
        },
        {
          "id": "1457",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected +0 to be 1 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["206"],
          "coveredBy": ["202", "203", "204", "205", "206", "207"],
          "location": {
            "end": {
              "column": 33,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 12
            }
          }
        },
        {
          "id": "1458",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected NaN to be +0 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["205"],
          "coveredBy": ["202", "203", "204", "205", "206", "207"],
          "location": {
            "end": {
              "column": 33,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 12
            }
          }
        },
        {
          "id": "1459",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected +0 to be 1 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["206"],
          "coveredBy": ["202", "203", "204", "206", "207"],
          "location": {
            "end": {
              "column": 47,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1460",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected -1 to be +0 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["204"],
          "coveredBy": ["202", "203", "204", "206", "207"],
          "location": {
            "end": {
              "column": 47,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1461",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafeFilterFromUrl <= FIRST_FILTER_INDEX",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1462",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafeFilterFromUrl >= FIRST_FILTER_INDEX",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1463",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 1 to be +0 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["202"],
          "coveredBy": ["202", "203", "206", "207"],
          "location": {
            "end": {
              "column": 38,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1464",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 2 to be 1 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["206"],
          "coveredBy": ["202", "203", "206", "207"],
          "location": {
            "end": {
              "column": 38,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1465",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafeFilterFromUrl >= maxFilter",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1466",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafeFilterFromUrl <= maxFilter",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { Limit } from '@rtm/shared-types/Numbers';\n\nimport { FIRST_FILTER_INDEX } from '../constants';\n\nexport function getSanitizedCurrentFilterIndex(searchParams: URLSearchParams, maxFilter: Limit, filtersKey: string) {\n  const maybeUnsafeFilterFromUrl: MaybeNull<string> = searchParams.get(filtersKey);\n  // Stryker Workaround 1. Pointless mutant\n  // Stryker disable next-line ConditionalExpression\n  const unsafeFilterFromUrl = maybeUnsafeFilterFromUrl === null ? FIRST_FILTER_INDEX : Number(maybeUnsafeFilterFromUrl);\n\n  if (isNaN(unsafeFilterFromUrl)) return FIRST_FILTER_INDEX;\n  // Stryker Workaround 2. Pointless mutant\n  // Stryker disable next-line EqualityOperator\n  if (unsafeFilterFromUrl < FIRST_FILTER_INDEX) return FIRST_FILTER_INDEX;\n  // Stryker Workaround 3. Pointless mutant\n  // Stryker disable next-line EqualityOperator\n  if (unsafeFilterFromUrl > maxFilter) return maxFilter;\n  return unsafeFilterFromUrl;\n}\n"
    },
    "src/components/pages/blog/helpers/functions/paginationWidget.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1467",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(38,7): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(38,25): error TS2554: Expected 0 arguments, but got 4.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(98,30): error TS2554: Expected 0 arguments, but got 4.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(111,11): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(171,30): error TS2554: Expected 0 arguments, but got 4.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(181,11): error TS2322: Type 'undefined' is not assignable to type 'Url'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 99,
              "line": 17
            },
            "start": {
              "column": 21,
              "line": 16
            }
          }
        },
        {
          "id": "1468",
          "mutatorName": "ArithmeticOperator",
          "replacement": "pathname - createURLSearchParams({\n  [pageKey]: i === FIRST_PAGE_PARAM ? null : i\n}, searchParams)",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(17,3): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(17,14): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(41,7): error TS2322: Type 'number' is not assignable to type 'Url'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(114,11): error TS2322: Type 'number' is not assignable to type 'Url'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(184,11): error TS2322: Type 'number' is not assignable to type 'Url'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["75", "76", "77", "78", "79", "80", "82", "83", "116"],
          "location": {
            "end": {
              "column": 99,
              "line": 17
            },
            "start": {
              "column": 3,
              "line": 17
            }
          }
        },
        {
          "id": "1469",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "79", "80", "82", "83", "116"],
          "location": {
            "end": {
              "column": 84,
              "line": 17
            },
            "start": {
              "column": 36,
              "line": 17
            }
          }
        },
        {
          "id": "1470",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "79", "80", "82", "83", "116"],
          "location": {
            "end": {
              "column": 71,
              "line": 17
            },
            "start": {
              "column": 49,
              "line": 17
            }
          }
        },
        {
          "id": "1471",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "79", "80", "82", "83", "116"],
          "location": {
            "end": {
              "column": 71,
              "line": 17
            },
            "start": {
              "column": 49,
              "line": 17
            }
          }
        },
        {
          "id": "1472",
          "mutatorName": "EqualityOperator",
          "replacement": "i !== FIRST_PAGE_PARAM",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "79", "80", "82", "83", "116"],
          "location": {
            "end": {
              "column": 71,
              "line": 17
            },
            "start": {
              "column": 49,
              "line": 17
            }
          }
        },
        {
          "id": "1473",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(43,9): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(142,9): error TS2322: Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(142,52): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(180,28): error TS2554: Expected 0 arguments, but got 3.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(31,3): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 27,
              "line": 19
            }
          }
        },
        {
          "id": "1474",
          "mutatorName": "OptionalChaining",
          "replacement": "options.dropdownContentClassName",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(25,31): error TS18048: 'options' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78", "79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 64,
              "line": 25
            },
            "start": {
              "column": 31,
              "line": 25
            }
          }
        },
        {
          "id": "1475",
          "mutatorName": "OptionalChaining",
          "replacement": "options.isBottomWidget",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(27,21): error TS18048: 'options' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78", "79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 44,
              "line": 27
            },
            "start": {
              "column": 21,
              "line": 27
            }
          }
        },
        {
          "id": "1476",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78", "79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 20,
              "line": 29
            },
            "start": {
              "column": 10,
              "line": 29
            }
          }
        },
        {
          "id": "1477",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(60,19): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(60,39): error TS2554: Expected 0 arguments, but got 5.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(112,7): error TS2322: Type 'undefined' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(112,39): error TS2554: Expected 0 arguments, but got 5.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(114,9): error TS2322: Type 'undefined' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(114,40): error TS2554: Expected 0 arguments, but got 5.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(129,7): error TS2322: Type 'undefined' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(129,38): error TS2554: Expected 0 arguments, but got 5.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 29,
              "line": 33
            }
          }
        },
        {
          "id": "1478",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Survived",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 35,
              "line": 34
            },
            "start": {
              "column": 24,
              "line": 34
            }
          }
        },
        {
          "id": "1479",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 63,
              "line": 36
            },
            "start": {
              "column": 21,
              "line": 36
            }
          }
        },
        {
          "id": "1480",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 8,
              "line": 38
            },
            "start": {
              "column": 65,
              "line": 36
            }
          }
        },
        {
          "id": "1481",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(35,6): error TS2322: Type '{ children: number; className: string; href: string; \"aria-current\": \"\" | undefined; isActive: boolean; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"time\" | \"step\" | \"true\" | \"false\" | \"page\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"time\" | \"step\" | \"true\" | \"false\" | \"page\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 38,
              "line": 40
            },
            "start": {
              "column": 32,
              "line": 40
            }
          }
        },
        {
          "id": "1482",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(54,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["79", "81"],
          "location": {
            "end": {
              "column": 2,
              "line": 60
            },
            "start": {
              "column": 28,
              "line": 54
            }
          }
        },
        {
          "id": "1483",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "81"],
          "location": {
            "end": {
              "column": 4,
              "line": 57
            },
            "start": {
              "column": 123,
              "line": 55
            }
          }
        },
        {
          "id": "1484",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "81"],
          "location": {
            "end": {
              "column": 37,
              "line": 56
            },
            "start": {
              "column": 31,
              "line": 56
            }
          }
        },
        {
          "id": "1485",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "81"],
          "location": {
            "end": {
              "column": 29,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "1486",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { …(9) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["81"],
          "coveredBy": ["79", "81"],
          "location": {
            "end": {
              "column": 29,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "1487",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeDropdown !== null",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "81"],
          "location": {
            "end": {
              "column": 29,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "1488",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(47,9): error TS2322: Type 'void | MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>> | (Element | null)[]' is not assignable to type 'ReactNode'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 2,
              "line": 77
            },
            "start": {
              "column": 3,
              "line": 68
            }
          }
        },
        {
          "id": "1489",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(69,37): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 38,
              "line": 69
            },
            "start": {
              "column": 36,
              "line": 69
            }
          }
        },
        {
          "id": "1490",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 50,
              "line": 71
            },
            "start": {
              "column": 34,
              "line": 71
            }
          }
        },
        {
          "id": "1491",
          "mutatorName": "EqualityOperator",
          "replacement": "i < pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 50,
              "line": 71
            },
            "start": {
              "column": 34,
              "line": 71
            }
          }
        },
        {
          "id": "1492",
          "mutatorName": "EqualityOperator",
          "replacement": "i > pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 50,
              "line": 71
            },
            "start": {
              "column": 34,
              "line": 71
            }
          }
        },
        {
          "id": "1493",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Hit limit reached (701/700)",
          "status": "Timeout",
          "static": false,
          "killedBy": [],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 55,
              "line": 71
            },
            "start": {
              "column": 52,
              "line": 71
            }
          }
        },
        {
          "id": "1494",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 4,
              "line": 74
            },
            "start": {
              "column": 57,
              "line": 71
            }
          }
        },
        {
          "id": "1495",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 39,
              "line": 72
            },
            "start": {
              "column": 22,
              "line": 72
            }
          }
        },
        {
          "id": "1496",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 39,
              "line": 72
            },
            "start": {
              "column": 22,
              "line": 72
            }
          }
        },
        {
          "id": "1497",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPage !== i",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 39,
              "line": 72
            },
            "start": {
              "column": 22,
              "line": 72
            }
          }
        },
        {
          "id": "1498",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(47,9): error TS2322: Type 'void | MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>' is not assignable to type 'ReactNode'.\n  Type 'void' is not assignable to type 'ReactNode'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(129,6): error TS2352: Conversion of type 'void | MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>' to type 'ReactElement<any, string | JSXElementConstructor<any>>[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\n  Type 'ReactElement<any, string | JSXElementConstructor<any>>' is missing the following properties from type 'ReactElement<any, string | JSXElementConstructor<any>>[]': length, pop, push, concat, and 35 more.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 2,
              "line": 156
            },
            "start": {
              "column": 3,
              "line": 85
            }
          }
        },
        {
          "id": "1499",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 123,
              "line": 86
            },
            "start": {
              "column": 25,
              "line": 86
            }
          }
        },
        {
          "id": "1500",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 123,
              "line": 86
            },
            "start": {
              "column": 25,
              "line": 86
            }
          }
        },
        {
          "id": "1501",
          "mutatorName": "LogicalOperator",
          "replacement": "pagesAmount === MAX_USER_INTERFACE_ITEMS_AMOUNT && pagesAmount === MIN_USER_INTERFACE_ITEMS_AMOUNT",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 123,
              "line": 86
            },
            "start": {
              "column": 25,
              "line": 86
            }
          }
        },
        {
          "id": "1502",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 3 case, i.e: 3 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["76"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 72,
              "line": 86
            },
            "start": {
              "column": 25,
              "line": 86
            }
          }
        },
        {
          "id": "1503",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount !== MAX_USER_INTERFACE_ITEMS_AMOUNT",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 3 case, i.e: 3 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["76"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 72,
              "line": 86
            },
            "start": {
              "column": 25,
              "line": 86
            }
          }
        },
        {
          "id": "1504",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "77", "78", "80"],
          "location": {
            "end": {
              "column": 123,
              "line": 86
            },
            "start": {
              "column": 76,
              "line": 86
            }
          }
        },
        {
          "id": "1505",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount !== MIN_USER_INTERFACE_ITEMS_AMOUNT",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "77", "78", "80"],
          "location": {
            "end": {
              "column": 123,
              "line": 86
            },
            "start": {
              "column": 76,
              "line": 86
            }
          }
        },
        {
          "id": "1506",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 20,
              "line": 88
            },
            "start": {
              "column": 7,
              "line": 88
            }
          }
        },
        {
          "id": "1507",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "77", "78", "80"],
          "location": {
            "end": {
              "column": 20,
              "line": 88
            },
            "start": {
              "column": 7,
              "line": 88
            }
          }
        },
        {
          "id": "1508",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["75", "76", "80"],
          "location": {
            "end": {
              "column": 4,
              "line": 90
            },
            "start": {
              "column": 22,
              "line": 88
            }
          }
        },
        {
          "id": "1509",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 59,
              "line": 92
            },
            "start": {
              "column": 32,
              "line": 92
            }
          }
        },
        {
          "id": "1510",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown, current page being last page) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 59,
              "line": 92
            },
            "start": {
              "column": 32,
              "line": 92
            }
          }
        },
        {
          "id": "1511",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPage !== pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 59,
              "line": 92
            },
            "start": {
              "column": 32,
              "line": 92
            }
          }
        },
        {
          "id": "1512",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(94,42): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 43,
              "line": 94
            },
            "start": {
              "column": 41,
              "line": 94
            }
          }
        },
        {
          "id": "1513",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 66,
              "line": 98
            },
            "start": {
              "column": 61,
              "line": 98
            }
          }
        },
        {
          "id": "1514",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(111,28): error TS2345: Argument of type 'void' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(114,28): error TS2345: Argument of type 'void' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(124,26): error TS2345: Argument of type 'void' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(130,24): error TS2345: Argument of type 'void' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 4,
              "line": 119
            },
            "start": {
              "column": 68,
              "line": 98
            }
          }
        },
        {
          "id": "1515",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected \"dispatchClickOnLinkOrButtonFirstChild\" to be called 1 times, but got 0 times",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 80,
              "line": 102
            },
            "start": {
              "column": 18,
              "line": 102
            }
          }
        },
        {
          "id": "1516",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 28,
              "line": 103
            },
            "start": {
              "column": 23,
              "line": 103
            }
          }
        },
        {
          "id": "1517",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 10,
              "line": 105
            },
            "start": {
              "column": 30,
              "line": 103
            }
          }
        },
        {
          "id": "1518",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Survived",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 25,
              "line": 106
            },
            "start": {
              "column": 14,
              "line": 106
            }
          }
        },
        {
          "id": "1519",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 85,
              "line": 109
            },
            "start": {
              "column": 25,
              "line": 109
            }
          }
        },
        {
          "id": "1520",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(108,10): error TS2322: Type '{ children: number; className: string; \"aria-current\": \"\" | undefined; title: string; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"time\" | \"step\" | \"true\" | \"false\" | \"page\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"time\" | \"step\" | \"true\" | \"false\" | \"page\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 43,
              "line": 110
            },
            "start": {
              "column": 37,
              "line": 110
            }
          }
        },
        {
          "id": "1521",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 50,
              "line": 121
            },
            "start": {
              "column": 34,
              "line": 121
            }
          }
        },
        {
          "id": "1522",
          "mutatorName": "EqualityOperator",
          "replacement": "i < pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 50,
              "line": 121
            },
            "start": {
              "column": 34,
              "line": 121
            }
          }
        },
        {
          "id": "1523",
          "mutatorName": "EqualityOperator",
          "replacement": "i > pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 50,
              "line": 121
            },
            "start": {
              "column": 34,
              "line": 121
            }
          }
        },
        {
          "id": "1524",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Hit limit reached (801/800)",
          "status": "Timeout",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 55,
              "line": 121
            },
            "start": {
              "column": 52,
              "line": 121
            }
          }
        },
        {
          "id": "1525",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 4,
              "line": 152
            },
            "start": {
              "column": 57,
              "line": 121
            }
          }
        },
        {
          "id": "1526",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 39,
              "line": 122
            },
            "start": {
              "column": 22,
              "line": 122
            }
          }
        },
        {
          "id": "1527",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 39,
              "line": 122
            },
            "start": {
              "column": 22,
              "line": 122
            }
          }
        },
        {
          "id": "1528",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPage !== i",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 39,
              "line": 122
            },
            "start": {
              "column": 22,
              "line": 122
            }
          }
        },
        {
          "id": "1529",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 26,
              "line": 124
            },
            "start": {
              "column": 9,
              "line": 124
            }
          }
        },
        {
          "id": "1530",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 26,
              "line": 124
            },
            "start": {
              "column": 9,
              "line": 124
            }
          }
        },
        {
          "id": "1531",
          "mutatorName": "EqualityOperator",
          "replacement": "i !== pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 26,
              "line": 124
            },
            "start": {
              "column": 9,
              "line": 124
            }
          }
        },
        {
          "id": "1532",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 6,
              "line": 139
            },
            "start": {
              "column": 28,
              "line": 124
            }
          }
        },
        {
          "id": "1533",
          "mutatorName": "BooleanLiteral",
          "replacement": "leftItem",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 20,
              "line": 126
            },
            "start": {
              "column": 11,
              "line": 126
            }
          }
        },
        {
          "id": "1534",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 20,
              "line": 126
            },
            "start": {
              "column": 11,
              "line": 126
            }
          }
        },
        {
          "id": "1535",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown, current page being last page) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 20,
              "line": 126
            },
            "start": {
              "column": 11,
              "line": 126
            }
          }
        },
        {
          "id": "1536",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown, current page being last page) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["78"],
          "location": {
            "end": {
              "column": 8,
              "line": 128
            },
            "start": {
              "column": 22,
              "line": 126
            }
          }
        },
        {
          "id": "1537",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown, current page being last page) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["78"],
          "location": {
            "end": {
              "column": 63,
              "line": 127
            },
            "start": {
              "column": 58,
              "line": 127
            }
          }
        },
        {
          "id": "1538",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 31,
              "line": 130
            },
            "start": {
              "column": 11,
              "line": 130
            }
          }
        },
        {
          "id": "1539",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown, current page being last page) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 31,
              "line": 130
            },
            "start": {
              "column": 11,
              "line": 130
            }
          }
        },
        {
          "id": "1540",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown, current page being last page) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["78"],
          "location": {
            "end": {
              "column": 8,
              "line": 133
            },
            "start": {
              "column": 33,
              "line": 130
            }
          }
        },
        {
          "id": "1541",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown, current page being last page) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["78"],
          "location": {
            "end": {
              "column": 55,
              "line": 131
            },
            "start": {
              "column": 51,
              "line": 131
            }
          }
        },
        {
          "id": "1542",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77"],
          "location": {
            "end": {
              "column": 8,
              "line": 136
            },
            "start": {
              "column": 14,
              "line": 133
            }
          }
        },
        {
          "id": "1543",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 17,
              "line": 141
            },
            "start": {
              "column": 9,
              "line": 141
            }
          }
        },
        {
          "id": "1544",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 17,
              "line": 141
            },
            "start": {
              "column": 9,
              "line": 141
            }
          }
        },
        {
          "id": "1545",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77"],
          "location": {
            "end": {
              "column": 6,
              "line": 148
            },
            "start": {
              "column": 19,
              "line": 141
            }
          }
        },
        {
          "id": "1546",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77"],
          "location": {
            "end": {
              "column": 53,
              "line": 144
            },
            "start": {
              "column": 49,
              "line": 144
            }
          }
        },
        {
          "id": "1547",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (desktop, 3 parts UI with dropdown) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["77"],
          "coveredBy": ["77", "78"],
          "location": {
            "end": {
              "column": 86,
              "line": 155
            },
            "start": {
              "column": 10,
              "line": 155
            }
          }
        },
        {
          "id": "1548",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(55,9): error TS2322: Type 'void' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/toolbarInner.tsx(31,3): error TS2322: Type 'void | null' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\n  Type 'void' is not assignable to type 'MaybeNull<ReactElement<any, string | JSXElementConstructor<any>>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["79", "81", "82", "83", "84", "116"],
          "location": {
            "end": {
              "column": 2,
              "line": 193
            },
            "start": {
              "column": 3,
              "line": 165
            }
          }
        },
        {
          "id": "1549",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(166,42): error TS2322: Type 'string' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["79", "81", "82", "83", "84", "116"],
          "location": {
            "end": {
              "column": 43,
              "line": 166
            },
            "start": {
              "column": 41,
              "line": 166
            }
          }
        },
        {
          "id": "1550",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "81", "82", "83", "84", "116"],
          "location": {
            "end": {
              "column": 24,
              "line": 168
            },
            "start": {
              "column": 7,
              "line": 168
            }
          }
        },
        {
          "id": "1551",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { …(9) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["81"],
          "coveredBy": ["79", "81", "82", "83", "84", "116"],
          "location": {
            "end": {
              "column": 24,
              "line": 168
            },
            "start": {
              "column": 7,
              "line": 168
            }
          }
        },
        {
          "id": "1552",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount !== 1",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "81", "82", "83", "84", "116"],
          "location": {
            "end": {
              "column": 24,
              "line": 168
            },
            "start": {
              "column": 7,
              "line": 168
            }
          }
        },
        {
          "id": "1553",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 50,
              "line": 170
            },
            "start": {
              "column": 34,
              "line": 170
            }
          }
        },
        {
          "id": "1554",
          "mutatorName": "EqualityOperator",
          "replacement": "i < pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 50,
              "line": 170
            },
            "start": {
              "column": 34,
              "line": 170
            }
          }
        },
        {
          "id": "1555",
          "mutatorName": "EqualityOperator",
          "replacement": "i > pagesAmount",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 50,
              "line": 170
            },
            "start": {
              "column": 34,
              "line": 170
            }
          }
        },
        {
          "id": "1556",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Hit limit reached (1501/1500)",
          "status": "Timeout",
          "static": false,
          "killedBy": [],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 55,
              "line": 170
            },
            "start": {
              "column": 52,
              "line": 170
            }
          }
        },
        {
          "id": "1557",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 4,
              "line": 190
            },
            "start": {
              "column": 57,
              "line": 170
            }
          }
        },
        {
          "id": "1558",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 39,
              "line": 171
            },
            "start": {
              "column": 22,
              "line": 171
            }
          }
        },
        {
          "id": "1559",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 39,
              "line": 171
            },
            "start": {
              "column": 22,
              "line": 171
            }
          }
        },
        {
          "id": "1560",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl !== i",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 39,
              "line": 171
            },
            "start": {
              "column": 22,
              "line": 171
            }
          }
        },
        {
          "id": "1561",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected \"dispatchClickOnLinkOrButtonFirstChild\" to be called 1 times, but got 0 times",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 96,
              "line": 175
            },
            "start": {
              "column": 34,
              "line": 175
            }
          }
        },
        {
          "id": "1562",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Survived",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 135,
              "line": 175
            },
            "start": {
              "column": 124,
              "line": 175
            }
          }
        },
        {
          "id": "1563",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Snapshot `doBuildPaginationItems > should match snapshot (mobile) 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["79"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 112,
              "line": 177
            },
            "start": {
              "column": 25,
              "line": 177
            }
          }
        },
        {
          "id": "1564",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Snapshot `buildBottomRightWidgets > should match snapshot 1` mismatched",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 12,
              "line": 179
            },
            "start": {
              "column": 114,
              "line": 177
            }
          }
        },
        {
          "id": "1565",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(176,10): error TS2322: Type '{ children: number; className: string; \"aria-current\": \"\" | undefined; title: string; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"time\" | \"step\" | \"true\" | \"false\" | \"page\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"time\" | \"step\" | \"true\" | \"false\" | \"page\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["79", "82", "83", "116"],
          "location": {
            "end": {
              "column": 42,
              "line": 180
            },
            "start": {
              "column": 36,
              "line": 180
            }
          }
        },
        {
          "id": "1566",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(33,34): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(94,52): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(103,52): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(112,52): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(121,52): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(129,6): error TS2352: Conversion of type 'undefined' to type 'ReactElement<any, string | JSXElementConstructor<any>>[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(138,52): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(146,6): error TS2352: Conversion of type 'undefined' to type 'ReactElement<any, string | JSXElementConstructor<any>>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(159,67): error TS2554: Expected 0 arguments, but got 6.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(173,57): error TS2554: Expected 0 arguments, but got 6.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 205
            },
            "start": {
              "column": 39,
              "line": 195
            }
          }
        },
        {
          "id": "1567",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(46,25): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(54,24): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(64,24): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(73,24): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(74,24): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(84,24): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(85,24): error TS2339: Property 'props' does not exist on type 'void'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 2,
              "line": 217
            },
            "start": {
              "column": 146,
              "line": 207
            }
          }
        },
        {
          "id": "1568",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 53,
              "line": 208
            },
            "start": {
              "column": 22,
              "line": 208
            }
          }
        },
        {
          "id": "1569",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 53,
              "line": 208
            },
            "start": {
              "column": 22,
              "line": 208
            }
          }
        },
        {
          "id": "1570",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPage < FIRST_PAGE_PARAM",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 53,
              "line": 208
            },
            "start": {
              "column": 22,
              "line": 208
            }
          }
        },
        {
          "id": "1571",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPage > FIRST_PAGE_PARAM",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 53,
              "line": 208
            },
            "start": {
              "column": 22,
              "line": 208
            }
          }
        },
        {
          "id": "1572",
          "mutatorName": "ArithmeticOperator",
          "replacement": "pathname - createURLSearchParams({\n  [pageKey]: prevBtnPageId <= FIRST_PAGE_PARAM ? null : prevBtnPageId\n}, searchParams)",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(212,7): error TS2322: Type 'number' is not assignable to type 'Url'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(212,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(212,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 132,
              "line": 212
            },
            "start": {
              "column": 13,
              "line": 212
            }
          }
        },
        {
          "id": "1573",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'pathname?foo=bar&bar=bar&baz=baz' to be 'pathname?foo=bar&bar=bar&baz=baz&page…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["72"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 117,
              "line": 212
            },
            "start": {
              "column": 46,
              "line": 212
            }
          }
        },
        {
          "id": "1574",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'pathname?foo=bar&bar=bar&baz=baz' to be 'pathname?foo=bar&bar=bar&baz=baz&page…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["72"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 92,
              "line": 212
            },
            "start": {
              "column": 59,
              "line": 212
            }
          }
        },
        {
          "id": "1575",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'pathname?foo=bar&bar=bar&baz=baz&page…' to be 'pathname?foo=bar&bar=bar&baz=baz' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["71"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 92,
              "line": 212
            },
            "start": {
              "column": 59,
              "line": 212
            }
          }
        },
        {
          "id": "1576",
          "mutatorName": "EqualityOperator",
          "replacement": "prevBtnPageId < FIRST_PAGE_PARAM",
          "statusReason": "expected 'pathname?foo=bar&bar=bar&baz=baz&page…' to be 'pathname?foo=bar&bar=bar&baz=baz' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["71"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 92,
              "line": 212
            },
            "start": {
              "column": 59,
              "line": 212
            }
          }
        },
        {
          "id": "1577",
          "mutatorName": "EqualityOperator",
          "replacement": "prevBtnPageId > FIRST_PAGE_PARAM",
          "statusReason": "expected 'pathname?foo=bar&bar=bar&baz=baz&page…' to be 'pathname?foo=bar&bar=bar&baz=baz' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["71"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 92,
              "line": 212
            },
            "start": {
              "column": 59,
              "line": 212
            }
          }
        },
        {
          "id": "1578",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 57,
              "line": 213
            },
            "start": {
              "column": 21,
              "line": 213
            }
          }
        },
        {
          "id": "1579",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["71", "72", "73", "74"],
          "location": {
            "end": {
              "column": 107,
              "line": 213
            },
            "start": {
              "column": 59,
              "line": 213
            }
          }
        },
        {
          "id": "1580",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/PaginationWidget.tsx(48,25): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(22,20): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(31,20): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(32,20): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(41,20): error TS2339: Property 'props' does not exist on type 'void'.\nsrc/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts(42,20): error TS2339: Property 'props' does not exist on type 'void'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 2,
              "line": 236
            },
            "start": {
              "column": 6,
              "line": 226
            }
          }
        },
        {
          "id": "1581",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 48,
              "line": 227
            },
            "start": {
              "column": 22,
              "line": 227
            }
          }
        },
        {
          "id": "1582",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["69"],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 48,
              "line": 227
            },
            "start": {
              "column": 22,
              "line": 227
            }
          }
        },
        {
          "id": "1583",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPage > pagesAmount",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["70"],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 48,
              "line": 227
            },
            "start": {
              "column": 22,
              "line": 227
            }
          }
        },
        {
          "id": "1584",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPage < pagesAmount",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["69"],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 48,
              "line": 227
            },
            "start": {
              "column": 22,
              "line": 227
            }
          }
        },
        {
          "id": "1585",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 57,
              "line": 231
            },
            "start": {
              "column": 21,
              "line": 231
            }
          }
        },
        {
          "id": "1586",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'max-lg:h-10 max-lg:w-10 max-lg:p-0' to include 'pointer-events-none'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["69"],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 107,
              "line": 231
            },
            "start": {
              "column": 59,
              "line": 231
            }
          }
        },
        {
          "id": "1587",
          "mutatorName": "ArithmeticOperator",
          "replacement": "pathname - createURLSearchParams({\n  [pageKey]: nextBtnPageId\n}, searchParams)",
          "statusReason": "src/components/pages/blog/helpers/functions/paginationWidget.tsx(232,7): error TS2322: Type 'number' is not assignable to type 'Url'.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(232,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/components/pages/blog/helpers/functions/paginationWidget.tsx(232,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 89,
              "line": 232
            },
            "start": {
              "column": 13,
              "line": 232
            }
          }
        },
        {
          "id": "1588",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'pathname?foo=bar&bar=bar&baz=baz' to be 'pathname?foo=bar&bar=bar&baz=baz&page…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["68"],
          "coveredBy": ["68", "69", "70"],
          "location": {
            "end": {
              "column": 74,
              "line": 232
            },
            "start": {
              "column": 46,
              "line": 232
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { Quantity, Count } from '@rtm/shared-types/Numbers';\nimport type { AppPath } from '@rtm/shared-types/Next';\nimport type { ReactElement } from 'react';\n\nimport { PaginationEllipsis, PaginationPrevious, PaginationItem, PaginationLink, PaginationNext } from '@/components/ui/Pagination';\nimport { dispatchClickOnLinkOrButtonFirstChild, createURLSearchParams } from '@rtm/shared-lib/html';\nimport { FIRST_PAGE_PARAM } from '@/components/ui/helpers/PaginatedElements/constants';\nimport { DropdownMenuItem } from '@/components/ui/DropdownMenu';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nconst MIN_USER_INTERFACE_ITEMS_AMOUNT: Quantity = 2;\nconst MAX_USER_INTERFACE_ITEMS_AMOUNT: Quantity = 3;\n\nconst getItemHref = (i: Count, pathname: AppPath, searchParams: URLSearchParams, pageKey: string) =>\n  pathname + createURLSearchParams({ [pageKey]: i === FIRST_PAGE_PARAM ? null : i }, searchParams);\n\nconst buildDropdownMenu = (\n  dropdownItems: ReactElement[],\n  pageNumberIndicator?: Count,\n  options?: { dropdownContentClassName?: string; isBottomWidget?: boolean }\n): ReactElement => (\n  <PaginationEllipsis\n    dropdownContentClassName={options?.dropdownContentClassName}\n    pageNumberIndicator={pageNumberIndicator}\n    isBottomWidget={options?.isBottomWidget}\n    dropdownItems={dropdownItems}\n    key={'ellipsis'}\n  />\n);\n\nconst buildPaginationItem = (i: Count, isActive: boolean, pathname: AppPath, searchParams: URLSearchParams, pageKey: string) => (\n  <PaginationItem key={`page-${i}`}>\n    <PaginationLink\n      className={cn('border-none font-bold transition-opacity', {\n        'pointer-events-none underline opacity-50': isActive\n      })}\n      href={getItemHref(i, pathname, searchParams, pageKey)}\n      aria-current={isActive ? 'page' : undefined}\n      isActive={isActive}\n    >\n      {i}\n    </PaginationLink>\n  </PaginationItem>\n);\n\nfunction buildPaginationItemsForMobile(\n  pagesAmount: Quantity,\n  currentPage: Count,\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  pageKey: string\n): MaybeNull<ReactElement> {\n  const maybeDropdown: MaybeNull<ReactElement> = buildDropdown(pagesAmount, currentPage, pathname, searchParams, pageKey, {\n    dropdownContentClassName: 'z-20'\n  });\n  if (maybeDropdown === null) return null;\n  return <li key=\"pagination-dropdown-mobile\">{maybeDropdown}</li>;\n}\n\nfunction buildPaginationItemsForDesktopTrivialCases(\n  pagesAmount: Quantity,\n  currentPage: Count,\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  pageKey: string\n) {\n  const elements: ReactElement[] = [];\n\n  for (let i = FIRST_PAGE_PARAM; i <= pagesAmount; i++) {\n    const isActive = currentPage === i;\n    elements.push(buildPaginationItem(i, isActive, pathname, searchParams, pageKey));\n  }\n\n  return elements;\n}\n\nfunction buildPaginationItemsForDesktop(\n  pagesAmount: Quantity,\n  currentPage: Count,\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  pageKey: string\n) {\n  const isTrivialCase = pagesAmount === MAX_USER_INTERFACE_ITEMS_AMOUNT || pagesAmount === MIN_USER_INTERFACE_ITEMS_AMOUNT;\n\n  if (isTrivialCase) {\n    return buildPaginationItemsForDesktopTrivialCases(pagesAmount, currentPage, pathname, searchParams, pageKey);\n  }\n\n  const activePageIsLastPage = currentPage === pagesAmount;\n\n  const dropdownItems: ReactElement[] = [];\n  let leftItem: MaybeNull<ReactElement> = null;\n  let rightItem: MaybeNull<ReactElement> = null;\n\n  function buildDropdownItem(i: Count, isCurrent: boolean = false) {\n    const href = getItemHref(i, pathname, searchParams, pageKey);\n    const item = (\n      <DropdownMenuItem\n        onClick={(event) => dispatchClickOnLinkOrButtonFirstChild(event.target)}\n        className={cn('p-0', {\n          'opacity-50': isCurrent\n        })}\n        key={`page-${i}`}\n      >\n        <Link\n          className={cn('block w-full border-none px-2 py-1.5 text-center font-bold')}\n          aria-current={isCurrent ? 'page' : undefined}\n          title={String(i)}\n          href={href}\n        >\n          {i}\n        </Link>\n      </DropdownMenuItem>\n    );\n    return item;\n  }\n\n  for (let i = FIRST_PAGE_PARAM; i <= pagesAmount; i++) {\n    const isActive = currentPage === i;\n\n    if (i === pagesAmount) {\n      rightItem = buildPaginationItem(i, isActive, pathname, searchParams, pageKey);\n      if (!leftItem) {\n        leftItem = buildPaginationItem(FIRST_PAGE_PARAM, false, pathname, searchParams, pageKey);\n      }\n\n      if (activePageIsLastPage) {\n        const dropdownItem = buildDropdownItem(i, true);\n        dropdownItems.push(dropdownItem);\n      } else {\n        const dropdownItem = buildDropdownItem(i);\n        dropdownItems.push(dropdownItem);\n      }\n\n      continue;\n    }\n\n    if (isActive) {\n      leftItem = buildPaginationItem(i, isActive, pathname, searchParams, pageKey);\n\n      const dropdownItem = buildDropdownItem(i, true);\n      dropdownItems.push(dropdownItem);\n\n      continue;\n    }\n\n    const dropdownItem = buildDropdownItem(i);\n    dropdownItems.push(dropdownItem);\n  }\n\n  const dropdown: ReactElement = buildDropdownMenu(dropdownItems);\n  return [leftItem, <li key=\"pagination-dropdown-desktop\">{dropdown}</li>, rightItem];\n}\n\nexport function buildDropdown(\n  pagesAmount: Quantity,\n  pageFromUrl: Count,\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  pageKey: string,\n  options?: { dropdownContentClassName?: string; isBottomWidget?: boolean }\n) {\n  const dropdownItems: ReactElement[] = [];\n  // eslint-disable-next-line no-magic-numbers\n  if (pagesAmount === 1) return null;\n\n  for (let i = FIRST_PAGE_PARAM; i <= pagesAmount; i++) {\n    const isActive = pageFromUrl === i;\n    const href = getItemHref(i, pathname, searchParams, pageKey);\n\n    const dropdownItem = (\n      <DropdownMenuItem onClick={(event) => dispatchClickOnLinkOrButtonFirstChild(event.target)} className=\"h-10 p-0\" key={`page-${i}`}>\n        <Link\n          className={cn('flex h-full w-full items-center justify-center border-none px-2 text-center font-bold', {\n            'rounded-md bg-primary': isActive\n          })}\n          aria-current={isActive ? 'page' : undefined}\n          title={String(i)}\n          href={href}\n        >\n          {i}\n        </Link>\n      </DropdownMenuItem>\n    );\n\n    dropdownItems.push(dropdownItem);\n  }\n\n  return buildDropdownMenu(dropdownItems, pageFromUrl, options);\n}\n\nexport const doBuildPaginationItems = (\n  currentPage: Count,\n  pagesAmount: Quantity,\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  isLargeScreen: boolean,\n  pageKey: string\n) =>\n  isLargeScreen\n    ? buildPaginationItemsForDesktop(pagesAmount, currentPage, pathname, searchParams, pageKey)\n    : buildPaginationItemsForMobile(pagesAmount, currentPage, pathname, searchParams, pageKey);\n\nexport const buildPreviousBtn = (prevBtnPageId: Count, pathname: AppPath, searchParams: URLSearchParams, currentPage: Count, pageKey: string) => {\n  const isDisabled = currentPage <= FIRST_PAGE_PARAM;\n\n  return (\n    <PaginationPrevious\n      href={pathname + createURLSearchParams({ [pageKey]: prevBtnPageId <= FIRST_PAGE_PARAM ? null : prevBtnPageId }, searchParams)}\n      className={cn('max-lg:h-10 max-lg:w-10 max-lg:p-0', { 'pointer-events-none opacity-50': isDisabled })}\n      aria-disabled={isDisabled}\n    />\n  );\n};\n\nexport const buildNextBtn = (\n  nextBtnPageId: Count,\n  pathname: AppPath,\n  searchParams: URLSearchParams,\n  currentPage: Count,\n  pagesAmount: Quantity,\n  pageKey: string\n) => {\n  const isDisabled = currentPage >= pagesAmount;\n\n  return (\n    <PaginationNext\n      className={cn('max-lg:h-10 max-lg:w-10 max-lg:p-0', { 'pointer-events-none opacity-50': isDisabled })}\n      href={pathname + createURLSearchParams({ [pageKey]: nextBtnPageId }, searchParams)}\n      aria-disabled={isDisabled}\n    />\n  );\n};\n"
    },
    "src/components/pages/dashboard/bar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1589",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 86
            },
            "start": {
              "column": 74,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { FunctionComponent } from 'react';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport Link from 'next/link';\n\ninterface DashboardBarPageProps {}\n\nconst DashboardBarPage: FunctionComponent<DashboardBarPageProps> = () => {\n  return (\n    <>\n      <h1>Hello there (Dashboard bar tab)</h1>\n      <span>\n        BEGIN\n        <br />\n        LoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br />\n        END\n        <br />\n      </span>\n      <Link href={ROUTES_ROOTS.WEBSITE}>Go back to the homepage</Link>\n    </>\n  );\n};\n\nexport default DashboardBarPage;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/dashboard/foo.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1590",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 74,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { FunctionComponent } from 'react';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport Link from 'next/link';\n\ninterface DashboardFooPageProps {}\n\nconst DashboardFooPage: FunctionComponent<DashboardFooPageProps> = () => {\n  return (\n    <>\n      <h1>Hello there (Dashboard foo tab)</h1>\n      <Link href={ROUTES_ROOTS.WEBSITE}>Go back to the homepage</Link>\n    </>\n  );\n};\n\nexport default DashboardFooPage;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/dashboard/main.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1591",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 76,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { FunctionComponent } from 'react';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport Link from 'next/link';\n\ninterface DashboardMainPageProps {}\n\nconst DashboardMainPage: FunctionComponent<DashboardMainPageProps> = () => {\n  return (\n    <>\n      <h1>Hello there</h1>\n      <Link href={ROUTES_ROOTS.WEBSITE}>Go back to the homepage</Link>\n    </>\n  );\n};\n\nexport default DashboardMainPage;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/phantoms/NotFoundCatchall.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1592",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/phantoms/NotFoundCatchall.ts(11,7): error TS2322: Type '({ params }: NotFoundCatchallProps) => void' is not assignable to type 'FunctionComponent<NotFoundCatchallProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 84,
              "line": 11
            }
          }
        },
        {
          "id": "1593",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 13
            },
            "start": {
              "column": 71,
              "line": 13
            }
          }
        },
        {
          "id": "1594",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 15
            },
            "start": {
              "column": 36,
              "line": 15
            }
          }
        },
        {
          "id": "1595",
          "mutatorName": "UnaryOperator",
          "replacement": "+pathnameUnknownPart.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 15
            },
            "start": {
              "column": 54,
              "line": 15
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { NotFoundCatchallParams } from '@/types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { RedirectType, usePathname, redirect } from 'next/navigation';\nimport NotFoundTaxonomy from '##/config/taxonomies/notfound';\n\ninterface NotFoundCatchallProps extends NotFoundCatchallParams {}\n\nconst NotFoundCatchall: FunctionComponent<NotFoundCatchallProps> = ({ params }) => {\n  const pathname = usePathname();\n  const pathnameUnknownPart = params[NotFoundTaxonomy.NOT_FOUND].join('/');\n  // eslint-disable-next-line no-magic-numbers\n  const computedRedirectPathname = pathname.slice(0, -pathnameUnknownPart.length);\n  redirect(computedRedirectPathname, RedirectType.replace);\n};\n\nexport default NotFoundCatchall;\n"
    },
    "src/components/phantoms/Pagefind.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1596",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/phantoms/Pagefind.tsx(12,7): error TS2322: Type '({ children }: PagefindPhantomProps) => void' is not assignable to type 'FunctionComponent<PagefindPhantomProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 84,
              "line": 12
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { useCurrentLocale } from '@/i18n/client';\n\nimport usePagefind from '../hooks/usePagefind';\n\ninterface PagefindPhantomProps extends WithChildren {}\n\nconst PagefindPhantom: FunctionComponent<PagefindPhantomProps> = ({ children }) => {\n  const currentLocale = useCurrentLocale();\n  usePagefind(currentLocale);\n\n  return children;\n};\n\nexport default PagefindPhantom;\n"
    },
    "src/components/ui/Accordion.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1597",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 123,
              "line": 16
            },
            "start": {
              "column": 3,
              "line": 16
            }
          }
        },
        {
          "id": "1598",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 16
            },
            "start": {
              "column": 76,
              "line": 16
            }
          }
        },
        {
          "id": "1599",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 18
            },
            "start": {
              "column": 29,
              "line": 18
            }
          }
        },
        {
          "id": "1600",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 35
            },
            "start": {
              "column": 3,
              "line": 21
            }
          }
        },
        {
          "id": "1601",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 137,
              "line": 25
            },
            "start": {
              "column": 11,
              "line": 25
            }
          }
        },
        {
          "id": "1602",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 48
            },
            "start": {
              "column": 3,
              "line": 40
            }
          }
        },
        {
          "id": "1603",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 46
            },
            "start": {
              "column": 26,
              "line": 46
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ElementRef } from 'react';\n\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { ChevronDown } from 'lucide-react';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = forwardRef<ElementRef<typeof AccordionPrimitive.Item>, ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>>(\n  ({ className, ...props }, ref) => <AccordionPrimitive.Item className={cn('border-b', className)} ref={ref} {...props} />\n);\nAccordionItem.displayName = 'AccordionItem';\n\nconst AccordionTrigger = forwardRef<ElementRef<typeof AccordionPrimitive.Trigger>, ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>>(\n  ({ className, children, ...props }, ref) => (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        className={cn(\n          'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {children}\n        <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n);\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = forwardRef<ElementRef<typeof AccordionPrimitive.Content>, ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>>(\n  ({ className, children, ...props }, ref) => (\n    <AccordionPrimitive.Content\n      className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n      ref={ref}\n      {...props}\n    >\n      <div className={cn('pb-4 pt-0', className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n);\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport { AccordionTrigger, AccordionContent, AccordionItem, Accordion };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Alert.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1604",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 158,
              "line": 12
            },
            "start": {
              "column": 3,
              "line": 12
            }
          }
        },
        {
          "id": "1605",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 23
            },
            "start": {
              "column": 3,
              "line": 13
            }
          }
        },
        {
          "id": "1606",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 15,
              "line": 14
            }
          }
        },
        {
          "id": "1607",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 18
            },
            "start": {
              "column": 16,
              "line": 15
            }
          }
        },
        {
          "id": "1608",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 16
            },
            "start": {
              "column": 22,
              "line": 16
            }
          }
        },
        {
          "id": "1609",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 17
            },
            "start": {
              "column": 18,
              "line": 17
            }
          }
        },
        {
          "id": "1610",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 22
            },
            "start": {
              "column": 22,
              "line": 20
            }
          }
        },
        {
          "id": "1611",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 16,
              "line": 21
            }
          }
        },
        {
          "id": "1612",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 27
            },
            "start": {
              "column": 3,
              "line": 27
            }
          }
        },
        {
          "id": "1613",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 27
            },
            "start": {
              "column": 79,
              "line": 27
            }
          }
        },
        {
          "id": "1614",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 28,
              "line": 29
            },
            "start": {
              "column": 21,
              "line": 29
            }
          }
        },
        {
          "id": "1615",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 89,
              "line": 31
            }
          }
        },
        {
          "id": "1616",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 32
            },
            "start": {
              "column": 21,
              "line": 32
            }
          }
        },
        {
          "id": "1617",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 34
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "1618",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 97,
              "line": 36
            }
          }
        },
        {
          "id": "1619",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 37
            },
            "start": {
              "column": 22,
              "line": 37
            }
          }
        },
        {
          "id": "1620",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 39
            },
            "start": {
              "column": 32,
              "line": 39
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { VariantProps } from 'class-variance-authority';\nimport type { HTMLAttributes } from 'react';\n\nimport { cva } from 'class-variance-authority';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border p-4 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7',\n  {\n    variants: {\n      variant: {\n        destructive: 'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',\n        default: 'bg-background text-foreground'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst Alert = forwardRef<HTMLDivElement, VariantProps<typeof alertVariants> & HTMLAttributes<HTMLDivElement>>(\n  ({ className, variant, ...props }, ref) => <div className={cn(alertVariants({ variant }), className)} role=\"alert\" ref={ref} {...props} />\n);\nAlert.displayName = 'Alert';\n\nconst AlertTitle = forwardRef<HTMLParagraphElement, HTMLAttributes<HTMLHeadingElement>>(({ className, ...props }, ref) => (\n  <h5 className={cn('mb-1 font-medium leading-none tracking-tight', className)} ref={ref} {...props} />\n));\nAlertTitle.displayName = 'AlertTitle';\n\nconst AlertDescription = forwardRef<HTMLParagraphElement, HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => (\n  <div className={cn('text-sm [&_p]:leading-relaxed', className)} ref={ref} {...props} />\n));\nAlertDescription.displayName = 'AlertDescription';\n\nexport { AlertDescription, AlertTitle, Alert };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Avatar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1621",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 15
            },
            "start": {
              "column": 3,
              "line": 13
            }
          }
        },
        {
          "id": "1622",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 14
            },
            "start": {
              "column": 41,
              "line": 14
            }
          }
        },
        {
          "id": "1623",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 140,
              "line": 20
            },
            "start": {
              "column": 3,
              "line": 20
            }
          }
        },
        {
          "id": "1624",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 20
            },
            "start": {
              "column": 74,
              "line": 20
            }
          }
        },
        {
          "id": "1625",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 3,
              "line": 25
            }
          }
        },
        {
          "id": "1626",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 27
            },
            "start": {
              "column": 21,
              "line": 27
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ElementRef } from 'react';\n\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Avatar = forwardRef<ElementRef<typeof AvatarPrimitive.Root>, ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>>(\n  ({ className, ...props }, ref) => (\n    <AvatarPrimitive.Root className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)} ref={ref} {...props} />\n  )\n);\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = forwardRef<ElementRef<typeof AvatarPrimitive.Image>, ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>>(\n  ({ className, ...props }, ref) => <AvatarPrimitive.Image className={cn('aspect-square h-full w-full', className)} ref={ref} {...props} />\n);\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = forwardRef<ElementRef<typeof AvatarPrimitive.Fallback>, ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>>(\n  ({ className, ...props }, ref) => (\n    <AvatarPrimitive.Fallback\n      className={cn('flex h-full w-full items-center justify-center rounded-full bg-muted', className)}\n      ref={ref}\n      {...props}\n    />\n  )\n);\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { AvatarFallback, AvatarImage, Avatar };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Badge.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1627",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 171,
              "line": 11
            },
            "start": {
              "column": 3,
              "line": 11
            }
          }
        },
        {
          "id": "1628",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 24
            },
            "start": {
              "column": 3,
              "line": 12
            }
          }
        },
        {
          "id": "1629",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 20
            },
            "start": {
              "column": 15,
              "line": 13
            }
          }
        },
        {
          "id": "1630",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 19
            },
            "start": {
              "column": 16,
              "line": 14
            }
          }
        },
        {
          "id": "1631",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 109,
              "line": 15
            },
            "start": {
              "column": 22,
              "line": 15
            }
          }
        },
        {
          "id": "1632",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 16
            },
            "start": {
              "column": 20,
              "line": 16
            }
          }
        },
        {
          "id": "1633",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 17
            },
            "start": {
              "column": 18,
              "line": 17
            }
          }
        },
        {
          "id": "1634",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 18
            },
            "start": {
              "column": 18,
              "line": 18
            }
          }
        },
        {
          "id": "1635",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 23
            },
            "start": {
              "column": 22,
              "line": 21
            }
          }
        },
        {
          "id": "1636",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 22
            },
            "start": {
              "column": 16,
              "line": 22
            }
          }
        },
        {
          "id": "1637",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 62,
              "line": 29
            }
          }
        },
        {
          "id": "1638",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 30
            },
            "start": {
              "column": 43,
              "line": 30
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { HTMLAttributes as ReactHTMLAttributes } from 'react';\nimport type { VariantProps } from 'class-variance-authority';\n\nimport { cva } from 'class-variance-authority';\nimport { cn } from '@/lib/tailwind';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        destructive: 'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',\n        secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',\n        outline: 'text-foreground'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nexport interface BadgeProps extends ReactHTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { badgeVariants, Badge };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Button.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1639",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 183,
              "line": 23
            },
            "start": {
              "column": 3,
              "line": 23
            }
          }
        },
        {
          "id": "1640",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 3,
              "line": 24
            }
          }
        },
        {
          "id": "1641",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 40
            },
            "start": {
              "column": 15,
              "line": 25
            }
          }
        },
        {
          "id": "1642",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 33
            },
            "start": {
              "column": 16,
              "line": 26
            }
          }
        },
        {
          "id": "1643",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 27
            },
            "start": {
              "column": 18,
              "line": 27
            }
          }
        },
        {
          "id": "1644",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 28
            },
            "start": {
              "column": 22,
              "line": 28
            }
          }
        },
        {
          "id": "1645",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 29
            },
            "start": {
              "column": 20,
              "line": 29
            }
          }
        },
        {
          "id": "1646",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 30
            },
            "start": {
              "column": 18,
              "line": 30
            }
          }
        },
        {
          "id": "1647",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 31
            },
            "start": {
              "column": 15,
              "line": 31
            }
          }
        },
        {
          "id": "1648",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 32
            },
            "start": {
              "column": 16,
              "line": 32
            }
          }
        },
        {
          "id": "1649",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 39
            },
            "start": {
              "column": 13,
              "line": 34
            }
          }
        },
        {
          "id": "1650",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "1651",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 36
            },
            "start": {
              "column": 18,
              "line": 36
            }
          }
        },
        {
          "id": "1652",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 37
            },
            "start": {
              "column": 13,
              "line": 37
            }
          }
        },
        {
          "id": "1653",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 38
            },
            "start": {
              "column": 15,
              "line": 38
            }
          }
        },
        {
          "id": "1654",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 44
            },
            "start": {
              "column": 22,
              "line": 41
            }
          }
        },
        {
          "id": "1655",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 42
            },
            "start": {
              "column": 16,
              "line": 42
            }
          }
        },
        {
          "id": "1656",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 43
            },
            "start": {
              "column": 13,
              "line": 43
            }
          }
        },
        {
          "id": "1657",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 52
            },
            "start": {
              "column": 76,
              "line": 52
            }
          }
        },
        {
          "id": "1658",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 55
            },
            "start": {
              "column": 129,
              "line": 52
            }
          }
        },
        {
          "id": "1659",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 53
            },
            "start": {
              "column": 33,
              "line": 53
            }
          }
        },
        {
          "id": "1660",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 54
            },
            "start": {
              "column": 45,
              "line": 54
            }
          }
        },
        {
          "id": "1661",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 56
            },
            "start": {
              "column": 26,
              "line": 56
            }
          }
        },
        {
          "id": "1662",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 92
            },
            "start": {
              "column": 7,
              "line": 69
            }
          }
        },
        {
          "id": "1663",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 70
            },
            "start": {
              "column": 22,
              "line": 70
            }
          }
        },
        {
          "id": "1664",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 70
            },
            "start": {
              "column": 22,
              "line": 70
            }
          }
        },
        {
          "id": "1665",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof maybeOnClick === 'function' || !maybeHref",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 70
            },
            "start": {
              "column": 22,
              "line": 70
            }
          }
        },
        {
          "id": "1666",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 70
            },
            "start": {
              "column": 22,
              "line": 70
            }
          }
        },
        {
          "id": "1667",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof maybeOnClick !== 'function'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 70
            },
            "start": {
              "column": 22,
              "line": 70
            }
          }
        },
        {
          "id": "1668",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 70
            },
            "start": {
              "column": 46,
              "line": 70
            }
          }
        },
        {
          "id": "1669",
          "mutatorName": "BooleanLiteral",
          "replacement": "maybeHref",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 70
            },
            "start": {
              "column": 60,
              "line": 70
            }
          }
        },
        {
          "id": "1670",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 107,
              "line": 70
            },
            "start": {
              "column": 73,
              "line": 70
            }
          }
        },
        {
          "id": "1671",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 73
            },
            "start": {
              "column": 65,
              "line": 71
            }
          }
        },
        {
          "id": "1672",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "1673",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "1674",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 85
            },
            "start": {
              "column": 18,
              "line": 75
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { ButtonHTMLAttributes as ReactButtonHTMLAttributes, FunctionComponent, MouseEventHandler } from 'react';\nimport type { VariantProps } from 'class-variance-authority';\n\nimport getLinkTarget from '@rtm/shared-lib/portable/react/getLinkTarget';\nimport { cva } from 'class-variance-authority';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\nimport Link from 'next/link';\n\nimport BUTTON_CONFIG from '../config/styles/buttons';\n\ninterface ButtonHoCProps extends ButtonProps {\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  withTransparentBackground?: boolean;\n  href?: string;\n}\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        link: 'text-primary underline-offset-4 hover:underline',\n        ghost: 'hover:bg-accent hover:text-accent-foreground'\n      },\n      size: {\n        lg: 'h-11 rounded-md px-8',\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        icon: 'h-10 w-10'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default'\n    }\n  }\n);\n\nexport interface ButtonProps extends ReactButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst ButtonBase = forwardRef<HTMLButtonElement, ButtonProps>(({ asChild = false, className, variant, size, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n  return <Comp className={cn(buttonVariants({ className, variant, size }))} ref={ref} {...props} />;\n});\nButtonBase.displayName = 'Button';\n\n/**\n * @hoc\n * @extends {ButtonBase} - AsLink?, LinkTarget?\n */\nconst Button: FunctionComponent<ButtonHoCProps> = ({\n  className: classNameValue,\n  withTransparentBackground,\n  onClick: maybeOnClick,\n  href: maybeHref,\n  children,\n  ...injectedProps\n}) => {\n  const onClickFun = typeof maybeOnClick === 'function' && !maybeHref ? () => (maybeOnClick as Function)() : undefined;\n  const className = cn(classNameValue, BUTTON_CONFIG.CLASSNAME, {\n    'bg-transparent hover:bg-transparent': withTransparentBackground\n  });\n\n  if (maybeHref) {\n    const target = getLinkTarget(maybeHref);\n\n    return (\n      <ButtonBase {...injectedProps} className={className} asChild>\n        <Link onClick={onClickFun} href={maybeHref} target={target}>\n          {children}\n        </Link>\n      </ButtonBase>\n    );\n  }\n\n  return (\n    <ButtonBase {...injectedProps} className={className} onClick={onClickFun}>\n      {children}\n    </ButtonBase>\n  );\n};\n\nexport { buttonVariants, Button };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Card.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1675",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 78,
              "line": 10
            }
          }
        },
        {
          "id": "1676",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 11
            },
            "start": {
              "column": 22,
              "line": 11
            }
          }
        },
        {
          "id": "1677",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 13
            },
            "start": {
              "column": 20,
              "line": 13
            }
          }
        },
        {
          "id": "1678",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 84,
              "line": 15
            }
          }
        },
        {
          "id": "1679",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 16
            },
            "start": {
              "column": 22,
              "line": 16
            }
          }
        },
        {
          "id": "1680",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 18
            },
            "start": {
              "column": 26,
              "line": 18
            }
          }
        },
        {
          "id": "1681",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 36
            },
            "start": {
              "column": 88,
              "line": 21
            }
          }
        },
        {
          "id": "1682",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 22
            },
            "start": {
              "column": 26,
              "line": 22
            }
          }
        },
        {
          "id": "1683",
          "mutatorName": "LogicalOperator",
          "replacement": "titleTypeValue && 'h3'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 23
            },
            "start": {
              "column": 23,
              "line": 23
            }
          }
        },
        {
          "id": "1684",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 23
            },
            "start": {
              "column": 41,
              "line": 23
            }
          }
        },
        {
          "id": "1685",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 24
            },
            "start": {
              "column": 15,
              "line": 24
            }
          }
        },
        {
          "id": "1686",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 38
            },
            "start": {
              "column": 25,
              "line": 38
            }
          }
        },
        {
          "id": "1687",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 42
            },
            "start": {
              "column": 101,
              "line": 40
            }
          }
        },
        {
          "id": "1688",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 41
            },
            "start": {
              "column": 20,
              "line": 41
            }
          }
        },
        {
          "id": "1689",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 43
            },
            "start": {
              "column": 31,
              "line": 43
            }
          }
        },
        {
          "id": "1690",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 85,
              "line": 45
            }
          }
        },
        {
          "id": "1691",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 46
            },
            "start": {
              "column": 22,
              "line": 46
            }
          }
        },
        {
          "id": "1692",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 48
            },
            "start": {
              "column": 27,
              "line": 48
            }
          }
        },
        {
          "id": "1693",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 84,
              "line": 50
            }
          }
        },
        {
          "id": "1694",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 51
            },
            "start": {
              "column": 22,
              "line": 51
            }
          }
        },
        {
          "id": "1695",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 53
            },
            "start": {
              "column": 26,
              "line": 53
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { HTMLAttributes as ReactHTMLAttributes, ReactNode } from 'react';\nimport type { TitleType } from '@rtm/shared-types/HTML';\n\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Card = forwardRef<HTMLDivElement, ReactHTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('rounded-lg border bg-card text-card-foreground shadow-sm', className)} ref={ref} {...props} />\n));\nCard.displayName = 'Card';\n\nconst CardHeader = forwardRef<HTMLDivElement, ReactHTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('flex flex-col space-y-1.5 p-6', className)} ref={ref} {...props} />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = forwardRef<HTMLParagraphElement, ReactHTMLAttributes<HTMLHeadingElement> & { titleType?: TitleType }>(\n  ({ className: classNameValue, titleType: titleTypeValue, ...injectedProps }, ref) => {\n    const className = cn('text-2xl font-semibold leading-none tracking-tight', classNameValue);\n    const titleType = titleTypeValue ?? 'h3';\n    const p = { ...injectedProps, className, ref };\n\n    const TITLES_MAP: Record<TitleType, ReactNode> = {\n      h1: <h1 {...p} />,\n      h2: <h2 {...p} />,\n      h3: <h3 {...p} />,\n      h4: <h4 {...p} />,\n      h5: <h5 {...p} />,\n      h6: <h6 {...p} />\n    } as const;\n\n    return TITLES_MAP[titleType];\n  }\n);\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = forwardRef<HTMLParagraphElement, ReactHTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => (\n  <p className={cn('text-sm text-muted-foreground', className)} ref={ref} {...props} />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = forwardRef<HTMLDivElement, ReactHTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('p-6 pt-0', className)} ref={ref} {...props} />\n));\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = forwardRef<HTMLDivElement, ReactHTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('flex items-center p-6 pt-0', className)} ref={ref} {...props} />\n));\nCardFooter.displayName = 'CardFooter';\n\nexport { CardDescription, CardContent, CardFooter, CardHeader, CardTitle, Card };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Command.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1696",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 116,
              "line": 16
            }
          }
        },
        {
          "id": "1697",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 110,
              "line": 18
            },
            "start": {
              "column": 19,
              "line": 18
            }
          }
        },
        {
          "id": "1698",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 23,
              "line": 27
            }
          }
        },
        {
          "id": "1699",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 55
            },
            "start": {
              "column": 3,
              "line": 43
            }
          }
        },
        {
          "id": "1700",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 163,
              "line": 48
            },
            "start": {
              "column": 11,
              "line": 48
            }
          }
        },
        {
          "id": "1701",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 63
            },
            "start": {
              "column": 3,
              "line": 61
            }
          }
        },
        {
          "id": "1702",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 62
            },
            "start": {
              "column": 42,
              "line": 62
            }
          }
        },
        {
          "id": "1703",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 70
            },
            "start": {
              "column": 133,
              "line": 68
            }
          }
        },
        {
          "id": "1704",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 84
            },
            "start": {
              "column": 3,
              "line": 75
            }
          }
        },
        {
          "id": "1705",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 225,
              "line": 78
            },
            "start": {
              "column": 9,
              "line": 78
            }
          }
        },
        {
          "id": "1706",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 138,
              "line": 90
            },
            "start": {
              "column": 3,
              "line": 90
            }
          }
        },
        {
          "id": "1707",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 90
            },
            "start": {
              "column": 79,
              "line": 90
            }
          }
        },
        {
          "id": "1708",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 104
            },
            "start": {
              "column": 3,
              "line": 95
            }
          }
        },
        {
          "id": "1709",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 228,
              "line": 98
            },
            "start": {
              "column": 9,
              "line": 98
            }
          }
        },
        {
          "id": "1710",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 111
            },
            "start": {
              "column": 92,
              "line": 109
            }
          }
        },
        {
          "id": "1711",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 110
            },
            "start": {
              "column": 30,
              "line": 110
            }
          }
        },
        {
          "id": "1712",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 112
            },
            "start": {
              "column": 31,
              "line": 112
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { HTMLAttributes as ReactHTMLAttributes, ComponentPropsWithoutRef, ElementRef } from 'react';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\nimport type { DialogProps } from '@radix-ui/react-dialog';\n\nimport { DialogContent, Dialog } from '@/components/ui/Dialog';\nimport { MagnifyingGlassIcon } from '@radix-ui/react-icons';\nimport { Command as CommandPrimitive } from 'cmdk';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Command = forwardRef<ElementRef<typeof CommandPrimitive>, ComponentPropsWithoutRef<typeof CommandPrimitive>>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    className={cn('flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground', className)}\n    ref={ref}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({\n  closeButtonI18nTitle,\n  closeButtonClassName,\n  children,\n  ...props\n}: { closeButtonI18nTitle: I18nVocabTarget; closeButtonClassName?: string } & CommandDialogProps) => (\n  <Dialog {...props}>\n    <DialogContent closeButtonClassName={closeButtonClassName} closeButtonI18nTitle={closeButtonI18nTitle} className=\"overflow-hidden p-0\">\n      <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n        {children}\n      </Command>\n    </DialogContent>\n  </Dialog>\n);\n\nconst CommandInput = forwardRef<ElementRef<typeof CommandPrimitive.Input>, ComponentPropsWithoutRef<typeof CommandPrimitive.Input>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n      <MagnifyingGlassIcon className=\"h-4 w-4 shrink-0 opacity-50 ltr:mr-2 rtl:ml-2\" />\n      <CommandPrimitive.Input\n        className={cn(\n          'flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    </div>\n  )\n);\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = forwardRef<ElementRef<typeof CommandPrimitive.List>, ComponentPropsWithoutRef<typeof CommandPrimitive.List>>(\n  ({ className, ...props }, ref) => (\n    <CommandPrimitive.List className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)} ref={ref} {...props} />\n  )\n);\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = forwardRef<ElementRef<typeof CommandPrimitive.Empty>, ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>>((props, ref) => (\n  <CommandPrimitive.Empty className=\"py-6 text-center text-sm\" ref={ref} {...props} />\n));\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = forwardRef<ElementRef<typeof CommandPrimitive.Group>, ComponentPropsWithoutRef<typeof CommandPrimitive.Group>>(\n  ({ className, ...props }, ref) => (\n    <CommandPrimitive.Group\n      className={cn(\n        'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n);\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = forwardRef<ElementRef<typeof CommandPrimitive.Separator>, ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>>(\n  ({ className, ...props }, ref) => <CommandPrimitive.Separator className={cn('-mx-1 h-px bg-border', className)} ref={ref} {...props} />\n);\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = forwardRef<ElementRef<typeof CommandPrimitive.Item>, ComponentPropsWithoutRef<typeof CommandPrimitive.Item>>(\n  ({ className, ...props }, ref) => (\n    <CommandPrimitive.Item\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-disabled:pointer-events-none aria-disabled:opacity-50 aria-selected:bg-accent aria-selected:text-accent-foreground',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n);\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({ className, ...props }: ReactHTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)} {...props} />;\n};\nCommandShortcut.displayName = 'CommandShortcut';\n\nexport { CommandSeparator, CommandShortcut, CommandDialog, CommandInput, CommandEmpty, CommandGroup, CommandList, CommandItem, Command };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Dialog.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1713",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 3,
              "line": 24
            }
          }
        },
        {
          "id": "1714",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 162,
              "line": 27
            },
            "start": {
              "column": 9,
              "line": 27
            }
          }
        },
        {
          "id": "1715",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 69
            },
            "start": {
              "column": 91,
              "line": 40
            }
          }
        },
        {
          "id": "1716",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 566,
              "line": 48
            },
            "start": {
              "column": 11,
              "line": 48
            }
          }
        },
        {
          "id": "1717",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 396,
              "line": 58
            },
            "start": {
              "column": 15,
              "line": 58
            }
          }
        },
        {
          "id": "1718",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 74
            },
            "start": {
              "column": 22,
              "line": 72
            }
          }
        },
        {
          "id": "1719",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 73
            },
            "start": {
              "column": 22,
              "line": 73
            }
          }
        },
        {
          "id": "1720",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 75
            },
            "start": {
              "column": 28,
              "line": 75
            }
          }
        },
        {
          "id": "1721",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 79
            },
            "start": {
              "column": 22,
              "line": 77
            }
          }
        },
        {
          "id": "1722",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 78
            },
            "start": {
              "column": 22,
              "line": 78
            }
          }
        },
        {
          "id": "1723",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 80
            },
            "start": {
              "column": 28,
              "line": 80
            }
          }
        },
        {
          "id": "1724",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 85
            },
            "start": {
              "column": 3,
              "line": 83
            }
          }
        },
        {
          "id": "1725",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 84
            },
            "start": {
              "column": 42,
              "line": 84
            }
          }
        },
        {
          "id": "1726",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 148,
              "line": 90
            },
            "start": {
              "column": 3,
              "line": 90
            }
          }
        },
        {
          "id": "1727",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 90
            },
            "start": {
              "column": 80,
              "line": 90
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { HTMLAttributes as ReactHTMLAttributes, ComponentPropsWithoutRef, ElementRef } from 'react';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\n\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { Cross2Icon } from '@radix-ui/react-icons';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = forwardRef<ElementRef<typeof DialogPrimitive.Overlay>, ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>>(\n  ({ className, ...props }, ref) => (\n    <DialogPrimitive.Overlay\n      className={cn(\n        'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n);\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = forwardRef<\n  ElementRef<typeof DialogPrimitive.Content>,\n  { closeButtonI18nTitle: I18nVocabTarget; closeButtonClassName?: string } & ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ closeButtonI18nTitle, closeButtonClassName, className, children, ...props }, ref) => {\n  const globalT = getClientSideI18n();\n\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        className={cn(\n          'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background pb-10 pt-10 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg ltr:pl-10 ltr:pr-6 rtl:pl-6 rtl:pr-10',\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {children}\n        <div className=\"sticky left-0 right-2.5 top-0 h-0 w-0 self-start\">\n          <DialogPrimitive.Close\n            className={cn(\n              'absolute bottom-1 rounded-full bg-accent p-1 text-muted-foreground ring-offset-background transition-all hover:bg-primary hover:text-white focus:bg-primary focus:text-white focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none dark:opacity-70 dark:hover:text-inherit dark:hover:opacity-100 dark:focus:text-inherit dark:focus:opacity-100',\n              closeButtonClassName\n            )}\n          >\n            <Cross2Icon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">{globalT(closeButtonI18nTitle)}</span>\n          </DialogPrimitive.Close>\n        </div>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n});\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({ className, ...props }: ReactHTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)} {...props} />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({ className, ...props }: ReactHTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)} {...props} />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = forwardRef<ElementRef<typeof DialogPrimitive.Title>, ComponentPropsWithoutRef<typeof DialogPrimitive.Title>>(\n  ({ className, ...props }, ref) => (\n    <DialogPrimitive.Title className={cn('text-lg font-semibold leading-none tracking-tight', className)} ref={ref} {...props} />\n  )\n);\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = forwardRef<ElementRef<typeof DialogPrimitive.Description>, ComponentPropsWithoutRef<typeof DialogPrimitive.Description>>(\n  ({ className, ...props }, ref) => <DialogPrimitive.Description className={cn('text-sm text-muted-foreground', className)} ref={ref} {...props} />\n);\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport { DialogDescription, DialogOverlay, DialogTrigger, DialogContent, DialogPortal, DialogHeader, DialogFooter, DialogClose, DialogTitle, Dialog };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/DropdownMenu.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1728",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 57
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "1729",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 32
            },
            "start": {
              "column": 55,
              "line": 32
            }
          }
        },
        {
          "id": "1730",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 33
            },
            "start": {
              "column": 13,
              "line": 33
            }
          }
        },
        {
          "id": "1731",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 33
            },
            "start": {
              "column": 32,
              "line": 33
            }
          }
        },
        {
          "id": "1732",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 33
            },
            "start": {
              "column": 39,
              "line": 33
            }
          }
        },
        {
          "id": "1733",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 43
            },
            "start": {
              "column": 19,
              "line": 36
            }
          }
        },
        {
          "id": "1734",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 37
            },
            "start": {
              "column": 28,
              "line": 37
            }
          }
        },
        {
          "id": "1735",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 37
            },
            "start": {
              "column": 29,
              "line": 37
            }
          }
        },
        {
          "id": "1736",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 13,
              "line": 39
            },
            "start": {
              "column": 9,
              "line": 39
            }
          }
        },
        {
          "id": "1737",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 13,
              "line": 39
            },
            "start": {
              "column": 9,
              "line": 39
            }
          }
        },
        {
          "id": "1738",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 42
            },
            "start": {
              "column": 12,
              "line": 42
            }
          }
        },
        {
          "id": "1739",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 43
            },
            "start": {
              "column": 6,
              "line": 43
            }
          }
        },
        {
          "id": "1740",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 45
            },
            "start": {
              "column": 44,
              "line": 45
            }
          }
        },
        {
          "id": "1741",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 50
            },
            "start": {
              "column": 48,
              "line": 50
            }
          }
        },
        {
          "id": "1742",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 50
            },
            "start": {
              "column": 80,
              "line": 50
            }
          }
        },
        {
          "id": "1743",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 87
            },
            "start": {
              "column": 3,
              "line": 74
            }
          }
        },
        {
          "id": "1744",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "1745",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 78
            },
            "start": {
              "column": 7,
              "line": 78
            }
          }
        },
        {
          "id": "1746",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 78
            },
            "start": {
              "column": 7,
              "line": 78
            }
          }
        },
        {
          "id": "1747",
          "mutatorName": "LogicalOperator",
          "replacement": "inset || 'pl-8'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 78
            },
            "start": {
              "column": 7,
              "line": 78
            }
          }
        },
        {
          "id": "1748",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 78
            },
            "start": {
              "column": 16,
              "line": 78
            }
          }
        },
        {
          "id": "1749",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 102
            },
            "start": {
              "column": 3,
              "line": 93
            }
          }
        },
        {
          "id": "1750",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 446,
              "line": 96
            },
            "start": {
              "column": 7,
              "line": 96
            }
          }
        },
        {
          "id": "1751",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 121
            },
            "start": {
              "column": 3,
              "line": 109
            }
          }
        },
        {
          "id": "1752",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 448,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "1753",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 139
            },
            "start": {
              "column": 3,
              "line": 129
            }
          }
        },
        {
          "id": "1754",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 232,
              "line": 132
            },
            "start": {
              "column": 7,
              "line": 132
            }
          }
        },
        {
          "id": "1755",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 133
            },
            "start": {
              "column": 7,
              "line": 133
            }
          }
        },
        {
          "id": "1756",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 133
            },
            "start": {
              "column": 7,
              "line": 133
            }
          }
        },
        {
          "id": "1757",
          "mutatorName": "LogicalOperator",
          "replacement": "inset || 'pl-8'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 133
            },
            "start": {
              "column": 7,
              "line": 133
            }
          }
        },
        {
          "id": "1758",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 133
            },
            "start": {
              "column": 16,
              "line": 133
            }
          }
        },
        {
          "id": "1759",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 162
            },
            "start": {
              "column": 3,
              "line": 145
            }
          }
        },
        {
          "id": "1760",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 237,
              "line": 148
            },
            "start": {
              "column": 7,
              "line": 148
            }
          }
        },
        {
          "id": "1761",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 184
            },
            "start": {
              "column": 3,
              "line": 168
            }
          }
        },
        {
          "id": "1762",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 237,
              "line": 171
            },
            "start": {
              "column": 7,
              "line": 171
            }
          }
        },
        {
          "id": "1763",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 194
            },
            "start": {
              "column": 3,
              "line": 192
            }
          }
        },
        {
          "id": "1764",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 193
            },
            "start": {
              "column": 46,
              "line": 193
            }
          }
        },
        {
          "id": "1765",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 193
            },
            "start": {
              "column": 83,
              "line": 193
            }
          }
        },
        {
          "id": "1766",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 193
            },
            "start": {
              "column": 83,
              "line": 193
            }
          }
        },
        {
          "id": "1767",
          "mutatorName": "LogicalOperator",
          "replacement": "inset || 'pl-8'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 193
            },
            "start": {
              "column": 83,
              "line": 193
            }
          }
        },
        {
          "id": "1768",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 193
            },
            "start": {
              "column": 92,
              "line": 193
            }
          }
        },
        {
          "id": "1769",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 147,
              "line": 200
            },
            "start": {
              "column": 3,
              "line": 200
            }
          }
        },
        {
          "id": "1770",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 110,
              "line": 200
            },
            "start": {
              "column": 84,
              "line": 200
            }
          }
        },
        {
          "id": "1771",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 205
            },
            "start": {
              "column": 97,
              "line": 203
            }
          }
        },
        {
          "id": "1772",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 204
            },
            "start": {
              "column": 30,
              "line": 204
            }
          }
        },
        {
          "id": "1773",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 206
            },
            "start": {
              "column": 36,
              "line": 206
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { HTMLAttributes as ReactHTMLAttributes, ComponentPropsWithoutRef, FunctionComponent, ElementRef } from 'react';\nimport type { WithDeepResetOnLgBreakpointEvents } from '@rtm/shared-types/Next';\n\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport getDirection from '@rtm/shared-lib/portable/html/getDirection';\nimport { ChevronRight, Circle, Check } from 'lucide-react';\nimport { forwardRef, useEffect, useState } from 'react';\nimport { getBodyContainer } from '@/lib/html';\nimport { cn } from '@/lib/tailwind';\n\nimport useIsLargeScreen from '../hooks/useIsLargeScreen';\n\ntype DropdownMenuExtensions = Partial<WithDeepResetOnLgBreakpointEvents>;\n\nconst DropdownMenuBase = DropdownMenuPrimitive.Root;\n\n/**\n * @hoc\n * @extends {DropdownMenuBase} - Automatic dir attribute, deep reset on screen width heavy changes\n */\nconst DropdownMenu: FunctionComponent<DropdownMenuPrimitive.DropdownMenuProps & DropdownMenuExtensions> = ({\n  withDeepResetOnLgBreakpointEvents,\n  children,\n  open,\n  ...injectedProps\n}) => {\n  const [isMounted, setIsMounted] = useState<boolean>(false);\n  useEffect(() => setIsMounted(true), []);\n  const isLargeScreen = useIsLargeScreen();\n\n  useEffect(() => {\n    const EFFECT_CLASSES = ['select-none'];\n\n    if (open) getBodyContainer().classList.add(...EFFECT_CLASSES);\n    else getBodyContainer().classList.remove(...EFFECT_CLASSES);\n\n    return () => getBodyContainer().classList.remove(...EFFECT_CLASSES);\n  }, [open]);\n\n  const dir = isMounted ? getDirection() : 'ltr';\n\n  return (\n    <DropdownMenuBase\n      {...injectedProps}\n      key={withDeepResetOnLgBreakpointEvents ? `deep-reset-${isLargeScreen}` : 'no-deep-reset'}\n      open={open}\n      dir={dir}\n    >\n      {children}\n    </DropdownMenuBase>\n  );\n};\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, children, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\n      inset && 'pl-8',\n      className\n    )}\n    ref={ref}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className\n    )}\n    ref={ref}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.Content>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n  // eslint-disable-next-line no-magic-numbers\n>(({ sideOffset = 4, className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      className={cn(\n        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      sideOffset={sideOffset}\n      ref={ref}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.Item>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className\n    )}\n    ref={ref}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    checked={checked}\n    ref={ref}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    ref={ref}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.Label>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)} ref={ref} {...props} />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = forwardRef<\n  ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => <DropdownMenuPrimitive.Separator className={cn('-mx-1 my-1 h-px bg-muted', className)} ref={ref} {...props} />);\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({ className, ...props }: ReactHTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn('ml-auto text-xs tracking-widest opacity-60', className)} {...props} />;\n};\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\nexport {\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n  DropdownMenuPortal,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuSub,\n  DropdownMenu\n};\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Footer.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1774",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/Footer.tsx(17,7): error TS2322: Type '() => void' is not assignable to type 'FunctionComponent<{}>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 119
            },
            "start": {
              "column": 49,
              "line": 17
            }
          }
        },
        {
          "id": "1775",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 18
            },
            "start": {
              "column": 46,
              "line": 18
            }
          }
        },
        {
          "id": "1776",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 19
            },
            "start": {
              "column": 54,
              "line": 19
            }
          }
        },
        {
          "id": "1777",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 20
            },
            "start": {
              "column": 61,
              "line": 20
            }
          }
        },
        {
          "id": "1778",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 108,
              "line": 24
            },
            "start": {
              "column": 48,
              "line": 24
            }
          }
        },
        {
          "id": "1779",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 24
            },
            "start": {
              "column": 49,
              "line": 24
            }
          }
        },
        {
          "id": "1780",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 24
            },
            "start": {
              "column": 55,
              "line": 24
            }
          }
        },
        {
          "id": "1781",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 24
            },
            "start": {
              "column": 61,
              "line": 24
            }
          }
        },
        {
          "id": "1782",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 24
            },
            "start": {
              "column": 67,
              "line": 24
            }
          }
        },
        {
          "id": "1783",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 24
            },
            "start": {
              "column": 73,
              "line": 24
            }
          }
        },
        {
          "id": "1784",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 24
            },
            "start": {
              "column": 79,
              "line": 24
            }
          }
        },
        {
          "id": "1785",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 24
            },
            "start": {
              "column": 85,
              "line": 24
            }
          }
        },
        {
          "id": "1786",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 24
            },
            "start": {
              "column": 91,
              "line": 24
            }
          }
        },
        {
          "id": "1787",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 101,
              "line": 24
            },
            "start": {
              "column": 97,
              "line": 24
            }
          }
        },
        {
          "id": "1788",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 24
            },
            "start": {
              "column": 103,
              "line": 24
            }
          }
        },
        {
          "id": "1789",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/Footer.tsx(33,30): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n  Overload 2 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 33
            },
            "start": {
              "column": 30,
              "line": 33
            }
          }
        },
        {
          "id": "1790",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 33
            },
            "start": {
              "column": 53,
              "line": 33
            }
          }
        },
        {
          "id": "1791",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 33
            },
            "start": {
              "column": 59,
              "line": 33
            }
          }
        },
        {
          "id": "1792",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/Footer.tsx(46,14): error TS2367: This comparison appears to be unintentional because the types 'void' and 'string' have no overlap.\nsrc/components/ui/Footer.tsx(48,34): error TS2345: Argument of type 'void' is not assignable to parameter of type 'SetStateAction<string>'.\nsrc/components/ui/Footer.tsx(49,25): error TS2345: Argument of type 'void' is not assignable to parameter of type 'SetStateAction<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 39
            },
            "start": {
              "column": 45,
              "line": 35
            }
          }
        },
        {
          "id": "1793",
          "mutatorName": "BooleanLiteral",
          "replacement": "hearts",
          "statusReason": "src/components/ui/Footer.tsx(38,53): error TS2339: Property 'length' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "1794",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "1795",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "1796",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 37
            },
            "start": {
              "column": 25,
              "line": 37
            }
          }
        },
        {
          "id": "1797",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Math.random() / hearts.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 38
            },
            "start": {
              "column": 30,
              "line": 38
            }
          }
        },
        {
          "id": "1798",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 39
            },
            "start": {
              "column": 6,
              "line": 39
            }
          }
        },
        {
          "id": "1799",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 63
            },
            "start": {
              "column": 19,
              "line": 41
            }
          }
        },
        {
          "id": "1800",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 56
            },
            "start": {
              "column": 36,
              "line": 42
            }
          }
        },
        {
          "id": "1801",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/ui/Footer.tsx(46,14): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/ui/Footer.tsx(46,21): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 46
            },
            "start": {
              "column": 34,
              "line": 46
            }
          }
        },
        {
          "id": "1802",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 50
            },
            "start": {
              "column": 14,
              "line": 50
            }
          }
        },
        {
          "id": "1803",
          "mutatorName": "EqualityOperator",
          "replacement": "newHeart !== oldHeart",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 50
            },
            "start": {
              "column": 14,
              "line": 50
            }
          }
        },
        {
          "id": "1804",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 52
            },
            "start": {
              "column": 11,
              "line": 52
            }
          }
        },
        {
          "id": "1805",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 52
            },
            "start": {
              "column": 11,
              "line": 52
            }
          }
        },
        {
          "id": "1806",
          "mutatorName": "BooleanLiteral",
          "replacement": "heartToggler",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 55
            },
            "start": {
              "column": 23,
              "line": 55
            }
          }
        },
        {
          "id": "1807",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 60
            },
            "start": {
              "column": 40,
              "line": 58
            }
          }
        },
        {
          "id": "1808",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 62
            },
            "start": {
              "column": 12,
              "line": 62
            }
          }
        },
        {
          "id": "1809",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 63
            },
            "start": {
              "column": 6,
              "line": 63
            }
          }
        },
        {
          "id": "1810",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 69
            },
            "start": {
              "column": 19,
              "line": 65
            }
          }
        },
        {
          "id": "1811",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 69
            },
            "start": {
              "column": 6,
              "line": 69
            }
          }
        },
        {
          "id": "1812",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 79
            },
            "start": {
              "column": 19,
              "line": 71
            }
          }
        },
        {
          "id": "1813",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "1814",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "1815",
          "mutatorName": "LogicalOperator",
          "replacement": "firstHeartInstance === null && secondHeartInstance === null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "1816",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "1817",
          "mutatorName": "EqualityOperator",
          "replacement": "firstHeartInstance !== null",
          "statusReason": "src/components/ui/Footer.tsx(78,56): error TS2339: Property 'getBoundingClientRect' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "1818",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 75
            },
            "start": {
              "column": 40,
              "line": 75
            }
          }
        },
        {
          "id": "1819",
          "mutatorName": "EqualityOperator",
          "replacement": "secondHeartInstance !== null",
          "statusReason": "src/components/ui/Footer.tsx(77,70): error TS2339: Property 'getBoundingClientRect' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 75
            },
            "start": {
              "column": 40,
              "line": 75
            }
          }
        },
        {
          "id": "1820",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 77
            },
            "start": {
              "column": 9,
              "line": 77
            }
          }
        },
        {
          "id": "1821",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 77
            },
            "start": {
              "column": 9,
              "line": 77
            }
          }
        },
        {
          "id": "1822",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 79
            },
            "start": {
              "column": 6,
              "line": 79
            }
          }
        },
        {
          "id": "1823",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 84
            },
            "start": {
              "column": 23,
              "line": 84
            }
          }
        },
        {
          "id": "1824",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 87
            },
            "start": {
              "column": 79,
              "line": 84
            }
          }
        },
        {
          "id": "1825",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 86
            },
            "start": {
              "column": 24,
              "line": 86
            }
          }
        },
        {
          "id": "1826",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 86
            },
            "start": {
              "column": 24,
              "line": 86
            }
          }
        },
        {
          "id": "1827",
          "mutatorName": "EqualityOperator",
          "replacement": "heartContainerWidthInPx !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 86
            },
            "start": {
              "column": 24,
              "line": 86
            }
          }
        },
        {
          "id": "1828",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 92
            },
            "start": {
              "column": 23,
              "line": 92
            }
          }
        },
        {
          "id": "1829",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 95
            },
            "start": {
              "column": 89,
              "line": 92
            }
          }
        },
        {
          "id": "1830",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 94
            },
            "start": {
              "column": 24,
              "line": 94
            }
          }
        },
        {
          "id": "1831",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 94
            },
            "start": {
              "column": 24,
              "line": 94
            }
          }
        },
        {
          "id": "1832",
          "mutatorName": "EqualityOperator",
          "replacement": "heartContainerWidthInPx !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 94
            },
            "start": {
              "column": 24,
              "line": 94
            }
          }
        },
        {
          "id": "1833",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 96
            },
            "start": {
              "column": 16,
              "line": 96
            }
          }
        },
        {
          "id": "1834",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 96
            },
            "start": {
              "column": 51,
              "line": 96
            }
          }
        },
        {
          "id": "1835",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 115,
              "line": 99
            },
            "start": {
              "column": 25,
              "line": 99
            }
          }
        },
        {
          "id": "1836",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 101
            },
            "start": {
              "column": 117,
              "line": 99
            }
          }
        },
        {
          "id": "1837",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 108
            },
            "start": {
              "column": 25,
              "line": 108
            }
          }
        },
        {
          "id": "1838",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 110
            },
            "start": {
              "column": 122,
              "line": 108
            }
          }
        },
        {
          "id": "1839",
          "mutatorName": "BooleanLiteral",
          "replacement": "heartToggler",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 109
            },
            "start": {
              "column": 26,
              "line": 109
            }
          }
        },
        {
          "id": "1840",
          "mutatorName": "BooleanLiteral",
          "replacement": "heartToggler",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 111
            },
            "start": {
              "column": 24,
              "line": 111
            }
          }
        },
        {
          "id": "1841",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 129
            },
            "start": {
              "column": 48,
              "line": 121
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FunctionComponent } from 'react';\n\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport { FOOTER_CONTAINER_ID } from '@/config/elementsId';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nconst INTERVAL_DURATION = 10_100;\n\ninterface FooterProps {}\n\nconst FooterHeadline: FunctionComponent = () => {\n  const [heart, setHeart] = useState<string>('❤️');\n  const [nextHeart, setNextHeart] = useState<string>('❤️');\n  const [heartToggler, setHeartToggler] = useState<boolean>(true);\n  // eslint-disable-next-line no-magic-numbers\n  const [heartContainerWidthInPx, setHeartContainerWidthInPx] = useState<number>(0);\n\n  const heartsCollectionRef = useRef<string[]>(['❤️', '🧡', '💛', '💚', '💙', '💜', '💕', '💓', '💗', '💖']);\n  const heartRef = useRef<string>(heart);\n  const nextHeartRef = useRef<string>(nextHeart);\n  const heartTogglerRef = useRef<boolean>(heartToggler);\n\n  const firstHeartRef = useRef<MaybeNull<HTMLSpanElement>>(null);\n  const secondHeartRef = useRef<MaybeNull<HTMLSpanElement>>(null);\n\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const footerCopy = scopedT('footer-copy').replace('❤️', '');\n\n  const pickRandomHeart = useCallback(() => {\n    const hearts = getRefCurrentPtr(heartsCollectionRef);\n    if (!hearts) return '❤️';\n    return hearts[Math.floor(Math.random() * hearts.length)];\n  }, []);\n\n  useEffect(() => {\n    function heartsEffectHandler() {\n      let newHeart = pickRandomHeart();\n\n      const heartToggler = getRefCurrentPtr(heartTogglerRef);\n      const [heart, nextHeart] = [getRefCurrentPtr(heartRef), getRefCurrentPtr(nextHeartRef)];\n\n      const oldHeart = heartToggler ? nextHeart : heart;\n\n      while (newHeart === oldHeart) newHeart = pickRandomHeart();\n\n      if (heartToggler) setHeart(newHeart);\n      else setNextHeart(newHeart);\n\n      setHeartToggler(!heartToggler);\n    }\n\n    const interval = setInterval(() => {\n      heartsEffectHandler();\n    }, INTERVAL_DURATION);\n\n    return () => clearInterval(interval);\n  }, [pickRandomHeart]);\n\n  useEffect(() => {\n    heartTogglerRef.current = heartToggler;\n    heartRef.current = heart;\n    nextHeartRef.current = nextHeart;\n  }, [heartToggler, heart, nextHeart]);\n\n  useEffect(() => {\n    const firstHeartInstance = getRefCurrentPtr(firstHeartRef);\n    const secondHeartInstance = getRefCurrentPtr(secondHeartRef);\n\n    if (firstHeartInstance === null || secondHeartInstance === null) return;\n\n    if (heartToggler) setHeartContainerWidthInPx(secondHeartInstance.getBoundingClientRect().width);\n    else setHeartContainerWidthInPx(firstHeartInstance.getBoundingClientRect().width);\n  }, [heartToggler]);\n\n  return (\n    <p className=\"relative flex select-none\">\n      <span\n        className={cn('opacity-100 transition-opacity delay-75 duration-500', {\n          // eslint-disable-next-line no-magic-numbers\n          'opacity-0': heartContainerWidthInPx === 0\n        })}\n      >\n        {footerCopy}\n      </span>\n      <span\n        className={cn('relative opacity-100 transition-opacity delay-200 duration-500', {\n          // eslint-disable-next-line no-magic-numbers\n          'opacity-0': heartContainerWidthInPx === 0\n        })}\n        style={{ width: heartContainerWidthInPx + 'px' }}\n      >\n        <span\n          className={cn('absolute bottom-0 left-0 right-0 top-0 w-fit opacity-100 transition-opacity duration-700', {\n            'opacity-0': heartToggler\n          })}\n          aria-hidden={heartToggler}\n          ref={firstHeartRef}\n        >\n          &nbsp;{heart}\n        </span>\n        <span\n          className={cn('absolute bottom-0 left-0 right-0 top-0 z-10 w-fit opacity-100 transition-opacity duration-700', {\n            'opacity-0': !heartToggler\n          })}\n          aria-hidden={!heartToggler}\n          ref={secondHeartRef}\n        >\n          &nbsp;{nextHeart}\n        </span>\n      </span>\n    </p>\n  );\n};\n\nconst Footer: FunctionComponent<FooterProps> = () => (\n  <footer\n    className=\"z-10 flex min-h-20 flex-col items-center justify-center border-t-[1px] border-transparent bg-black text-center text-white dark:border-card dark:bg-black\"\n    data-pagefind-ignore=\"all\"\n    id={FOOTER_CONTAINER_ID}\n  >\n    <FooterHeadline />\n  </footer>\n);\n\nexport default Footer;\n"
    },
    "src/components/ui/Input.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1842",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 96,
              "line": 11
            }
          }
        },
        {
          "id": "1843",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 359,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "1844",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 28,
              "line": 24
            },
            "start": {
              "column": 21,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { InputHTMLAttributes as ReactInputHTMLAttributes } from 'react';\n\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nexport interface InputProps extends ReactInputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      className={cn(\n        'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n        className\n      )}\n      type={type}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nInput.displayName = 'Input';\n\nexport { Input };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Loader.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1845",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 84,
              "line": 17
            }
          }
        },
        {
          "id": "1846",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 21
            },
            "start": {
              "column": 14,
              "line": 21
            }
          }
        },
        {
          "id": "1847",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { FunctionComponent, CSSProperties } from 'react';\n\nimport LOADER_COLORS from '@/components/config/styles/loader/colors';\nimport { BeatLoader } from 'react-spinners';\n\ninterface LoaderProps {\n  override?: CSSProperties;\n}\n\nconst { BACKGROUND_COLOR, COLOR } = LOADER_COLORS;\n\nconst Loader: FunctionComponent<LoaderProps> = ({ override: cssOverride } = {}) => {\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex h-screen w-full cursor-wait select-none items-center justify-center\"\n      style={{ backgroundColor: BACKGROUND_COLOR }}\n    >\n      <BeatLoader\n        cssOverride={cssOverride}\n        className=\"animate-pulse\"\n        speedMultiplier={1.35}\n        aria-label=\"...\"\n        loading={true}\n        color={COLOR}\n        margin={4.5}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/PaginatedElements.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1848",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 127,
              "line": 17
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { Limit, Count } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent, ReactElement } from 'react';\n\nimport { getPaginatedElementsCurrentSlice } from './helpers/PaginatedElements/functions/paginatedElements';\n\ninterface PaginatedElementsProps {\n  paginatedElements: ReactElement[];\n  elementsPerPage: Limit;\n  currentPage: Count;\n}\n\nconst PaginatedElements: FunctionComponent<PaginatedElementsProps> = ({ paginatedElements, elementsPerPage, currentPage }) => {\n  const currentSlice = getPaginatedElementsCurrentSlice(currentPage, elementsPerPage, paginatedElements);\n\n  return currentSlice;\n};\n\nexport default PaginatedElements;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Pagination.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1849",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 72,
              "line": 20
            }
          }
        },
        {
          "id": "1850",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 23
            },
            "start": {
              "column": 29,
              "line": 23
            }
          }
        },
        {
          "id": "1851",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 23
            },
            "start": {
              "column": 99,
              "line": 23
            }
          }
        },
        {
          "id": "1852",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 25
            },
            "start": {
              "column": 26,
              "line": 25
            }
          }
        },
        {
          "id": "1853",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 78,
              "line": 27
            }
          }
        },
        {
          "id": "1854",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 28
            },
            "start": {
              "column": 21,
              "line": 28
            }
          }
        },
        {
          "id": "1855",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 30
            },
            "start": {
              "column": 33,
              "line": 30
            }
          }
        },
        {
          "id": "1856",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 72,
              "line": 32
            }
          }
        },
        {
          "id": "1857",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 35
            },
            "start": {
              "column": 30,
              "line": 35
            }
          }
        },
        {
          "id": "1858",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 53
            },
            "start": {
              "column": 24,
              "line": 41
            }
          }
        },
        {
          "id": "1859",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 41
            },
            "start": {
              "column": 34,
              "line": 41
            }
          }
        },
        {
          "id": "1860",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 47
            },
            "start": {
              "column": 22,
              "line": 44
            }
          }
        },
        {
          "id": "1861",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 45
            },
            "start": {
              "column": 29,
              "line": 45
            }
          }
        },
        {
          "id": "1862",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 45
            },
            "start": {
              "column": 41,
              "line": 45
            }
          }
        },
        {
          "id": "1863",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 50
            },
            "start": {
              "column": 30,
              "line": 50
            }
          }
        },
        {
          "id": "1864",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 54
            },
            "start": {
              "column": 30,
              "line": 54
            }
          }
        },
        {
          "id": "1865",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 65
            },
            "start": {
              "column": 96,
              "line": 56
            }
          }
        },
        {
          "id": "1866",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 60
            },
            "start": {
              "column": 35,
              "line": 60
            }
          }
        },
        {
          "id": "1867",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 60
            },
            "start": {
              "column": 85,
              "line": 60
            }
          }
        },
        {
          "id": "1868",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 66
            },
            "start": {
              "column": 34,
              "line": 66
            }
          }
        },
        {
          "id": "1869",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 77
            },
            "start": {
              "column": 92,
              "line": 68
            }
          }
        },
        {
          "id": "1870",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 72
            },
            "start": {
              "column": 35,
              "line": 72
            }
          }
        },
        {
          "id": "1871",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 72
            },
            "start": {
              "column": 85,
              "line": 72
            }
          }
        },
        {
          "id": "1872",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 78
            },
            "start": {
              "column": 30,
              "line": 78
            }
          }
        },
        {
          "id": "1873",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 172
            },
            "start": {
              "column": 34,
              "line": 92
            }
          }
        },
        {
          "id": "1874",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 94
            },
            "start": {
              "column": 53,
              "line": 94
            }
          }
        },
        {
          "id": "1875",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "1876",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "1877",
          "mutatorName": "EqualityOperator",
          "replacement": "dropdownItems.length !== 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "1878",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 100
            },
            "start": {
              "column": 24,
              "line": 100
            }
          }
        },
        {
          "id": "1879",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 142,
              "line": 107
            },
            "start": {
              "column": 13,
              "line": 107
            }
          }
        },
        {
          "id": "1880",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 110
            },
            "start": {
              "column": 13,
              "line": 108
            }
          }
        },
        {
          "id": "1881",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 115
            },
            "start": {
              "column": 12,
              "line": 115
            }
          }
        },
        {
          "id": "1882",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 115
            },
            "start": {
              "column": 12,
              "line": 115
            }
          }
        },
        {
          "id": "1883",
          "mutatorName": "EqualityOperator",
          "replacement": "pageNumberIndicator === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 115
            },
            "start": {
              "column": 12,
              "line": 115
            }
          }
        },
        {
          "id": "1884",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 116
            },
            "start": {
              "column": 46,
              "line": 116
            }
          }
        },
        {
          "id": "1885",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 139
            },
            "start": {
              "column": 29,
              "line": 120
            }
          }
        },
        {
          "id": "1886",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 121
            },
            "start": {
              "column": 15,
              "line": 121
            }
          }
        },
        {
          "id": "1887",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 121
            },
            "start": {
              "column": 15,
              "line": 121
            }
          }
        },
        {
          "id": "1888",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 121
            },
            "start": {
              "column": 43,
              "line": 121
            }
          }
        },
        {
          "id": "1889",
          "mutatorName": "BooleanLiteral",
          "replacement": "event.target instanceof HTMLAnchorElement",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 122
            },
            "start": {
              "column": 15,
              "line": 122
            }
          }
        },
        {
          "id": "1890",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 122
            },
            "start": {
              "column": 15,
              "line": 122
            }
          }
        },
        {
          "id": "1891",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 122
            },
            "start": {
              "column": 15,
              "line": 122
            }
          }
        },
        {
          "id": "1892",
          "mutatorName": "BooleanLiteral",
          "replacement": "dropdownContentInstance",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 126
            },
            "start": {
              "column": 15,
              "line": 126
            }
          }
        },
        {
          "id": "1893",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 126
            },
            "start": {
              "column": 15,
              "line": 126
            }
          }
        },
        {
          "id": "1894",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 126
            },
            "start": {
              "column": 15,
              "line": 126
            }
          }
        },
        {
          "id": "1895",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 130
            },
            "start": {
              "column": 66,
              "line": 130
            }
          }
        },
        {
          "id": "1896",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 131
            },
            "start": {
              "column": 27,
              "line": 131
            }
          }
        },
        {
          "id": "1897",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= links.length",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 131
            },
            "start": {
              "column": 27,
              "line": 131
            }
          }
        },
        {
          "id": "1898",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= links.length",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 131
            },
            "start": {
              "column": 27,
              "line": 131
            }
          }
        },
        {
          "id": "1899",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 131
            },
            "start": {
              "column": 45,
              "line": 131
            }
          }
        },
        {
          "id": "1900",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 134
            },
            "start": {
              "column": 50,
              "line": 131
            }
          }
        },
        {
          "id": "1901",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 132
            },
            "start": {
              "column": 17,
              "line": 132
            }
          }
        },
        {
          "id": "1902",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 132
            },
            "start": {
              "column": 17,
              "line": 132
            }
          }
        },
        {
          "id": "1903",
          "mutatorName": "EqualityOperator",
          "replacement": "links[i].title !== targetTitle",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 132
            },
            "start": {
              "column": 17,
              "line": 132
            }
          }
        },
        {
          "id": "1904",
          "mutatorName": "UpdateOperator",
          "replacement": "newActivePageNodeIndex--",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 133
            },
            "start": {
              "column": 13,
              "line": 133
            }
          }
        },
        {
          "id": "1905",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 137
            },
            "start": {
              "column": 27,
              "line": 137
            }
          }
        },
        {
          "id": "1906",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= newActivePageNodeIndex",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 137
            },
            "start": {
              "column": 27,
              "line": 137
            }
          }
        },
        {
          "id": "1907",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= newActivePageNodeIndex",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 137
            },
            "start": {
              "column": 27,
              "line": 137
            }
          }
        },
        {
          "id": "1908",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 137
            },
            "start": {
              "column": 55,
              "line": 137
            }
          }
        },
        {
          "id": "1909",
          "mutatorName": "AssignmentOperator",
          "replacement": "scrollDist -= links[i].getBoundingClientRect().height",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 113,
              "line": 137
            },
            "start": {
              "column": 60,
              "line": 137
            }
          }
        },
        {
          "id": "1910",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 138
            },
            "start": {
              "column": 44,
              "line": 138
            }
          }
        },
        {
          "id": "1911",
          "mutatorName": "ArithmeticOperator",
          "replacement": "scrollDist + SCROLL_OFFSET_Y",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 138
            },
            "start": {
              "column": 51,
              "line": 138
            }
          }
        },
        {
          "id": "1912",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 138
            },
            "start": {
              "column": 91,
              "line": 138
            }
          }
        },
        {
          "id": "1913",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 159
            },
            "start": {
              "column": 31,
              "line": 140
            }
          }
        },
        {
          "id": "1914",
          "mutatorName": "BooleanLiteral",
          "replacement": "isOpened",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 141
            },
            "start": {
              "column": 15,
              "line": 141
            }
          }
        },
        {
          "id": "1915",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 141
            },
            "start": {
              "column": 15,
              "line": 141
            }
          }
        },
        {
          "id": "1916",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 141
            },
            "start": {
              "column": 15,
              "line": 141
            }
          }
        },
        {
          "id": "1917",
          "mutatorName": "BooleanLiteral",
          "replacement": "dropdownContentInstance",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "1918",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "1919",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "1920",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 148
            },
            "start": {
              "column": 66,
              "line": 148
            }
          }
        },
        {
          "id": "1921",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 149
            },
            "start": {
              "column": 27,
              "line": 149
            }
          }
        },
        {
          "id": "1922",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= links.length",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 149
            },
            "start": {
              "column": 27,
              "line": 149
            }
          }
        },
        {
          "id": "1923",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= links.length",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 149
            },
            "start": {
              "column": 27,
              "line": 149
            }
          }
        },
        {
          "id": "1924",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 149
            },
            "start": {
              "column": 45,
              "line": 149
            }
          }
        },
        {
          "id": "1925",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 152
            },
            "start": {
              "column": 50,
              "line": 149
            }
          }
        },
        {
          "id": "1926",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 150
            },
            "start": {
              "column": 17,
              "line": 150
            }
          }
        },
        {
          "id": "1927",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 150
            },
            "start": {
              "column": 17,
              "line": 150
            }
          }
        },
        {
          "id": "1928",
          "mutatorName": "EqualityOperator",
          "replacement": "links[i].getAttribute('aria-current') !== 'page'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 150
            },
            "start": {
              "column": 17,
              "line": 150
            }
          }
        },
        {
          "id": "1929",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 150
            },
            "start": {
              "column": 39,
              "line": 150
            }
          }
        },
        {
          "id": "1930",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 150
            },
            "start": {
              "column": 59,
              "line": 150
            }
          }
        },
        {
          "id": "1931",
          "mutatorName": "UpdateOperator",
          "replacement": "activePageNodeIndex--",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 151
            },
            "start": {
              "column": 13,
              "line": 151
            }
          }
        },
        {
          "id": "1932",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 155
            },
            "start": {
              "column": 27,
              "line": 155
            }
          }
        },
        {
          "id": "1933",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= activePageNodeIndex",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 155
            },
            "start": {
              "column": 27,
              "line": 155
            }
          }
        },
        {
          "id": "1934",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= activePageNodeIndex",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 155
            },
            "start": {
              "column": 27,
              "line": 155
            }
          }
        },
        {
          "id": "1935",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 155
            },
            "start": {
              "column": 52,
              "line": 155
            }
          }
        },
        {
          "id": "1936",
          "mutatorName": "AssignmentOperator",
          "replacement": "scrollDist -= links[i].getBoundingClientRect().height",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 110,
              "line": 155
            },
            "start": {
              "column": 57,
              "line": 155
            }
          }
        },
        {
          "id": "1937",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 157
            },
            "start": {
              "column": 15,
              "line": 157
            }
          }
        },
        {
          "id": "1938",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 157
            },
            "start": {
              "column": 15,
              "line": 157
            }
          }
        },
        {
          "id": "1939",
          "mutatorName": "EqualityOperator",
          "replacement": "activePageNodeIndex === 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 157
            },
            "start": {
              "column": 15,
              "line": 157
            }
          }
        },
        {
          "id": "1940",
          "mutatorName": "AssignmentOperator",
          "replacement": "scrollDist -= SCROLL_OFFSET_Y",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 157
            },
            "start": {
              "column": 42,
              "line": 157
            }
          }
        },
        {
          "id": "1941",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 158
            },
            "start": {
              "column": 44,
              "line": 158
            }
          }
        },
        {
          "id": "1942",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 158
            },
            "start": {
              "column": 56,
              "line": 158
            }
          }
        },
        {
          "id": "1943",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 160
            },
            "start": {
              "column": 23,
              "line": 160
            }
          }
        },
        {
          "id": "1944",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 162
            },
            "start": {
              "column": 88,
              "line": 160
            }
          }
        },
        {
          "id": "1945",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 165
            },
            "start": {
              "column": 38,
              "line": 163
            }
          }
        },
        {
          "id": "1946",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 164
            },
            "start": {
              "column": 15,
              "line": 164
            }
          }
        },
        {
          "id": "1947",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 164
            },
            "start": {
              "column": 15,
              "line": 164
            }
          }
        },
        {
          "id": "1948",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 173
            },
            "start": {
              "column": 34,
              "line": 173
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { PxValue, Count } from '@rtm/shared-types/Numbers';\nimport type { ButtonProps } from '@/components/ui/Button';\nimport type { ComponentProps, ReactElement } from 'react';\n\nimport { DotsHorizontalIcon, ChevronRightIcon, ChevronLeftIcon } from '@radix-ui/react-icons';\nimport { DropdownMenuTrigger, DropdownMenu } from '@radix-ui/react-dropdown-menu';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { buttonVariants } from '@/components/ui/Button';\nimport { forwardRef, useState, useRef } from 'react';\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nimport { DropdownMenuContent } from './DropdownMenu';\n\nconst Pagination = ({ className, ...props }: ComponentProps<'nav'>) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n\n  return <nav className={cn('mx-auto flex w-full justify-center', className)} aria-label={scopedT('pagination')} role=\"navigation\" {...props} />;\n};\nPagination.displayName = 'Pagination';\n\nconst PaginationContent = forwardRef<HTMLUListElement, ComponentProps<'ul'>>(({ className, ...props }, ref) => (\n  <ul className={cn('flex flex-row items-center gap-1', className)} ref={ref} {...props} />\n));\nPaginationContent.displayName = 'PaginationContent';\n\nconst PaginationItem = forwardRef<HTMLLIElement, ComponentProps<'li'>>(({ className, ...props }, ref) => (\n  <li className={className} ref={ref} {...props} />\n));\nPaginationItem.displayName = 'PaginationItem';\n\ntype PaginationLinkProps = ComponentProps<typeof Link> & {\n  isActive?: boolean;\n} & Pick<ButtonProps, 'size'>;\n\nconst PaginationLink = ({ size = 'icon', className, isActive, ...props }: PaginationLinkProps) => (\n  <Link\n    className={cn(\n      buttonVariants({\n        variant: isActive ? 'outline' : 'ghost',\n        size\n      }),\n      className\n    )}\n    aria-current={isActive ? 'page' : undefined}\n    {...props}\n  />\n);\nPaginationLink.displayName = 'PaginationLink';\n\nconst PaginationPrevious = ({ className, ...props }: ComponentProps<typeof PaginationLink>) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n\n  return (\n    <PaginationLink className={cn('h-8 gap-1 px-3', className)} aria-label={scopedT('prev')} size=\"default\" {...props}>\n      <ChevronLeftIcon className=\"h-5 w-5 rtl:hidden\" />\n      <ChevronRightIcon className=\"h-5 w-5 ltr:hidden\" />\n    </PaginationLink>\n  );\n};\nPaginationPrevious.displayName = 'PaginationPrevious';\n\nconst PaginationNext = ({ className, ...props }: ComponentProps<typeof PaginationLink>) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n\n  return (\n    <PaginationLink className={cn('h-8 gap-1 px-3', className)} aria-label={scopedT('next')} size=\"default\" {...props}>\n      <ChevronRightIcon className=\"h-5 w-5 rtl:hidden\" />\n      <ChevronLeftIcon className=\"h-5 w-5 ltr:hidden\" />\n    </PaginationLink>\n  );\n};\nPaginationNext.displayName = 'PaginationNext';\n\nconst PaginationEllipsis = ({\n  dropdownContentClassName,\n  pageNumberIndicator,\n  isBottomWidget,\n  dropdownItems,\n  className,\n  ...props\n}: {\n  dropdownContentClassName?: string;\n  dropdownItems: ReactElement[];\n  pageNumberIndicator?: Count;\n  isBottomWidget?: boolean;\n} & ComponentProps<'button'>) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const dropdownContentRef = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-magic-numbers\n  if (dropdownItems.length === 0) return null;\n\n  const onOpenChange = (opened: boolean) => setIsOpened(opened);\n\n  return (\n    <DropdownMenu onOpenChange={onOpenChange} open={isOpened}>\n      <DropdownMenuTrigger asChild>\n        <button\n          className={cn(\n            'inline-flex h-10 w-10 items-center justify-center rounded-md border-none font-bold hover:bg-accent hover:text-accent-foreground',\n            {\n              'bg-accent text-accent-foreground': isOpened\n            },\n            className\n          )}\n          {...props}\n        >\n          {pageNumberIndicator !== undefined ? <span>{pageNumberIndicator}</span> : <DotsHorizontalIcon className=\"h-4 w-4\" />}\n          <span className=\"sr-only\">{scopedT('more-pages')}</span>\n        </button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        onClick={(event) => {\n          if (isBottomWidget) setIsOpened(false);\n          if (!(event.target instanceof HTMLAnchorElement)) return;\n\n          const SCROLL_OFFSET_Y: PxValue = 35;\n          const dropdownContentInstance = getRefCurrentPtr(dropdownContentRef);\n          if (!dropdownContentInstance) return;\n          const targetTitle = event.target.title;\n\n          let newActivePageNodeIndex = 0;\n          const links = dropdownContentInstance.querySelectorAll('a');\n          for (let i = 0; i < links.length; i++) {\n            if (links[i].title === targetTitle) break;\n            newActivePageNodeIndex++;\n          }\n\n          let scrollDist = 0;\n          for (let i = 0; i < newActivePageNodeIndex; i++) scrollDist += links[i].getBoundingClientRect().height;\n          dropdownContentInstance.scrollTo({ top: scrollDist - SCROLL_OFFSET_Y, behavior: 'smooth' });\n        }}\n        onAnimationEnd={() => {\n          if (!isOpened) return;\n          const dropdownContentInstance = getRefCurrentPtr(dropdownContentRef);\n          if (!dropdownContentInstance) return;\n\n          const SCROLL_OFFSET_Y: PxValue = 4;\n\n          let activePageNodeIndex = 0;\n          const links = dropdownContentInstance.querySelectorAll('a');\n          for (let i = 0; i < links.length; i++) {\n            if (links[i].getAttribute('aria-current') === 'page') break;\n            activePageNodeIndex++;\n          }\n\n          let scrollDist = 0;\n          for (let i = 0; i < activePageNodeIndex; i++) scrollDist += links[i].getBoundingClientRect().height;\n          // eslint-disable-next-line no-magic-numbers\n          if (activePageNodeIndex !== 0) scrollDist += SCROLL_OFFSET_Y;\n          dropdownContentInstance.scrollTo({ behavior: 'smooth', top: scrollDist });\n        }}\n        className={cn('max-h-[228px] w-fit overflow-y-auto', dropdownContentClassName, {\n          'max-h-[210px] overflow-y-auto': pageNumberIndicator\n        })}\n        onCloseAutoFocus={(event) => {\n          if (isBottomWidget) event.preventDefault();\n        }}\n        ref={dropdownContentRef}\n      >\n        {dropdownItems}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\nPaginationEllipsis.displayName = 'PaginationEllipsis';\n\nexport { PaginationPrevious, PaginationEllipsis, PaginationContent, PaginationLink, PaginationItem, PaginationNext, Pagination };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Popover.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1949",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 3,
              "line": 22
            }
          }
        },
        {
          "id": "1950",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 22
            },
            "start": {
              "column": 14,
              "line": 22
            }
          }
        },
        {
          "id": "1951",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 437,
              "line": 26
            },
            "start": {
              "column": 9,
              "line": 26
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ElementRef } from 'react';\n\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverAnchor = PopoverPrimitive.Anchor;\n\nconst PopoverContent = forwardRef<\n  ElementRef<typeof PopoverPrimitive.Content>,\n  ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n  // eslint-disable-next-line no-magic-numbers\n>(({ align = 'center', sideOffset = 4, className, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      className={cn(\n        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      sideOffset={sideOffset}\n      align={align}\n      ref={ref}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { PopoverTrigger, PopoverContent, PopoverAnchor, Popover };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/ScrollArea.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1952",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 19
            },
            "start": {
              "column": 3,
              "line": 13
            }
          }
        },
        {
          "id": "1953",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 14
            },
            "start": {
              "column": 45,
              "line": 14
            }
          }
        },
        {
          "id": "1954",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 3,
              "line": 26
            }
          }
        },
        {
          "id": "1955",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 26
            },
            "start": {
              "column": 20,
              "line": 26
            }
          }
        },
        {
          "id": "1956",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 29
            },
            "start": {
              "column": 7,
              "line": 29
            }
          }
        },
        {
          "id": "1957",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1958",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1959",
          "mutatorName": "LogicalOperator",
          "replacement": "orientation === 'vertical' || 'h-full w-2.5 border-l border-l-transparent p-[1px]'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1960",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1961",
          "mutatorName": "EqualityOperator",
          "replacement": "orientation !== 'vertical'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1962",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 30
            },
            "start": {
              "column": 23,
              "line": 30
            }
          }
        },
        {
          "id": "1963",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 30
            },
            "start": {
              "column": 37,
              "line": 30
            }
          }
        },
        {
          "id": "1964",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "1965",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "1966",
          "mutatorName": "LogicalOperator",
          "replacement": "orientation === 'horizontal' || 'h-2.5 flex-col border-t border-t-transparent p-[1px]'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "1967",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "1968",
          "mutatorName": "EqualityOperator",
          "replacement": "orientation !== 'horizontal'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "1969",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 31
            },
            "start": {
              "column": 23,
              "line": 31
            }
          }
        },
        {
          "id": "1970",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 31
            },
            "start": {
              "column": 39,
              "line": 31
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ElementRef } from 'react';\n\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst ScrollArea = forwardRef<ElementRef<typeof ScrollAreaPrimitive.Root>, ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>>(\n  ({ className, children, ...props }, ref) => (\n    <ScrollAreaPrimitive.Root className={cn('relative overflow-hidden', className)} ref={ref} {...props}>\n      <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">{children}</ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n);\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = forwardRef<\n  ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ orientation = 'vertical', className, ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    className={cn(\n      'flex touch-none select-none transition-colors',\n      orientation === 'vertical' && 'h-full w-2.5 border-l border-l-transparent p-[1px]',\n      orientation === 'horizontal' && 'h-2.5 flex-col border-t border-t-transparent p-[1px]',\n      className\n    )}\n    orientation={orientation}\n    ref={ref}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Select.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1971",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 36
            },
            "start": {
              "column": 3,
              "line": 22
            }
          }
        },
        {
          "id": "1972",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 312,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1973",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 33
            },
            "start": {
              "column": 34,
              "line": 33
            }
          }
        },
        {
          "id": "1974",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 3,
              "line": 42
            }
          }
        },
        {
          "id": "1975",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 43
            },
            "start": {
              "column": 49,
              "line": 43
            }
          }
        },
        {
          "id": "1976",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 56
            },
            "start": {
              "column": 3,
              "line": 52
            }
          }
        },
        {
          "id": "1977",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 53
            },
            "start": {
              "column": 51,
              "line": 53
            }
          }
        },
        {
          "id": "1978",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 82
            },
            "start": {
              "column": 3,
              "line": 60
            }
          }
        },
        {
          "id": "1979",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 60
            },
            "start": {
              "column": 17,
              "line": 60
            }
          }
        },
        {
          "id": "1980",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 464,
              "line": 64
            },
            "start": {
              "column": 11,
              "line": 64
            }
          }
        },
        {
          "id": "1981",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 142,
              "line": 66
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1982",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 142,
              "line": 66
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1983",
          "mutatorName": "LogicalOperator",
          "replacement": "position === 'popper' || 'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 142,
              "line": 66
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1984",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1985",
          "mutatorName": "EqualityOperator",
          "replacement": "position !== 'popper'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1986",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 65
            },
            "start": {
              "column": 24,
              "line": 65
            }
          }
        },
        {
          "id": "1987",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 142,
              "line": 66
            },
            "start": {
              "column": 13,
              "line": 66
            }
          }
        },
        {
          "id": "1988",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 75
            },
            "start": {
              "column": 25,
              "line": 75
            }
          }
        },
        {
          "id": "1989",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 146,
              "line": 75
            },
            "start": {
              "column": 32,
              "line": 75
            }
          }
        },
        {
          "id": "1990",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 146,
              "line": 75
            },
            "start": {
              "column": 32,
              "line": 75
            }
          }
        },
        {
          "id": "1991",
          "mutatorName": "LogicalOperator",
          "replacement": "position === 'popper' || 'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 146,
              "line": 75
            },
            "start": {
              "column": 32,
              "line": 75
            }
          }
        },
        {
          "id": "1992",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 75
            },
            "start": {
              "column": 32,
              "line": 75
            }
          }
        },
        {
          "id": "1993",
          "mutatorName": "EqualityOperator",
          "replacement": "position !== 'popper'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 75
            },
            "start": {
              "column": 32,
              "line": 75
            }
          }
        },
        {
          "id": "1994",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 75
            },
            "start": {
              "column": 45,
              "line": 75
            }
          }
        },
        {
          "id": "1995",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 146,
              "line": 75
            },
            "start": {
              "column": 57,
              "line": 75
            }
          }
        },
        {
          "id": "1996",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 151,
              "line": 87
            },
            "start": {
              "column": 3,
              "line": 87
            }
          }
        },
        {
          "id": "1997",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 114,
              "line": 87
            },
            "start": {
              "column": 74,
              "line": 87
            }
          }
        },
        {
          "id": "1998",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 109
            },
            "start": {
              "column": 3,
              "line": 92
            }
          }
        },
        {
          "id": "1999",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 228,
              "line": 95
            },
            "start": {
              "column": 9,
              "line": 95
            }
          }
        },
        {
          "id": "2000",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 114
            },
            "start": {
              "column": 3,
              "line": 114
            }
          }
        },
        {
          "id": "2001",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 114
            },
            "start": {
              "column": 78,
              "line": 114
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ElementRef } from 'react';\n\nimport { ChevronDown, ChevronUp, Check } from 'lucide-react';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = forwardRef<\n  ElementRef<typeof SelectPrimitive.Trigger>,\n  ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> & { chevronClassName?: string }\n>(({ chevronClassName, className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    className={cn(\n      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\n      className\n    )}\n    ref={ref}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className={cn('h-4 w-4 opacity-50', chevronClassName)} />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = forwardRef<\n  ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton className={cn('flex cursor-default items-center justify-center py-1', className)} ref={ref} {...props}>\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = forwardRef<\n  ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton className={cn('flex cursor-default items-center justify-center py-1', className)} ref={ref} {...props}>\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = forwardRef<ElementRef<typeof SelectPrimitive.Content>, ComponentPropsWithoutRef<typeof SelectPrimitive.Content>>(\n  ({ position = 'popper', className, children, ...props }, ref) => (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        className={cn(\n          'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className\n        )}\n        position={position}\n        ref={ref}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn('p-1', position === 'popper' && 'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]')}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n);\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = forwardRef<ElementRef<typeof SelectPrimitive.Label>, ComponentPropsWithoutRef<typeof SelectPrimitive.Label>>(\n  ({ className, ...props }, ref) => <SelectPrimitive.Label className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)} ref={ref} {...props} />\n);\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = forwardRef<ElementRef<typeof SelectPrimitive.Item>, ComponentPropsWithoutRef<typeof SelectPrimitive.Item>>(\n  ({ className, children, ...props }, ref) => (\n    <SelectPrimitive.Item\n      className={cn(\n        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n        className\n      )}\n      ref={ref}\n      {...props}\n    >\n      <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n);\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = forwardRef<ElementRef<typeof SelectPrimitive.Separator>, ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>>(\n  ({ className, ...props }, ref) => <SelectPrimitive.Separator className={cn('-mx-1 my-1 h-px bg-muted', className)} ref={ref} {...props} />\n);\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectContent,\n  SelectGroup,\n  SelectValue,\n  SelectLabel,\n  SelectItem,\n  Select\n};\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Separator.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2002",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 3,
              "line": 13
            }
          }
        },
        {
          "id": "2003",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 13
            },
            "start": {
              "column": 20,
              "line": 13
            }
          }
        },
        {
          "id": "2004",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 13
            },
            "start": {
              "column": 47,
              "line": 13
            }
          }
        },
        {
          "id": "2005",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 15
            },
            "start": {
              "column": 21,
              "line": 15
            }
          }
        },
        {
          "id": "2006",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 15
            },
            "start": {
              "column": 43,
              "line": 15
            }
          }
        },
        {
          "id": "2007",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 15
            },
            "start": {
              "column": 43,
              "line": 15
            }
          }
        },
        {
          "id": "2008",
          "mutatorName": "EqualityOperator",
          "replacement": "orientation !== 'horizontal'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 15
            },
            "start": {
              "column": 43,
              "line": 15
            }
          }
        },
        {
          "id": "2009",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 15
            },
            "start": {
              "column": 59,
              "line": 15
            }
          }
        },
        {
          "id": "2010",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 15
            },
            "start": {
              "column": 74,
              "line": 15
            }
          }
        },
        {
          "id": "2011",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 109,
              "line": 15
            },
            "start": {
              "column": 93,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ElementRef } from 'react';\n\nimport * as SeparatorPrimitive from '@radix-ui/react-separator';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Separator = forwardRef<ElementRef<typeof SeparatorPrimitive.Root>, ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>>(\n  ({ orientation = 'horizontal', decorative = true, className, ...props }, ref) => (\n    <SeparatorPrimitive.Root\n      className={cn('shrink-0 bg-border', orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]', className)}\n      orientation={orientation}\n      decorative={decorative}\n      ref={ref}\n      {...props}\n    />\n  )\n);\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Tabs.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2012",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 3,
              "line": 15
            }
          }
        },
        {
          "id": "2013",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 113,
              "line": 17
            },
            "start": {
              "column": 21,
              "line": 17
            }
          }
        },
        {
          "id": "2014",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 35
            },
            "start": {
              "column": 3,
              "line": 26
            }
          }
        },
        {
          "id": "2015",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 398,
              "line": 29
            },
            "start": {
              "column": 9,
              "line": 29
            }
          }
        },
        {
          "id": "2016",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 49
            },
            "start": {
              "column": 3,
              "line": 40
            }
          }
        },
        {
          "id": "2017",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 138,
              "line": 43
            },
            "start": {
              "column": 9,
              "line": 43
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ElementRef } from 'react';\n\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = forwardRef<ElementRef<typeof TabsPrimitive.List>, ComponentPropsWithoutRef<typeof TabsPrimitive.List>>(\n  ({ className, ...props }, ref) => (\n    <TabsPrimitive.List\n      className={cn('inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground', className)}\n      ref={ref}\n      {...props}\n    />\n  )\n);\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = forwardRef<ElementRef<typeof TabsPrimitive.Trigger>, ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>>(\n  ({ className, ...props }, ref) => (\n    <TabsPrimitive.Trigger\n      className={cn(\n        'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n);\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = forwardRef<ElementRef<typeof TabsPrimitive.Content>, ComponentPropsWithoutRef<typeof TabsPrimitive.Content>>(\n  ({ className, ...props }, ref) => (\n    <TabsPrimitive.Content\n      className={cn(\n        'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n);\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { TabsTrigger, TabsContent, TabsList, Tabs };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/blog/BlogPostDate.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2018",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 60,
              "line": 16
            }
          }
        },
        {
          "id": "2019",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 17
            },
            "start": {
              "column": 23,
              "line": 17
            }
          }
        },
        {
          "id": "2020",
          "mutatorName": "ArithmeticOperator",
          "replacement": "getBlogPostFormattedDate(language, date) - (suffix ? suffix : '')",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 18
            },
            "start": {
              "column": 6,
              "line": 18
            }
          }
        },
        {
          "id": "2021",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 18
            },
            "start": {
              "column": 68,
              "line": 18
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithClassname, WithLanguage } from '@rtm/shared-types/Next';\nimport type { IsoDateTimeString } from 'contentlayer/core';\nimport type { FunctionComponent } from 'react';\n\nimport { getBlogPostFormattedDate } from '@/lib/blog/api';\nimport { cn } from '@/lib/tailwind';\n\ninterface BlogPostDateProps extends WithLanguage, Partial<WithClassname> {\n  date: IsoDateTimeString;\n  suffix?: string;\n}\n\nconst BlogPostDate: FunctionComponent<BlogPostDateProps> = ({ className: classNameValue, language, suffix, date }) => (\n  <time className={cn('text-xs', classNameValue)} dateTime={date}>\n    {getBlogPostFormattedDate(language, date) + (suffix ? suffix : '')}\n  </time>\n);\n\nexport default BlogPostDate;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/blog/BlogPostPreview.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2022",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 80
            },
            "start": {
              "column": 124,
              "line": 26
            }
          }
        },
        {
          "id": "2023",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 32
            },
            "start": {
              "column": 19,
              "line": 32
            }
          }
        },
        {
          "id": "2024",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 32
            },
            "start": {
              "column": 19,
              "line": 32
            }
          }
        },
        {
          "id": "2025",
          "mutatorName": "EqualityOperator",
          "replacement": "tags.length >= 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 32
            },
            "start": {
              "column": 19,
              "line": 32
            }
          }
        },
        {
          "id": "2026",
          "mutatorName": "EqualityOperator",
          "replacement": "tags.length <= 0",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 32
            },
            "start": {
              "column": 19,
              "line": 32
            }
          }
        },
        {
          "id": "2027",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 33
            },
            "start": {
              "column": 27,
              "line": 33
            }
          }
        },
        {
          "id": "2028",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 33
            },
            "start": {
              "column": 27,
              "line": 33
            }
          }
        },
        {
          "id": "2029",
          "mutatorName": "LogicalOperator",
          "replacement": "BlogConfig.SHOW_DRAFTS_BADGE || draft",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 33
            },
            "start": {
              "column": 27,
              "line": 33
            }
          }
        },
        {
          "id": "2030",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 54
            },
            "start": {
              "column": 12,
              "line": 42
            }
          }
        },
        {
          "id": "2031",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 54
            },
            "start": {
              "column": 12,
              "line": 42
            }
          }
        },
        {
          "id": "2032",
          "mutatorName": "LogicalOperator",
          "replacement": "post.featuredPictureUrl || <div className=\"h-[60%] bg-black bg-opacity-40 max-lg:w-full max-lg:rounded-t-lg lg:h-auto lg:ltr:rounded-l-lg lg:rtl:rounded-r-lg\">\n              <Image className=\"relative h-[max(200px,30vw)] w-full object-cover max-lg:rounded-t-lg lg:h-full lg:w-[200px] lg:ltr:rounded-l-lg lg:rtl:rounded-r-lg\" src={post.featuredPictureUrl} aria-hidden=\"true\" height={384} width={384} priority alt=\"\" />\n            </div>",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 54
            },
            "start": {
              "column": 12,
              "line": 42
            }
          }
        },
        {
          "id": "2033",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 58
            },
            "start": {
              "column": 68,
              "line": 58
            }
          }
        },
        {
          "id": "2034",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 58
            },
            "start": {
              "column": 75,
              "line": 58
            }
          }
        },
        {
          "id": "2035",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 60
            },
            "start": {
              "column": 20,
              "line": 60
            }
          }
        },
        {
          "id": "2036",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 60
            },
            "start": {
              "column": 20,
              "line": 60
            }
          }
        },
        {
          "id": "2037",
          "mutatorName": "LogicalOperator",
          "replacement": "showDraftSuffix || <DraftBadge className=\"relative bottom-1 left-2 rtl:-left-2\" />",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 60
            },
            "start": {
              "column": 20,
              "line": 60
            }
          }
        },
        {
          "id": "2038",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 67
            },
            "start": {
              "column": 31,
              "line": 67
            }
          }
        },
        {
          "id": "2039",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 69
            },
            "start": {
              "column": 43,
              "line": 67
            }
          }
        },
        {
          "id": "2040",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 127,
              "line": 74
            },
            "start": {
              "column": 14,
              "line": 74
            }
          }
        },
        {
          "id": "2041",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 127,
              "line": 74
            },
            "start": {
              "column": 14,
              "line": 74
            }
          }
        },
        {
          "id": "2042",
          "mutatorName": "LogicalOperator",
          "replacement": "hasTags || <CardFooter className=\"flex flex-wrap gap-2\">{tagsGenerator({\n    language,\n    scopedT,\n    tags\n  })}</CardFooter>",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 127,
              "line": 74
            },
            "start": {
              "column": 14,
              "line": 74
            }
          }
        },
        {
          "id": "2043",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 112,
              "line": 74
            },
            "start": {
              "column": 85,
              "line": 74
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithLanguage } from '@rtm/shared-types/Next';\nimport type { BlogPostType } from '@/types/Blog';\nimport type { FunctionComponent } from 'react';\n\nimport { getBlogPostPathWithoutI18nPart, getSlicedBlogPostDescription } from '@/lib/blog/api';\nimport { getScopedI18n } from '@/i18n/server';\nimport BlogConfig from '@/config/Blog/server';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nimport { CardDescription, CardContent, CardHeader, CardFooter, CardTitle, Card } from '../Card';\nimport tagsGenerator from './tagsGenerator';\nimport BlogPostDate from './BlogPostDate';\nimport DraftBadge from './DraftBadge';\n\ninterface BlogPostPreviewProps extends WithLanguage {\n  post: Pick<BlogPostType, 'featuredPictureUrl' | 'metadescription' | 'description' | 'draft' | 'title' | 'tags' | 'date' | 'url'>;\n  isNotOnBlogSubcategoryPage?: boolean;\n}\n\nconst BlogPostPreview: FunctionComponent<BlogPostPreviewProps> = async ({ isNotOnBlogSubcategoryPage, language, post }) => {\n  const scopedT = await getScopedI18n(i18ns.blogTags);\n  const { metadescription, description, draft, title, date, tags, url } = post;\n\n  const descriptionSnippet = description ? getSlicedBlogPostDescription(description) : getSlicedBlogPostDescription(metadescription);\n  // eslint-disable-next-line no-magic-numbers\n  const hasTags = tags.length > 0;\n  const showDraftSuffix = BlogConfig.SHOW_DRAFTS_BADGE && draft;\n\n  return (\n    <article>\n      <Link\n        className=\"flex h-full w-full flex-col transition-transform duration-300 hover:delay-0 hover:duration-100 focus:delay-0 focus:duration-100 dark:hover:brightness-125 dark:focus:brightness-125 lg:hover:scale-105 lg:focus:scale-105\"\n        href={getBlogPostPathWithoutI18nPart(language, url)}\n      >\n        <Card className=\"flex h-full flex-col lg:flex-row\">\n          {post.featuredPictureUrl && (\n            <div className=\"h-[60%] bg-black bg-opacity-40 max-lg:w-full max-lg:rounded-t-lg lg:h-auto lg:ltr:rounded-l-lg lg:rtl:rounded-r-lg\">\n              <Image\n                className=\"relative h-[max(200px,30vw)] w-full object-cover max-lg:rounded-t-lg lg:h-full lg:w-[200px] lg:ltr:rounded-l-lg lg:rtl:rounded-r-lg\"\n                src={post.featuredPictureUrl}\n                aria-hidden=\"true\"\n                height={384}\n                width={384}\n                priority\n                alt=\"\"\n              />\n            </div>\n          )}\n          <div className=\"flex flex-1 flex-col justify-between\">\n            <div>\n              <CardHeader className=\"pb-2\">\n                <CardTitle titleType={isNotOnBlogSubcategoryPage ? 'h3' : 'h2'} className=\"is-h3 flex justify-between\">\n                  {title}\n                  {showDraftSuffix && <DraftBadge className=\"relative bottom-1 left-2 rtl:-left-2\" />}\n                </CardTitle>\n                <CardDescription>\n                  <BlogPostDate className=\"bg-secondary p-1 text-black dark:text-white\" language={language} date={date} />\n                </CardDescription>\n              </CardHeader>\n              <CardContent\n                className={cn('p-6 pt-0', {\n                  'pb-3': hasTags\n                })}\n              >\n                <div className=\"break-word text-sm [&>*:last-child]:mb-0 [&>*]:mb-3\">{descriptionSnippet}</div>\n              </CardContent>\n            </div>\n            {hasTags && <CardFooter className=\"flex flex-wrap gap-2\">{tagsGenerator({ language, scopedT, tags })}</CardFooter>}\n          </div>\n        </Card>\n      </Link>\n    </article>\n  );\n};\n\nexport default BlogPostPreview;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/blog/BlogPostsNotFound.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2044",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/BlogPostsNotFound.tsx(8,7): error TS2322: Type '() => Promise<void>' is not assignable to type 'FunctionComponent<BlogPostsNotFoundProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLikeOfReactNode'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = ReactNode, TResult2 = never>(onfulfilled?: ((value: ReactNode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 82,
              "line": 8
            }
          }
        },
        {
          "id": "2045",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/blog/BlogPostsNotFound.tsx(10,23): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 10
            },
            "start": {
              "column": 23,
              "line": 10
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\ninterface BlogPostsNotFoundProps {}\n\nconst BlogPostsNotFound: FunctionComponent<BlogPostsNotFoundProps> = async () => {\n  const globalT = await getServerSideI18n();\n  const txt = globalT(`${i18ns.vocab}.no-blog-post`);\n  return <p>{txt}</p>;\n};\n\nexport default BlogPostsNotFound;\n"
    },
    "src/components/ui/blog/CopyToClipboard.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2046",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(16,7): error TS2322: Type '({ children }: CopyToClipboardProps) => void' is not assignable to type 'FunctionComponent<CopyToClipboardProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 99
            },
            "start": {
              "column": 84,
              "line": 16
            }
          }
        },
        {
          "id": "2047",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 19
            },
            "start": {
              "column": 51,
              "line": 19
            }
          }
        },
        {
          "id": "2048",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 20
            },
            "start": {
              "column": 51,
              "line": 20
            }
          }
        },
        {
          "id": "2049",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 21
            },
            "start": {
              "column": 49,
              "line": 21
            }
          }
        },
        {
          "id": "2050",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 24
            },
            "start": {
              "column": 24,
              "line": 24
            }
          }
        },
        {
          "id": "2051",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 24
            },
            "start": {
              "column": 41,
              "line": 24
            }
          }
        },
        {
          "id": "2052",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 30,
              "line": 25
            }
          }
        },
        {
          "id": "2053",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 26
            },
            "start": {
              "column": 16,
              "line": 26
            }
          }
        },
        {
          "id": "2054",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 29
            },
            "start": {
              "column": 19,
              "line": 29
            }
          }
        },
        {
          "id": "2055",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 29
            },
            "start": {
              "column": 36,
              "line": 29
            }
          }
        },
        {
          "id": "2056",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 32
            },
            "start": {
              "column": 24,
              "line": 30
            }
          }
        },
        {
          "id": "2057",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 31
            },
            "start": {
              "column": 16,
              "line": 31
            }
          }
        },
        {
          "id": "2058",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 34
            },
            "start": {
              "column": 20,
              "line": 34
            }
          }
        },
        {
          "id": "2059",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 34
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "2060",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 34
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "2061",
          "mutatorName": "LogicalOperator",
          "replacement": "!hovered || !focused",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 34
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "2062",
          "mutatorName": "BooleanLiteral",
          "replacement": "hovered",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 34
            },
            "start": {
              "column": 26,
              "line": 34
            }
          }
        },
        {
          "id": "2063",
          "mutatorName": "BooleanLiteral",
          "replacement": "focused",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 34
            },
            "start": {
              "column": 38,
              "line": 34
            }
          }
        },
        {
          "id": "2064",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 35
            },
            "start": {
              "column": 19,
              "line": 35
            }
          }
        },
        {
          "id": "2065",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 35
            },
            "start": {
              "column": 25,
              "line": 35
            }
          }
        },
        {
          "id": "2066",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 35
            },
            "start": {
              "column": 25,
              "line": 35
            }
          }
        },
        {
          "id": "2067",
          "mutatorName": "LogicalOperator",
          "replacement": "hovered && focused",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 35
            },
            "start": {
              "column": 25,
              "line": 35
            }
          }
        },
        {
          "id": "2068",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 53
            },
            "start": {
              "column": 24,
              "line": 37
            }
          }
        },
        {
          "id": "2069",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 41
            },
            "start": {
              "column": 15,
              "line": 41
            }
          }
        },
        {
          "id": "2070",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(42,45): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "2071",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(42,46): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "2072",
          "mutatorName": "LogicalOperator",
          "replacement": "textInputInstance || textInputInstance.textContent !== null",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(42,48): error TS2339: Property 'textContent' does not exist on type 'never'.\nsrc/components/ui/blog/CopyToClipboard.tsx(42,100): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "2073",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(42,66): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 42
            },
            "start": {
              "column": 30,
              "line": 42
            }
          }
        },
        {
          "id": "2074",
          "mutatorName": "EqualityOperator",
          "replacement": "textInputInstance.textContent === null",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(42,100): error TS2345: Argument of type 'null' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 42
            },
            "start": {
              "column": 30,
              "line": 42
            }
          }
        },
        {
          "id": "2075",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(43,28): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 43
            },
            "start": {
              "column": 9,
              "line": 43
            }
          }
        },
        {
          "id": "2076",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(43,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 43
            },
            "start": {
              "column": 9,
              "line": 43
            }
          }
        },
        {
          "id": "2077",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 52
            },
            "start": {
              "column": 41,
              "line": 45
            }
          }
        },
        {
          "id": "2078",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentCoroutine",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(50,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 46
            },
            "start": {
              "column": 11,
              "line": 46
            }
          }
        },
        {
          "id": "2079",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(50,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 46
            },
            "start": {
              "column": 11,
              "line": 46
            }
          }
        },
        {
          "id": "2080",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(50,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 46
            },
            "start": {
              "column": 11,
              "line": 46
            }
          }
        },
        {
          "id": "2081",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 47
            },
            "start": {
              "column": 17,
              "line": 47
            }
          }
        },
        {
          "id": "2082",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 49
            },
            "start": {
              "column": 11,
              "line": 49
            }
          }
        },
        {
          "id": "2083",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 49
            },
            "start": {
              "column": 11,
              "line": 49
            }
          }
        },
        {
          "id": "2084",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 128,
              "line": 59
            },
            "start": {
              "column": 25,
              "line": 59
            }
          }
        },
        {
          "id": "2085",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 64
            },
            "start": {
              "column": 130,
              "line": 59
            }
          }
        },
        {
          "id": "2086",
          "mutatorName": "BooleanLiteral",
          "replacement": "copied",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 62
            },
            "start": {
              "column": 38,
              "line": 62
            }
          }
        },
        {
          "id": "2087",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(65,31): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 65
            },
            "start": {
              "column": 31,
              "line": 65
            }
          }
        },
        {
          "id": "2088",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 72
            },
            "start": {
              "column": 33,
              "line": 72
            }
          }
        },
        {
          "id": "2089",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 72
            },
            "start": {
              "column": 52,
              "line": 72
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport getRefCurrentPtr from '@rtm/shared-lib/portable/react/getRefCurrentPtr';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { useState, useRef } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nexport interface CopyToClipboardProps extends WithChildren {}\n\nconst MS_DELAY = 750;\n\nconst CopyToClipboard: FunctionComponent<CopyToClipboardProps> = ({ children }) => {\n  const textInputRef = useRef<HTMLDivElement>(null);\n  const copyBtnRef = useRef<HTMLButtonElement>(null);\n  const [hovered, setHovered] = useState<boolean>(false);\n  const [focused, setFocused] = useState<boolean>(false);\n  const [copied, setCopied] = useState<boolean>(false);\n  const globalT = getClientSideI18n();\n\n  const onMouseEnter = () => setHovered(true);\n  const onMouseLeave = () => {\n    setHovered(false);\n  };\n\n  const onFocus = () => setFocused(true);\n  const onBlur = () => {\n    setFocused(false);\n  };\n\n  const isHidden = () => !hovered && !focused;\n  const isShown = () => hovered || focused;\n\n  const onCopy = () => {\n    let currentCoroutine: NodeJS.Timeout | null = null;\n    const textInputInstance = getRefCurrentPtr(textInputRef);\n\n    setCopied(true);\n    if (textInputInstance && textInputInstance.textContent !== null) navigator.clipboard.writeText(textInputInstance.textContent);\n    if (currentCoroutine) clearTimeout(currentCoroutine);\n\n    currentCoroutine = setTimeout(() => {\n      if (!currentCoroutine) return;\n      setCopied(false);\n      const copyBtnInstance = getRefCurrentPtr(copyBtnRef);\n      if (copyBtnInstance) copyBtnInstance.blur();\n      clearTimeout(currentCoroutine);\n      currentCoroutine = null;\n    }, MS_DELAY);\n  };\n\n  return (\n    <div className=\"code-block relative\" onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} ref={textInputRef}>\n      {\n        <button\n          className={cn('absolute right-2 top-2 h-8 w-8 rounded border-2 bg-gray-700 p-1 transition-[opacity] dark:bg-gray-800', {\n            'border-green-400 focus:border-green-400 focus:outline-none': copied,\n            'opacity-0 delay-200': isHidden(),\n            'hover:border-gray-300': !copied,\n            'opacity-100': isShown()\n          })}\n          aria-label={globalT(`${i18ns.vocab}.copy-to-clipboard`)}\n          onFocus={onFocus}\n          ref={copyBtnRef}\n          onClick={onCopy}\n          onBlur={onBlur}\n        >\n          <svg\n            className={copied ? 'text-green-400' : 'text-gray-300'}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n          >\n            {copied ? (\n              <path\n                d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\"\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                strokeWidth={2}\n              />\n            ) : (\n              <path\n                d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                strokeWidth={2}\n              />\n            )}\n          </svg>\n        </button>\n      }\n      {children}\n    </div>\n  );\n};\n\nexport default CopyToClipboard;\n"
    },
    "src/components/ui/blog/DraftBadge.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2090",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/DraftBadge.tsx(15,7): error TS2322: Type '({ className: classNameValue }: DraftBadgeProps) => void' is not assignable to type 'FunctionComponent<DraftBadgeProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 91,
              "line": 15
            }
          }
        },
        {
          "id": "2091",
          "mutatorName": "LogicalOperator",
          "replacement": "classNameValue && ''",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 17
            },
            "start": {
              "column": 21,
              "line": 17
            }
          }
        },
        {
          "id": "2092",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 17
            },
            "start": {
              "column": 39,
              "line": 17
            }
          }
        },
        {
          "id": "2093",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 158,
              "line": 22
            },
            "start": {
              "column": 9,
              "line": 22
            }
          }
        },
        {
          "id": "2094",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/DraftBadge.tsx(26,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n  Overload 2 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 26
            },
            "start": {
              "column": 27,
              "line": 26
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { useScopedI18n } from '@/i18n/client';\nimport { capitalize } from '@/lib/str';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nimport { Badge } from '../Badge';\n\ninterface DraftBadgeProps extends Partial<WithClassname> {}\n\nconst DraftBadge: FunctionComponent<DraftBadgeProps> = ({ className: classNameValue }) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const className = classNameValue ?? '';\n\n  return (\n    <Badge\n      className={cn(\n        'h-fit w-fit select-none border border-[#e5e7eb] bg-transparent text-sm  font-bold text-black hover:bg-transparent dark:border-white dark:text-white',\n        className\n      )}\n    >\n      {capitalize(scopedT('draft'))}\n    </Badge>\n  );\n};\n\nexport default DraftBadge;\n"
    },
    "src/components/ui/blog/MdxCopyToClipboard.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2095",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 80,
              "line": 14
            }
          }
        },
        {
          "id": "2096",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 19,
              "line": 17
            }
          }
        },
        {
          "id": "2097",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 19
            }
          }
        },
        {
          "id": "2098",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 109,
              "line": 19
            },
            "start": {
              "column": 57,
              "line": 19
            }
          }
        },
        {
          "id": "2099",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 108,
              "line": 19
            },
            "start": {
              "column": 85,
              "line": 19
            }
          }
        },
        {
          "id": "2100",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 20
            },
            "start": {
              "column": 6,
              "line": 20
            }
          }
        },
        {
          "id": "2101",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "2102",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "2103",
          "mutatorName": "EqualityOperator",
          "replacement": "Component !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FunctionComponent } from 'react';\n\nimport { useEffect, useState } from 'react';\n\nimport type { CopyToClipboardProps } from './CopyToClipboard';\n\n// https://v3.gatsbyjs.com/docs/mdx/importing-and-using-components/#lazy-loading-components\nconst MdxCopyToClipboard: FunctionComponent<CopyToClipboardProps> = (props) => {\n  const placeholder = <div className=\"code-block relative\">{props.children}</div>;\n  const [Component, setComponent] = useState<MaybeNull<FunctionComponent<CopyToClipboardProps>>>(null);\n  useEffect(() => {\n    // eslint-disable-next-line promise/catch-or-return\n    import('@/components/ui/blog/CopyToClipboard').then((component) => setComponent(() => component.default));\n  }, []);\n  if (Component === null) return placeholder;\n  return <Component {...props} />;\n};\n\nexport default MdxCopyToClipboard;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/blog/tagsGenerator.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2104",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/tagsGenerator.tsx(12,126): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 141,
              "line": 12
            }
          }
        },
        {
          "id": "2105",
          "mutatorName": "MethodExpression",
          "replacement": "tags",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 13
            },
            "start": {
              "column": 37,
              "line": 13
            }
          }
        },
        {
          "id": "2106",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/tagsGenerator.tsx(13,47): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type '(a: \"xylophone\" | \"cello\" | \"bagpipes\" | \"drums\", b: \"xylophone\" | \"cello\" | \"bagpipes\" | \"drums\") => number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 13
            },
            "start": {
              "column": 47,
              "line": 13
            }
          }
        },
        {
          "id": "2107",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/tagsGenerator.tsx(14,3): error TS2322: Type 'undefined[]' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n  Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 14
            },
            "start": {
              "column": 40,
              "line": 14
            }
          }
        }
      ],
      "source": "import type { getScopedI18n } from '@/i18n/server';\nimport type { BlogPostType } from '@/types/Blog';\nimport type { i18ns } from '##/config/i18n';\nimport type { ReactElement } from 'react';\n\nimport { Badge } from '@/components/ui/Badge';\n\nfunction tagsGenerator({\n  language,\n  scopedT,\n  tags\n}: { scopedT: Awaited<ReturnType<typeof getScopedI18n<typeof i18ns.blogTags>>> } & Pick<BlogPostType, 'language' | 'tags'>): ReactElement[] {\n  const sortedTagsByCurrentLocale = tags.sort((a, b) => a.localeCompare(b, language));\n  return sortedTagsByCurrentLocale.map((tag) => <Badge key={tag}>{scopedT(tag)}</Badge>);\n}\n\nexport default tagsGenerator;\n"
    },
    "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2108",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx(23,7): error TS2322: Type '({ className: classNameValue, setIsCollapsed, isCollapsed, isDisabled }: BlogPostTocCollapseButtonProps) => void' is not assignable to type 'FunctionComponent<BlogPostTocCollapseButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 64
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "2109",
          "mutatorName": "LogicalOperator",
          "replacement": "classNameValue && ''",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 29
            },
            "start": {
              "column": 21,
              "line": 29
            }
          }
        },
        {
          "id": "2110",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 29
            },
            "start": {
              "column": 39,
              "line": 29
            }
          }
        },
        {
          "id": "2111",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 131,
              "line": 33
            },
            "start": {
              "column": 35,
              "line": 33
            }
          }
        },
        {
          "id": "2112",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx(35,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"search-menu\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"navbar\" | \"filters\" | \"errors\" | \"blog-toc\" | \"blog-tags-filters\" | \"auth\" | \"metadescriptions\" | \"_infos\" | \"blog-tags\" | ... 16 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 35
            },
            "start": {
              "column": 33,
              "line": 35
            }
          }
        },
        {
          "id": "2113",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx(36,43): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"hide-toc\" | \"show-toc\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-toc\" | \"show-toc\"'.\n  Overload 2 of 2, '(key: \"hide-toc\" | \"show-toc\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-toc\" | \"show-toc\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 36
            },
            "start": {
              "column": 43,
              "line": 36
            }
          }
        },
        {
          "id": "2114",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx(36,65): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"hide-toc\" | \"show-toc\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-toc\" | \"show-toc\"'.\n  Overload 2 of 2, '(key: \"hide-toc\" | \"show-toc\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-toc\" | \"show-toc\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 36
            },
            "start": {
              "column": 65,
              "line": 36
            }
          }
        },
        {
          "id": "2115",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx(43,10): error TS2322: Type '{ children: Element; className: string; style: { height: string; }; onClick: () => unknown; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; style: { height: string; }; onClick: () => unknown; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property '\"aria-expanded\"' are incompatible.\n      Type '\"\" | \"true\"' is not assignable to type 'Booleanish | undefined'.\n        Type '\"\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 37
            },
            "start": {
              "column": 38,
              "line": 37
            }
          }
        },
        {
          "id": "2116",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx(43,10): error TS2322: Type '{ children: Element; className: string; style: { height: string; }; onClick: () => unknown; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; style: { height: string; }; onClick: () => unknown; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property '\"aria-expanded\"' are incompatible.\n      Type '\"\" | \"false\"' is not assignable to type 'Booleanish | undefined'.\n        Type '\"\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 37
            },
            "start": {
              "column": 48,
              "line": 37
            }
          }
        },
        {
          "id": "2117",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocCollapseButton.tsx(49,11): error TS2322: Type '\"\"' is not assignable to type '\"submit\" | \"reset\" | \"button\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 38
            },
            "start": {
              "column": 16,
              "line": 38
            }
          }
        },
        {
          "id": "2118",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 61
            },
            "start": {
              "column": 8,
              "line": 42
            }
          }
        },
        {
          "id": "2119",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 61
            },
            "start": {
              "column": 8,
              "line": 42
            }
          }
        },
        {
          "id": "2120",
          "mutatorName": "LogicalOperator",
          "replacement": "!isDisabled && <button className={cn(tocCollapseBtnClassList, 'hidden lg:inline', className)} style={{\n  height: COLLAPSE_BUTTON_HEIGTH_IN_PX + 'px'\n}} onClick={() => setIsCollapsed(!isCollapsed)} aria-expanded={ariaExpanded} aria-label={ariaLabel} type={type}>\n          <ArrowDownIcon className={tocCollapseBtnIconClassList} />\n        </button> && <div className={cn(tocCollapseBtnClassList, 'hidden cursor-default lg:inline', className)} style={{\n  height: COLLAPSE_BUTTON_HEIGTH_IN_PX + 'px'\n}} aria-hidden=\"true\">\n          <ArrowDownIcon className={tocCollapseBtnIconClassList} />\n        </div>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 61
            },
            "start": {
              "column": 8,
              "line": 42
            }
          }
        },
        {
          "id": "2121",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "2122",
          "mutatorName": "LogicalOperator",
          "replacement": "!isDisabled || <button className={cn(tocCollapseBtnClassList, 'hidden lg:inline', className)} style={{\n  height: COLLAPSE_BUTTON_HEIGTH_IN_PX + 'px'\n}} onClick={() => setIsCollapsed(!isCollapsed)} aria-expanded={ariaExpanded} aria-label={ariaLabel} type={type}>\n          <ArrowDownIcon className={tocCollapseBtnIconClassList} />\n        </button>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "2123",
          "mutatorName": "BooleanLiteral",
          "replacement": "isDisabled",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "2124",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 44
            },
            "start": {
              "column": 50,
              "line": 44
            }
          }
        },
        {
          "id": "2125",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 45
            },
            "start": {
              "column": 18,
              "line": 45
            }
          }
        },
        {
          "id": "2126",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 45
            },
            "start": {
              "column": 59,
              "line": 45
            }
          }
        },
        {
          "id": "2127",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 46
            },
            "start": {
              "column": 20,
              "line": 46
            }
          }
        },
        {
          "id": "2128",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 46
            },
            "start": {
              "column": 41,
              "line": 46
            }
          }
        },
        {
          "id": "2129",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 55
            },
            "start": {
              "column": 50,
              "line": 55
            }
          }
        },
        {
          "id": "2130",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 56
            },
            "start": {
              "column": 18,
              "line": 56
            }
          }
        },
        {
          "id": "2131",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 56
            },
            "start": {
              "column": 59,
              "line": 56
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { PxValue } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent } from 'react';\n\nimport DesktopBlogTocCollapseButtonIconStyle from '@/components/config/styles/blogToc/desktopTocCollapseButtonIconStyle';\nimport { ArrowDownIcon } from '@radix-ui/react-icons';\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nexport const COLLAPSE_BUTTON_HEIGTH_IN_PX: PxValue = 30;\n\ninterface BlogPostTocCollapseButtonProps extends Partial<WithClassname> {\n  setIsCollapsed: (isCollapsed: boolean) => unknown;\n  isCollapsed: boolean;\n  isDisabled?: boolean;\n}\n\nconst { isNotActiveClassList: btnIconIsNotActiveClassList, isActiveClassList: btnIconIsActiveClassList } = DesktopBlogTocCollapseButtonIconStyle;\n\nconst BlogPostTocCollapseButton: FunctionComponent<BlogPostTocCollapseButtonProps> = ({\n  className: classNameValue,\n  setIsCollapsed,\n  isCollapsed,\n  isDisabled\n}) => {\n  const className = classNameValue ?? '';\n\n  const tocCollapseBtnIconClassList = isCollapsed ? btnIconIsActiveClassList : btnIconIsNotActiveClassList;\n\n  const tocCollapseBtnClassList = 'relative bottom-1 m-auto w-12 rounded-full rounded-b-full rounded-t-none bg-black dark:bg-card';\n\n  const scopedT = useScopedI18n(`${i18ns.blogToc}.sr-only`);\n  const ariaLabel = isCollapsed ? scopedT('show-toc') : scopedT('hide-toc');\n  const ariaExpanded = isCollapsed ? 'false' : 'true';\n  const type = 'button';\n\n  return (\n    <div className=\"h-0\">\n      {(!isDisabled && (\n        <button\n          className={cn(tocCollapseBtnClassList, 'hidden lg:inline', className)}\n          style={{ height: COLLAPSE_BUTTON_HEIGTH_IN_PX + 'px' }}\n          onClick={() => setIsCollapsed(!isCollapsed)}\n          aria-expanded={ariaExpanded}\n          aria-label={ariaLabel}\n          type={type}\n        >\n          <ArrowDownIcon className={tocCollapseBtnIconClassList} />\n        </button>\n      )) || (\n        <div\n          className={cn(tocCollapseBtnClassList, 'hidden cursor-default lg:inline', className)}\n          style={{ height: COLLAPSE_BUTTON_HEIGTH_IN_PX + 'px' }}\n          aria-hidden=\"true\"\n        >\n          <ArrowDownIcon className={tocCollapseBtnIconClassList} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BlogPostTocCollapseButton;\n"
    },
    "src/components/ui/blog/toc/desktop/BlogPostTocDesktop.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2132",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktop.tsx(9,40): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type 'DynamicOptions<{}> | Loader<{}>'.\n  Type '() => undefined' is not assignable to type '() => LoaderComponent<{}>'.\n    Type 'undefined' is not assignable to type 'LoaderComponent<{}>'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktop.tsx(14,31): error TS2322: Type '{ headings: DocumentHeading[]; }' is not assignable to type 'IntrinsicAttributes'.\n  Property 'headings' does not exist on type 'IntrinsicAttributes'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 9
            },
            "start": {
              "column": 40,
              "line": 9
            }
          }
        },
        {
          "id": "2133",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktop.tsx(9,53): error TS2307: Cannot find module '' or its corresponding type declarations.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktop.tsx(14,31): error TS2322: Type '{ headings: DocumentHeading[]; }' is not assignable to type 'IntrinsicAttributes'.\n  Property 'headings' does not exist on type 'IntrinsicAttributes'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 9
            },
            "start": {
              "column": 53,
              "line": 9
            }
          }
        },
        {
          "id": "2134",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 9
            },
            "start": {
              "column": 82,
              "line": 9
            }
          }
        },
        {
          "id": "2135",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 9
            },
            "start": {
              "column": 89,
              "line": 9
            }
          }
        },
        {
          "id": "2136",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktop.tsx(11,7): error TS2322: Type '({ headings }: SharedBlogPostTocProps) => void' is not assignable to type 'FunctionComponent<SharedBlogPostTocProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 89,
              "line": 11
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport dynamic from 'next/dynamic';\n\nimport type { SharedBlogPostTocProps } from '../types';\n\nconst BlogPostTocDesktopLazy = dynamic(() => import('./BlogPostTocDesktopLazy'), { ssr: false });\n\nconst BlogPostTocDesktop: FunctionComponent<SharedBlogPostTocProps> = ({ headings }) => {\n  return (\n    <aside className=\"sticky top-16 h-0 hover:opacity-100 lg:block lg:w-0\">\n      <BlogPostTocDesktopLazy headings={headings} />\n    </aside>\n  );\n};\n\nexport default BlogPostTocDesktop;\n"
    },
    "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2137",
          "mutatorName": "ArithmeticOperator",
          "replacement": "navbarHeight / 2",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 31
            },
            "start": {
              "column": 38,
              "line": 31
            }
          }
        },
        {
          "id": "2138",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 39
            },
            "start": {
              "column": 17,
              "line": 39
            }
          }
        },
        {
          "id": "2139",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 39
            },
            "start": {
              "column": 23,
              "line": 39
            }
          }
        },
        {
          "id": "2140",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 39
            },
            "start": {
              "column": 23,
              "line": 39
            }
          }
        },
        {
          "id": "2141",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 39
            },
            "start": {
              "column": 23,
              "line": 39
            }
          }
        },
        {
          "id": "2142",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(131,62): error TS2532: Object is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,35): error TS18048: 'yMax' is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(205,40): error TS2532: Object is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 92,
              "line": 41
            },
            "start": {
              "column": 40,
              "line": 41
            }
          }
        },
        {
          "id": "2143",
          "mutatorName": "ArithmeticOperator",
          "replacement": "window.scrollY - window.innerHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 41
            },
            "start": {
              "column": 56,
              "line": 41
            }
          }
        },
        {
          "id": "2144",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(82,11): error TS2532: Object is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(82,51): error TS7006: Parameter 'heading' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 43
            },
            "start": {
              "column": 39,
              "line": 43
            }
          }
        },
        {
          "id": "2145",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(314,44): error TS2339: Property 'offsetTop' does not exist on type 'never'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(316,69): error TS2339: Property 'offsetTop' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 45
            },
            "start": {
              "column": 27,
              "line": 45
            }
          }
        },
        {
          "id": "2146",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(48,7): error TS2322: Type '({ setIsMagnetized, setIsCollapsed, isMagnetized, isCollapsed, ariaLabel, headings }: BlogPostTocDesktopInnerProps) => void' is not assignable to type 'FunctionComponent<BlogPostTocDesktopInnerProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 661
            },
            "start": {
              "column": 7,
              "line": 55
            }
          }
        },
        {
          "id": "2147",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 59
            },
            "start": {
              "column": 69,
              "line": 59
            }
          }
        },
        {
          "id": "2148",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 64
            },
            "start": {
              "column": 52,
              "line": 64
            }
          }
        },
        {
          "id": "2149",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 65
            },
            "start": {
              "column": 53,
              "line": 65
            }
          }
        },
        {
          "id": "2150",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 66
            },
            "start": {
              "column": 56,
              "line": 66
            }
          }
        },
        {
          "id": "2151",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(74,77): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(145,35): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(169,21): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(241,35): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(242,34): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(285,24): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(286,24): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(356,38): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(417,17): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(441,21): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(466,21): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(603,58): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(621,26): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'void'.\n  No index signature with a parameter of type 'string' was found on type 'void'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 79
            },
            "start": {
              "column": 43,
              "line": 71
            }
          }
        },
        {
          "id": "2152",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(73,7): error TS2769: No overload matches this call.\n  Overload 1 of 3, '(callbackfn: (previousValue: DocumentHeading, currentValue: DocumentHeading, currentIndex: number, array: DocumentHeading[]) => DocumentHeading, initialValue: DocumentHeading): DocumentHeading', gave the following error.\n    Argument of type '(indexed: Record<string, number>, { slug }: DocumentHeading, idx: number) => void' is not assignable to parameter of type '(previousValue: DocumentHeading, currentValue: DocumentHeading, currentIndex: number, array: DocumentHeading[]) => DocumentHeading'.\n      Types of parameters 'indexed' and 'previousValue' are incompatible.\n        Type 'DocumentHeading' is not assignable to type 'Record<string, number>'.\n          Property 'content' is incompatible with index signature.\n            Type 'string' is not assignable to type 'number'.\n  Overload 2 of 3, '(callbackfn: (previousValue: Record<string, number>, currentValue: DocumentHeading, currentIndex: number, array: DocumentHeading[]) => Record<string, number>, initialValue: Record<...>): Record<...>', gave the following error.\n    Argument of type '(indexed: Record<string, number>, { slug }: DocumentHeading, idx: number) => void' is not assignable to parameter of type '(previousValue: Record<string, number>, currentValue: DocumentHeading, currentIndex: number, array: DocumentHeading[]) => Record<string, number>'.\n      Type 'void' is not assignable to type 'Record<string, number>'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(79,77): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(150,35): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(174,21): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(246,35): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(247,34): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(290,24): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(291,24): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(361,38): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(422,17): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(446,21): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(471,21): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(608,58): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(626,26): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'DocumentHeading'.\n  No index signature with a parameter of type 'string' was found on type 'DocumentHeading'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 76
            },
            "start": {
              "column": 35,
              "line": 73
            }
          }
        },
        {
          "id": "2153",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 79
            },
            "start": {
              "column": 6,
              "line": 79
            }
          }
        },
        {
          "id": "2154",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(116,27): error TS18048: 'headingsFromDOM' is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(133,27): error TS18048: 'headingsFromDOM' is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(372,29): error TS18048: 'headingsFromDOM' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 121,
              "line": 82
            },
            "start": {
              "column": 5,
              "line": 82
            }
          }
        },
        {
          "id": "2155",
          "mutatorName": "MethodExpression",
          "replacement": "getAllDocumentHeadingsFromDOM()",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 121,
              "line": 82
            },
            "start": {
              "column": 11,
              "line": 82
            }
          }
        },
        {
          "id": "2156",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 82
            },
            "start": {
              "column": 50,
              "line": 82
            }
          }
        },
        {
          "id": "2157",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 82
            },
            "start": {
              "column": 63,
              "line": 82
            }
          }
        },
        {
          "id": "2158",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 82
            },
            "start": {
              "column": 63,
              "line": 82
            }
          }
        },
        {
          "id": "2159",
          "mutatorName": "LogicalOperator",
          "replacement": "heading.id || slugAndIndexAssoc[heading.id] !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 82
            },
            "start": {
              "column": 63,
              "line": 82
            }
          }
        },
        {
          "id": "2160",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 82
            },
            "start": {
              "column": 77,
              "line": 82
            }
          }
        },
        {
          "id": "2161",
          "mutatorName": "EqualityOperator",
          "replacement": "slugAndIndexAssoc[heading.id] === undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 82
            },
            "start": {
              "column": 77,
              "line": 82
            }
          }
        },
        {
          "id": "2162",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 83
            },
            "start": {
              "column": 5,
              "line": 83
            }
          }
        },
        {
          "id": "2163",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(314,44): error TS2339: Property 'offsetTop' does not exist on type 'never'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(316,69): error TS2339: Property 'offsetTop' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 86
            },
            "start": {
              "column": 34,
              "line": 86
            }
          }
        },
        {
          "id": "2164",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 86
            },
            "start": {
              "column": 61,
              "line": 86
            }
          }
        },
        {
          "id": "2165",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 100
            },
            "start": {
              "column": 49,
              "line": 88
            }
          }
        },
        {
          "id": "2166",
          "mutatorName": "BooleanLiteral",
          "replacement": "headingsRefInstance",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(92,11): error TS2322: Type 'unknown' is not assignable to type 'MaybeUndefined<Element>'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(92,104): error TS2339: Property 'children' does not exist on type 'never'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(93,18): error TS18046: 'headingLi' is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 90
            },
            "start": {
              "column": 9,
              "line": 90
            }
          }
        },
        {
          "id": "2167",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(98,42): error TS18048: 'maybeCurrentlyFocusedHeadingParent' is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(99,39): error TS18048: 'maybeCurrentlyFocusedHeading' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 90
            },
            "start": {
              "column": 9,
              "line": 90
            }
          }
        },
        {
          "id": "2168",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 90
            },
            "start": {
              "column": 9,
              "line": 90
            }
          }
        },
        {
          "id": "2169",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 93
            },
            "start": {
              "column": 119,
              "line": 92
            }
          }
        },
        {
          "id": "2170",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 93
            },
            "start": {
              "column": 43,
              "line": 93
            }
          }
        },
        {
          "id": "2171",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 93
            },
            "start": {
              "column": 54,
              "line": 93
            }
          }
        },
        {
          "id": "2172",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 93
            },
            "start": {
              "column": 54,
              "line": 93
            }
          }
        },
        {
          "id": "2173",
          "mutatorName": "EqualityOperator",
          "replacement": "child !== document.activeElement",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 93
            },
            "start": {
              "column": 54,
              "line": 93
            }
          }
        },
        {
          "id": "2174",
          "mutatorName": "BooleanLiteral",
          "replacement": "maybeCurrentlyFocusedHeadingParent",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(98,42): error TS18048: 'maybeCurrentlyFocusedHeadingParent' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 96
            },
            "start": {
              "column": 9,
              "line": 96
            }
          }
        },
        {
          "id": "2175",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(98,42): error TS18048: 'maybeCurrentlyFocusedHeadingParent' is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(99,39): error TS18048: 'maybeCurrentlyFocusedHeading' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 96
            },
            "start": {
              "column": 9,
              "line": 96
            }
          }
        },
        {
          "id": "2176",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(98,42): error TS18048: 'maybeCurrentlyFocusedHeadingParent' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 96
            },
            "start": {
              "column": 9,
              "line": 96
            }
          }
        },
        {
          "id": "2177",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(99,15): error TS18048: 'maybeCurrentlyFocusedHeading' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 99
            },
            "start": {
              "column": 9,
              "line": 99
            }
          }
        },
        {
          "id": "2178",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(99,16): error TS18048: 'maybeCurrentlyFocusedHeading' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 99
            },
            "start": {
              "column": 9,
              "line": 99
            }
          }
        },
        {
          "id": "2179",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 100
            },
            "start": {
              "column": 6,
              "line": 100
            }
          }
        },
        {
          "id": "2180",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 106
            },
            "start": {
              "column": 41,
              "line": 103
            }
          }
        },
        {
          "id": "2181",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 107
            },
            "start": {
              "column": 5,
              "line": 107
            }
          }
        },
        {
          "id": "2182",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(110,55): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 126
            },
            "start": {
              "column": 81,
              "line": 110
            }
          }
        },
        {
          "id": "2183",
          "mutatorName": "ArithmeticOperator",
          "replacement": "window.scrollY + viewportHeight + BOTTOM_DEAD_ZONE_PX",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 73,
              "line": 114
            },
            "start": {
              "column": 20,
              "line": 114
            }
          }
        },
        {
          "id": "2184",
          "mutatorName": "ArithmeticOperator",
          "replacement": "window.scrollY - viewportHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 114
            },
            "start": {
              "column": 20,
              "line": 114
            }
          }
        },
        {
          "id": "2185",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 123
            },
            "start": {
              "column": 44,
              "line": 116
            }
          }
        },
        {
          "id": "2186",
          "mutatorName": "ArithmeticOperator",
          "replacement": "yStart + heading.offsetTop",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 117
            },
            "start": {
              "column": 24,
              "line": 117
            }
          }
        },
        {
          "id": "2187",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 119
            },
            "start": {
              "column": 11,
              "line": 119
            }
          }
        },
        {
          "id": "2188",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 119
            },
            "start": {
              "column": 11,
              "line": 119
            }
          }
        },
        {
          "id": "2189",
          "mutatorName": "LogicalOperator",
          "replacement": "0 <= distance || distance <= closestDistance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 119
            },
            "start": {
              "column": 11,
              "line": 119
            }
          }
        },
        {
          "id": "2190",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 119
            },
            "start": {
              "column": 11,
              "line": 119
            }
          }
        },
        {
          "id": "2191",
          "mutatorName": "EqualityOperator",
          "replacement": "0 < distance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 119
            },
            "start": {
              "column": 11,
              "line": 119
            }
          }
        },
        {
          "id": "2192",
          "mutatorName": "EqualityOperator",
          "replacement": "0 > distance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 119
            },
            "start": {
              "column": 11,
              "line": 119
            }
          }
        },
        {
          "id": "2193",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 119
            },
            "start": {
              "column": 28,
              "line": 119
            }
          }
        },
        {
          "id": "2194",
          "mutatorName": "EqualityOperator",
          "replacement": "distance < closestDistance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 119
            },
            "start": {
              "column": 28,
              "line": 119
            }
          }
        },
        {
          "id": "2195",
          "mutatorName": "EqualityOperator",
          "replacement": "distance > closestDistance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 119
            },
            "start": {
              "column": 28,
              "line": 119
            }
          }
        },
        {
          "id": "2196",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 122
            },
            "start": {
              "column": 57,
              "line": 119
            }
          }
        },
        {
          "id": "2197",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 126
            },
            "start": {
              "column": 6,
              "line": 126
            }
          }
        },
        {
          "id": "2198",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(128,52): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 144
            },
            "start": {
              "column": 78,
              "line": 128
            }
          }
        },
        {
          "id": "2199",
          "mutatorName": "UnaryOperator",
          "replacement": "+Infinity",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 130
            },
            "start": {
              "column": 27,
              "line": 130
            }
          }
        },
        {
          "id": "2200",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(131,12): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(131,18): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(134,31): error TS18048: 'yMax' is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(135,24): error TS18048: 'yMin' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 117,
              "line": 131
            },
            "start": {
              "column": 26,
              "line": 131
            }
          }
        },
        {
          "id": "2201",
          "mutatorName": "ArithmeticOperator",
          "replacement": "window.scrollY - TOP_DEAD_ZONE_PX",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 131
            },
            "start": {
              "column": 27,
              "line": 131
            }
          }
        },
        {
          "id": "2202",
          "mutatorName": "ArithmeticOperator",
          "replacement": "getTotalVerticalScrollDistance() + BOTTOM_DEAD_ZONE_PX",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 116,
              "line": 131
            },
            "start": {
              "column": 62,
              "line": 131
            }
          }
        },
        {
          "id": "2203",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 141
            },
            "start": {
              "column": 44,
              "line": 133
            }
          }
        },
        {
          "id": "2204",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 134
            },
            "start": {
              "column": 11,
              "line": 134
            }
          }
        },
        {
          "id": "2205",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 134
            },
            "start": {
              "column": 11,
              "line": 134
            }
          }
        },
        {
          "id": "2206",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.offsetTop >= yMax",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 134
            },
            "start": {
              "column": 11,
              "line": 134
            }
          }
        },
        {
          "id": "2207",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.offsetTop <= yMax",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 134
            },
            "start": {
              "column": 11,
              "line": 134
            }
          }
        },
        {
          "id": "2208",
          "mutatorName": "ArithmeticOperator",
          "replacement": "yMin + heading.offsetTop",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 135
            },
            "start": {
              "column": 24,
              "line": 135
            }
          }
        },
        {
          "id": "2209",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 137
            },
            "start": {
              "column": 11,
              "line": 137
            }
          }
        },
        {
          "id": "2210",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 137
            },
            "start": {
              "column": 11,
              "line": 137
            }
          }
        },
        {
          "id": "2211",
          "mutatorName": "LogicalOperator",
          "replacement": "0 >= distance || distance >= closestDistance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 137
            },
            "start": {
              "column": 11,
              "line": 137
            }
          }
        },
        {
          "id": "2212",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 137
            },
            "start": {
              "column": 11,
              "line": 137
            }
          }
        },
        {
          "id": "2213",
          "mutatorName": "EqualityOperator",
          "replacement": "0 > distance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 137
            },
            "start": {
              "column": 11,
              "line": 137
            }
          }
        },
        {
          "id": "2214",
          "mutatorName": "EqualityOperator",
          "replacement": "0 < distance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 137
            },
            "start": {
              "column": 11,
              "line": 137
            }
          }
        },
        {
          "id": "2215",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 137
            },
            "start": {
              "column": 28,
              "line": 137
            }
          }
        },
        {
          "id": "2216",
          "mutatorName": "EqualityOperator",
          "replacement": "distance > closestDistance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 137
            },
            "start": {
              "column": 28,
              "line": 137
            }
          }
        },
        {
          "id": "2217",
          "mutatorName": "EqualityOperator",
          "replacement": "distance < closestDistance",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 137
            },
            "start": {
              "column": 28,
              "line": 137
            }
          }
        },
        {
          "id": "2218",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 140
            },
            "start": {
              "column": 57,
              "line": 137
            }
          }
        },
        {
          "id": "2219",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 144
            },
            "start": {
              "column": 6,
              "line": 144
            }
          }
        },
        {
          "id": "2220",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 147
            },
            "start": {
              "column": 40,
              "line": 147
            }
          }
        },
        {
          "id": "2221",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(146,9): error TS2322: Type '(expectedToBeInViewport?: boolean) => void' is not assignable to type '(expectedToBeInViewport?: boolean | undefined) => MaybeNull<string>'.\n  Type 'void' is not assignable to type 'MaybeNull<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 164
            },
            "start": {
              "column": 50,
              "line": 147
            }
          }
        },
        {
          "id": "2222",
          "mutatorName": "BooleanLiteral",
          "replacement": "hash",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 149
            },
            "start": {
              "column": 11,
              "line": 149
            }
          }
        },
        {
          "id": "2223",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,43): error TS18047: 'heading' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,64): error TS18047: 'heading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 149
            },
            "start": {
              "column": 11,
              "line": 149
            }
          }
        },
        {
          "id": "2224",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 149
            },
            "start": {
              "column": 11,
              "line": 149
            }
          }
        },
        {
          "id": "2225",
          "mutatorName": "MethodExpression",
          "replacement": "hash",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 152
            },
            "start": {
              "column": 32,
              "line": 152
            }
          }
        },
        {
          "id": "2226",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,43): error TS18047: 'heading' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,64): error TS18047: 'heading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 154
            },
            "start": {
              "column": 11,
              "line": 154
            }
          }
        },
        {
          "id": "2227",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 154
            },
            "start": {
              "column": 11,
              "line": 154
            }
          }
        },
        {
          "id": "2228",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeHeadingSlugIdx !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 154
            },
            "start": {
              "column": 11,
              "line": 154
            }
          }
        },
        {
          "id": "2229",
          "mutatorName": "BooleanLiteral",
          "replacement": "heading",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,43): error TS18047: 'heading' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,64): error TS18047: 'heading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 157
            },
            "start": {
              "column": 11,
              "line": 157
            }
          }
        },
        {
          "id": "2230",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,43): error TS18047: 'heading' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,64): error TS18047: 'heading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 157
            },
            "start": {
              "column": 11,
              "line": 157
            }
          }
        },
        {
          "id": "2231",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,43): error TS18047: 'heading' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,64): error TS18047: 'heading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 157
            },
            "start": {
              "column": 11,
              "line": 157
            }
          }
        },
        {
          "id": "2232",
          "mutatorName": "BooleanLiteral",
          "replacement": "expectedToBeInViewport",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 159
            },
            "start": {
              "column": 11,
              "line": 159
            }
          }
        },
        {
          "id": "2233",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,43): error TS18047: 'heading' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,64): error TS18047: 'heading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 159
            },
            "start": {
              "column": 11,
              "line": 159
            }
          }
        },
        {
          "id": "2234",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 159
            },
            "start": {
              "column": 11,
              "line": 159
            }
          }
        },
        {
          "id": "2235",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(161,14): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(161,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,35): error TS18048: 'yMax' is possibly 'undefined'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(162,85): error TS18048: 'yMin' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 161
            },
            "start": {
              "column": 28,
              "line": 161
            }
          }
        },
        {
          "id": "2236",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 162
            },
            "start": {
              "column": 35,
              "line": 162
            }
          }
        },
        {
          "id": "2237",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 162
            },
            "start": {
              "column": 35,
              "line": 162
            }
          }
        },
        {
          "id": "2238",
          "mutatorName": "LogicalOperator",
          "replacement": "yMax >= heading.offsetTop || heading.offsetTop >= yMin",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 162
            },
            "start": {
              "column": 35,
              "line": 162
            }
          }
        },
        {
          "id": "2239",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 162
            },
            "start": {
              "column": 35,
              "line": 162
            }
          }
        },
        {
          "id": "2240",
          "mutatorName": "EqualityOperator",
          "replacement": "yMax > heading.offsetTop",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 162
            },
            "start": {
              "column": 35,
              "line": 162
            }
          }
        },
        {
          "id": "2241",
          "mutatorName": "EqualityOperator",
          "replacement": "yMax < heading.offsetTop",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 162
            },
            "start": {
              "column": 35,
              "line": 162
            }
          }
        },
        {
          "id": "2242",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 162
            },
            "start": {
              "column": 64,
              "line": 162
            }
          }
        },
        {
          "id": "2243",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.offsetTop > yMin",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 162
            },
            "start": {
              "column": 64,
              "line": 162
            }
          }
        },
        {
          "id": "2244",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.offsetTop < yMin",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 162
            },
            "start": {
              "column": 64,
              "line": 162
            }
          }
        },
        {
          "id": "2245",
          "mutatorName": "BooleanLiteral",
          "replacement": "headingIsInViewport",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 163
            },
            "start": {
              "column": 14,
              "line": 163
            }
          }
        },
        {
          "id": "2246",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 165
            },
            "start": {
              "column": 5,
              "line": 165
            }
          }
        },
        {
          "id": "2247",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(168,9): error TS2322: Type '() => void' is not assignable to type '() => MaybeNull<HTMLElement>'.\n  Type 'void' is not assignable to type 'MaybeNull<HTMLElement>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 196
            },
            "start": {
              "column": 79,
              "line": 168
            }
          }
        },
        {
          "id": "2248",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(172,37): error TS18047: 'infered1' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(173,44): error TS18047: 'infered1' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(194,45): error TS18047: 'infered2' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 171
            },
            "start": {
              "column": 9,
              "line": 171
            }
          }
        },
        {
          "id": "2249",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(172,37): error TS18047: 'infered1' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(173,44): error TS18047: 'infered1' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 171
            },
            "start": {
              "column": 9,
              "line": 171
            }
          }
        },
        {
          "id": "2250",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 189
            },
            "start": {
              "column": 19,
              "line": 171
            }
          }
        },
        {
          "id": "2251",
          "mutatorName": "ArithmeticOperator",
          "replacement": "window.innerHeight * 2",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 175
            },
            "start": {
              "column": 33,
              "line": 175
            }
          }
        },
        {
          "id": "2252",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 176
            },
            "start": {
              "column": 11,
              "line": 176
            }
          }
        },
        {
          "id": "2253",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 176
            },
            "start": {
              "column": 11,
              "line": 176
            }
          }
        },
        {
          "id": "2254",
          "mutatorName": "EqualityOperator",
          "replacement": "midViewportHeight <= inferedElementYTopInViewport",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 176
            },
            "start": {
              "column": 11,
              "line": 176
            }
          }
        },
        {
          "id": "2255",
          "mutatorName": "EqualityOperator",
          "replacement": "midViewportHeight >= inferedElementYTopInViewport",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 176
            },
            "start": {
              "column": 11,
              "line": 176
            }
          }
        },
        {
          "id": "2256",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 187
            },
            "start": {
              "column": 61,
              "line": 176
            }
          }
        },
        {
          "id": "2257",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 179
            },
            "start": {
              "column": 13,
              "line": 179
            }
          }
        },
        {
          "id": "2258",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 179
            },
            "start": {
              "column": 13,
              "line": 179
            }
          }
        },
        {
          "id": "2259",
          "mutatorName": "EqualityOperator",
          "replacement": "idx !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 179
            },
            "start": {
              "column": 13,
              "line": 179
            }
          }
        },
        {
          "id": "2260",
          "mutatorName": "ArithmeticOperator",
          "replacement": "idx + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 181
            },
            "start": {
              "column": 40,
              "line": 181
            }
          }
        },
        {
          "id": "2261",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 182
            },
            "start": {
              "column": 40,
              "line": 182
            }
          }
        },
        {
          "id": "2262",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 183
            },
            "start": {
              "column": 45,
              "line": 183
            }
          }
        },
        {
          "id": "2263",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(184,28): error TS2345: Argument of type '\"\"' is not assignable to parameter of type 'SetStateAction<ScrollDirection>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 184
            },
            "start": {
              "column": 28,
              "line": 184
            }
          }
        },
        {
          "id": "2264",
          "mutatorName": "BooleanLiteral",
          "replacement": "infered2",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(194,45): error TS18047: 'infered2' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 192
            },
            "start": {
              "column": 9,
              "line": 192
            }
          }
        },
        {
          "id": "2265",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(194,45): error TS18047: 'infered2' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 192
            },
            "start": {
              "column": 9,
              "line": 192
            }
          }
        },
        {
          "id": "2266",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(194,45): error TS18047: 'infered2' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 192
            },
            "start": {
              "column": 9,
              "line": 192
            }
          }
        },
        {
          "id": "2267",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 203
            },
            "start": {
              "column": 6,
              "line": 196
            }
          }
        },
        {
          "id": "2268",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 113,
              "line": 205
            },
            "start": {
              "column": 34,
              "line": 205
            }
          }
        },
        {
          "id": "2269",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 113,
              "line": 205
            },
            "start": {
              "column": 40,
              "line": 205
            }
          }
        },
        {
          "id": "2270",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 113,
              "line": 205
            },
            "start": {
              "column": 40,
              "line": 205
            }
          }
        },
        {
          "id": "2271",
          "mutatorName": "EqualityOperator",
          "replacement": "getTotalVerticalScrollDistance() > document.documentElement.scrollHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 113,
              "line": 205
            },
            "start": {
              "column": 40,
              "line": 205
            }
          }
        },
        {
          "id": "2272",
          "mutatorName": "EqualityOperator",
          "replacement": "getTotalVerticalScrollDistance() < document.documentElement.scrollHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 113,
              "line": 205
            },
            "start": {
              "column": 40,
              "line": 205
            }
          }
        },
        {
          "id": "2273",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 117,
              "line": 205
            },
            "start": {
              "column": 115,
              "line": 205
            }
          }
        },
        {
          "id": "2274",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 301
            },
            "start": {
              "column": 71,
              "line": 207
            }
          }
        },
        {
          "id": "2275",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 103,
              "line": 208
            },
            "start": {
              "column": 98,
              "line": 208
            }
          }
        },
        {
          "id": "2276",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 257
            },
            "start": {
              "column": 108,
              "line": 208
            }
          }
        },
        {
          "id": "2277",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(255,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 209
            },
            "start": {
              "column": 11,
              "line": 209
            }
          }
        },
        {
          "id": "2278",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 209
            },
            "start": {
              "column": 11,
              "line": 209
            }
          }
        },
        {
          "id": "2279",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLargeScreen && muteScrollEndNextDoubleCheck.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 209
            },
            "start": {
              "column": 11,
              "line": 209
            }
          }
        },
        {
          "id": "2280",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 209
            },
            "start": {
              "column": 11,
              "line": 209
            }
          }
        },
        {
          "id": "2281",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(255,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 211
            },
            "start": {
              "column": 11,
              "line": 211
            }
          }
        },
        {
          "id": "2282",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 211
            },
            "start": {
              "column": 11,
              "line": 211
            }
          }
        },
        {
          "id": "2283",
          "mutatorName": "EqualityOperator",
          "replacement": "currentScrollY >= oldScrollY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 211
            },
            "start": {
              "column": 11,
              "line": 211
            }
          }
        },
        {
          "id": "2284",
          "mutatorName": "EqualityOperator",
          "replacement": "currentScrollY <= oldScrollY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 211
            },
            "start": {
              "column": 11,
              "line": 211
            }
          }
        },
        {
          "id": "2285",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 216
            },
            "start": {
              "column": 40,
              "line": 211
            }
          }
        },
        {
          "id": "2286",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(212,28): error TS2345: Argument of type '\"\"' is not assignable to parameter of type 'SetStateAction<ScrollDirection>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 212
            },
            "start": {
              "column": 28,
              "line": 212
            }
          }
        },
        {
          "id": "2287",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 214
            },
            "start": {
              "column": 13,
              "line": 214
            }
          }
        },
        {
          "id": "2288",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 214
            },
            "start": {
              "column": 13,
              "line": 214
            }
          }
        },
        {
          "id": "2289",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 214
            },
            "start": {
              "column": 92,
              "line": 214
            }
          }
        },
        {
          "id": "2290",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 219
            },
            "start": {
              "column": 18,
              "line": 219
            }
          }
        },
        {
          "id": "2291",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 221
            },
            "start": {
              "column": 11,
              "line": 221
            }
          }
        },
        {
          "id": "2292",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 221
            },
            "start": {
              "column": 11,
              "line": 221
            }
          }
        },
        {
          "id": "2293",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 221
            },
            "start": {
              "column": 28,
              "line": 221
            }
          }
        },
        {
          "id": "2294",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 222
            },
            "start": {
              "column": 16,
              "line": 222
            }
          }
        },
        {
          "id": "2295",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 222
            },
            "start": {
              "column": 16,
              "line": 222
            }
          }
        },
        {
          "id": "2296",
          "mutatorName": "LogicalOperator",
          "replacement": "scrollDirection !== 'up' && muteUpdatesUntilScrollEnd.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 222
            },
            "start": {
              "column": 16,
              "line": 222
            }
          }
        },
        {
          "id": "2297",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 222
            },
            "start": {
              "column": 16,
              "line": 222
            }
          }
        },
        {
          "id": "2298",
          "mutatorName": "EqualityOperator",
          "replacement": "scrollDirection === 'up'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 222
            },
            "start": {
              "column": 16,
              "line": 222
            }
          }
        },
        {
          "id": "2299",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(222,16): error TS2367: This comparison appears to be unintentional because the types 'ScrollDirection' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 222
            },
            "start": {
              "column": 36,
              "line": 222
            }
          }
        },
        {
          "id": "2300",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 222
            },
            "start": {
              "column": 86,
              "line": 222
            }
          }
        },
        {
          "id": "2301",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(255,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 224
            },
            "start": {
              "column": 11,
              "line": 224
            }
          }
        },
        {
          "id": "2302",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 224
            },
            "start": {
              "column": 11,
              "line": 224
            }
          }
        },
        {
          "id": "2303",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(255,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 226
            },
            "start": {
              "column": 11,
              "line": 226
            }
          }
        },
        {
          "id": "2304",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 226
            },
            "start": {
              "column": 11,
              "line": 226
            }
          }
        },
        {
          "id": "2305",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 232
            },
            "start": {
              "column": 22,
              "line": 226
            }
          }
        },
        {
          "id": "2306",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 229
            },
            "start": {
              "column": 40,
              "line": 229
            }
          }
        },
        {
          "id": "2307",
          "mutatorName": "LogicalOperator",
          "replacement": "getClosestHeadingFromTop()?.id && null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(234,13): error TS2322: Type '\"\" | null | undefined' is not assignable to type 'MaybeNull<string>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 234
            },
            "start": {
              "column": 47,
              "line": 234
            }
          }
        },
        {
          "id": "2308",
          "mutatorName": "OptionalChaining",
          "replacement": "getClosestHeadingFromTop().id",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(234,47): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 234
            },
            "start": {
              "column": 47,
              "line": 234
            }
          }
        },
        {
          "id": "2309",
          "mutatorName": "BooleanLiteral",
          "replacement": "infered",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(255,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 236
            },
            "start": {
              "column": 11,
              "line": 236
            }
          }
        },
        {
          "id": "2310",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(255,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 236
            },
            "start": {
              "column": 11,
              "line": 236
            }
          }
        },
        {
          "id": "2311",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(255,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 236
            },
            "start": {
              "column": 11,
              "line": 236
            }
          }
        },
        {
          "id": "2312",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,53): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(245,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 246
            },
            "start": {
              "column": 21,
              "line": 236
            }
          }
        },
        {
          "id": "2313",
          "mutatorName": "LogicalOperator",
          "replacement": "inferCurrentHeading()?.id && null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(237,15): error TS2322: Type '\"\" | null | undefined' is not assignable to type 'MaybeNull<string>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 237
            },
            "start": {
              "column": 60,
              "line": 237
            }
          }
        },
        {
          "id": "2314",
          "mutatorName": "OptionalChaining",
          "replacement": "inferCurrentHeading().id",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(237,60): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 237
            },
            "start": {
              "column": 60,
              "line": 237
            }
          }
        },
        {
          "id": "2315",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 238
            },
            "start": {
              "column": 13,
              "line": 238
            }
          }
        },
        {
          "id": "2316",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(239,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 238
            },
            "start": {
              "column": 13,
              "line": 238
            }
          }
        },
        {
          "id": "2317",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 241
            },
            "start": {
              "column": 33,
              "line": 238
            }
          }
        },
        {
          "id": "2318",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 248
            },
            "start": {
              "column": 11,
              "line": 248
            }
          }
        },
        {
          "id": "2319",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(249,53): error TS2538: Type 'null' cannot be used as an index type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 248
            },
            "start": {
              "column": 11,
              "line": 248
            }
          }
        },
        {
          "id": "2320",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 253
            },
            "start": {
              "column": 41,
              "line": 248
            }
          }
        },
        {
          "id": "2321",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 251
            },
            "start": {
              "column": 13,
              "line": 251
            }
          }
        },
        {
          "id": "2322",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 251
            },
            "start": {
              "column": 13,
              "line": 251
            }
          }
        },
        {
          "id": "2323",
          "mutatorName": "EqualityOperator",
          "replacement": "inferedHeadingIdx < forcedHeadingIdx",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 251
            },
            "start": {
              "column": 13,
              "line": 251
            }
          }
        },
        {
          "id": "2324",
          "mutatorName": "EqualityOperator",
          "replacement": "inferedHeadingIdx > forcedHeadingIdx",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 251
            },
            "start": {
              "column": 13,
              "line": 251
            }
          }
        },
        {
          "id": "2325",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 251
            },
            "start": {
              "column": 83,
              "line": 251
            }
          }
        },
        {
          "id": "2326",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 105,
              "line": 259
            },
            "start": {
              "column": 100,
              "line": 259
            }
          }
        },
        {
          "id": "2327",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 300
            },
            "start": {
              "column": 110,
              "line": 259
            }
          }
        },
        {
          "id": "2328",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(299,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 260
            },
            "start": {
              "column": 11,
              "line": 260
            }
          }
        },
        {
          "id": "2329",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 260
            },
            "start": {
              "column": 11,
              "line": 260
            }
          }
        },
        {
          "id": "2330",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLargeScreen && muteScrollEndNextDoubleCheck.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 260
            },
            "start": {
              "column": 11,
              "line": 260
            }
          }
        },
        {
          "id": "2331",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 260
            },
            "start": {
              "column": 11,
              "line": 260
            }
          }
        },
        {
          "id": "2332",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(299,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 262
            },
            "start": {
              "column": 11,
              "line": 262
            }
          }
        },
        {
          "id": "2333",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 262
            },
            "start": {
              "column": 11,
              "line": 262
            }
          }
        },
        {
          "id": "2334",
          "mutatorName": "EqualityOperator",
          "replacement": "currentScrollY <= oldScrollY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 262
            },
            "start": {
              "column": 11,
              "line": 262
            }
          }
        },
        {
          "id": "2335",
          "mutatorName": "EqualityOperator",
          "replacement": "currentScrollY >= oldScrollY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 262
            },
            "start": {
              "column": 11,
              "line": 262
            }
          }
        },
        {
          "id": "2336",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 267
            },
            "start": {
              "column": 40,
              "line": 262
            }
          }
        },
        {
          "id": "2337",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(263,28): error TS2345: Argument of type '\"\"' is not assignable to parameter of type 'SetStateAction<ScrollDirection>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 263
            },
            "start": {
              "column": 28,
              "line": 263
            }
          }
        },
        {
          "id": "2338",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 265
            },
            "start": {
              "column": 13,
              "line": 265
            }
          }
        },
        {
          "id": "2339",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 265
            },
            "start": {
              "column": 13,
              "line": 265
            }
          }
        },
        {
          "id": "2340",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 92,
              "line": 265
            },
            "start": {
              "column": 88,
              "line": 265
            }
          }
        },
        {
          "id": "2341",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 270
            },
            "start": {
              "column": 18,
              "line": 270
            }
          }
        },
        {
          "id": "2342",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 272
            },
            "start": {
              "column": 11,
              "line": 272
            }
          }
        },
        {
          "id": "2343",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 272
            },
            "start": {
              "column": 11,
              "line": 272
            }
          }
        },
        {
          "id": "2344",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 272
            },
            "start": {
              "column": 28,
              "line": 272
            }
          }
        },
        {
          "id": "2345",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 273
            },
            "start": {
              "column": 16,
              "line": 273
            }
          }
        },
        {
          "id": "2346",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 273
            },
            "start": {
              "column": 16,
              "line": 273
            }
          }
        },
        {
          "id": "2347",
          "mutatorName": "LogicalOperator",
          "replacement": "scrollDirection !== 'down' && muteUpdatesUntilScrollEnd.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 273
            },
            "start": {
              "column": 16,
              "line": 273
            }
          }
        },
        {
          "id": "2348",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 273
            },
            "start": {
              "column": 16,
              "line": 273
            }
          }
        },
        {
          "id": "2349",
          "mutatorName": "EqualityOperator",
          "replacement": "scrollDirection === 'down'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 273
            },
            "start": {
              "column": 16,
              "line": 273
            }
          }
        },
        {
          "id": "2350",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(273,16): error TS2367: This comparison appears to be unintentional because the types 'ScrollDirection' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 273
            },
            "start": {
              "column": 36,
              "line": 273
            }
          }
        },
        {
          "id": "2351",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 92,
              "line": 273
            },
            "start": {
              "column": 88,
              "line": 273
            }
          }
        },
        {
          "id": "2352",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(299,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 275
            },
            "start": {
              "column": 11,
              "line": 275
            }
          }
        },
        {
          "id": "2353",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 275
            },
            "start": {
              "column": 11,
              "line": 275
            }
          }
        },
        {
          "id": "2354",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(299,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 277
            },
            "start": {
              "column": 11,
              "line": 277
            }
          }
        },
        {
          "id": "2355",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 277
            },
            "start": {
              "column": 11,
              "line": 277
            }
          }
        },
        {
          "id": "2356",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 283
            },
            "start": {
              "column": 25,
              "line": 277
            }
          }
        },
        {
          "id": "2357",
          "mutatorName": "ArithmeticOperator",
          "replacement": "headings.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 279
            },
            "start": {
              "column": 46,
              "line": 279
            }
          }
        },
        {
          "id": "2358",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 280
            },
            "start": {
              "column": 40,
              "line": 280
            }
          }
        },
        {
          "id": "2359",
          "mutatorName": "LogicalOperator",
          "replacement": "getClosestHeadingFromTop()?.id && null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(285,11): error TS2322: Type '\"\" | null | undefined' is not assignable to type 'MaybeNull<string>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 99,
              "line": 285
            },
            "start": {
              "column": 61,
              "line": 285
            }
          }
        },
        {
          "id": "2360",
          "mutatorName": "OptionalChaining",
          "replacement": "getClosestHeadingFromTop().id",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(285,61): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 285
            },
            "start": {
              "column": 61,
              "line": 285
            }
          }
        },
        {
          "id": "2361",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 286
            },
            "start": {
              "column": 11,
              "line": 286
            }
          }
        },
        {
          "id": "2362",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(299,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 286
            },
            "start": {
              "column": 11,
              "line": 286
            }
          }
        },
        {
          "id": "2363",
          "mutatorName": "EqualityOperator",
          "replacement": "firstVisibleHeadingSlug !== null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(299,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 286
            },
            "start": {
              "column": 11,
              "line": 286
            }
          }
        },
        {
          "id": "2364",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(289,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(295,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 290
            },
            "start": {
              "column": 45,
              "line": 286
            }
          }
        },
        {
          "id": "2365",
          "mutatorName": "LogicalOperator",
          "replacement": "inferCurrentHeading()?.id && null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(287,15): error TS2322: Type '\"\" | null | undefined' is not assignable to type 'MaybeNull<string>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 287
            },
            "start": {
              "column": 55,
              "line": 287
            }
          }
        },
        {
          "id": "2366",
          "mutatorName": "OptionalChaining",
          "replacement": "inferCurrentHeading().id",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(287,55): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 287
            },
            "start": {
              "column": 55,
              "line": 287
            }
          }
        },
        {
          "id": "2367",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(299,47): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 288
            },
            "start": {
              "column": 13,
              "line": 288
            }
          }
        },
        {
          "id": "2368",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 288
            },
            "start": {
              "column": 13,
              "line": 288
            }
          }
        },
        {
          "id": "2369",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 292
            },
            "start": {
              "column": 11,
              "line": 292
            }
          }
        },
        {
          "id": "2370",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(293,42): error TS2538: Type 'null' cannot be used as an index type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 292
            },
            "start": {
              "column": 11,
              "line": 292
            }
          }
        },
        {
          "id": "2371",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 297
            },
            "start": {
              "column": 41,
              "line": 292
            }
          }
        },
        {
          "id": "2372",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 295
            },
            "start": {
              "column": 13,
              "line": 295
            }
          }
        },
        {
          "id": "2373",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 295
            },
            "start": {
              "column": 13,
              "line": 295
            }
          }
        },
        {
          "id": "2374",
          "mutatorName": "EqualityOperator",
          "replacement": "newIdx > oldIdx",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 295
            },
            "start": {
              "column": 13,
              "line": 295
            }
          }
        },
        {
          "id": "2375",
          "mutatorName": "EqualityOperator",
          "replacement": "newIdx < oldIdx",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 295
            },
            "start": {
              "column": 13,
              "line": 295
            }
          }
        },
        {
          "id": "2376",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 295
            },
            "start": {
              "column": 62,
              "line": 295
            }
          }
        },
        {
          "id": "2377",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 311
            },
            "start": {
              "column": 6,
              "line": 301
            }
          }
        },
        {
          "id": "2378",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 317
            },
            "start": {
              "column": 49,
              "line": 313
            }
          }
        },
        {
          "id": "2379",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(316,54): error TS18047: 'mdxBodyFromDOM' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 314
            },
            "start": {
              "column": 9,
              "line": 314
            }
          }
        },
        {
          "id": "2380",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(316,54): error TS18047: 'mdxBodyFromDOM' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 314
            },
            "start": {
              "column": 9,
              "line": 314
            }
          }
        },
        {
          "id": "2381",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLargeScreen && !mdxBodyFromDOM?.offsetTop",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(316,54): error TS18047: 'mdxBodyFromDOM' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 314
            },
            "start": {
              "column": 9,
              "line": 314
            }
          }
        },
        {
          "id": "2382",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 314
            },
            "start": {
              "column": 9,
              "line": 314
            }
          }
        },
        {
          "id": "2383",
          "mutatorName": "BooleanLiteral",
          "replacement": "mdxBodyFromDOM?.offsetTop",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(316,54): error TS18047: 'mdxBodyFromDOM' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 314
            },
            "start": {
              "column": 27,
              "line": 314
            }
          }
        },
        {
          "id": "2384",
          "mutatorName": "OptionalChaining",
          "replacement": "mdxBodyFromDOM.offsetTop",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(314,28): error TS18047: 'mdxBodyFromDOM' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(316,54): error TS18047: 'mdxBodyFromDOM' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 314
            },
            "start": {
              "column": 28,
              "line": 314
            }
          }
        },
        {
          "id": "2385",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 316
            },
            "start": {
              "column": 21,
              "line": 316
            }
          }
        },
        {
          "id": "2386",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 316
            },
            "start": {
              "column": 21,
              "line": 316
            }
          }
        },
        {
          "id": "2387",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY + navbarHeight > mdxBodyFromDOM.offsetTop",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 316
            },
            "start": {
              "column": 21,
              "line": 316
            }
          }
        },
        {
          "id": "2388",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY + navbarHeight < mdxBodyFromDOM.offsetTop",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 316
            },
            "start": {
              "column": 21,
              "line": 316
            }
          }
        },
        {
          "id": "2389",
          "mutatorName": "ArithmeticOperator",
          "replacement": "window.scrollY - navbarHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 316
            },
            "start": {
              "column": 21,
              "line": 316
            }
          }
        },
        {
          "id": "2390",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 317
            },
            "start": {
              "column": 6,
              "line": 317
            }
          }
        },
        {
          "id": "2391",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 353
            },
            "start": {
              "column": 73,
              "line": 320
            }
          }
        },
        {
          "id": "2392",
          "mutatorName": "BooleanLiteral",
          "replacement": "elem",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(343,9): error TS18047: 'elem' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 325
            },
            "start": {
              "column": 11,
              "line": 325
            }
          }
        },
        {
          "id": "2393",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(343,9): error TS18047: 'elem' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 325
            },
            "start": {
              "column": 11,
              "line": 325
            }
          }
        },
        {
          "id": "2394",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(343,9): error TS18047: 'elem' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 325
            },
            "start": {
              "column": 11,
              "line": 325
            }
          }
        },
        {
          "id": "2395",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 330
            },
            "start": {
              "column": 29,
              "line": 330
            }
          }
        },
        {
          "id": "2396",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 330
            },
            "start": {
              "column": 29,
              "line": 330
            }
          }
        },
        {
          "id": "2397",
          "mutatorName": "EqualityOperator",
          "replacement": "slug !== headings[headings.length - 1].slug",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 330
            },
            "start": {
              "column": 29,
              "line": 330
            }
          }
        },
        {
          "id": "2398",
          "mutatorName": "ArithmeticOperator",
          "replacement": "headings.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 330
            },
            "start": {
              "column": 47,
              "line": 330
            }
          }
        },
        {
          "id": "2399",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(343,9): error TS18047: 'elem' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 332
            },
            "start": {
              "column": 11,
              "line": 332
            }
          }
        },
        {
          "id": "2400",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 332
            },
            "start": {
              "column": 11,
              "line": 332
            }
          }
        },
        {
          "id": "2401",
          "mutatorName": "LogicalOperator",
          "replacement": "isLastHeading || isAtBottom()",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 332
            },
            "start": {
              "column": 11,
              "line": 332
            }
          }
        },
        {
          "id": "2402",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 336
            },
            "start": {
              "column": 42,
              "line": 332
            }
          }
        },
        {
          "id": "2403",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 334
            },
            "start": {
              "column": 24,
              "line": 334
            }
          }
        },
        {
          "id": "2404",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 334
            },
            "start": {
              "column": 36,
              "line": 334
            }
          }
        },
        {
          "id": "2405",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 334
            },
            "start": {
              "column": 46,
              "line": 334
            }
          }
        },
        {
          "id": "2406",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 338
            },
            "start": {
              "column": 43,
              "line": 338
            }
          }
        },
        {
          "id": "2407",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 339
            },
            "start": {
              "column": 46,
              "line": 339
            }
          }
        },
        {
          "id": "2408",
          "mutatorName": "MethodExpression",
          "replacement": "Math.max(\n// eslint-disable-next-line no-magic-numbers\nMath.trunc(document.documentElement.scrollHeight) - Math.trunc(window.innerHeight) - 2, elem.offsetTop - SCROLL_TOP_OFFSET_ONCLICK_MAGIC)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 344
            },
            "start": {
              "column": 29,
              "line": 340
            }
          }
        },
        {
          "id": "2409",
          "mutatorName": "ArithmeticOperator",
          "replacement": "// eslint-disable-next-line no-magic-numbers\nMath.trunc(document.documentElement.scrollHeight) - Math.trunc(window.innerHeight) + 2",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 342
            },
            "start": {
              "column": 9,
              "line": 342
            }
          }
        },
        {
          "id": "2410",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Math.trunc(document.documentElement.scrollHeight) + Math.trunc(window.innerHeight)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 342
            },
            "start": {
              "column": 9,
              "line": 342
            }
          }
        },
        {
          "id": "2411",
          "mutatorName": "ArithmeticOperator",
          "replacement": "elem.offsetTop + SCROLL_TOP_OFFSET_ONCLICK_MAGIC",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 343
            },
            "start": {
              "column": 9,
              "line": 343
            }
          }
        },
        {
          "id": "2412",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 348
            },
            "start": {
              "column": 11,
              "line": 348
            }
          }
        },
        {
          "id": "2413",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 348
            },
            "start": {
              "column": 11,
              "line": 348
            }
          }
        },
        {
          "id": "2414",
          "mutatorName": "EqualityOperator",
          "replacement": "Math.trunc(scrollYTarget) !== Math.trunc(window.scrollY)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 348
            },
            "start": {
              "column": 11,
              "line": 348
            }
          }
        },
        {
          "id": "2415",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 348
            },
            "start": {
              "column": 100,
              "line": 348
            }
          }
        },
        {
          "id": "2416",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 349
            },
            "start": {
              "column": 28,
              "line": 349
            }
          }
        },
        {
          "id": "2417",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(349,30): error TS2322: Type '\"\"' is not assignable to type 'ScrollBehavior | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 349
            },
            "start": {
              "column": 40,
              "line": 349
            }
          }
        },
        {
          "id": "2418",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 352
            },
            "start": {
              "column": 22,
              "line": 352
            }
          }
        },
        {
          "id": "2419",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 352
            },
            "start": {
              "column": 34,
              "line": 352
            }
          }
        },
        {
          "id": "2420",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 352
            },
            "start": {
              "column": 44,
              "line": 352
            }
          }
        },
        {
          "id": "2421",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 354
            },
            "start": {
              "column": 5,
              "line": 354
            }
          }
        },
        {
          "id": "2422",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 366
            },
            "start": {
              "column": 23,
              "line": 358
            }
          }
        },
        {
          "id": "2423",
          "mutatorName": "BooleanLiteral",
          "replacement": "event.target",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(361,30): error TS2352: Conversion of type 'null' to type 'HTMLElement' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 359
            },
            "start": {
              "column": 11,
              "line": 359
            }
          }
        },
        {
          "id": "2424",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(364,57): error TS18047: 'anchorElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 359
            },
            "start": {
              "column": 11,
              "line": 359
            }
          }
        },
        {
          "id": "2425",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 359
            },
            "start": {
              "column": 11,
              "line": 359
            }
          }
        },
        {
          "id": "2426",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 361
            },
            "start": {
              "column": 67,
              "line": 361
            }
          }
        },
        {
          "id": "2427",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(364,57): error TS18047: 'anchorElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 363
            },
            "start": {
              "column": 11,
              "line": 363
            }
          }
        },
        {
          "id": "2428",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(364,57): error TS18047: 'anchorElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 363
            },
            "start": {
              "column": 11,
              "line": 363
            }
          }
        },
        {
          "id": "2429",
          "mutatorName": "OptionalChaining",
          "replacement": "anchorElement.parentNode",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(363,11): error TS18047: 'anchorElement' is possibly 'null'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(364,57): error TS18047: 'anchorElement' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 363
            },
            "start": {
              "column": 11,
              "line": 363
            }
          }
        },
        {
          "id": "2430",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 365
            },
            "start": {
              "column": 38,
              "line": 363
            }
          }
        },
        {
          "id": "2431",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 367
            },
            "start": {
              "column": 5,
              "line": 367
            }
          }
        },
        {
          "id": "2432",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 371
            },
            "start": {
              "column": 23,
              "line": 371
            }
          }
        },
        {
          "id": "2433",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 380
            },
            "start": {
              "column": 32,
              "line": 371
            }
          }
        },
        {
          "id": "2434",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 379
            },
            "start": {
              "column": 46,
              "line": 372
            }
          }
        },
        {
          "id": "2435",
          "mutatorName": "BooleanLiteral",
          "replacement": "firstChild",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(377,20): error TS2339: Property 'removeEventListener' does not exist on type 'never'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(378,31): error TS2339: Property 'addEventListener' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 375
            },
            "start": {
              "column": 13,
              "line": 375
            }
          }
        },
        {
          "id": "2436",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 375
            },
            "start": {
              "column": 13,
              "line": 375
            }
          }
        },
        {
          "id": "2437",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 375
            },
            "start": {
              "column": 13,
              "line": 375
            }
          }
        },
        {
          "id": "2438",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 377
            },
            "start": {
              "column": 40,
              "line": 377
            }
          }
        },
        {
          "id": "2439",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 378
            },
            "start": {
              "column": 13,
              "line": 378
            }
          }
        },
        {
          "id": "2440",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 378
            },
            "start": {
              "column": 13,
              "line": 378
            }
          }
        },
        {
          "id": "2441",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 378
            },
            "start": {
              "column": 48,
              "line": 378
            }
          }
        },
        {
          "id": "2442",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 381
            },
            "start": {
              "column": 5,
              "line": 381
            }
          }
        },
        {
          "id": "2443",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 413
            },
            "start": {
              "column": 19,
              "line": 384
            }
          }
        },
        {
          "id": "2444",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 408
            },
            "start": {
              "column": 32,
              "line": 385
            }
          }
        },
        {
          "id": "2445",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 390
            },
            "start": {
              "column": 11,
              "line": 390
            }
          }
        },
        {
          "id": "2446",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 390
            },
            "start": {
              "column": 11,
              "line": 390
            }
          }
        },
        {
          "id": "2447",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 390
            },
            "start": {
              "column": 11,
              "line": 390
            }
          }
        },
        {
          "id": "2448",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 392
            },
            "start": {
              "column": 43,
              "line": 392
            }
          }
        },
        {
          "id": "2449",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 393
            },
            "start": {
              "column": 11,
              "line": 393
            }
          }
        },
        {
          "id": "2450",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 393
            },
            "start": {
              "column": 11,
              "line": 393
            }
          }
        },
        {
          "id": "2451",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 396
            },
            "start": {
              "column": 49,
              "line": 393
            }
          }
        },
        {
          "id": "2452",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 394
            },
            "start": {
              "column": 48,
              "line": 394
            }
          }
        },
        {
          "id": "2453",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 398
            },
            "start": {
              "column": 11,
              "line": 398
            }
          }
        },
        {
          "id": "2454",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 398
            },
            "start": {
              "column": 11,
              "line": 398
            }
          }
        },
        {
          "id": "2455",
          "mutatorName": "EqualityOperator",
          "replacement": "scrollDirection !== 'up'",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(404,11): error TS2367: This comparison appears to be unintentional because the types '\"up\"' and '\"down\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 398
            },
            "start": {
              "column": 11,
              "line": 398
            }
          }
        },
        {
          "id": "2456",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(398,11): error TS2367: This comparison appears to be unintentional because the types 'ScrollDirection' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 398
            },
            "start": {
              "column": 31,
              "line": 398
            }
          }
        },
        {
          "id": "2457",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 402
            },
            "start": {
              "column": 37,
              "line": 398
            }
          }
        },
        {
          "id": "2458",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 400
            },
            "start": {
              "column": 13,
              "line": 400
            }
          }
        },
        {
          "id": "2459",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 400
            },
            "start": {
              "column": 13,
              "line": 400
            }
          }
        },
        {
          "id": "2460",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 92,
              "line": 400
            },
            "start": {
              "column": 88,
              "line": 400
            }
          }
        },
        {
          "id": "2461",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 404
            },
            "start": {
              "column": 11,
              "line": 404
            }
          }
        },
        {
          "id": "2462",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 404
            },
            "start": {
              "column": 11,
              "line": 404
            }
          }
        },
        {
          "id": "2463",
          "mutatorName": "EqualityOperator",
          "replacement": "scrollDirection === 'down'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 404
            },
            "start": {
              "column": 11,
              "line": 404
            }
          }
        },
        {
          "id": "2464",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(404,11): error TS2367: This comparison appears to be unintentional because the types '\"down\"' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 404
            },
            "start": {
              "column": 31,
              "line": 404
            }
          }
        },
        {
          "id": "2465",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 407
            },
            "start": {
              "column": 11,
              "line": 407
            }
          }
        },
        {
          "id": "2466",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 407
            },
            "start": {
              "column": 11,
              "line": 407
            }
          }
        },
        {
          "id": "2467",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 407
            },
            "start": {
              "column": 90,
              "line": 407
            }
          }
        },
        {
          "id": "2468",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 410
            },
            "start": {
              "column": 29,
              "line": 410
            }
          }
        },
        {
          "id": "2469",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 412
            },
            "start": {
              "column": 12,
              "line": 412
            }
          }
        },
        {
          "id": "2470",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 412
            },
            "start": {
              "column": 45,
              "line": 412
            }
          }
        },
        {
          "id": "2471",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 413
            },
            "start": {
              "column": 6,
              "line": 413
            }
          }
        },
        {
          "id": "2472",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 417
            },
            "start": {
              "column": 19,
              "line": 415
            }
          }
        },
        {
          "id": "2473",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMagnetized",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 416
            },
            "start": {
              "column": 9,
              "line": 416
            }
          }
        },
        {
          "id": "2474",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 416
            },
            "start": {
              "column": 9,
              "line": 416
            }
          }
        },
        {
          "id": "2475",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 416
            },
            "start": {
              "column": 9,
              "line": 416
            }
          }
        },
        {
          "id": "2476",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 416
            },
            "start": {
              "column": 39,
              "line": 416
            }
          }
        },
        {
          "id": "2477",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 417
            },
            "start": {
              "column": 6,
              "line": 417
            }
          }
        },
        {
          "id": "2478",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 433
            },
            "start": {
              "column": 19,
              "line": 419
            }
          }
        },
        {
          "id": "2479",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 420
            },
            "start": {
              "column": 9,
              "line": 420
            }
          }
        },
        {
          "id": "2480",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 420
            },
            "start": {
              "column": 9,
              "line": 420
            }
          }
        },
        {
          "id": "2481",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 420
            },
            "start": {
              "column": 9,
              "line": 420
            }
          }
        },
        {
          "id": "2482",
          "mutatorName": "BooleanLiteral",
          "replacement": "headingsInstance",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(428,22): error TS2339: Property 'scrollTo' does not exist on type 'never'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(429,30): error TS2339: Property 'children' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 423
            },
            "start": {
              "column": 9,
              "line": 423
            }
          }
        },
        {
          "id": "2483",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 423
            },
            "start": {
              "column": 9,
              "line": 423
            }
          }
        },
        {
          "id": "2484",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 423
            },
            "start": {
              "column": 9,
              "line": 423
            }
          }
        },
        {
          "id": "2485",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 426
            },
            "start": {
              "column": 9,
              "line": 426
            }
          }
        },
        {
          "id": "2486",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 426
            },
            "start": {
              "column": 9,
              "line": 426
            }
          }
        },
        {
          "id": "2487",
          "mutatorName": "EqualityOperator",
          "replacement": "idx !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 426
            },
            "start": {
              "column": 9,
              "line": 426
            }
          }
        },
        {
          "id": "2488",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 431
            },
            "start": {
              "column": 31,
              "line": 428
            }
          }
        },
        {
          "id": "2489",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(headingsInstance.children[idx] as HTMLElement).offsetTop + TOC_SCROLL_TOP_OFFSET_IN_PX",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 99,
              "line": 429
            },
            "start": {
              "column": 12,
              "line": 429
            }
          }
        },
        {
          "id": "2490",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(430,7): error TS2322: Type '\"\"' is not assignable to type 'ScrollBehavior | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 430
            },
            "start": {
              "column": 17,
              "line": 430
            }
          }
        },
        {
          "id": "2491",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 433
            },
            "start": {
              "column": 6,
              "line": 433
            }
          }
        },
        {
          "id": "2492",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 484
            },
            "start": {
              "column": 11,
              "line": 436
            }
          }
        },
        {
          "id": "2493",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 437
            },
            "start": {
              "column": 11,
              "line": 437
            }
          }
        },
        {
          "id": "2494",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 437
            },
            "start": {
              "column": 11,
              "line": 437
            }
          }
        },
        {
          "id": "2495",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 437
            },
            "start": {
              "column": 11,
              "line": 437
            }
          }
        },
        {
          "id": "2496",
          "mutatorName": "BooleanLiteral",
          "replacement": "tocInstance",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(477,21): error TS2339: Property 'addEventListener' does not exist on type 'never'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(477,56): error TS7006: Parameter 'event' implicitly has an 'any' type.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(483,32): error TS2339: Property 'removeEventListener' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 440
            },
            "start": {
              "column": 11,
              "line": 440
            }
          }
        },
        {
          "id": "2497",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 440
            },
            "start": {
              "column": 11,
              "line": 440
            }
          }
        },
        {
          "id": "2498",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 440
            },
            "start": {
              "column": 11,
              "line": 440
            }
          }
        },
        {
          "id": "2499",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 461
            },
            "start": {
              "column": 65,
              "line": 442
            }
          }
        },
        {
          "id": "2500",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 444
            },
            "start": {
              "column": 13,
              "line": 444
            }
          }
        },
        {
          "id": "2501",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 444
            },
            "start": {
              "column": 13,
              "line": 444
            }
          }
        },
        {
          "id": "2502",
          "mutatorName": "EqualityOperator",
          "replacement": "target.tagName === 'NAV'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 444
            },
            "start": {
              "column": 13,
              "line": 444
            }
          }
        },
        {
          "id": "2503",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 444
            },
            "start": {
              "column": 32,
              "line": 444
            }
          }
        },
        {
          "id": "2504",
          "mutatorName": "BooleanLiteral",
          "replacement": "headingsInstance",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(452,46): error TS2339: Property 'children' does not exist on type 'never'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(455,26): error TS2339: Property 'scrollTo' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 447
            },
            "start": {
              "column": 13,
              "line": 447
            }
          }
        },
        {
          "id": "2505",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 447
            },
            "start": {
              "column": 13,
              "line": 447
            }
          }
        },
        {
          "id": "2506",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 447
            },
            "start": {
              "column": 13,
              "line": 447
            }
          }
        },
        {
          "id": "2507",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 450
            },
            "start": {
              "column": 13,
              "line": 450
            }
          }
        },
        {
          "id": "2508",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 450
            },
            "start": {
              "column": 13,
              "line": 450
            }
          }
        },
        {
          "id": "2509",
          "mutatorName": "EqualityOperator",
          "replacement": "idx !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 450
            },
            "start": {
              "column": 13,
              "line": 450
            }
          }
        },
        {
          "id": "2510",
          "mutatorName": "BooleanLiteral",
          "replacement": "HTMLElement",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 453
            },
            "start": {
              "column": 13,
              "line": 453
            }
          }
        },
        {
          "id": "2511",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 453
            },
            "start": {
              "column": 13,
              "line": 453
            }
          }
        },
        {
          "id": "2512",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 453
            },
            "start": {
              "column": 13,
              "line": 453
            }
          }
        },
        {
          "id": "2513",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 458
            },
            "start": {
              "column": 35,
              "line": 455
            }
          }
        },
        {
          "id": "2514",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(HTMLElement as HTMLElement).offsetTop + TOC_SCROLL_TOP_OFFSET_IN_PX",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 84,
              "line": 456
            },
            "start": {
              "column": 16,
              "line": 456
            }
          }
        },
        {
          "id": "2515",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(457,11): error TS2322: Type '\"\"' is not assignable to type 'ScrollBehavior | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 457
            },
            "start": {
              "column": 21,
              "line": 457
            }
          }
        },
        {
          "id": "2516",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(460,81): error TS2345: Argument of type 'Event' is not assignable to parameter of type 'TransitionEvent'.\n  Type 'Event' is missing the following properties from type 'TransitionEvent': elapsedTime, propertyName, pseudoElement\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 460
            },
            "start": {
              "column": 41,
              "line": 460
            }
          }
        },
        {
          "id": "2517",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 100,
              "line": 460
            },
            "start": {
              "column": 58,
              "line": 460
            }
          }
        },
        {
          "id": "2518",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 465
            },
            "start": {
              "column": 41,
              "line": 463
            }
          }
        },
        {
          "id": "2519",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 464
            },
            "start": {
              "column": 39,
              "line": 464
            }
          }
        },
        {
          "id": "2520",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 470
            },
            "start": {
              "column": 39,
              "line": 467
            }
          }
        },
        {
          "id": "2521",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 469
            },
            "start": {
              "column": 39,
              "line": 469
            }
          }
        },
        {
          "id": "2522",
          "mutatorName": "ArithmeticOperator",
          "replacement": "height - COLLAPSE_BUTTON_HEIGTH_IN_PX",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 469
            },
            "start": {
              "column": 46,
              "line": 469
            }
          }
        },
        {
          "id": "2523",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 469
            },
            "start": {
              "column": 87,
              "line": 469
            }
          }
        },
        {
          "id": "2524",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 472
            },
            "start": {
              "column": 11,
              "line": 472
            }
          }
        },
        {
          "id": "2525",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 472
            },
            "start": {
              "column": 11,
              "line": 472
            }
          }
        },
        {
          "id": "2526",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 472
            },
            "start": {
              "column": 11,
              "line": 472
            }
          }
        },
        {
          "id": "2527",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 479
            },
            "start": {
              "column": 25,
              "line": 472
            }
          }
        },
        {
          "id": "2528",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 475
            },
            "start": {
              "column": 13,
              "line": 475
            }
          }
        },
        {
          "id": "2529",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 475
            },
            "start": {
              "column": 13,
              "line": 475
            }
          }
        },
        {
          "id": "2530",
          "mutatorName": "EqualityOperator",
          "replacement": "idx !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 475
            },
            "start": {
              "column": 13,
              "line": 475
            }
          }
        },
        {
          "id": "2531",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(477,78): error TS2345: Argument of type 'Event' is not assignable to parameter of type 'TransitionEvent'.\n  Type 'Event' is missing the following properties from type 'TransitionEvent': elapsedTime, propertyName, pseudoElement\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 477
            },
            "start": {
              "column": 38,
              "line": 477
            }
          }
        },
        {
          "id": "2532",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 477
            },
            "start": {
              "column": 55,
              "line": 477
            }
          }
        },
        {
          "id": "2533",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 483
            },
            "start": {
              "column": 14,
              "line": 483
            }
          }
        },
        {
          "id": "2534",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(483,32): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(type: keyof HTMLElementEventMap, listener: (this: HTMLDivElement, ev: Event | TransitionEvent | ProgressEvent<EventTarget> | ... 15 more ... | WheelEvent) => any, options?: boolean | ... 1 more ... | undefined): void', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type 'keyof HTMLElementEventMap'.\n  Overload 2 of 2, '(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void', gave the following error.\n    Argument of type '(event: TransitionEvent) => void' is not assignable to parameter of type 'EventListenerOrEventListenerObject'.\n      Type '(event: TransitionEvent) => void' is not assignable to type 'EventListener'.\n        Types of parameters 'event' and 'evt' are incompatible.\n          Type 'Event' is missing the following properties from type 'TransitionEvent': elapsedTime, propertyName, pseudoElement\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 483
            },
            "start": {
              "column": 52,
              "line": 483
            }
          }
        },
        {
          "id": "2535",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 486
            },
            "start": {
              "column": 5,
              "line": 486
            }
          }
        },
        {
          "id": "2536",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 506
            },
            "start": {
              "column": 19,
              "line": 489
            }
          }
        },
        {
          "id": "2537",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 490
            },
            "start": {
              "column": 9,
              "line": 490
            }
          }
        },
        {
          "id": "2538",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 490
            },
            "start": {
              "column": 9,
              "line": 490
            }
          }
        },
        {
          "id": "2539",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 490
            },
            "start": {
              "column": 9,
              "line": 490
            }
          }
        },
        {
          "id": "2540",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 497
            },
            "start": {
              "column": 32,
              "line": 492
            }
          }
        },
        {
          "id": "2541",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(495,49): error TS18047: 'maybeInferedHeading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 494
            },
            "start": {
              "column": 11,
              "line": 494
            }
          }
        },
        {
          "id": "2542",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(495,49): error TS18047: 'maybeInferedHeading' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 494
            },
            "start": {
              "column": 11,
              "line": 494
            }
          }
        },
        {
          "id": "2543",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 496
            },
            "start": {
              "column": 32,
              "line": 494
            }
          }
        },
        {
          "id": "2544",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 501
            },
            "start": {
              "column": 29,
              "line": 501
            }
          }
        },
        {
          "id": "2545",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 505
            },
            "start": {
              "column": 18,
              "line": 503
            }
          }
        },
        {
          "id": "2546",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 504
            },
            "start": {
              "column": 34,
              "line": 504
            }
          }
        },
        {
          "id": "2547",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 506
            },
            "start": {
              "column": 6,
              "line": 506
            }
          }
        },
        {
          "id": "2548",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 524
            },
            "start": {
              "column": 19,
              "line": 508
            }
          }
        },
        {
          "id": "2549",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 509
            },
            "start": {
              "column": 9,
              "line": 509
            }
          }
        },
        {
          "id": "2550",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 509
            },
            "start": {
              "column": 9,
              "line": 509
            }
          }
        },
        {
          "id": "2551",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 509
            },
            "start": {
              "column": 9,
              "line": 509
            }
          }
        },
        {
          "id": "2552",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 517
            },
            "start": {
              "column": 36,
              "line": 511
            }
          }
        },
        {
          "id": "2553",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(514,9): error TS2322: Type 'MaybeNull<string>' is not assignable to type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(515,49): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 513
            },
            "start": {
              "column": 11,
              "line": 513
            }
          }
        },
        {
          "id": "2554",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(514,9): error TS2322: Type 'MaybeNull<string>' is not assignable to type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(515,49): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 513
            },
            "start": {
              "column": 11,
              "line": 513
            }
          }
        },
        {
          "id": "2555",
          "mutatorName": "EqualityOperator",
          "replacement": "heading === null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(514,9): error TS2322: Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(515,49): error TS2345: Argument of type 'null' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 513
            },
            "start": {
              "column": 11,
              "line": 513
            }
          }
        },
        {
          "id": "2556",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 516
            },
            "start": {
              "column": 29,
              "line": 513
            }
          }
        },
        {
          "id": "2557",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 519
            },
            "start": {
              "column": 29,
              "line": 519
            }
          }
        },
        {
          "id": "2558",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 523
            },
            "start": {
              "column": 18,
              "line": 521
            }
          }
        },
        {
          "id": "2559",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 522
            },
            "start": {
              "column": 34,
              "line": 522
            }
          }
        },
        {
          "id": "2560",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 524
            },
            "start": {
              "column": 6,
              "line": 524
            }
          }
        },
        {
          "id": "2561",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 558
            },
            "start": {
              "column": 19,
              "line": 526
            }
          }
        },
        {
          "id": "2562",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 527
            },
            "start": {
              "column": 9,
              "line": 527
            }
          }
        },
        {
          "id": "2563",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 527
            },
            "start": {
              "column": 9,
              "line": 527
            }
          }
        },
        {
          "id": "2564",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 527
            },
            "start": {
              "column": 9,
              "line": 527
            }
          }
        },
        {
          "id": "2565",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 532
            },
            "start": {
              "column": 75,
              "line": 529
            }
          }
        },
        {
          "id": "2566",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 531
            },
            "start": {
              "column": 11,
              "line": 531
            }
          }
        },
        {
          "id": "2567",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 531
            },
            "start": {
              "column": 11,
              "line": 531
            }
          }
        },
        {
          "id": "2568",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 537
            },
            "start": {
              "column": 77,
              "line": 534
            }
          }
        },
        {
          "id": "2569",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 536
            },
            "start": {
              "column": 11,
              "line": 536
            }
          }
        },
        {
          "id": "2570",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 536
            },
            "start": {
              "column": 11,
              "line": 536
            }
          }
        },
        {
          "id": "2571",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 546
            },
            "start": {
              "column": 29,
              "line": 539
            }
          }
        },
        {
          "id": "2572",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 551
            },
            "start": {
              "column": 29,
              "line": 551
            }
          }
        },
        {
          "id": "2573",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 552
            },
            "start": {
              "column": 29,
              "line": 552
            }
          }
        },
        {
          "id": "2574",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 557
            },
            "start": {
              "column": 18,
              "line": 554
            }
          }
        },
        {
          "id": "2575",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 555
            },
            "start": {
              "column": 34,
              "line": 555
            }
          }
        },
        {
          "id": "2576",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 556
            },
            "start": {
              "column": 34,
              "line": 556
            }
          }
        },
        {
          "id": "2577",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 558
            },
            "start": {
              "column": 6,
              "line": 558
            }
          }
        },
        {
          "id": "2578",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 583
            },
            "start": {
              "column": 11,
              "line": 561
            }
          }
        },
        {
          "id": "2579",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(562,41): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 576
            },
            "start": {
              "column": 64,
              "line": 562
            }
          }
        },
        {
          "id": "2580",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 563
            },
            "start": {
              "column": 72,
              "line": 563
            }
          }
        },
        {
          "id": "2581",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(565,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(571,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 564
            },
            "start": {
              "column": 13,
              "line": 564
            }
          }
        },
        {
          "id": "2582",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(565,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 564
            },
            "start": {
              "column": 13,
              "line": 564
            }
          }
        },
        {
          "id": "2583",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 567
            },
            "start": {
              "column": 39,
              "line": 564
            }
          }
        },
        {
          "id": "2584",
          "mutatorName": "LogicalOperator",
          "replacement": "inferCurrentHeading()?.id && null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(569,15): error TS2322: Type '\"\" | null | undefined' is not assignable to type 'MaybeNull<string>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<string>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 569
            },
            "start": {
              "column": 61,
              "line": 569
            }
          }
        },
        {
          "id": "2585",
          "mutatorName": "OptionalChaining",
          "replacement": "inferCurrentHeading().id",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(569,61): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 569
            },
            "start": {
              "column": 61,
              "line": 569
            }
          }
        },
        {
          "id": "2586",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(571,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 570
            },
            "start": {
              "column": 13,
              "line": 570
            }
          }
        },
        {
          "id": "2587",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(571,51): error TS2345: Argument of type 'MaybeNull<string>' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 570
            },
            "start": {
              "column": 13,
              "line": 570
            }
          }
        },
        {
          "id": "2588",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 573
            },
            "start": {
              "column": 34,
              "line": 570
            }
          }
        },
        {
          "id": "2589",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(579,17): error TS2322: Type 'MaybeNull<string>' is not assignable to type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 579
            },
            "start": {
              "column": 11,
              "line": 579
            }
          }
        },
        {
          "id": "2590",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(579,18): error TS2322: Type 'MaybeNull<string>' is not assignable to type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 579
            },
            "start": {
              "column": 11,
              "line": 579
            }
          }
        },
        {
          "id": "2591",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 7,
              "line": 585
            },
            "start": {
              "column": 5,
              "line": 585
            }
          }
        },
        {
          "id": "2592",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 597
            },
            "start": {
              "column": 19,
              "line": 588
            }
          }
        },
        {
          "id": "2593",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 589
            },
            "start": {
              "column": 9,
              "line": 589
            }
          }
        },
        {
          "id": "2594",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 589
            },
            "start": {
              "column": 9,
              "line": 589
            }
          }
        },
        {
          "id": "2595",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 589
            },
            "start": {
              "column": 9,
              "line": 589
            }
          }
        },
        {
          "id": "2596",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 592
            },
            "start": {
              "column": 25,
              "line": 589
            }
          }
        },
        {
          "id": "2597",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 590
            },
            "start": {
              "column": 39,
              "line": 590
            }
          }
        },
        {
          "id": "2598",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 596
            },
            "start": {
              "column": 12,
              "line": 596
            }
          }
        },
        {
          "id": "2599",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 596
            },
            "start": {
              "column": 50,
              "line": 596
            }
          }
        },
        {
          "id": "2600",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 597
            },
            "start": {
              "column": 6,
              "line": 597
            }
          }
        },
        {
          "id": "2601",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 645
            },
            "start": {
              "column": 23,
              "line": 607
            }
          }
        },
        {
          "id": "2602",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 113,
              "line": 609
            },
            "start": {
              "column": 27,
              "line": 609
            }
          }
        },
        {
          "id": "2603",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 620
            },
            "start": {
              "column": 115,
              "line": 609
            }
          }
        },
        {
          "id": "2604",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 611
            },
            "start": {
              "column": 23,
              "line": 611
            }
          }
        },
        {
          "id": "2605",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 611
            },
            "start": {
              "column": 23,
              "line": 611
            }
          }
        },
        {
          "id": "2606",
          "mutatorName": "LogicalOperator",
          "replacement": "heading.slug === currentHeading || slugAndIndexAssoc[heading.slug] === 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 611
            },
            "start": {
              "column": 23,
              "line": 611
            }
          }
        },
        {
          "id": "2607",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 611
            },
            "start": {
              "column": 23,
              "line": 611
            }
          }
        },
        {
          "id": "2608",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.slug !== currentHeading",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 611
            },
            "start": {
              "column": 23,
              "line": 611
            }
          }
        },
        {
          "id": "2609",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 611
            },
            "start": {
              "column": 58,
              "line": 611
            }
          }
        },
        {
          "id": "2610",
          "mutatorName": "EqualityOperator",
          "replacement": "slugAndIndexAssoc[heading.slug] !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 611
            },
            "start": {
              "column": 58,
              "line": 611
            }
          }
        },
        {
          "id": "2611",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 613
            },
            "start": {
              "column": 30,
              "line": 613
            }
          }
        },
        {
          "id": "2612",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 613
            },
            "start": {
              "column": 30,
              "line": 613
            }
          }
        },
        {
          "id": "2613",
          "mutatorName": "LogicalOperator",
          "replacement": "3 <= heading.depth || heading.depth <= 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 613
            },
            "start": {
              "column": 30,
              "line": 613
            }
          }
        },
        {
          "id": "2614",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 613
            },
            "start": {
              "column": 30,
              "line": 613
            }
          }
        },
        {
          "id": "2615",
          "mutatorName": "EqualityOperator",
          "replacement": "3 < heading.depth",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 613
            },
            "start": {
              "column": 30,
              "line": 613
            }
          }
        },
        {
          "id": "2616",
          "mutatorName": "EqualityOperator",
          "replacement": "3 > heading.depth",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 613
            },
            "start": {
              "column": 30,
              "line": 613
            }
          }
        },
        {
          "id": "2617",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 613
            },
            "start": {
              "column": 52,
              "line": 613
            }
          }
        },
        {
          "id": "2618",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth < 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 613
            },
            "start": {
              "column": 52,
              "line": 613
            }
          }
        },
        {
          "id": "2619",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth > 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 613
            },
            "start": {
              "column": 52,
              "line": 613
            }
          }
        },
        {
          "id": "2620",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 615
            },
            "start": {
              "column": 23,
              "line": 615
            }
          }
        },
        {
          "id": "2621",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 615
            },
            "start": {
              "column": 23,
              "line": 615
            }
          }
        },
        {
          "id": "2622",
          "mutatorName": "LogicalOperator",
          "replacement": "heading.depth === 5 && heading.depth === 6",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(615,46): error TS2367: This comparison appears to be unintentional because the types '5' and '6' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 615
            },
            "start": {
              "column": 23,
              "line": 615
            }
          }
        },
        {
          "id": "2623",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 615
            },
            "start": {
              "column": 23,
              "line": 615
            }
          }
        },
        {
          "id": "2624",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 5",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopInner.tsx(615,46): error TS2367: This comparison appears to be unintentional because the types '5' and '6' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 615
            },
            "start": {
              "column": 23,
              "line": 615
            }
          }
        },
        {
          "id": "2625",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 615
            },
            "start": {
              "column": 46,
              "line": 615
            }
          }
        },
        {
          "id": "2626",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 615
            },
            "start": {
              "column": 46,
              "line": 615
            }
          }
        },
        {
          "id": "2627",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 617
            },
            "start": {
              "column": 23,
              "line": 617
            }
          }
        },
        {
          "id": "2628",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 617
            },
            "start": {
              "column": 23,
              "line": 617
            }
          }
        },
        {
          "id": "2629",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 4",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 617
            },
            "start": {
              "column": 23,
              "line": 617
            }
          }
        },
        {
          "id": "2630",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 619
            },
            "start": {
              "column": 23,
              "line": 619
            }
          }
        },
        {
          "id": "2631",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 619
            },
            "start": {
              "column": 23,
              "line": 619
            }
          }
        },
        {
          "id": "2632",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 3",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 619
            },
            "start": {
              "column": 23,
              "line": 619
            }
          }
        },
        {
          "id": "2633",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 643
            },
            "start": {
              "column": 14,
              "line": 623
            }
          }
        },
        {
          "id": "2634",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 643
            },
            "start": {
              "column": 14,
              "line": 623
            }
          }
        },
        {
          "id": "2635",
          "mutatorName": "LogicalOperator",
          "replacement": "!isCollapsed && <Link className={cn('block transition-all', {\n  'rounded-md bg-primary p-1 font-bold': heading.slug === currentHeading,\n  'hover:underline focus:text-primary': heading.slug !== currentHeading,\n  // eslint-disable-next-line no-magic-numbers\n  'p-1': slugAndIndexAssoc[heading.slug] === headings.length - 1\n})} onClick={event => {\n  onClickMagic(event, heading);\n}} href={`#${heading.slug}`} replace>\n                {heading.content}\n              </Link> && <p className=\"cursor-default select-none\" aria-hidden=\"true\">\n                {heading.content}\n              </p>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 643
            },
            "start": {
              "column": 14,
              "line": 623
            }
          }
        },
        {
          "id": "2636",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 639
            },
            "start": {
              "column": 15,
              "line": 623
            }
          }
        },
        {
          "id": "2637",
          "mutatorName": "LogicalOperator",
          "replacement": "!isCollapsed || <Link className={cn('block transition-all', {\n  'rounded-md bg-primary p-1 font-bold': heading.slug === currentHeading,\n  'hover:underline focus:text-primary': heading.slug !== currentHeading,\n  // eslint-disable-next-line no-magic-numbers\n  'p-1': slugAndIndexAssoc[heading.slug] === headings.length - 1\n})} onClick={event => {\n  onClickMagic(event, heading);\n}} href={`#${heading.slug}`} replace>\n                {heading.content}\n              </Link>",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 639
            },
            "start": {
              "column": 15,
              "line": 623
            }
          }
        },
        {
          "id": "2638",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 623
            },
            "start": {
              "column": 15,
              "line": 623
            }
          }
        },
        {
          "id": "2639",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 625
            },
            "start": {
              "column": 31,
              "line": 625
            }
          }
        },
        {
          "id": "2640",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 630
            },
            "start": {
              "column": 55,
              "line": 625
            }
          }
        },
        {
          "id": "2641",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 626
            },
            "start": {
              "column": 58,
              "line": 626
            }
          }
        },
        {
          "id": "2642",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 626
            },
            "start": {
              "column": 58,
              "line": 626
            }
          }
        },
        {
          "id": "2643",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.slug !== currentHeading",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 626
            },
            "start": {
              "column": 58,
              "line": 626
            }
          }
        },
        {
          "id": "2644",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 627
            },
            "start": {
              "column": 57,
              "line": 627
            }
          }
        },
        {
          "id": "2645",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 627
            },
            "start": {
              "column": 57,
              "line": 627
            }
          }
        },
        {
          "id": "2646",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.slug === currentHeading",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 88,
              "line": 627
            },
            "start": {
              "column": 57,
              "line": 627
            }
          }
        },
        {
          "id": "2647",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 629
            },
            "start": {
              "column": 26,
              "line": 629
            }
          }
        },
        {
          "id": "2648",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 629
            },
            "start": {
              "column": 26,
              "line": 629
            }
          }
        },
        {
          "id": "2649",
          "mutatorName": "EqualityOperator",
          "replacement": "slugAndIndexAssoc[heading.slug] !== headings.length - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 629
            },
            "start": {
              "column": 26,
              "line": 629
            }
          }
        },
        {
          "id": "2650",
          "mutatorName": "ArithmeticOperator",
          "replacement": "headings.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 629
            },
            "start": {
              "column": 62,
              "line": 629
            }
          }
        },
        {
          "id": "2651",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 633
            },
            "start": {
              "column": 37,
              "line": 631
            }
          }
        },
        {
          "id": "2652",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 634
            },
            "start": {
              "column": 23,
              "line": 634
            }
          }
        },
        {
          "id": "2653",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 649
            },
            "start": {
              "column": 25,
              "line": 649
            }
          }
        },
        {
          "id": "2654",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 652
            },
            "start": {
              "column": 92,
              "line": 649
            }
          }
        },
        {
          "id": "2655",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMagnetized",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 650
            },
            "start": {
              "column": 26,
              "line": 650
            }
          }
        },
        {
          "id": "2656",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMagnetized",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 654
            },
            "start": {
              "column": 24,
              "line": 654
            }
          }
        },
        {
          "id": "2657",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMagnetized",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 655
            },
            "start": {
              "column": 23,
              "line": 655
            }
          }
        }
      ],
      "source": "import type { MaybeUndefined, MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { DocumentHeading } from '##/config/contentlayer/blog/headings';\nimport type { PxValue, Index } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent } from 'react';\n\nimport { APPROX_120_FPS_THROTTLE_TIMING_IN_MS } from '@/config/throttling';\nimport { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport useScrollDirection from '@/components/hooks/useScrollDirection';\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { MDX_BODY_ID } from '@/config/elementsId';\nimport { useRouter } from 'next/navigation';\nimport { getNavbar } from '@/lib/html';\nimport { cn } from '@/lib/tailwind';\nimport throttle from 'throttleit';\nimport Link from 'next/link';\n\nimport type { BlogPostTocDesktopInnerProps } from '../types';\n\nimport BlogPostTocCollapseButton, { COLLAPSE_BUTTON_HEIGTH_IN_PX } from './BlogPostTocCollapseButton';\n\n// {ToDo} Remove this if, one day, this bug is fixed: https://bugs.webkit.org/show_bug.cgi?id=201556\n// https://github.com/argyleink/scrollyfills?tab=readme-ov-file#polyfills\n// eslint-disable-next-line import/no-extraneous-dependencies\nrequire('scrollyfills').scrollend;\n\nconst navbarElement: MaybeNull<HTMLElement> = getNavbar();\n// eslint-disable-next-line no-magic-numbers\nconst navbarHeight: PxValue = navbarElement ? navbarElement.getBoundingClientRect().height : 0;\n// eslint-disable-next-line no-magic-numbers\nconst BOTTOM_DEAD_ZONE_PX: PxValue = navbarHeight * 2;\nconst TOP_DEAD_ZONE_PX: PxValue = navbarHeight;\n\nconst SCROLL_TOP_OFFSET_ONCLICK_MAGIC: PxValue = navbarHeight;\n\nconst TOC_SCROLL_TOP_OFFSET_IN_PX: PxValue = 172;\n\n// eslint-disable-next-line no-magic-numbers\nconst isAtTop = () => window.scrollY === 0;\n\nconst getTotalVerticalScrollDistance = () => Math.ceil(window.scrollY + window.innerHeight);\n\nconst getAllDocumentHeadingsFromDOM = () => Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')) as HTMLElement[];\n\nconst getMdxBodyFromDOM = () => document.getElementById(MDX_BODY_ID);\n\n// {ToDo} https://github.com/Tirraa/dashboard_rtm/issues/126\nconst BlogPostTocDesktopInner: FunctionComponent<BlogPostTocDesktopInnerProps> = ({\n  setIsMagnetized,\n  setIsCollapsed,\n  isMagnetized,\n  isCollapsed,\n  ariaLabel,\n  headings\n}) => {\n  const router = useRouter();\n  const isLargeScreen = useIsLargeScreen();\n  const [scrollDirection, setScrollDirection] = useScrollDirection();\n  const [currentHeading, setCurrentHeading] = useState<HeadingSlug>('');\n\n  const lastScrollY = useRef<PxValue>(window.scrollY);\n  const headingsRef = useRef<HTMLOListElement>(null);\n  const tocRef = useRef<HTMLDivElement>(null);\n  const forcedHeadingSlugRef = useRef<HeadingSlug>('');\n  const muteUpdatesUntilScrollEnd = useRef<boolean>(false);\n  const muteScrollEndNextDoubleCheck = useRef<boolean>(false);\n\n  const handleScrollUpRef = useRef<MaybeNull<(currentScrollY: PxValue, oldScrollY: PxValue, forced?: boolean) => void>>(null);\n  const handleScrollDownRef = useRef<MaybeNull<(currentScrollY: PxValue, oldScrollY: PxValue, forced?: boolean) => void>>(null);\n\n  const slugAndIndexAssoc = useMemo(() => {\n    return headings.reduce(\n      (indexed, { slug }, idx) => {\n        indexed[slug] = idx;\n        return indexed;\n      },\n      {} as Record<HeadingSlug, HeadingSlugIdx>\n    );\n  }, [headings]);\n\n  const headingsFromDOM = useMemo(\n    () => getAllDocumentHeadingsFromDOM().filter((heading) => heading.id && slugAndIndexAssoc[heading.id] !== undefined),\n    [slugAndIndexAssoc]\n  );\n\n  const mdxBodyFromDOM = useMemo(() => getMdxBodyFromDOM(), []);\n\n  const dropOldHeadingFocus = useCallback(() => {\n    const headingsRefInstance = getRefCurrentPtr(headingsRef);\n    if (!headingsRefInstance) return;\n\n    const maybeCurrentlyFocusedHeadingParent: MaybeUndefined<Element> = Array.from(headingsRefInstance.children).find((headingLi) =>\n      Array.from(headingLi.children).find((child) => child === document.activeElement)\n    );\n\n    if (!maybeCurrentlyFocusedHeadingParent) return;\n    // eslint-disable-next-line no-magic-numbers\n    const maybeCurrentlyFocusedHeading = maybeCurrentlyFocusedHeadingParent.children[0] as MaybeUndefined<HTMLElement>;\n    if (maybeCurrentlyFocusedHeading) maybeCurrentlyFocusedHeading.blur();\n  }, []);\n\n  const dropOldHeadingFocusAndSetCurrentHeading = useCallback(\n    (newCurrentHeading: HeadingSlug) => {\n      dropOldHeadingFocus();\n      setCurrentHeading(newCurrentHeading);\n    },\n    [dropOldHeadingFocus]\n  );\n\n  const getClosestHeadingFromBottom = useCallback((): MaybeNull<HTMLElement> => {\n    let closestHeading = null;\n    let closestDistance = Infinity;\n    const viewportHeight = window.innerHeight;\n    const yStart = window.scrollY + viewportHeight - BOTTOM_DEAD_ZONE_PX;\n\n    for (const heading of headingsFromDOM) {\n      const distance = yStart - heading.offsetTop;\n      // eslint-disable-next-line no-magic-numbers\n      if (0 <= distance && distance <= closestDistance) {\n        closestHeading = heading;\n        closestDistance = distance;\n      }\n    }\n\n    return closestHeading;\n  }, [headingsFromDOM]);\n\n  const getClosestHeadingFromTop = useCallback((): MaybeNull<HTMLElement> => {\n    let closestHeading = null;\n    let closestDistance = -Infinity; // Like the level of the Intersection Observer devs\n    const [yMin, yMax] = [window.scrollY + TOP_DEAD_ZONE_PX, getTotalVerticalScrollDistance() - BOTTOM_DEAD_ZONE_PX];\n\n    for (const heading of headingsFromDOM) {\n      if (heading.offsetTop > yMax) continue;\n      const distance = yMin - heading.offsetTop;\n      // eslint-disable-next-line no-magic-numbers\n      if (0 >= distance && distance >= closestDistance) {\n        closestHeading = heading;\n        closestDistance = distance;\n      }\n    }\n\n    return closestHeading;\n  }, [headingsFromDOM]);\n\n  const getCurrentHeadingSlugFromHash: (expectedToBeInViewport?: boolean) => MaybeNull<HeadingSlug> = useCallback(\n    (expectedToBeInViewport: boolean = false) => {\n      const hash = window.location.hash;\n      if (!hash) return null;\n\n      // eslint-disable-next-line no-magic-numbers\n      const maybeHeadingSlug = hash.substring(1);\n      const maybeHeadingSlugIdx = slugAndIndexAssoc[maybeHeadingSlug];\n      if (maybeHeadingSlugIdx === undefined) return null;\n\n      const heading = document.getElementById(headings[maybeHeadingSlugIdx].slug);\n      if (!heading) return null;\n\n      if (!expectedToBeInViewport) return maybeHeadingSlug;\n\n      const [yMin, yMax] = [window.scrollY, getTotalVerticalScrollDistance()];\n      const headingIsInViewport = yMax >= heading.offsetTop && heading.offsetTop >= yMin;\n      return !headingIsInViewport ? null : maybeHeadingSlug;\n    },\n    [slugAndIndexAssoc, headings]\n  );\n\n  const inferCurrentHeading: () => MaybeNull<HTMLElement> = useCallback(() => {\n    const infered1 = getClosestHeadingFromTop();\n\n    if (infered1) {\n      const inferedElementHeading = infered1.id;\n      const inferedElementYTopInViewport = infered1.getBoundingClientRect().top;\n      // eslint-disable-next-line no-magic-numbers\n      const midViewportHeight = window.innerHeight / 2;\n      if (midViewportHeight < inferedElementYTopInViewport) {\n        const idx = slugAndIndexAssoc[inferedElementHeading];\n        // eslint-disable-next-line no-magic-numbers\n        if (idx === 0) return infered1;\n        // eslint-disable-next-line no-magic-numbers\n        const rescueHeading = headings[idx - 1].slug;\n        forcedHeadingSlugRef.current = '';\n        muteUpdatesUntilScrollEnd.current = true;\n        setScrollDirection('up');\n        const infered3 = document.getElementById(rescueHeading);\n        return infered3;\n      }\n      return infered1;\n    }\n\n    const infered2 = getClosestHeadingFromBottom();\n    if (!infered2) return null;\n\n    dropOldHeadingFocusAndSetCurrentHeading(infered2.id);\n    return infered2;\n  }, [\n    headings,\n    slugAndIndexAssoc,\n    setScrollDirection,\n    getClosestHeadingFromBottom,\n    getClosestHeadingFromTop,\n    dropOldHeadingFocusAndSetCurrentHeading\n  ]);\n\n  const isAtBottom = useCallback(() => getTotalVerticalScrollDistance() >= document.documentElement.scrollHeight, []);\n\n  const populateHandleScrollUpAndHandleScrollDown = useCallback(() => {\n    handleScrollUpRef.current = (currentScrollY: PxValue, oldScrollY: PxValue, forced: boolean = false) => {\n      if (!isLargeScreen || muteScrollEndNextDoubleCheck.current) return;\n\n      if (currentScrollY > oldScrollY) {\n        setScrollDirection('down');\n        const handleScrollDownInstance = getRefCurrentPtr(handleScrollDownRef);\n        if (handleScrollDownInstance) handleScrollDownInstance(currentScrollY, oldScrollY, true);\n        return;\n      }\n\n      const isForced = Boolean(forced);\n      let skip = false;\n\n      if (isForced) skip = false;\n      else if (scrollDirection !== 'up' || muteUpdatesUntilScrollEnd.current) skip = true;\n\n      if (skip) return;\n\n      if (isAtTop()) {\n        // eslint-disable-next-line no-magic-numbers\n        const veryFirstHeadingSlug = headings[0].slug;\n        forcedHeadingSlugRef.current = '';\n        dropOldHeadingFocusAndSetCurrentHeading(veryFirstHeadingSlug);\n        return;\n      }\n\n      const infered: MaybeNull<HeadingSlug> = getClosestHeadingFromTop()?.id ?? null;\n\n      if (!infered) {\n        const maybeRescueHeading: MaybeNull<HeadingSlug> = inferCurrentHeading()?.id ?? null;\n        if (maybeRescueHeading) {\n          dropOldHeadingFocusAndSetCurrentHeading(maybeRescueHeading);\n          return;\n        }\n        // eslint-disable-next-line no-magic-numbers\n        const veryFirstHeadingSlug = headings[0].slug;\n        dropOldHeadingFocusAndSetCurrentHeading(veryFirstHeadingSlug);\n        return;\n      }\n\n      if (forcedHeadingSlugRef.current) {\n        const inferedHeadingIdx = slugAndIndexAssoc[infered];\n        const forcedHeadingIdx = slugAndIndexAssoc[forcedHeadingSlugRef.current];\n        if (inferedHeadingIdx <= forcedHeadingIdx) forcedHeadingSlugRef.current = '';\n        else return;\n      }\n\n      dropOldHeadingFocusAndSetCurrentHeading(infered);\n      return;\n    };\n\n    handleScrollDownRef.current = (currentScrollY: PxValue, oldScrollY: PxValue, forced: boolean = false) => {\n      if (!isLargeScreen || muteScrollEndNextDoubleCheck.current) return;\n\n      if (currentScrollY < oldScrollY) {\n        setScrollDirection('up');\n        const handleScrollUpInstance = getRefCurrentPtr(handleScrollUpRef);\n        if (handleScrollUpInstance) handleScrollUpInstance(currentScrollY, oldScrollY, true);\n        return;\n      }\n\n      const isForced = Boolean(forced);\n      let skip = false;\n\n      if (isForced) skip = false;\n      else if (scrollDirection !== 'down' || muteUpdatesUntilScrollEnd.current) skip = true;\n\n      if (skip) return;\n\n      if (isAtBottom()) {\n        // eslint-disable-next-line no-magic-numbers\n        const veryLastHeadingSlug = headings[headings.length - 1].slug;\n        forcedHeadingSlugRef.current = '';\n        dropOldHeadingFocusAndSetCurrentHeading(veryLastHeadingSlug);\n        return;\n      }\n\n      let firstVisibleHeadingSlug: MaybeNull<HeadingSlug> = getClosestHeadingFromTop()?.id ?? null;\n      if (firstVisibleHeadingSlug === null) {\n        const rescueHeading: MaybeNull<HeadingSlug> = inferCurrentHeading()?.id ?? null;\n        if (rescueHeading) firstVisibleHeadingSlug = rescueHeading;\n        else return;\n      }\n\n      if (forcedHeadingSlugRef.current) {\n        const newIdx = slugAndIndexAssoc[firstVisibleHeadingSlug];\n        const oldIdx = slugAndIndexAssoc[forcedHeadingSlugRef.current];\n        if (newIdx >= oldIdx) forcedHeadingSlugRef.current = '';\n        else return;\n      }\n\n      dropOldHeadingFocusAndSetCurrentHeading(firstVisibleHeadingSlug);\n    };\n  }, [\n    getClosestHeadingFromTop,\n    headings,\n    inferCurrentHeading,\n    isAtBottom,\n    isLargeScreen,\n    dropOldHeadingFocusAndSetCurrentHeading,\n    scrollDirection,\n    setScrollDirection,\n    slugAndIndexAssoc\n  ]);\n\n  const handleMagnetization = useCallback(() => {\n    if (!isLargeScreen || !mdxBodyFromDOM?.offsetTop) return;\n\n    setIsMagnetized(window.scrollY + navbarHeight >= mdxBodyFromDOM.offsetTop);\n  }, [isLargeScreen, mdxBodyFromDOM, setIsMagnetized]);\n\n  const onClickMagic = useCallback(\n    (event: Pick<Event, 'preventDefault'>, heading: DocumentHeading) => {\n      event.preventDefault();\n\n      const { slug } = heading;\n      const elem = document.getElementById(slug);\n      if (!elem) return;\n\n      forcedHeadingSlugRef.current = slug;\n\n      // eslint-disable-next-line no-magic-numbers\n      const isLastHeading = slug === headings[headings.length - 1].slug;\n\n      if (isLastHeading && isAtBottom()) {\n        setCurrentHeading(slug);\n        router.replace('#' + slug, { scroll: false });\n        return;\n      }\n\n      muteUpdatesUntilScrollEnd.current = true;\n      muteScrollEndNextDoubleCheck.current = true;\n      const scrollYTarget = Math.min(\n        // eslint-disable-next-line no-magic-numbers\n        Math.trunc(document.documentElement.scrollHeight) - Math.trunc(window.innerHeight) - 2,\n        elem.offsetTop - SCROLL_TOP_OFFSET_ONCLICK_MAGIC\n      );\n\n      forcedHeadingSlugRef.current = slug;\n\n      if (Math.trunc(scrollYTarget) === Math.trunc(window.scrollY)) window.dispatchEvent(new Event('scrollend'));\n      else window.scrollTo({ behavior: 'instant', top: scrollYTarget });\n\n      setCurrentHeading(slug);\n      router.replace('#' + slug, { scroll: false });\n    },\n    [headings, isAtBottom, router]\n  );\n\n  const handleMagicHeadingClick = useCallback(\n    (event: Event) => {\n      if (!event.target) return;\n\n      const anchorElement = (event.target as HTMLElement).closest('a');\n\n      if (anchorElement?.parentNode) {\n        onClickMagic(event, headings[slugAndIndexAssoc[(anchorElement.parentNode as HTMLElement).id]]);\n      }\n    },\n    [headings, onClickMagic, slugAndIndexAssoc]\n  );\n\n  const setDocumentHeadingsOnClickEvent = useCallback(\n    (doSet: boolean = true) => {\n      for (const heading of headingsFromDOM) {\n        // eslint-disable-next-line no-magic-numbers\n        const firstChild = heading.children[0];\n        if (!firstChild) continue;\n\n        firstChild.removeEventListener('click', handleMagicHeadingClick);\n        if (doSet) firstChild.addEventListener('click', handleMagicHeadingClick);\n      }\n    },\n    [headingsFromDOM, handleMagicHeadingClick]\n  );\n\n  useEffect(() => {\n    function handleScrollEnd() {\n      const currentScrollY = window.scrollY;\n      const oldScrollY = lastScrollY.current;\n      lastScrollY.current = currentScrollY;\n\n      if (!isLargeScreen) return;\n\n      muteUpdatesUntilScrollEnd.current = false;\n      if (muteScrollEndNextDoubleCheck.current) {\n        muteScrollEndNextDoubleCheck.current = false;\n        return;\n      }\n\n      if (scrollDirection === 'up') {\n        const handleScrollUpInstance = getRefCurrentPtr(handleScrollUpRef);\n        if (handleScrollUpInstance) handleScrollUpInstance(currentScrollY, oldScrollY, true);\n        return;\n      }\n\n      if (scrollDirection !== 'down') return;\n\n      const handleScrollDownInstance = getRefCurrentPtr(handleScrollDownRef);\n      if (handleScrollDownInstance) handleScrollDownInstance(currentScrollY, oldScrollY, true);\n    }\n\n    window.addEventListener('scrollend', handleScrollEnd);\n\n    return () => window.removeEventListener('scrollend', handleScrollEnd);\n  }, [isLargeScreen, scrollDirection]);\n\n  useEffect(() => {\n    if (!isMagnetized) setIsCollapsed(false);\n  }, [isMagnetized, setIsCollapsed]);\n\n  useEffect(() => {\n    if (!isLargeScreen) return;\n\n    const headingsInstance = getRefCurrentPtr(headingsRef);\n    if (!headingsInstance) return;\n\n    const idx = slugAndIndexAssoc[currentHeading];\n    if (idx === undefined) return;\n\n    headingsInstance.scrollTo({\n      top: (headingsInstance.children[idx] as HTMLElement).offsetTop - TOC_SCROLL_TOP_OFFSET_IN_PX,\n      behavior: 'smooth'\n    });\n    return;\n  }, [currentHeading, isLargeScreen, slugAndIndexAssoc, headings]);\n\n  useEffect(\n    () => {\n      if (!isLargeScreen) return;\n\n      const tocInstance = getRefCurrentPtr(tocRef);\n      if (!tocInstance) return;\n\n      function updateScrollOnUncollapse(event: TransitionEvent) {\n        const target = event.target as HTMLElement;\n        if (target.tagName !== 'NAV') return;\n\n        const headingsInstance = getRefCurrentPtr(headingsRef);\n        if (!headingsInstance) return;\n\n        const idx = slugAndIndexAssoc[currentHeading];\n        if (idx === undefined) return;\n\n        const HTMLElement = headingsInstance.children[idx];\n        if (!HTMLElement) return;\n\n        headingsInstance.scrollTo({\n          top: (HTMLElement as HTMLElement).offsetTop - TOC_SCROLL_TOP_OFFSET_IN_PX,\n          behavior: 'smooth'\n        });\n\n        tocInstance.removeEventListener('transitionend', (event) => updateScrollOnUncollapse(event));\n      }\n\n      function applyUncollapsedStyles() {\n        tocInstance.style.marginTop = '0';\n      }\n\n      function applyCollapsedStyles() {\n        const height = tocInstance.getBoundingClientRect().height;\n        tocInstance.style.marginTop = '-' + (height + COLLAPSE_BUTTON_HEIGTH_IN_PX) + 'px';\n      }\n\n      if (!isCollapsed) {\n        applyUncollapsedStyles();\n        const idx = slugAndIndexAssoc[currentHeading];\n        if (idx === undefined) return;\n\n        tocInstance.addEventListener('transitionend', (event) => updateScrollOnUncollapse(event));\n        return;\n      }\n\n      applyCollapsedStyles();\n\n      return () => tocInstance.removeEventListener('transitionend', updateScrollOnUncollapse);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isCollapsed]\n  );\n\n  useEffect(() => {\n    if (!isLargeScreen) return;\n\n    const handleResize = () => {\n      const maybeInferedHeading = inferCurrentHeading();\n      if (maybeInferedHeading) {\n        dropOldHeadingFocusAndSetCurrentHeading(maybeInferedHeading.id);\n      }\n    };\n\n    const throttledResizeHandler = throttle(handleResize, APPROX_120_FPS_THROTTLE_TIMING_IN_MS);\n\n    window.addEventListener('resize', throttledResizeHandler);\n\n    return () => {\n      window.removeEventListener('resize', throttledResizeHandler);\n    };\n  }, [isLargeScreen, inferCurrentHeading, dropOldHeadingFocusAndSetCurrentHeading]);\n\n  useEffect(() => {\n    if (!isLargeScreen) return;\n\n    const handleHashchange = () => {\n      const heading = getCurrentHeadingSlugFromHash();\n      if (heading !== null) {\n        forcedHeadingSlugRef.current = heading;\n        dropOldHeadingFocusAndSetCurrentHeading(heading);\n      }\n    };\n\n    window.addEventListener('hashchange', handleHashchange);\n\n    return () => {\n      window.removeEventListener('hashchange', handleHashchange);\n    };\n  }, [isLargeScreen, getCurrentHeadingSlugFromHash, dropOldHeadingFocusAndSetCurrentHeading]);\n\n  useEffect(() => {\n    if (!isLargeScreen) return;\n\n    function handleScrollUp(currentScrollY: PxValue, oldScrollY: PxValue) {\n      const handleScrollUpInstance = getRefCurrentPtr(handleScrollUpRef);\n      if (handleScrollUpInstance) handleScrollUpInstance(currentScrollY, oldScrollY);\n    }\n\n    function handleScrollDown(currentScrollY: PxValue, oldScrollY: PxValue) {\n      const handleScrollDownInstance = getRefCurrentPtr(handleScrollDownRef);\n      if (handleScrollDownInstance) handleScrollDownInstance(currentScrollY, oldScrollY);\n    }\n\n    function handleScroll() {\n      const currentScrollY = window.scrollY;\n      const oldScrollY = lastScrollY.current;\n      lastScrollY.current = currentScrollY;\n\n      handleScrollUp(currentScrollY, oldScrollY);\n      handleScrollDown(currentScrollY, oldScrollY);\n    }\n\n    const throttledMagnetizationHandler = throttle(handleMagnetization, APPROX_120_FPS_THROTTLE_TIMING_IN_MS);\n    const throttledScrollHandler = throttle(handleScroll, APPROX_120_FPS_THROTTLE_TIMING_IN_MS);\n\n    window.addEventListener('scroll', throttledMagnetizationHandler);\n    window.addEventListener('scroll', throttledScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttledMagnetizationHandler);\n      window.removeEventListener('scroll', throttledScrollHandler);\n    };\n  }, [isLargeScreen, handleMagnetization]);\n\n  useEffect(\n    () => {\n      function initializeHeadingSlug(): MaybeNull<HeadingSlug> {\n        const maybeHeadingSlugFromHash = getCurrentHeadingSlugFromHash(true);\n        if (maybeHeadingSlugFromHash) {\n          dropOldHeadingFocusAndSetCurrentHeading(maybeHeadingSlugFromHash);\n          return maybeHeadingSlugFromHash;\n        }\n\n        const maybeInferedHeading: MaybeNull<HeadingSlug> = inferCurrentHeading()?.id ?? null;\n        if (maybeInferedHeading) {\n          dropOldHeadingFocusAndSetCurrentHeading(maybeInferedHeading);\n          return maybeInferedHeading;\n        }\n\n        return null;\n      }\n\n      const maybeHeadingSlug = initializeHeadingSlug();\n      if (maybeHeadingSlug) forcedHeadingSlugRef.current = maybeHeadingSlug;\n\n      populateHandleScrollUpAndHandleScrollDown();\n      handleMagnetization();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  useEffect(() => {\n    if (!isLargeScreen) {\n      setDocumentHeadingsOnClickEvent(false);\n      return;\n    }\n\n    setDocumentHeadingsOnClickEvent();\n\n    return () => setDocumentHeadingsOnClickEvent(false);\n  }, [isLargeScreen, setDocumentHeadingsOnClickEvent]);\n\n  return (\n    <nav\n      className=\"flex flex-col items-center self-start transition-[margin-top] duration-300\"\n      data-pagefind-ignore=\"all\"\n      aria-label={ariaLabel}\n      ref={tocRef}\n    >\n      <ol className=\"mb-1 max-h-[354px] w-full list-none space-y-3 overflow-auto px-4\" ref={headingsRef}>\n        {headings.map((heading) => (\n          <li\n            className={cn('w-fit list-none text-sm font-bold text-white transition-all duration-200 ease-in-out', {\n              // eslint-disable-next-line no-magic-numbers\n              'mt-2': heading.slug === currentHeading && slugAndIndexAssoc[heading.slug] === 0,\n              // eslint-disable-next-line no-magic-numbers\n              'font-medium': 3 <= heading.depth && heading.depth <= 6,\n              // eslint-disable-next-line no-magic-numbers\n              'ml-6': heading.depth === 5 || heading.depth === 6,\n              // eslint-disable-next-line no-magic-numbers\n              'ml-4': heading.depth === 4,\n              // eslint-disable-next-line no-magic-numbers\n              'ml-2': heading.depth === 3\n            })}\n            key={heading.slug}\n          >\n            {(!isCollapsed && (\n              <Link\n                className={cn('block transition-all', {\n                  'rounded-md bg-primary p-1 font-bold': heading.slug === currentHeading,\n                  'hover:underline focus:text-primary': heading.slug !== currentHeading,\n                  // eslint-disable-next-line no-magic-numbers\n                  'p-1': slugAndIndexAssoc[heading.slug] === headings.length - 1\n                })}\n                onClick={(event) => {\n                  onClickMagic(event, heading);\n                }}\n                href={`#${heading.slug}`}\n                replace\n              >\n                {heading.content}\n              </Link>\n            )) || (\n              <p className=\"cursor-default select-none\" aria-hidden=\"true\">\n                {heading.content}\n              </p>\n            )}\n          </li>\n        ))}\n      </ol>\n      {\n        <BlogPostTocCollapseButton\n          className={cn('relative top-6 z-10 opacity-100 transition-opacity duration-200', {\n            'opacity-0': !isMagnetized,\n            'top-4': isCollapsed\n          })}\n          setIsCollapsed={setIsCollapsed}\n          aria-hidden={!isMagnetized}\n          isDisabled={!isMagnetized}\n          isCollapsed={isCollapsed}\n        />\n      }\n    </nav>\n  );\n};\n\nexport default BlogPostTocDesktopInner;\n\ntype HeadingSlug = string;\ntype HeadingSlugIdx = Index;\n"
    },
    "src/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2658",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(18,7): error TS2322: Type '({ headings }: SharedBlogPostTocProps) => void' is not assignable to type 'FunctionComponent<SharedBlogPostTocProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 63
            },
            "start": {
              "column": 93,
              "line": 18
            }
          }
        },
        {
          "id": "2659",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(20,36): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"pages\" | \"all\" | \"blog\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"all\" | \"blog\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n  Overload 2 of 2, '(key: \"pages\" | \"all\" | \"blog\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"all\" | \"blog\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 20
            },
            "start": {
              "column": 36,
              "line": 20
            }
          }
        },
        {
          "id": "2660",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 26
            },
            "start": {
              "column": 61,
              "line": 26
            }
          }
        },
        {
          "id": "2661",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 27
            },
            "start": {
              "column": 59,
              "line": 27
            }
          }
        },
        {
          "id": "2662",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 19,
              "line": 29
            }
          }
        },
        {
          "id": "2663",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 30
            },
            "start": {
              "column": 9,
              "line": 30
            }
          }
        },
        {
          "id": "2664",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 30
            },
            "start": {
              "column": 9,
              "line": 30
            }
          }
        },
        {
          "id": "2665",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLargeScreen && Component !== null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 30
            },
            "start": {
              "column": 9,
              "line": 30
            }
          }
        },
        {
          "id": "2666",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 30
            },
            "start": {
              "column": 9,
              "line": 30
            }
          }
        },
        {
          "id": "2667",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 30
            },
            "start": {
              "column": 27,
              "line": 30
            }
          }
        },
        {
          "id": "2668",
          "mutatorName": "EqualityOperator",
          "replacement": "Component === null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 30
            },
            "start": {
              "column": 27,
              "line": 30
            }
          }
        },
        {
          "id": "2669",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(32,12): error TS2307: Cannot find module '' or its corresponding type declarations.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 32
            },
            "start": {
              "column": 12,
              "line": 32
            }
          }
        },
        {
          "id": "2670",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 98,
              "line": 32
            },
            "start": {
              "column": 46,
              "line": 32
            }
          }
        },
        {
          "id": "2671",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 32
            },
            "start": {
              "column": 74,
              "line": 32
            }
          }
        },
        {
          "id": "2672",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(52,10): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(52,10): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'MaybeNull<FunctionComponent<BlogPostTocDesktopInnerProps>>' is not a valid JSX element type.\n    Type 'null' is not assignable to type 'ElementType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "2673",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(52,10): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(52,10): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'MaybeNull<FunctionComponent<BlogPostTocDesktopInnerProps>>' is not a valid JSX element type.\n    Type 'null' is not assignable to type 'ElementType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "2674",
          "mutatorName": "EqualityOperator",
          "replacement": "Component !== null",
          "statusReason": "src/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(52,10): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/ui/blog/toc/desktop/BlogPostTocDesktopLazy.tsx(52,10): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'null' is not a valid JSX element type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "2675",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 40
            },
            "start": {
              "column": 14,
              "line": 40
            }
          }
        },
        {
          "id": "2676",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 40
            },
            "start": {
              "column": 26,
              "line": 40
            }
          }
        },
        {
          "id": "2677",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 128,
              "line": 43
            },
            "start": {
              "column": 23,
              "line": 43
            }
          }
        },
        {
          "id": "2678",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 47
            },
            "start": {
              "column": 130,
              "line": 43
            }
          }
        },
        {
          "id": "2679",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMagnetized",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 46
            },
            "start": {
              "column": 24,
              "line": 46
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FunctionComponent } from 'react';\n\nimport { CardContent, CardHeader, CardTitle, Card } from '@/components/ui/Card';\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { useScopedI18n } from '@/i18n/client';\nimport { useEffect, useState } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { capitalize } from '@/lib/str';\nimport { cn } from '@/lib/tailwind';\n\nimport type { BlogPostTocDesktopInnerProps, SharedBlogPostTocProps } from '../types';\n\nimport { COLLAPSE_BUTTON_HEIGTH_IN_PX } from './BlogPostTocCollapseButton';\n\nconst BlogPostTocDesktopLazy: FunctionComponent<SharedBlogPostTocProps> = ({ headings }) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const title = capitalize(scopedT('toc'));\n\n  const placeholder = null;\n  const isLargeScreen = useIsLargeScreen();\n\n  const [Component, setComponent] = useState<MaybeNull<FunctionComponent<BlogPostTocDesktopInnerProps>>>(null);\n  const [isMagnetized, setIsMagnetized] = useState<boolean>(false);\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isLargeScreen || Component !== null) return;\n    // eslint-disable-next-line promise/catch-or-return\n    import('./BlogPostTocDesktopInner').then((component) => setComponent(() => component.default));\n  });\n\n  if (Component === null) return placeholder;\n\n  return (\n    <Card\n      className=\"align-center ml-4 hidden h-fit w-60 border-none bg-black text-secondary dark:bg-card dark:text-foreground lg:block rtl:ml-0 rtl:mr-4\"\n      style={{ clipPath: `inset(1px 0% -${COLLAPSE_BUTTON_HEIGTH_IN_PX}px 0%)` }}\n    >\n      <CardHeader\n        className={cn('relative z-10 rounded-b-none rounded-t-lg bg-black transition-[border-radius] duration-150 dark:bg-card', {\n          'rounded-t-none': isMagnetized,\n          'rounded-b-lg': isCollapsed,\n          'delay-200': !isMagnetized\n        })}\n      >\n        <CardTitle className=\"px-2 text-center\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"mt-[-2px] p-0 pb-6\">\n        <Component\n          setIsMagnetized={setIsMagnetized}\n          setIsCollapsed={setIsCollapsed}\n          isMagnetized={isMagnetized}\n          isCollapsed={isCollapsed}\n          headings={headings}\n          ariaLabel={title}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default BlogPostTocDesktopLazy;\n"
    },
    "src/components/ui/blog/toc/mobile/BlogPostTocMobile.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2680",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobile.tsx(9,39): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type 'DynamicOptions<{}> | Loader<{}>'.\n  Type '() => undefined' is not assignable to type '() => LoaderComponent<{}>'.\n    Type 'undefined' is not assignable to type 'LoaderComponent<{}>'.\nsrc/components/ui/blog/toc/mobile/BlogPostTocMobile.tsx(13,111): error TS2322: Type '{ headings: DocumentHeading[]; }' is not assignable to type 'IntrinsicAttributes'.\n  Property 'headings' does not exist on type 'IntrinsicAttributes'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 9
            },
            "start": {
              "column": 39,
              "line": 9
            }
          }
        },
        {
          "id": "2681",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobile.tsx(9,52): error TS2307: Cannot find module '' or its corresponding type declarations.\nsrc/components/ui/blog/toc/mobile/BlogPostTocMobile.tsx(13,111): error TS2322: Type '{ headings: DocumentHeading[]; }' is not assignable to type 'IntrinsicAttributes'.\n  Property 'headings' does not exist on type 'IntrinsicAttributes'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 9
            },
            "start": {
              "column": 52,
              "line": 9
            }
          }
        },
        {
          "id": "2682",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 143,
              "line": 9
            },
            "start": {
              "column": 80,
              "line": 9
            }
          }
        },
        {
          "id": "2683",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobile.tsx(9,91): error TS2322: Type '() => undefined' is not assignable to type '(loadingProps: DynamicOptionsLoadingProps) => Element | null'.\n  Type 'undefined' is not assignable to type 'Element | null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 129,
              "line": 9
            },
            "start": {
              "column": 91,
              "line": 9
            }
          }
        },
        {
          "id": "2684",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 141,
              "line": 9
            },
            "start": {
              "column": 136,
              "line": 9
            }
          }
        },
        {
          "id": "2685",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 133,
              "line": 13
            },
            "start": {
              "column": 70,
              "line": 13
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport dynamic from 'next/dynamic';\n\nimport type { SharedBlogPostTocProps } from '../types';\n\nconst BlogPostTocMobileLazy = dynamic(() => import('./BlogPostTocMobileLazy'), { loading: () => <div className=\"min-h-[62px]\" />, ssr: false });\n\ninterface BlogPostTocMobileProps extends SharedBlogPostTocProps {}\n\nconst BlogPostTocMobile: FunctionComponent<BlogPostTocMobileProps> = ({ headings }) => <BlogPostTocMobileLazy headings={headings} />;\n\nexport default BlogPostTocMobile;\n"
    },
    "src/components/ui/blog/toc/mobile/BlogPostTocMobileInner.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2686",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileInner.tsx(23,36): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 33
            },
            "start": {
              "column": 35,
              "line": 13
            }
          }
        },
        {
          "id": "2687",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileInner.tsx(14,3): error TS2322: Type 'undefined[]' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n  Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 16,
              "line": 14
            }
          }
        },
        {
          "id": "2688",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 104,
              "line": 17
            },
            "start": {
              "column": 23,
              "line": 17
            }
          }
        },
        {
          "id": "2689",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 26
            },
            "start": {
              "column": 106,
              "line": 17
            }
          }
        },
        {
          "id": "2690",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 19
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "2691",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 19
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "2692",
          "mutatorName": "LogicalOperator",
          "replacement": "3 <= heading.depth || heading.depth <= 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 19
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "2693",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 19
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "2694",
          "mutatorName": "EqualityOperator",
          "replacement": "3 < heading.depth",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 19
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "2695",
          "mutatorName": "EqualityOperator",
          "replacement": "3 > heading.depth",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 19
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "2696",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 19
            },
            "start": {
              "column": 48,
              "line": 19
            }
          }
        },
        {
          "id": "2697",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth < 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 19
            },
            "start": {
              "column": 48,
              "line": 19
            }
          }
        },
        {
          "id": "2698",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth > 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 19
            },
            "start": {
              "column": 48,
              "line": 19
            }
          }
        },
        {
          "id": "2699",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 21
            },
            "start": {
              "column": 19,
              "line": 21
            }
          }
        },
        {
          "id": "2700",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 21
            },
            "start": {
              "column": 19,
              "line": 21
            }
          }
        },
        {
          "id": "2701",
          "mutatorName": "LogicalOperator",
          "replacement": "heading.depth === 5 && heading.depth === 6",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileInner.tsx(21,42): error TS2367: This comparison appears to be unintentional because the types '5' and '6' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 21
            },
            "start": {
              "column": 19,
              "line": 21
            }
          }
        },
        {
          "id": "2702",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 21
            },
            "start": {
              "column": 19,
              "line": 21
            }
          }
        },
        {
          "id": "2703",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 5",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileInner.tsx(21,42): error TS2367: This comparison appears to be unintentional because the types '5' and '6' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 21
            },
            "start": {
              "column": 19,
              "line": 21
            }
          }
        },
        {
          "id": "2704",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 21
            },
            "start": {
              "column": 42,
              "line": 21
            }
          }
        },
        {
          "id": "2705",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 6",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 21
            },
            "start": {
              "column": 42,
              "line": 21
            }
          }
        },
        {
          "id": "2706",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 23
            },
            "start": {
              "column": 19,
              "line": 23
            }
          }
        },
        {
          "id": "2707",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 23
            },
            "start": {
              "column": 19,
              "line": 23
            }
          }
        },
        {
          "id": "2708",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 4",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 23
            },
            "start": {
              "column": 19,
              "line": 23
            }
          }
        },
        {
          "id": "2709",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 25
            },
            "start": {
              "column": 19,
              "line": 25
            }
          }
        },
        {
          "id": "2710",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 25
            },
            "start": {
              "column": 19,
              "line": 25
            }
          }
        },
        {
          "id": "2711",
          "mutatorName": "EqualityOperator",
          "replacement": "heading.depth !== 3",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 25
            },
            "start": {
              "column": 19,
              "line": 25
            }
          }
        },
        {
          "id": "2712",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 27
            },
            "start": {
              "column": 15,
              "line": 27
            }
          }
        },
        {
          "id": "2713",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileInner.tsx(35,7): error TS2322: Type '({ headings }: BlogPostTocMobileInnerProps) => void' is not assignable to type 'FunctionComponent<BlogPostTocMobileInnerProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 98,
              "line": 35
            }
          }
        },
        {
          "id": "2714",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileInner.tsx(37,36): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n  Overload 2 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 37
            },
            "start": {
              "column": 36,
              "line": 37
            }
          }
        }
      ],
      "source": "import type { DocumentHeading } from '##/config/contentlayer/blog/headings';\nimport type { FunctionComponent, ReactElement } from 'react';\n\nimport { AccordionContent, AccordionTrigger, AccordionItem, Accordion } from '@/components/ui/Accordion';\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport { capitalize } from '@/lib/str';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nimport type { BlogPostTocMobileInnerProps } from '../types';\n\nconst accordionContentGenerator = (headings: DocumentHeading[]): ReactElement[] =>\n  headings.map((heading) => (\n    <AccordionContent data-pagefind-ignore=\"all\" key={heading.slug}>\n      <Link\n        className={cn('text-lg font-bold transition-colors duration-200 ease-in-out hover:text-primary', {\n          // eslint-disable-next-line no-magic-numbers\n          'font-medium': 3 <= heading.depth && heading.depth <= 6,\n          // eslint-disable-next-line no-magic-numbers\n          'ml-6': heading.depth === 5 || heading.depth === 6,\n          // eslint-disable-next-line no-magic-numbers\n          'ml-4': heading.depth === 4,\n          // eslint-disable-next-line no-magic-numbers\n          'ml-2': heading.depth === 3\n        })}\n        href={'#' + heading.slug}\n        replace\n      >\n        {heading.content}\n      </Link>\n    </AccordionContent>\n  ));\n\nconst BlogPostTocMobileInner: FunctionComponent<BlogPostTocMobileInnerProps> = ({ headings }) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const title = capitalize(scopedT('toc'));\n\n  return (\n    <Accordion className=\"lg:hidden\" type=\"single\" collapsible>\n      <AccordionItem value=\"toc\">\n        <AccordionTrigger>{title}</AccordionTrigger>\n        {accordionContentGenerator(headings)}\n      </AccordionItem>\n    </Accordion>\n  );\n};\n\nexport default BlogPostTocMobileInner;\n"
    },
    "src/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2715",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(14,7): error TS2322: Type '({ headings }: SharedBlogPostTocProps) => void' is not assignable to type 'FunctionComponent<SharedBlogPostTocProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 93,
              "line": 14
            }
          }
        },
        {
          "id": "2716",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(16,36): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n  Overload 2 of 2, '(key: \"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | ... 14 more ... | \"sr-only.goToTop\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"pages\" | \"blog\" | \"all\" | \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"footer-copy\" | \"brand-short\" | \"more-pages\" | \"see-more\" | \"pagination\" | \"loading\" | \"404\" | ... 13 more ... | \"sr-only.goToTop\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 16
            },
            "start": {
              "column": 36,
              "line": 16
            }
          }
        },
        {
          "id": "2717",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 19,
              "line": 23
            }
          }
        },
        {
          "id": "2718",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "2719",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "2720",
          "mutatorName": "LogicalOperator",
          "replacement": "isLargeScreen && Component !== null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "2721",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 24
            },
            "start": {
              "column": 26,
              "line": 24
            }
          }
        },
        {
          "id": "2722",
          "mutatorName": "EqualityOperator",
          "replacement": "Component === null",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 24
            },
            "start": {
              "column": 26,
              "line": 24
            }
          }
        },
        {
          "id": "2723",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(26,12): error TS2307: Cannot find module '' or its corresponding type declarations.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 26
            },
            "start": {
              "column": 12,
              "line": 26
            }
          }
        },
        {
          "id": "2724",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 26
            },
            "start": {
              "column": 45,
              "line": 26
            }
          }
        },
        {
          "id": "2725",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 26
            },
            "start": {
              "column": 73,
              "line": 26
            }
          }
        },
        {
          "id": "2726",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(31,11): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(31,11): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'MaybeNull<FunctionComponent<BlogPostTocMobileInnerProps>>' is not a valid JSX element type.\n    Type 'null' is not assignable to type 'ElementType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 29
            },
            "start": {
              "column": 7,
              "line": 29
            }
          }
        },
        {
          "id": "2727",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(31,11): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(31,11): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'MaybeNull<FunctionComponent<BlogPostTocMobileInnerProps>>' is not a valid JSX element type.\n    Type 'null' is not assignable to type 'ElementType'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 29
            },
            "start": {
              "column": 7,
              "line": 29
            }
          }
        },
        {
          "id": "2728",
          "mutatorName": "EqualityOperator",
          "replacement": "Component !== null",
          "statusReason": "src/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(31,11): error TS2604: JSX element type 'Component' does not have any construct or call signatures.\nsrc/components/ui/blog/toc/mobile/BlogPostTocMobileLazy.tsx(31,11): error TS2786: 'Component' cannot be used as a JSX component.\n  Its type 'null' is not a valid JSX element type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 29
            },
            "start": {
              "column": 7,
              "line": 29
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FunctionComponent } from 'react';\n\nimport useIsLargeScreen from '@/components/hooks/useIsLargeScreen';\nimport { useScopedI18n } from '@/i18n/client';\nimport { useEffect, useState } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { capitalize } from '@/lib/str';\n\nimport type { BlogPostTocMobileInnerProps, SharedBlogPostTocProps } from '../types';\n\nconst BlogPostTocDesktopLazy: FunctionComponent<SharedBlogPostTocProps> = ({ headings }) => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const title = capitalize(scopedT('toc'));\n\n  const placeholder = <div className=\"min-h-[62px]\" />;\n  const isLargeScreen = useIsLargeScreen();\n\n  const [Component, setComponent] = useState<MaybeNull<FunctionComponent<BlogPostTocMobileInnerProps>>>(null);\n\n  useEffect(() => {\n    if (isLargeScreen || Component !== null) return;\n    // eslint-disable-next-line promise/catch-or-return\n    import('./BlogPostTocMobileInner').then((component) => setComponent(() => component.default));\n  });\n\n  if (Component === null) return placeholder;\n\n  return <Component headings={headings} ariaLabel={title} />;\n};\n\nexport default BlogPostTocDesktopLazy;\n"
    },
    "src/components/ui/breadcrumbs/Breadcrumbs.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2729",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(32,34): error TS2322: Type 'string' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 32
            },
            "start": {
              "column": 33,
              "line": 32
            }
          }
        },
        {
          "id": "2730",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(34,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 71
            },
            "start": {
              "column": 19,
              "line": 34
            }
          }
        },
        {
          "id": "2731",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(61,49): error TS2345: Argument of type 'void' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 40
            },
            "start": {
              "column": 64,
              "line": 35
            }
          }
        },
        {
          "id": "2732",
          "mutatorName": "MethodExpression",
          "replacement": "pathParts",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 37
            },
            "start": {
              "column": 30,
              "line": 37
            }
          }
        },
        {
          "id": "2733",
          "mutatorName": "ArithmeticOperator",
          "replacement": "depth - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 37
            },
            "start": {
              "column": 49,
              "line": 37
            }
          }
        },
        {
          "id": "2734",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 48
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "2735",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 9,
              "line": 49
            },
            "start": {
              "column": 7,
              "line": 49
            }
          }
        },
        {
          "id": "2736",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(58,55): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 60
            },
            "start": {
              "column": 72,
              "line": 51
            }
          }
        },
        {
          "id": "2737",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(55,15): error TS18048: 'customCrumbs' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "2738",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(55,15): error TS18048: 'customCrumbs' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "2739",
          "mutatorName": "LogicalOperator",
          "replacement": "customCrumbs || customCrumbsDepths.includes(depth + 1)",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(55,15): error TS18048: 'customCrumbs' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "2740",
          "mutatorName": "ArithmeticOperator",
          "replacement": "depth - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 53
            },
            "start": {
              "column": 53,
              "line": 53
            }
          }
        },
        {
          "id": "2741",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 56
            },
            "start": {
              "column": 65,
              "line": 53
            }
          }
        },
        {
          "id": "2742",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 62
            },
            "start": {
              "column": 23,
              "line": 62
            }
          }
        },
        {
          "id": "2743",
          "mutatorName": "EqualityOperator",
          "replacement": "depth <= pathParts.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 62
            },
            "start": {
              "column": 23,
              "line": 62
            }
          }
        },
        {
          "id": "2744",
          "mutatorName": "EqualityOperator",
          "replacement": "depth >= pathParts.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 62
            },
            "start": {
              "column": 23,
              "line": 62
            }
          }
        },
        {
          "id": "2745",
          "mutatorName": "UpdateOperator",
          "replacement": "depth--",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 62
            },
            "start": {
              "column": 49,
              "line": 62
            }
          }
        },
        {
          "id": "2746",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 68
            },
            "start": {
              "column": 58,
              "line": 62
            }
          }
        },
        {
          "id": "2747",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 64
            },
            "start": {
              "column": 20,
              "line": 64
            }
          }
        },
        {
          "id": "2748",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 64
            },
            "start": {
              "column": 20,
              "line": 64
            }
          }
        },
        {
          "id": "2749",
          "mutatorName": "EqualityOperator",
          "replacement": "pathParts[depth + 1] !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 64
            },
            "start": {
              "column": 20,
              "line": 64
            }
          }
        },
        {
          "id": "2750",
          "mutatorName": "ArithmeticOperator",
          "replacement": "depth - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 64
            },
            "start": {
              "column": 30,
              "line": 64
            }
          }
        },
        {
          "id": "2751",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 67
            },
            "start": {
              "column": 26,
              "line": 67
            }
          }
        },
        {
          "id": "2752",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(73,7): error TS2322: Type '({ withHomepageElement: maybeWithHomepageElement, customCrumbs, className }: BreadcrumbsProps) => void' is not assignable to type 'FunctionComponent<BreadcrumbsProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 103
            },
            "start": {
              "column": 138,
              "line": 73
            }
          }
        },
        {
          "id": "2753",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(84,9): error TS18048: 'customCrumbsDepths' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 76
            },
            "start": {
              "column": 38,
              "line": 76
            }
          }
        },
        {
          "id": "2754",
          "mutatorName": "LogicalOperator",
          "replacement": "customCrumbs?.map(({\n  depth\n}) => depth) && []",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(86,9): error TS18048: 'customCrumbsDepths' is possibly 'undefined'.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(86,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 76
            },
            "start": {
              "column": 44,
              "line": 76
            }
          }
        },
        {
          "id": "2755",
          "mutatorName": "OptionalChaining",
          "replacement": "customCrumbs.map",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(76,44): error TS18048: 'customCrumbs' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 76
            },
            "start": {
              "column": 44,
              "line": 76
            }
          }
        },
        {
          "id": "2756",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(84,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'undefined'.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(99,76): error TS2345: Argument of type 'undefined[]' is not assignable to parameter of type 'number[]'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 76
            },
            "start": {
              "column": 62,
              "line": 76
            }
          }
        },
        {
          "id": "2757",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(84,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'never'.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(99,76): error TS2345: Argument of type 'string[] | number[]' is not assignable to parameter of type 'number[] | undefined'.\n  Type 'string[]' is not assignable to type 'number[]'.\n    Type 'string' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 76
            },
            "start": {
              "column": 87,
              "line": 76
            }
          }
        },
        {
          "id": "2758",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 105,
              "line": 76
            },
            "start": {
              "column": 91,
              "line": 76
            }
          }
        },
        {
          "id": "2759",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "2760",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "2761",
          "mutatorName": "EqualityOperator",
          "replacement": "pathname !== ROUTES_ROOTS.WEBSITE",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "2762",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(82,45): error TS2769: No overload matches this call.\n  Overload 1 of 3, '(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string', gave the following error.\n    Argument of type '(acc: string[], part: string, currentIndex: number) => void' is not assignable to parameter of type '(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string'.\n      Types of parameters 'acc' and 'previousValue' are incompatible.\n        Type 'string' is not assignable to type 'string[]'.\n  Overload 2 of 3, '(callbackfn: (previousValue: string[], currentValue: string, currentIndex: number, array: string[]) => string[], initialValue: string[]): string[]', gave the following error.\n    Argument of type '(acc: string[], part: string, currentIndex: number) => void' is not assignable to parameter of type '(previousValue: string[], currentValue: string, currentIndex: number, array: string[]) => string[]'.\n      Type 'void' is not assignable to type 'string[]'.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(87,37): error TS2345: Argument of type 'string' is not assignable to parameter of type 'string[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 94
            },
            "start": {
              "column": 74,
              "line": 82
            }
          }
        },
        {
          "id": "2763",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 84
            },
            "start": {
              "column": 9,
              "line": 84
            }
          }
        },
        {
          "id": "2764",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 84
            },
            "start": {
              "column": 9,
              "line": 84
            }
          }
        },
        {
          "id": "2765",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentIndex - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 84
            },
            "start": {
              "column": 37,
              "line": 84
            }
          }
        },
        {
          "id": "2766",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 87
            },
            "start": {
              "column": 56,
              "line": 84
            }
          }
        },
        {
          "id": "2767",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 85
            },
            "start": {
              "column": 16,
              "line": 85
            }
          }
        },
        {
          "id": "2768",
          "mutatorName": "BooleanLiteral",
          "replacement": "Object.keys(PAGES_TITLES).includes(part)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 89
            },
            "start": {
              "column": 26,
              "line": 89
            }
          }
        },
        {
          "id": "2769",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 90
            },
            "start": {
              "column": 9,
              "line": 90
            }
          }
        },
        {
          "id": "2770",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 90
            },
            "start": {
              "column": 9,
              "line": 90
            }
          }
        },
        {
          "id": "2771",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 90
            },
            "start": {
              "column": 39,
              "line": 90
            }
          }
        },
        {
          "id": "2772",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(97,41): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 95 more ... | \"blog-categories.patch-notes.discord-bot.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"search-menu.nothing-found\" | ... 94 more ... | \"blog-categories.patch-notes.discord-bot.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 95 more ... | \"blog-categories.patch-notes.discord-bot.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"search-menu.nothing-found\" | ... 94 more ... | \"blog-categories.patch-notes.discord-bot.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 97
            },
            "start": {
              "column": 41,
              "line": 97
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { CustomCrumbs, CustomCrumb } from '@rtm/shared-types/Breadcrumbs';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\nimport type { FunctionComponent, ReactElement } from 'react';\nimport type { Index } from '@rtm/shared-types/Numbers';\n\nimport buildAbsolutePathFromParts from '@rtm/shared-lib/portable/str/buildAbsolutePathFromParts';\nimport PAGES_TITLES from '@/i18n/locales/fragments/schema/pagesTitles';\nimport getPathParts from '@/lib/misc/getPathParts';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { usePathname } from 'next/navigation';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { Fragment, useMemo } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { capitalize } from '@/lib/str';\n\nimport HomepageCrumb from './custom/HomepageCrumb';\nimport CrumbSeparator from './CrumbSeparator';\nimport Crumb from './Crumb';\n\ninterface BreadcrumbsProps {\n  withHomepageElement?: boolean;\n  customCrumbs?: CustomCrumbs;\n  className?: string;\n}\n\nfunction crumbsGenerator(\n  pathParts: string[],\n  pagesTitlesParts: string[],\n  withHomepageElement: boolean,\n  customCrumbsDepths: Index[] = [],\n  customCrumbs?: CustomCrumbs\n): ReactElement[] {\n  function buildCurrentPath(pathParts: string[], depth: Index) {\n    // eslint-disable-next-line no-magic-numbers\n    const currentPathParts = pathParts.slice(0, depth + 1);\n    const currentPath = buildAbsolutePathFromParts(...currentPathParts);\n    return currentPath;\n  }\n\n  const crumbs: ReactElement[] = withHomepageElement\n    ? [\n        <Fragment key=\"breadcrumbs-homepage-part\">\n          <HomepageCrumb />\n          <CrumbSeparator />\n        </Fragment>\n      ]\n    : [];\n\n  function crumbGenerator(depth: Index, isLeaf: boolean, href: string) {\n    // eslint-disable-next-line no-magic-numbers\n    if (customCrumbs && customCrumbsDepths.includes(depth + 1)) {\n      // eslint-disable-next-line no-magic-numbers\n      return (customCrumbs.find(({ depth: _depth }) => _depth === depth + 1) as CustomCrumb).jsx;\n    }\n\n    const label = pagesTitlesParts[depth];\n    return <Crumb isLeaf={isLeaf} label={label} href={href} />;\n  }\n\n  for (let depth = 0; depth < pathParts.length; depth++) {\n    // eslint-disable-next-line no-magic-numbers\n    const isLeaf = pathParts[depth + 1] === undefined;\n    const href = buildCurrentPath(pathParts, depth);\n    const crumb = crumbGenerator(depth, isLeaf, href);\n    crumbs.push(<li key={`breadcrumbs-part-${depth}`}>{crumb}</li>);\n  }\n\n  return crumbs;\n}\n\nconst Breadcrumbs: FunctionComponent<BreadcrumbsProps> = ({ withHomepageElement: maybeWithHomepageElement, customCrumbs, className }) => {\n  const pathname = usePathname();\n  const globalT = getClientSideI18n();\n  const customCrumbsDepths = useMemo(() => customCrumbs?.map(({ depth }) => depth) ?? [], [customCrumbs]);\n\n  const withHomepageElement = Boolean(maybeWithHomepageElement);\n  if (pathname === ROUTES_ROOTS.WEBSITE) return withHomepageElement ? <HomepageCrumb isLeaf /> : null;\n\n  const pathParts = getPathParts(pathname);\n  const pagesTitlesParts = pathParts.reduce((acc, part, currentIndex) => {\n    // eslint-disable-next-line no-magic-numbers\n    if (customCrumbsDepths.includes(currentIndex + 1)) {\n      acc.push('');\n      return acc;\n    }\n\n    const missingLabel = !Object.keys(PAGES_TITLES).includes(part);\n    if (missingLabel) throw new Error(`Missing pages-titles label: ${part}`);\n\n    acc.push(globalT(`${i18ns.pagesTitles}.${part}` as I18nVocabTarget));\n    return acc;\n  }, [] as string[]);\n\n  return (\n    <nav aria-label={capitalize(globalT(`${i18ns.vocab}.breadcrumbs`))} data-pagefind-ignore=\"all\" className={className}>\n      <ol className=\"flex w-fit flex-wrap justify-center gap-y-1 rounded-lg bg-accent bg-opacity-75 px-3 py-2 text-center lg:justify-normal\">\n        {crumbsGenerator(pathParts, pagesTitlesParts, withHomepageElement, customCrumbsDepths, customCrumbs)}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumbs;\n"
    },
    "src/components/ui/breadcrumbs/Crumb.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2773",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Crumb.tsx(15,7): error TS2322: Type '({ isLeaf: maybeIsLeaf, label, href }: CrumbProps) => void' is not assignable to type 'FunctionComponent<CrumbProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 88,
              "line": 15
            }
          }
        },
        {
          "id": "2774",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 21
            },
            "start": {
              "column": 23,
              "line": 21
            }
          }
        },
        {
          "id": "2775",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 24
            },
            "start": {
              "column": 58,
              "line": 21
            }
          }
        },
        {
          "id": "2776",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLeaf",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 22
            },
            "start": {
              "column": 61,
              "line": 22
            }
          }
        },
        {
          "id": "2777",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/Crumb.tsx(19,8): error TS2322: Type '{ children: string; className: string; \"aria-disabled\": \"\" | undefined; \"aria-current\": \"page\" | undefined; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-disabled\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'Booleanish | undefined'.\n      Type '\"\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 25
            },
            "start": {
              "column": 33,
              "line": 25
            }
          }
        },
        {
          "id": "2778",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/Crumb.tsx(19,8): error TS2322: Type '{ children: string; className: string; \"aria-disabled\": \"true\" | undefined; \"aria-current\": \"\" | undefined; href: string; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 26
            },
            "start": {
              "column": 32,
              "line": 26
            }
          }
        },
        {
          "id": "2779",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 31
            },
            "start": {
              "column": 8,
              "line": 31
            }
          }
        },
        {
          "id": "2780",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 31
            },
            "start": {
              "column": 8,
              "line": 31
            }
          }
        },
        {
          "id": "2781",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLeaf || <CrumbSeparator />",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 31
            },
            "start": {
              "column": 8,
              "line": 31
            }
          }
        },
        {
          "id": "2782",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLeaf",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 31
            },
            "start": {
              "column": 8,
              "line": 31
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nimport CrumbSeparator from './CrumbSeparator';\n\ninterface CrumbProps {\n  withRescueCtx?: boolean;\n  isLeaf?: boolean;\n  label: string;\n  href: string;\n}\n\nconst Crumb: FunctionComponent<CrumbProps> = ({ isLeaf: maybeIsLeaf, label, href }) => {\n  const isLeaf = Boolean(maybeIsLeaf);\n\n  return (\n    <>\n      <Link\n        className={cn('duration-250 transition-opacity', {\n          'opacity-60 hover:opacity-100 focus:opacity-100': !isLeaf,\n          'pointer-events-none font-semibold': isLeaf\n        })}\n        aria-disabled={isLeaf ? 'true' : undefined}\n        aria-current={isLeaf ? 'page' : undefined}\n        href={href}\n      >\n        {label}\n      </Link>\n      {!isLeaf && <CrumbSeparator />}\n    </>\n  );\n};\n\nexport default Crumb;\n"
    },
    "src/components/ui/breadcrumbs/CrumbSeparator.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2783",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 64,
              "line": 5
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\ninterface CrumbSeparatorProps {}\n\nconst CrumbSeparator: FunctionComponent<CrumbSeparatorProps> = () => (\n  <span className=\"mx-1 select-none text-black text-opacity-50 dark:text-white\" aria-hidden=\"true\">\n    /\n  </span>\n);\n\nexport default CrumbSeparator;\n"
    },
    "src/components/ui/breadcrumbs/custom/BlogPostCrumb.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2784",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 123,
              "line": 10
            },
            "start": {
              "column": 62,
              "line": 10
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\nimport Crumb from '../Crumb';\n\ninterface BlogPostCrumbProps {\n  label: string;\n  url: string;\n}\n\nconst BlogPostCrumb: FunctionComponent<BlogPostCrumbProps> = ({ label, url }) => <Crumb label={label} href={url} isLeaf />;\n\nexport default BlogPostCrumb;\n"
    },
    "src/components/ui/breadcrumbs/custom/HomepageCrumb.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2785",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/custom/HomepageCrumb.tsx(15,7): error TS2322: Type '({ isLeaf }: HomepageCrumbProps) => void' is not assignable to type 'FunctionComponent<HomepageCrumbProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 78,
              "line": 15
            }
          }
        },
        {
          "id": "2786",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/custom/HomepageCrumb.tsx(18,25): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"homepage\" | \"blog\" | \"blog-testing-category\" | \"fake-subcategory\" | \"patch-notes\" | \"dashboard\" | \"discord-bot\" | \"patch-notes-bis\" | \"dashboard-bis\" | \"discord-bot-bis\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"homepage\" | \"blog\" | \"blog-testing-category\" | \"fake-subcategory\" | \"patch-notes\" | \"dashboard\" | \"discord-bot\" | \"patch-notes-bis\" | \"dashboard-bis\" | \"discord-bot-bis\"'.\n  Overload 2 of 2, '(key: \"homepage\" | \"blog\" | \"blog-testing-category\" | \"fake-subcategory\" | \"patch-notes\" | \"dashboard\" | \"discord-bot\" | \"patch-notes-bis\" | \"dashboard-bis\" | \"discord-bot-bis\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"homepage\" | \"blog\" | \"blog-testing-category\" | \"fake-subcategory\" | \"patch-notes\" | \"dashboard\" | \"discord-bot\" | \"patch-notes-bis\" | \"dashboard-bis\" | \"discord-bot-bis\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 18
            },
            "start": {
              "column": 25,
              "line": 18
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport { useScopedI18n } from '@/i18n/client';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { i18ns } from '##/config/i18n';\n\nimport Crumb from '../Crumb';\n\ninterface HomepageCrumbProps {\n  isLeaf?: boolean;\n}\n\nconst HomepageCrumb: FunctionComponent<HomepageCrumbProps> = ({ isLeaf }) => {\n  const { pagesTitles } = i18ns;\n  const scopedT = useScopedI18n(pagesTitles);\n  const label = scopedT('homepage');\n  const href = ROUTES_ROOTS.WEBSITE;\n\n  return <Crumb isLeaf={isLeaf} label={label} href={href} />;\n};\n\nexport default HomepageCrumb;\n"
    },
    "src/components/ui/cta/InviteTheBotButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2787",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 107,
              "line": 17
            }
          }
        },
        {
          "id": "2788",
          "mutatorName": "LogicalOperator",
          "replacement": "classNameValue && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 19
            },
            "start": {
              "column": 21,
              "line": 19
            }
          }
        },
        {
          "id": "2789",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 19
            },
            "start": {
              "column": 39,
              "line": 19
            }
          }
        },
        {
          "id": "2790",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 27
            },
            "start": {
              "column": 24,
              "line": 27
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { CogIcon } from '@heroicons/react/16/solid';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { Button } from '@/components/ui/Button';\nimport DISCORD_CONFIG from '@/config/discord';\nimport { i18ns } from '##/config/i18n';\n\nexport interface InviteTheBotButtonProps extends Partial<WithClassname> {}\n\nconst InviteTheBotButton: FunctionComponent<InviteTheBotButtonProps> = ({ className: classNameValue }) => {\n  const globalT = getClientSideI18n();\n  const className = classNameValue ?? '';\n\n  return (\n    <Button href={DISCORD_CONFIG.BOT_INVITE_LINK} className={className}>\n      <span className=\"flex items-center gap-1\">\n        <span>\n          <CogIcon className=\"h-7 w-7\" />\n        </span>\n        <span>{globalT(`${i18ns.vocab}.invite-the-bot`)}</span>\n      </span>\n    </Button>\n  );\n};\n\nexport default InviteTheBotButton;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/cta/Logo.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2791",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 25
            },
            "start": {
              "column": 27,
              "line": 25
            }
          }
        },
        {
          "id": "2792",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/cta/Logo.tsx(27,7): error TS2322: Type '({ onPageEnterAnimation, animatedOnHover, clickable, height, width }: LogoProps) => void' is not assignable to type 'FunctionComponent<LogoProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 101
            },
            "start": {
              "column": 117,
              "line": 27
            }
          }
        },
        {
          "id": "2793",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 31
            },
            "start": {
              "column": 109,
              "line": 31
            }
          }
        },
        {
          "id": "2794",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 49
            },
            "start": {
              "column": 44,
              "line": 34
            }
          }
        },
        {
          "id": "2795",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 35
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "2796",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 35
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "2797",
          "mutatorName": "LogicalOperator",
          "replacement": "onLoadAnimation && !animatedOnHover",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 35
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "2798",
          "mutatorName": "BooleanLiteral",
          "replacement": "animatedOnHover",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 35
            },
            "start": {
              "column": 28,
              "line": 35
            }
          }
        },
        {
          "id": "2799",
          "mutatorName": "BooleanLiteral",
          "replacement": "imgInstance",
          "statusReason": "src/components/ui/cta/Logo.tsx(40,17): error TS2339: Property 'style' does not exist on type 'never'.\nsrc/components/ui/cta/Logo.tsx(41,17): error TS2339: Property 'style' does not exist on type 'never'.\nsrc/components/ui/cta/Logo.tsx(42,17): error TS2339: Property 'style' does not exist on type 'never'.\nsrc/components/ui/cta/Logo.tsx(44,42): error TS2339: Property 'style' does not exist on type 'never'.\nsrc/components/ui/cta/Logo.tsx(45,17): error TS2339: Property 'style' does not exist on type 'never'.\nsrc/components/ui/cta/Logo.tsx(47,19): error TS2339: Property 'style' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "2800",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "2801",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "2802",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 40
            },
            "start": {
              "column": 39,
              "line": 40
            }
          }
        },
        {
          "id": "2803",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 41
            },
            "start": {
              "column": 43,
              "line": 41
            }
          }
        },
        {
          "id": "2804",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 42
            },
            "start": {
              "column": 49,
              "line": 42
            }
          }
        },
        {
          "id": "2805",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 45
            },
            "start": {
              "column": 39,
              "line": 45
            }
          }
        },
        {
          "id": "2806",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 48
            },
            "start": {
              "column": 40,
              "line": 46
            }
          }
        },
        {
          "id": "2807",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 49
            },
            "start": {
              "column": 6,
              "line": 49
            }
          }
        },
        {
          "id": "2808",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 62
            },
            "start": {
              "column": 19,
              "line": 51
            }
          }
        },
        {
          "id": "2809",
          "mutatorName": "BooleanLiteral",
          "replacement": "imgInstance",
          "statusReason": "src/components/ui/cta/Logo.tsx(60,17): error TS2339: Property 'addEventListener' does not exist on type 'never'.\nsrc/components/ui/cta/Logo.tsx(61,30): error TS2339: Property 'removeEventListener' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "2810",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "2811",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "2812",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 58
            },
            "start": {
              "column": 41,
              "line": 55
            }
          }
        },
        {
          "id": "2813",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 56
            },
            "start": {
              "column": 26,
              "line": 56
            }
          }
        },
        {
          "id": "2814",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 57
            },
            "start": {
              "column": 39,
              "line": 57
            }
          }
        },
        {
          "id": "2815",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 60
            },
            "start": {
              "column": 34,
              "line": 60
            }
          }
        },
        {
          "id": "2816",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 61
            },
            "start": {
              "column": 12,
              "line": 61
            }
          }
        },
        {
          "id": "2817",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 61
            },
            "start": {
              "column": 50,
              "line": 61
            }
          }
        },
        {
          "id": "2818",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 62
            },
            "start": {
              "column": 6,
              "line": 62
            }
          }
        },
        {
          "id": "2819",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 78
            },
            "start": {
              "column": 19,
              "line": 64
            }
          }
        },
        {
          "id": "2820",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 65
            },
            "start": {
              "column": 9,
              "line": 65
            }
          }
        },
        {
          "id": "2821",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 65
            },
            "start": {
              "column": 9,
              "line": 65
            }
          }
        },
        {
          "id": "2822",
          "mutatorName": "BooleanLiteral",
          "replacement": "imgInstance",
          "statusReason": "src/components/ui/cta/Logo.tsx(76,17): error TS2339: Property 'addEventListener' does not exist on type 'never'.\nsrc/components/ui/cta/Logo.tsx(77,30): error TS2339: Property 'removeEventListener' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 68
            },
            "start": {
              "column": 9,
              "line": 68
            }
          }
        },
        {
          "id": "2823",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 68
            },
            "start": {
              "column": 9,
              "line": 68
            }
          }
        },
        {
          "id": "2824",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 68
            },
            "start": {
              "column": 9,
              "line": 68
            }
          }
        },
        {
          "id": "2825",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 74
            },
            "start": {
              "column": 36,
              "line": 70
            }
          }
        },
        {
          "id": "2826",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 71
            },
            "start": {
              "column": 41,
              "line": 71
            }
          }
        },
        {
          "id": "2827",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 72
            },
            "start": {
              "column": 45,
              "line": 72
            }
          }
        },
        {
          "id": "2828",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 73
            },
            "start": {
              "column": 51,
              "line": 73
            }
          }
        },
        {
          "id": "2829",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 76
            },
            "start": {
              "column": 34,
              "line": 76
            }
          }
        },
        {
          "id": "2830",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 77
            },
            "start": {
              "column": 12,
              "line": 77
            }
          }
        },
        {
          "id": "2831",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 77
            },
            "start": {
              "column": 50,
              "line": 77
            }
          }
        },
        {
          "id": "2832",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 78
            },
            "start": {
              "column": 6,
              "line": 78
            }
          }
        },
        {
          "id": "2833",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 82
            },
            "start": {
              "column": 21,
              "line": 82
            }
          }
        },
        {
          "id": "2834",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/cta/Logo.tsx(83,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"search-menu.nothing-found\" | \"search-menu.sr-only.choose-search-mode\" | \"search-menu.sr-only.close-search-menu\" | \"search-menu.sr-only.dashboard-access\" | \"search-menu.sr-only.homepage-access\" | ... 95 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 83
            },
            "start": {
              "column": 20,
              "line": 83
            }
          }
        },
        {
          "id": "2835",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 85
            },
            "start": {
              "column": 18,
              "line": 85
            }
          }
        },
        {
          "id": "2836",
          "mutatorName": "BooleanLiteral",
          "replacement": "clickable",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 94
            },
            "start": {
              "column": 7,
              "line": 94
            }
          }
        },
        {
          "id": "2837",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 94
            },
            "start": {
              "column": 7,
              "line": 94
            }
          }
        },
        {
          "id": "2838",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 94
            },
            "start": {
              "column": 7,
              "line": 94
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { PxValue } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent } from 'react';\n\nimport { getRefCurrentPtr, getLinkTarget } from '@rtm/shared-lib/react';\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport { getClientSideI18n } from '@/i18n/client';\nimport DISCORD_CONFIG from '@/config/discord';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nimport logoPic from '/public/assets/medias/img/vectors/logo/rtm-full-body.svg';\n\ninterface LogoProps {\n  onPageEnterAnimation?: boolean;\n  animatedOnHover?: boolean;\n  clickable?: boolean;\n  height?: PxValue;\n  width?: PxValue;\n}\n\nconst ON_PAGE_ENTER_CLS = 'animate-[swing_1234ms_ease-out]';\n\nconst Logo: FunctionComponent<LogoProps> = ({ onPageEnterAnimation, animatedOnHover, clickable, height, width }) => {\n  const href = DISCORD_CONFIG.BOT_INVITE_LINK;\n  const target = getLinkTarget(href);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const [onLoadAnimation, setOnLoadAnimation] = useState<string>(onPageEnterAnimation ? ON_PAGE_ENTER_CLS : '');\n  const globalT = getClientSideI18n();\n\n  const onMouseEnterCb = useCallback(() => {\n    if (onLoadAnimation || !animatedOnHover) return;\n\n    const imgInstance = getRefCurrentPtr(imgRef);\n    if (!imgInstance) return;\n\n    imgInstance.style.animationName = 'gelatine';\n    imgInstance.style.animationDuration = '285ms';\n    imgInstance.style.animationTimingFunction = 'ease-in-out';\n\n    const oldAnimationName = imgInstance.style.animationName;\n    imgInstance.style.animationName = 'none';\n    window.requestAnimationFrame(() => {\n      imgInstance.style.animationName = oldAnimationName;\n    });\n  }, [onLoadAnimation, animatedOnHover]);\n\n  useEffect(() => {\n    const imgInstance = getRefCurrentPtr(imgRef);\n    if (!imgInstance) return;\n\n    function firstAnimationEndHandler() {\n      setOnLoadAnimation('');\n      imgInstance.removeEventListener('animationend', firstAnimationEndHandler);\n    }\n\n    imgInstance.addEventListener('animationend', firstAnimationEndHandler);\n    return () => imgInstance.removeEventListener('animationend', firstAnimationEndHandler);\n  }, []);\n\n  useEffect(() => {\n    if (onLoadAnimation) return;\n\n    const imgInstance = getRefCurrentPtr(imgRef);\n    if (!imgInstance) return;\n\n    function animationEndHandler() {\n      imgInstance.style.animationName = 'none';\n      imgInstance.style.animationDuration = '0s';\n      imgInstance.style.animationTimingFunction = 'unset';\n    }\n\n    imgInstance.addEventListener('animationend', animationEndHandler);\n    return () => imgInstance.removeEventListener('animationend', animationEndHandler);\n  }, [onLoadAnimation]);\n\n  const logo = (\n    <Image\n      className={cn('select-none', onLoadAnimation)}\n      alt={globalT(`${i18ns.srOnly}.brand-logo`)}\n      onMouseEnter={onMouseEnterCb}\n      draggable={false}\n      height={height}\n      src={logoPic}\n      width={width}\n      ref={imgRef}\n      priority\n    />\n  );\n\n  if (!clickable) return logo;\n\n  return (\n    <Link className=\"m-auto flex h-fit w-fit select-none\" target={target} href={href}>\n      {logo}\n    </Link>\n  );\n};\n\nexport default Logo;\n"
    },
    "src/components/ui/cta/LogoHead.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2839",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 52,
              "line": 17
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { PxValue } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent } from 'react';\n\nimport Image from 'next/image';\n\nimport logoHeadPic from '/public/assets/medias/img/vectors/logo/rtm-head.svg';\n\ninterface LogoHeadProps {\n  priority?: boolean;\n  height?: PxValue;\n  width?: PxValue;\n  alt: string;\n}\n\nconst LogoHead: FunctionComponent<LogoHeadProps> = ({ priority, height, width, alt }) => (\n  <Image priority={priority} src={logoHeadPic} height={height} width={width} alt={alt} />\n);\nexport default LogoHead;\n"
    },
    "src/components/ui/cta/MdxInviteTheBotButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2840",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 86,
              "line": 13
            }
          }
        },
        {
          "id": "2841",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 19
            },
            "start": {
              "column": 19,
              "line": 16
            }
          }
        },
        {
          "id": "2842",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 18
            },
            "start": {
              "column": 12,
              "line": 18
            }
          }
        },
        {
          "id": "2843",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 18
            },
            "start": {
              "column": 59,
              "line": 18
            }
          }
        },
        {
          "id": "2844",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 110,
              "line": 18
            },
            "start": {
              "column": 87,
              "line": 18
            }
          }
        },
        {
          "id": "2845",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 19
            },
            "start": {
              "column": 6,
              "line": 19
            }
          }
        },
        {
          "id": "2846",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "2847",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "2848",
          "mutatorName": "EqualityOperator",
          "replacement": "Component !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { InviteTheBotButtonProps } from '@/components/ui/cta/InviteTheBotButton';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FunctionComponent } from 'react';\n\nimport { useEffect, useState } from 'react';\n\n// https://v3.gatsbyjs.com/docs/mdx/importing-and-using-components/#lazy-loading-components\nconst MdxInviteTheBotButton: FunctionComponent<InviteTheBotButtonProps> = (props) => {\n  const placeholder = <div className=\"min-h-[40px]\" />;\n  const [Component, setComponent] = useState<MaybeNull<FunctionComponent<InviteTheBotButtonProps>>>(null);\n  useEffect(() => {\n    // eslint-disable-next-line promise/catch-or-return\n    import('@/components/ui/cta/InviteTheBotButton').then((component) => setComponent(() => component.default));\n  }, []);\n  if (Component === null) return placeholder;\n  return <Component {...props} />;\n};\n\nexport default MdxInviteTheBotButton;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/cta/MdxSignupButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2849",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 74,
              "line": 14
            }
          }
        },
        {
          "id": "2850",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 19,
              "line": 17
            }
          }
        },
        {
          "id": "2851",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 19
            }
          }
        },
        {
          "id": "2852",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 19
            },
            "start": {
              "column": 53,
              "line": 19
            }
          }
        },
        {
          "id": "2853",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 19
            },
            "start": {
              "column": 81,
              "line": 19
            }
          }
        },
        {
          "id": "2854",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 20
            },
            "start": {
              "column": 6,
              "line": 20
            }
          }
        },
        {
          "id": "2855",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "2856",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "2857",
          "mutatorName": "EqualityOperator",
          "replacement": "Component !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FunctionComponent } from 'react';\n\nimport { useEffect, useState } from 'react';\n\nimport type { SignUpButtonProps } from './SignupButton';\n\n// https://v3.gatsbyjs.com/docs/mdx/importing-and-using-components/#lazy-loading-components\nconst MdxSignupButton: FunctionComponent<SignUpButtonProps> = (props) => {\n  const placeholder = <div className=\"min-h-[44px]\" />;\n  const [Component, setComponent] = useState<MaybeNull<FunctionComponent<SignUpButtonProps>>>(null);\n  useEffect(() => {\n    // eslint-disable-next-line promise/catch-or-return\n    import('@/components/ui/cta/SignupButton').then((component) => setComponent(() => component.default));\n  }, []);\n  if (Component === null) return placeholder;\n  return <Component {...props} />;\n};\n\nexport default MdxSignupButton;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/cta/SignupButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2858",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 66,
              "line": 18
            }
          }
        },
        {
          "id": "2859",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 23
            },
            "start": {
              "column": 22,
              "line": 23
            }
          }
        },
        {
          "id": "2860",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 23
            },
            "start": {
              "column": 35,
              "line": 23
            }
          }
        },
        {
          "id": "2861",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 23
            },
            "start": {
              "column": 46,
              "line": 23
            }
          }
        },
        {
          "id": "2862",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 24
            },
            "start": {
              "column": 27,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { Button } from '@/components/ui/Button';\nimport { useScopedI18n } from '@/i18n/client';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { signIn } from 'next-auth/react';\nimport { i18ns } from '##/config/i18n';\nimport { capitalize } from '@/lib/str';\n\nexport interface SignUpButtonProps {}\n\nconst SignupButton: FunctionComponent<SignUpButtonProps> = () => {\n  const scopedT = useScopedI18n(i18ns.auth);\n  const className = BUTTON_CONFIG.CLASSNAME;\n\n  return (\n    <Button onClick={() => signIn('discord', { callbackUrl: ROUTES_ROOTS.DASHBOARD })} className={className} size=\"lg\">\n      {capitalize(scopedT('signup'))}\n    </Button>\n  );\n};\n\nexport default SignupButton;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/helpers/PaginatedElements/constants.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2863",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 4
            },
            "start": {
              "column": 25,
              "line": 4
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nexport const PAGE_KEY = 'page';\nexport const FIRST_PAGE_PARAM = 1;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/helpers/PaginatedElements/functions/client.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2864",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(67,54): error TS2345: Argument of type 'void' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(92,74): error TS2345: Argument of type 'void' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(112,63): error TS2345: Argument of type 'void' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(126,79): error TS2345: Argument of type 'void' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["54", "55", "56"],
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 139,
              "line": 8
            }
          }
        },
        {
          "id": "2865",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(7) }, { …(7) } ] to strictly equal [ { tagsIndexes: [ +0, 1, 3 ], …(6) } ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["55"],
          "coveredBy": ["54", "55", "56"],
          "location": {
            "end": {
              "column": 33,
              "line": 11
            },
            "start": {
              "column": 5,
              "line": 11
            }
          }
        },
        {
          "id": "2866",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [] to strictly equal [ { …(7) }, { …(7) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["54"],
          "coveredBy": ["54", "55", "56"],
          "location": {
            "end": {
              "column": 33,
              "line": 11
            },
            "start": {
              "column": 5,
              "line": 11
            }
          }
        },
        {
          "id": "2867",
          "mutatorName": "EqualityOperator",
          "replacement": "selectedTagsIds.length !== 0",
          "statusReason": "expected [] to strictly equal [ { …(7) }, { …(7) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["54"],
          "coveredBy": ["54", "55", "56"],
          "location": {
            "end": {
              "column": 33,
              "line": 11
            },
            "start": {
              "column": 5,
              "line": 11
            }
          }
        },
        {
          "id": "2868",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "statusReason": "expected [ { …(7) }, { …(7) } ] to strictly equal [ { tagsIndexes: [ +0, 1, 3 ], …(6) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["55"],
          "coveredBy": ["55", "56"],
          "location": {
            "end": {
              "column": 108,
              "line": 13
            },
            "start": {
              "column": 9,
              "line": 13
            }
          }
        },
        {
          "id": "2869",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected [] to strictly equal [ { tagsIndexes: [ +0, 1, 3 ], …(6) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["55"],
          "coveredBy": ["55", "56"],
          "location": {
            "end": {
              "column": 107,
              "line": 13
            },
            "start": {
              "column": 32,
              "line": 13
            }
          }
        },
        {
          "id": "2870",
          "mutatorName": "MethodExpression",
          "replacement": "post.tagsIndexes.every(tagId => selectedTagsIds.includes(tagId))",
          "statusReason": "expected [ { …(7) } ] to strictly equal [ { tagsIndexes: [ +0, 1, 3 ], …(6) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["55"],
          "coveredBy": ["55", "56"],
          "location": {
            "end": {
              "column": 107,
              "line": 13
            },
            "start": {
              "column": 42,
              "line": 13
            }
          }
        },
        {
          "id": "2871",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected [] to strictly equal [ { tagsIndexes: [ +0, 1, 3 ], …(6) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["55"],
          "coveredBy": ["55", "56"],
          "location": {
            "end": {
              "column": 106,
              "line": 13
            },
            "start": {
              "column": 64,
              "line": 13
            }
          }
        },
        {
          "id": "2872",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/client.tsx(29,116): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/components/ui/helpers/PaginatedElements/functions/client.tsx(29,121): error TS7006: Parameter 'post' implicitly has an 'any' type.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(94,62): error TS2345: Argument of type 'void' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(115,64): error TS2345: Argument of type 'void' is not assignable to parameter of type 'BlogPostPreviewComponentWithMetadatas[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["57", "58", "59", "60"],
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 3,
              "line": 22
            }
          }
        },
        {
          "id": "2873",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/client.tsx(25,58): error TS2345: Argument of type '(post1: BlogPostPreviewComponentWithMetadatas, post2: BlogPostPreviewComponentWithMetadatas) => undefined' is not assignable to parameter of type '(a: BlogPostPreviewComponentWithMetadatas, b: BlogPostPreviewComponentWithMetadatas) => number'.\n  Type 'undefined' is not assignable to type 'number'.\nsrc/components/ui/helpers/PaginatedElements/functions/client.tsx(25,89): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["57", "58", "59", "60"],
          "location": {
            "end": {
              "column": 55,
              "line": 24
            },
            "start": {
              "column": 24,
              "line": 23
            }
          }
        },
        {
          "id": "2874",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/client.tsx(26,58): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type '(a: BlogPostPreviewComponentWithMetadatas, b: BlogPostPreviewComponentWithMetadatas) => number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["57", "58", "59", "60"],
          "location": {
            "end": {
              "column": 102,
              "line": 26
            },
            "start": {
              "column": 58,
              "line": 26
            }
          }
        },
        {
          "id": "2875",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(72,37): error TS2345: Argument of type 'void' is not assignable to parameter of type 'unknown[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(76,30): error TS2322: Type 'void' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(87,82): error TS2345: Argument of type 'void' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(106,82): error TS2345: Argument of type 'void' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(127,87): error TS2345: Argument of type 'void' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(186,42): error TS2339: Property 'length' does not exist on type 'void'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(204,42): error TS2339: Property 'length' does not exist on type 'void'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["59", "60"],
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 3,
              "line": 34
            }
          }
        },
        {
          "id": "2876",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(76,30): error TS2322: Type 'undefined[]' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n  Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(87,82): error TS2345: Argument of type 'undefined[]' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(106,82): error TS2345: Argument of type 'undefined[]' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(127,87): error TS2345: Argument of type 'undefined[]' is not assignable to parameter of type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["59", "60"],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 120,
              "line": 35
            }
          }
        },
        {
          "id": "2877",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.client.test.ts(139,33): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.client.test.ts(140,33): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.client.test.ts(141,33): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(173,47): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 43
            },
            "start": {
              "column": 37,
              "line": 43
            }
          }
        },
        {
          "id": "2878",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["52"],
          "coveredBy": ["52"],
          "location": {
            "end": {
              "column": 134,
              "line": 43
            },
            "start": {
              "column": 108,
              "line": 43
            }
          }
        },
        {
          "id": "2879",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["52"],
          "coveredBy": ["52"],
          "location": {
            "end": {
              "column": 134,
              "line": 43
            },
            "start": {
              "column": 108,
              "line": 43
            }
          }
        },
        {
          "id": "2880",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection.length >= 1",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["52"],
          "coveredBy": ["52"],
          "location": {
            "end": {
              "column": 134,
              "line": 43
            },
            "start": {
              "column": 108,
              "line": 43
            }
          }
        },
        {
          "id": "2881",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection.length <= 1",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["52"],
          "coveredBy": ["52"],
          "location": {
            "end": {
              "column": 134,
              "line": 43
            },
            "start": {
              "column": 108,
              "line": 43
            }
          }
        },
        {
          "id": "2882",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.client.test.ts(148,36): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.client.test.ts(150,36): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.client.test.ts(152,36): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(174,53): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 46
            },
            "start": {
              "column": 40,
              "line": 46
            }
          }
        },
        {
          "id": "2883",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["53"],
          "coveredBy": ["53"],
          "location": {
            "end": {
              "column": 91,
              "line": 46
            },
            "start": {
              "column": 76,
              "line": 46
            }
          }
        },
        {
          "id": "2884",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["53"],
          "coveredBy": ["53"],
          "location": {
            "end": {
              "column": 91,
              "line": 46
            },
            "start": {
              "column": 76,
              "line": 46
            }
          }
        },
        {
          "id": "2885",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount >= 1",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["53"],
          "coveredBy": ["53"],
          "location": {
            "end": {
              "column": 91,
              "line": 46
            },
            "start": {
              "column": 76,
              "line": 46
            }
          }
        },
        {
          "id": "2886",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount <= 1",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["53"],
          "coveredBy": ["53"],
          "location": {
            "end": {
              "column": 91,
              "line": 46
            },
            "start": {
              "column": 76,
              "line": 46
            }
          }
        }
      ],
      "source": "import type { BlogPostPreviewComponentWithMetadatas, BlogTagId } from '@/types/Blog';\nimport type { Quantity, Index, Score } from '@rtm/shared-types/Numbers';\nimport type { FiltersAssoc } from '@/config/Blog/client';\n\nimport BlogConfigClient from '@/config/Blog/client';\nimport { Fragment } from 'react';\n\nexport function doGetMaybeFilteredPostsCollection(selectedTagsIds: BlogTagId[], postsCollection: BlogPostPreviewComponentWithMetadatas[]) {\n  const maybeFilteredPostsCollection =\n    // eslint-disable-next-line no-magic-numbers\n    selectedTagsIds.length === 0\n      ? postsCollection\n      : postsCollection.filter((post) => post.tagsIndexes.some((tagId) => selectedTagsIds.includes(tagId)));\n\n  return maybeFilteredPostsCollection;\n}\n\nexport function getSortedPostsCollection(\n  filterFunIndex: Index,\n  maybeFilteredPostsCollection: BlogPostPreviewComponentWithMetadatas[],\n  __filtersAssoc: FiltersAssoc = BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE\n) {\n  const getSortScore = (post1: BlogPostPreviewComponentWithMetadatas, post2: BlogPostPreviewComponentWithMetadatas): Score =>\n    __filtersAssoc[filterFunIndex].score(post1, post2);\n\n  const toSorted = maybeFilteredPostsCollection.toSorted((post1, post2) => getSortScore(post1, post2));\n  return toSorted;\n}\n\nexport function doComputePaginatedElements(\n  filterFunIndex: Index,\n  maybeFilteredPostsCollection: BlogPostPreviewComponentWithMetadatas[],\n  __filtersAssoc: FiltersAssoc = BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE\n) {\n  const paginatedElements = getSortedPostsCollection(filterFunIndex, maybeFilteredPostsCollection, __filtersAssoc).map((post) => (\n    <Fragment key={post._id}>{post.blogPostPreviewComp}</Fragment>\n  ));\n\n  return paginatedElements;\n}\n\n// eslint-disable-next-line no-magic-numbers\nexport const shouldShowTopToolbar = (postsCollection: BlogPostPreviewComponentWithMetadatas[]): boolean => postsCollection.length > 1;\n\n// eslint-disable-next-line no-magic-numbers\nexport const shouldShowBottomToolbar = (pagesAmount: Quantity): boolean => pagesAmount > 1;\n"
    },
    "src/components/ui/helpers/PaginatedElements/functions/paginatedElements.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2887",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/paginatedElements.ts(5,102): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["306", "307", "309", "310", "311"],
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 116,
              "line": 5
            }
          }
        },
        {
          "id": "2888",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Math.max(0, page - 1) / elementsPerPage",
          "statusReason": "expected [ { …(9) }, { …(9) }, { …(9) }, …(7) ] to strictly equal [ { …(9) }, { …(9) }, { …(9) }, …(7) ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["307"],
          "coveredBy": ["306", "307", "309", "310", "311"],
          "location": {
            "end": {
              "column": 61,
              "line": 7
            },
            "start": {
              "column": 22,
              "line": 7
            }
          }
        },
        {
          "id": "2889",
          "mutatorName": "MethodExpression",
          "replacement": "Math.min(0, page - 1)",
          "statusReason": "expected [ { …(9) }, { …(9) }, { …(9) }, …(7) ] to strictly equal [ { …(9) }, { …(9) }, { …(9) }, …(7) ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["307"],
          "coveredBy": ["306", "307", "309", "310", "311"],
          "location": {
            "end": {
              "column": 43,
              "line": 7
            },
            "start": {
              "column": 22,
              "line": 7
            }
          }
        },
        {
          "id": "2890",
          "mutatorName": "ArithmeticOperator",
          "replacement": "page + 1",
          "statusReason": "expected [ { …(9) }, { …(9) }, { …(9) }, …(7) ] to strictly equal [ { …(9) }, { …(9) }, { …(9) }, …(7) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["306"],
          "coveredBy": ["306", "307", "309", "310", "311"],
          "location": {
            "end": {
              "column": 42,
              "line": 7
            },
            "start": {
              "column": 34,
              "line": 7
            }
          }
        },
        {
          "id": "2891",
          "mutatorName": "ArithmeticOperator",
          "replacement": "startIndex - elementsPerPage",
          "statusReason": "expected [ { …(9) }, { …(9) }, { …(9) }, …(87) ] to strictly equal [ { …(9) }, { …(9) }, { …(9) }, …(7) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["306"],
          "coveredBy": ["306", "307", "309", "310", "311"],
          "location": {
            "end": {
              "column": 48,
              "line": 8
            },
            "start": {
              "column": 20,
              "line": 8
            }
          }
        },
        {
          "id": "2892",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/paginatedElements.ts(10,3): error TS2322: Type '[]' is not assignable to type '[number, number]'.\n  Source has 0 element(s) but target requires 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["306", "307", "309", "310", "311"],
          "location": {
            "end": {
              "column": 32,
              "line": 10
            },
            "start": {
              "column": 10,
              "line": 10
            }
          }
        },
        {
          "id": "2893",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/paginatedElements.ts(13,126): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["306", "307", "308", "309", "310", "311"],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 141,
              "line": 13
            }
          }
        },
        {
          "id": "2894",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "2895",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "2896",
          "mutatorName": "EqualityOperator",
          "replacement": "paginatedElements.length < elementsPerPage",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "2897",
          "mutatorName": "EqualityOperator",
          "replacement": "paginatedElements.length > elementsPerPage",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "2898",
          "mutatorName": "MethodExpression",
          "replacement": "paginatedElements",
          "statusReason": "expected [ { …(9) }, { …(9) }, { …(9) }, …(97) ] to strictly equal [ { …(9) }, { …(9) }, { …(9) }, …(7) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["306"],
          "coveredBy": ["306", "307", "309", "310", "311"],
          "location": {
            "end": {
              "column": 69,
              "line": 18
            },
            "start": {
              "column": 24,
              "line": 18
            }
          }
        }
      ],
      "source": "import type { Quantity, Count, Index } from '@rtm/shared-types/Numbers';\nimport type { Couple } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { ReactElement } from 'react';\n\nfunction getPaginatedElementsCurrentSliceStartAndEndIndexes(page: Count, elementsPerPage: Quantity): Couple<Index> {\n  // eslint-disable-next-line no-magic-numbers\n  const startIndex = Math.max(0, page - 1) * elementsPerPage;\n  const endIndex = startIndex + elementsPerPage;\n\n  return [startIndex, endIndex];\n}\n\nexport function getPaginatedElementsCurrentSlice(page: Count, elementsPerPage: Quantity, paginatedElements: ReactElement[]): ReactElement[] {\n  // Stryker Workaround 1. Pointless mutant, just a minor optimization.\n  // Stryker disable next-line EqualityOperator,ConditionalExpression\n  if (paginatedElements.length <= elementsPerPage) return paginatedElements;\n  const [startIndex, endIndex] = getPaginatedElementsCurrentSliceStartAndEndIndexes(page, elementsPerPage);\n  const currentSlice = paginatedElements.slice(startIndex, endIndex);\n\n  return currentSlice;\n}\n"
    },
    "src/components/ui/helpers/PaginatedElements/functions/pagination.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2899",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(76,102): error TS2322: Type 'void' is not assignable to type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(87,52): error TS2345: Argument of type 'void' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(106,52): error TS2345: Argument of type 'void' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(127,57): error TS2345: Argument of type 'void' is not assignable to parameter of type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(170,5): error TS2322: Type 'void' is not assignable to type 'MaybeNull<number>'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(190,11): error TS2322: Type 'void' is not assignable to type 'number'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts/Client.tsx(208,11): error TS2322: Type 'void' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["352", "353", "354", "355", "356"],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 105,
              "line": 8
            }
          }
        },
        {
          "id": "2900",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 12
            },
            "start": {
              "column": 29,
              "line": 12
            }
          }
        },
        {
          "id": "2901",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 12
            },
            "start": {
              "column": 29,
              "line": 12
            }
          }
        },
        {
          "id": "2902",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeUnsafePageFromUrl !== null",
          "statusReason": "expected 1 to be 8 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["352"],
          "coveredBy": ["352", "353", "354", "355", "356"],
          "location": {
            "end": {
              "column": 60,
              "line": 12
            },
            "start": {
              "column": 29,
              "line": 12
            }
          }
        },
        {
          "id": "2903",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 1 to be 8 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["352"],
          "coveredBy": ["352", "353", "354", "355", "356"],
          "location": {
            "end": {
              "column": 31,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "2904",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected NaN to be 1 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["355"],
          "coveredBy": ["352", "353", "354", "355", "356"],
          "location": {
            "end": {
              "column": 31,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "2905",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 1 to be 8 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["352"],
          "coveredBy": ["352", "353", "354", "356"],
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "2906",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected -4 to be 1 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["353"],
          "coveredBy": ["352", "353", "354", "356"],
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "2907",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafePageFromUrl <= FIRST_PAGE_PARAM",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "2908",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafePageFromUrl >= FIRST_PAGE_PARAM",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "2909",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 10 to be 8 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["352"],
          "coveredBy": ["352", "354", "356"],
          "location": {
            "end": {
              "column": 34,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "2910",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 11 to be 10 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["356"],
          "coveredBy": ["352", "354", "356"],
          "location": {
            "end": {
              "column": 34,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "2911",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafePageFromUrl >= maxPage",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "2912",
          "mutatorName": "EqualityOperator",
          "replacement": "unsafePageFromUrl <= maxPage",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "2913",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/pagination.ts(18,106): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["61", "62", "63"],
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 112,
              "line": 24
            }
          }
        },
        {
          "id": "2914",
          "mutatorName": "MethodExpression",
          "replacement": "Math.min(0, paginatedElementIndex)",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63"],
          "location": {
            "end": {
              "column": 67,
              "line": 26
            },
            "start": {
              "column": 33,
              "line": 26
            }
          }
        },
        {
          "id": "2915",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Math.trunc(sanitizedIndex / elementsPerPage) - 1",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63"],
          "location": {
            "end": {
              "column": 80,
              "line": 29
            },
            "start": {
              "column": 32,
              "line": 29
            }
          }
        },
        {
          "id": "2916",
          "mutatorName": "ArithmeticOperator",
          "replacement": "sanitizedIndex * elementsPerPage",
          "statusReason": "expected 9 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63"],
          "location": {
            "end": {
              "column": 75,
              "line": 29
            },
            "start": {
              "column": 43,
              "line": 29
            }
          }
        },
        {
          "id": "2917",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/pagination.ts(37,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 15,
              "line": 37
            }
          }
        },
        {
          "id": "2918",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 4,
              "line": 46
            },
            "start": {
              "column": 37,
              "line": 38
            }
          }
        },
        {
          "id": "2919",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 122,
              "line": 40
            },
            "start": {
              "column": 93,
              "line": 40
            }
          }
        },
        {
          "id": "2920",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 122,
              "line": 40
            },
            "start": {
              "column": 103,
              "line": 40
            }
          }
        },
        {
          "id": "2921",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 122,
              "line": 40
            },
            "start": {
              "column": 103,
              "line": 40
            }
          }
        },
        {
          "id": "2922",
          "mutatorName": "EqualityOperator",
          "replacement": "post._id !== postId",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 122,
              "line": 40
            },
            "start": {
              "column": 103,
              "line": 40
            }
          }
        },
        {
          "id": "2923",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 44
            },
            "start": {
              "column": 9,
              "line": 44
            }
          }
        },
        {
          "id": "2924",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 44
            },
            "start": {
              "column": 9,
              "line": 44
            }
          }
        },
        {
          "id": "2925",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeFirstCommonElementIndex === -1",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 44,
              "line": 44
            },
            "start": {
              "column": 9,
              "line": 44
            }
          }
        },
        {
          "id": "2926",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 44
            },
            "start": {
              "column": 42,
              "line": 44
            }
          }
        },
        {
          "id": "2927",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 50
            },
            "start": {
              "column": 10,
              "line": 50
            }
          }
        },
        {
          "id": "2928",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/helpers/PaginatedElements/functions/pagination.ts(59,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 2,
              "line": 70
            },
            "start": {
              "column": 10,
              "line": 59
            }
          }
        },
        {
          "id": "2929",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 65
            },
            "start": {
              "column": 7,
              "line": 65
            }
          }
        },
        {
          "id": "2930",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 65
            },
            "start": {
              "column": 7,
              "line": 65
            }
          }
        },
        {
          "id": "2931",
          "mutatorName": "EqualityOperator",
          "replacement": "commonElementIndex !== -1",
          "statusReason": "expected 1 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 32,
              "line": 65
            },
            "start": {
              "column": 7,
              "line": 65
            }
          }
        },
        {
          "id": "2932",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "status": "Survived",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [],
          "coveredBy": ["61", "62", "63", "64"],
          "location": {
            "end": {
              "column": 32,
              "line": 65
            },
            "start": {
              "column": 30,
              "line": 65
            }
          }
        }
      ],
      "source": "import type { Quantity, Count, Index, Limit } from '@rtm/shared-types/Numbers';\nimport type { BlogPostPreviewComponentWithMetadatas } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { ReactElementKey } from '@rtm/shared-types/React';\n\nimport { FIRST_PAGE_PARAM } from '../constants';\n\nexport function getSanitizedCurrentPage(searchParams: URLSearchParams, maxPage: Limit, pageKey: string) {\n  const maybeUnsafePageFromUrl: MaybeNull<string> = searchParams.get(pageKey);\n  // Stryker Workaround 1. Pointless mutant\n  // Stryker disable next-line ConditionalExpression\n  const unsafePageFromUrl = maybeUnsafePageFromUrl === null ? FIRST_PAGE_PARAM : Number(maybeUnsafePageFromUrl);\n\n  if (isNaN(unsafePageFromUrl)) return FIRST_PAGE_PARAM;\n  // Stryker Workaround 2. Pointless mutant\n  // Stryker disable next-line EqualityOperator\n  if (unsafePageFromUrl < FIRST_PAGE_PARAM) return FIRST_PAGE_PARAM;\n  // Stryker Workaround 3. Pointless mutant\n  // Stryker disable next-line EqualityOperator\n  if (unsafePageFromUrl > maxPage) return maxPage;\n  return unsafePageFromUrl;\n}\n\nfunction findPageNumberByPaginatedElementIndex(paginatedElementIndex: Index, elementsPerPage: Quantity): Count {\n  // eslint-disable-next-line no-magic-numbers\n  const sanitizedIndex: Index = Math.max(0, paginatedElementIndex);\n\n  // eslint-disable-next-line no-magic-numbers\n  const retrievedPage: Count = Math.trunc(sanitizedIndex / elementsPerPage) + 1;\n  return retrievedPage;\n}\n\nfunction findFirstCommonElementIndex(\n  oldSliceIds: ReactElementKey[],\n  maybeFilteredPostsCollection: BlogPostPreviewComponentWithMetadatas[]\n  // eslint-disable-next-line no-magic-numbers\n): Index | -1 {\n  for (const postId of oldSliceIds) {\n    // eslint-disable-next-line no-magic-numbers\n    const maybeFirstCommonElementIndex: Index | -1 = maybeFilteredPostsCollection.findIndex((post) => post._id === postId);\n    /* eslint-disable no-magic-numbers */\n    // Stryker Workaround 4. Pointless mutant\n    // Stryker disable next-line ConditionalExpression,UnaryOperator\n    if (maybeFirstCommonElementIndex !== -1) return maybeFirstCommonElementIndex;\n    /* eslint-enable no-magic-numbers */\n  }\n  /* eslint-disable no-magic-numbers */\n  // Stryker Workaround 5. Pointless mutant\n  // Stryker disable next-line UnaryOperator\n  return -1;\n  /* eslint-enable no-magic-numbers */\n}\n\nexport function computeReconciliatedPageIndex(\n  oldSliceIds: ReactElementKey[],\n  maybeFilteredPostsCollection: BlogPostPreviewComponentWithMetadatas[],\n  elementsPerPage: Quantity\n  // eslint-disable-next-line no-magic-numbers\n): Index {\n  const commonElementIndex = findFirstCommonElementIndex(oldSliceIds, maybeFilteredPostsCollection);\n\n  /* eslint-disable no-magic-numbers */\n  // Stryker Workaround 6. Pointless mutant\n  // Stryker disable next-line ConditionalExpression\n  if (commonElementIndex === -1) return FIRST_PAGE_PARAM;\n  /* eslint-enable no-magic-numbers */\n\n  const newPage = findPageNumberByPaginatedElementIndex(commonElementIndex, elementsPerPage);\n  return newPage;\n}\n"
    },
    "src/components/ui/hoc/NavbarElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2933",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 62,
              "line": 13
            }
          }
        }
      ],
      "source": "import type { NavbarElementProps as NavbarElementPropsBase } from '@/types/NavData';\nimport type { FunctionComponent } from 'react';\n\nimport NavbarDropdown from '@/components/layouts/navbar/NavbarDropdown';\nimport NavbarButton from '@/components/layouts/navbar/NavbarButton';\n\ninterface NavbarElementProps extends NavbarElementPropsBase {}\n\n/**\n * @hoc\n * @generator NavbarDropdown?, NavbarButton?\n */\nconst NavbarElement: FunctionComponent<NavbarElementProps> = ({ embeddedEntities, i18nTitle, path }) =>\n  embeddedEntities ? (\n    <NavbarDropdown embeddedEntities={embeddedEntities} i18nTitle={i18nTitle} path={path} />\n  ) : (\n    <NavbarButton i18nTitle={i18nTitle} path={path} />\n  );\n\nexport default NavbarElement;\n"
    },
    "src/components/ui/hoc/UserImage.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2934",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 37
            },
            "start": {
              "column": 119,
              "line": 22
            }
          }
        },
        {
          "id": "2935",
          "mutatorName": "LogicalOperator",
          "replacement": "user?.image && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 23
            },
            "start": {
              "column": 15,
              "line": 23
            }
          }
        },
        {
          "id": "2936",
          "mutatorName": "OptionalChaining",
          "replacement": "user.image",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 23
            },
            "start": {
              "column": 15,
              "line": 23
            }
          }
        },
        {
          "id": "2937",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 23
            },
            "start": {
              "column": 30,
              "line": 23
            }
          }
        },
        {
          "id": "2938",
          "mutatorName": "BooleanLiteral",
          "replacement": "src",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 11,
              "line": 24
            },
            "start": {
              "column": 7,
              "line": 24
            }
          }
        },
        {
          "id": "2939",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 11,
              "line": 24
            },
            "start": {
              "column": 7,
              "line": 24
            }
          }
        },
        {
          "id": "2940",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 11,
              "line": 24
            },
            "start": {
              "column": 7,
              "line": 24
            }
          }
        },
        {
          "id": "2941",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 26
            },
            "start": {
              "column": 32,
              "line": 26
            }
          }
        },
        {
          "id": "2942",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 27
            },
            "start": {
              "column": 30,
              "line": 27
            }
          }
        },
        {
          "id": "2943",
          "mutatorName": "LogicalOperator",
          "replacement": "user?.name && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 28
            },
            "start": {
              "column": 15,
              "line": 28
            }
          }
        },
        {
          "id": "2944",
          "mutatorName": "OptionalChaining",
          "replacement": "user.name",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 28
            },
            "start": {
              "column": 15,
              "line": 28
            }
          }
        },
        {
          "id": "2945",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 28
            },
            "start": {
              "column": 29,
              "line": 28
            }
          }
        },
        {
          "id": "2946",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 29
            },
            "start": {
              "column": 32,
              "line": 29
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { FunctionComponent, CSSProperties } from 'react';\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { PxValue } from '@rtm/shared-types/Numbers';\nimport type { User } from '@rtm/shared-types/Auth';\n\nimport { AvatarFallback, AvatarImage, Avatar } from '@/components/ui/Avatar';\n\ninterface UserImageProps extends Partial<WithClassname> {\n  height: PxValue;\n  width: PxValue;\n  user: User;\n}\n\n/**\n * @hoc\n * @implements {User} image, name\n * @extends {Avatar}\n */\nconst UserImage: FunctionComponent<UserImageProps> = ({ height: heightValue, width: widthValue, className, user }) => {\n  const src = user?.image ?? '';\n  if (!src) return null;\n\n  const height = heightValue + 'px';\n  const width = widthValue + 'px';\n  const alt = user?.name ?? '';\n  const style: CSSProperties = { height, width };\n\n  return (\n    <Avatar className={className} style={style}>\n      <AvatarImage height={height} width={width} src={src} alt={alt} />\n      <AvatarFallback className=\"sr-only\">{alt}</AvatarFallback>\n    </Avatar>\n  );\n};\n\nexport default UserImage;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/misc/GoToTopButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2947",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(27,7): error TS2322: Type '({ scrollYthreshold: scrollYthresholdValue }: GoToTopButtonProps) => void' is not assignable to type 'FunctionComponent<GoToTopButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 134
            },
            "start": {
              "column": 111,
              "line": 27
            }
          }
        },
        {
          "id": "2948",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 28
            },
            "start": {
              "column": 51,
              "line": 28
            }
          }
        },
        {
          "id": "2949",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 32
            },
            "start": {
              "column": 52,
              "line": 32
            }
          }
        },
        {
          "id": "2950",
          "mutatorName": "LogicalOperator",
          "replacement": "scrollYthresholdValue && SCROLL_Y_THRESHOLD_DEFAULT",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(33,44): error TS2769: No overload matches this call.\n  Overload 1 of 3, '(initialValue: number): MutableRefObject<number>', gave the following error.\n    Argument of type 'number | undefined' is not assignable to parameter of type 'number'.\n      Type 'undefined' is not assignable to type 'number'.\n  Overload 2 of 3, '(initialValue: number | null): RefObject<number>', gave the following error.\n    Argument of type '0 | 400 | undefined' is not assignable to parameter of type 'number | null'.\n      Type 'undefined' is not assignable to type 'number | null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 95,
              "line": 33
            },
            "start": {
              "column": 44,
              "line": 33
            }
          }
        },
        {
          "id": "2951",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(35,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"brand-logo\" | \"sort-by\" | \"goToTop\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"brand-logo\" | \"sort-by\" | \"goToTop\"'.\n  Overload 2 of 2, '(key: \"brand-logo\" | \"sort-by\" | \"goToTop\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"brand-logo\" | \"sort-by\" | \"goToTop\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 35
            },
            "start": {
              "column": 29,
              "line": 35
            }
          }
        },
        {
          "id": "2952",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 43
            },
            "start": {
              "column": 39,
              "line": 37
            }
          }
        },
        {
          "id": "2953",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 38
            },
            "start": {
              "column": 40,
              "line": 38
            }
          }
        },
        {
          "id": "2954",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 42
            },
            "start": {
              "column": 21,
              "line": 39
            }
          }
        },
        {
          "id": "2955",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(40,7): error TS2322: Type '\"\"' is not assignable to type 'ScrollBehavior | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 40
            },
            "start": {
              "column": 17,
              "line": 40
            }
          }
        },
        {
          "id": "2956",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 43
            },
            "start": {
              "column": 6,
              "line": 43
            }
          }
        },
        {
          "id": "2957",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(45,41): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 59
            },
            "start": {
              "column": 52,
              "line": 45
            }
          }
        },
        {
          "id": "2958",
          "mutatorName": "ArithmeticOperator",
          "replacement": "window.scrollY - window.innerHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 47
            },
            "start": {
              "column": 39,
              "line": 47
            }
          }
        },
        {
          "id": "2959",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(56,35): error TS18047: 'maybeFooter' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 49
            },
            "start": {
              "column": 9,
              "line": 49
            }
          }
        },
        {
          "id": "2960",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 49
            },
            "start": {
              "column": 9,
              "line": 49
            }
          }
        },
        {
          "id": "2961",
          "mutatorName": "EqualityOperator",
          "replacement": "currentBottomPx > documentHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 49
            },
            "start": {
              "column": 9,
              "line": 49
            }
          }
        },
        {
          "id": "2962",
          "mutatorName": "EqualityOperator",
          "replacement": "currentBottomPx < documentHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 49
            },
            "start": {
              "column": 9,
              "line": 49
            }
          }
        },
        {
          "id": "2963",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 49
            },
            "start": {
              "column": 51,
              "line": 49
            }
          }
        },
        {
          "id": "2964",
          "mutatorName": "BooleanLiteral",
          "replacement": "maybeFooter",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(56,35): error TS18047: 'maybeFooter' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "2965",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(56,35): error TS18047: 'maybeFooter' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "2966",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(56,35): error TS18047: 'maybeFooter' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "2967",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 52
            },
            "start": {
              "column": 30,
              "line": 52
            }
          }
        },
        {
          "id": "2968",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentBottomPx + documentHeight",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 54
            },
            "start": {
              "column": 45,
              "line": 54
            }
          }
        },
        {
          "id": "2969",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 56
            },
            "start": {
              "column": 9,
              "line": 56
            }
          }
        },
        {
          "id": "2970",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 56
            },
            "start": {
              "column": 9,
              "line": 56
            }
          }
        },
        {
          "id": "2971",
          "mutatorName": "EqualityOperator",
          "replacement": "distanceFromPageBottom < maybeFooter.getBoundingClientRect().height",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 56
            },
            "start": {
              "column": 9,
              "line": 56
            }
          }
        },
        {
          "id": "2972",
          "mutatorName": "EqualityOperator",
          "replacement": "distanceFromPageBottom > maybeFooter.getBoundingClientRect().height",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 56
            },
            "start": {
              "column": 9,
              "line": 56
            }
          }
        },
        {
          "id": "2973",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 56
            },
            "start": {
              "column": 86,
              "line": 56
            }
          }
        },
        {
          "id": "2974",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 58
            },
            "start": {
              "column": 12,
              "line": 58
            }
          }
        },
        {
          "id": "2975",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 59
            },
            "start": {
              "column": 6,
              "line": 59
            }
          }
        },
        {
          "id": "2976",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 79
            },
            "start": {
              "column": 19,
              "line": 61
            }
          }
        },
        {
          "id": "2977",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 72
            },
            "start": {
              "column": 32,
              "line": 62
            }
          }
        },
        {
          "id": "2978",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 63
            },
            "start": {
              "column": 11,
              "line": 63
            }
          }
        },
        {
          "id": "2979",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 63
            },
            "start": {
              "column": 11,
              "line": 63
            }
          }
        },
        {
          "id": "2980",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "2981",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "2982",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 68
            },
            "start": {
              "column": 28,
              "line": 65
            }
          }
        },
        {
          "id": "2983",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 66
            },
            "start": {
              "column": 20,
              "line": 66
            }
          }
        },
        {
          "id": "2984",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 70
            },
            "start": {
              "column": 11,
              "line": 70
            }
          }
        },
        {
          "id": "2985",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 70
            },
            "start": {
              "column": 11,
              "line": 70
            }
          }
        },
        {
          "id": "2986",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY >= scrollYthreshold.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 70
            },
            "start": {
              "column": 11,
              "line": 70
            }
          }
        },
        {
          "id": "2987",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY <= scrollYthreshold.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 70
            },
            "start": {
              "column": 11,
              "line": 70
            }
          }
        },
        {
          "id": "2988",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 70
            },
            "start": {
              "column": 65,
              "line": 70
            }
          }
        },
        {
          "id": "2989",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 71
            },
            "start": {
              "column": 23,
              "line": 71
            }
          }
        },
        {
          "id": "2990",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 76
            },
            "start": {
              "column": 29,
              "line": 76
            }
          }
        },
        {
          "id": "2991",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 78
            },
            "start": {
              "column": 12,
              "line": 78
            }
          }
        },
        {
          "id": "2992",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 78
            },
            "start": {
              "column": 45,
              "line": 78
            }
          }
        },
        {
          "id": "2993",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 79
            },
            "start": {
              "column": 6,
              "line": 79
            }
          }
        },
        {
          "id": "2994",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 100
            },
            "start": {
              "column": 19,
              "line": 81
            }
          }
        },
        {
          "id": "2995",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 93
            },
            "start": {
              "column": 35,
              "line": 82
            }
          }
        },
        {
          "id": "2996",
          "mutatorName": "BooleanLiteral",
          "replacement": "skipUpdateUntilScrollEnd.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 83
            },
            "start": {
              "column": 11,
              "line": 83
            }
          }
        },
        {
          "id": "2997",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 83
            },
            "start": {
              "column": 11,
              "line": 83
            }
          }
        },
        {
          "id": "2998",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 83
            },
            "start": {
              "column": 11,
              "line": 83
            }
          }
        },
        {
          "id": "2999",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 84
            },
            "start": {
              "column": 42,
              "line": 84
            }
          }
        },
        {
          "id": "3000",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 86
            },
            "start": {
              "column": 11,
              "line": 86
            }
          }
        },
        {
          "id": "3001",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 86
            },
            "start": {
              "column": 11,
              "line": 86
            }
          }
        },
        {
          "id": "3002",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 89
            },
            "start": {
              "column": 28,
              "line": 86
            }
          }
        },
        {
          "id": "3003",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 87
            },
            "start": {
              "column": 20,
              "line": 87
            }
          }
        },
        {
          "id": "3004",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "3005",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "3006",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY >= scrollYthreshold.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "3007",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY <= scrollYthreshold.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "3008",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 91
            },
            "start": {
              "column": 65,
              "line": 91
            }
          }
        },
        {
          "id": "3009",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 92
            },
            "start": {
              "column": 23,
              "line": 92
            }
          }
        },
        {
          "id": "3010",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 95
            },
            "start": {
              "column": 29,
              "line": 95
            }
          }
        },
        {
          "id": "3011",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 99
            },
            "start": {
              "column": 18,
              "line": 97
            }
          }
        },
        {
          "id": "3012",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 98
            },
            "start": {
              "column": 34,
              "line": 98
            }
          }
        },
        {
          "id": "3013",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 100
            },
            "start": {
              "column": 6,
              "line": 100
            }
          }
        },
        {
          "id": "3014",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 104
            },
            "start": {
              "column": 19,
              "line": 102
            }
          }
        },
        {
          "id": "3015",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 103
            },
            "start": {
              "column": 16,
              "line": 103
            }
          }
        },
        {
          "id": "3016",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 103
            },
            "start": {
              "column": 16,
              "line": 103
            }
          }
        },
        {
          "id": "3017",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY >= scrollYthreshold.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 103
            },
            "start": {
              "column": 16,
              "line": 103
            }
          }
        },
        {
          "id": "3018",
          "mutatorName": "EqualityOperator",
          "replacement": "window.scrollY <= scrollYthreshold.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 103
            },
            "start": {
              "column": 16,
              "line": 103
            }
          }
        },
        {
          "id": "3019",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 104
            },
            "start": {
              "column": 6,
              "line": 104
            }
          }
        },
        {
          "id": "3020",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 117
            },
            "start": {
              "column": 19,
              "line": 106
            }
          }
        },
        {
          "id": "3021",
          "mutatorName": "BooleanLiteral",
          "replacement": "btnInstance",
          "statusReason": "src/components/ui/misc/GoToTopButton.tsx(111,19): error TS2339: Property 'style' does not exist on type 'never'.\nsrc/components/ui/misc/GoToTopButton.tsx(115,35): error TS2339: Property 'getBoundingClientRect' does not exist on type 'never'.\nsrc/components/ui/misc/GoToTopButton.tsx(116,17): error TS2339: Property 'style' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 108
            },
            "start": {
              "column": 9,
              "line": 108
            }
          }
        },
        {
          "id": "3022",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 108
            },
            "start": {
              "column": 9,
              "line": 108
            }
          }
        },
        {
          "id": "3023",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 108
            },
            "start": {
              "column": 9,
              "line": 108
            }
          }
        },
        {
          "id": "3024",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 110
            },
            "start": {
              "column": 9,
              "line": 110
            }
          }
        },
        {
          "id": "3025",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 110
            },
            "start": {
              "column": 9,
              "line": 110
            }
          }
        },
        {
          "id": "3026",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 113
            },
            "start": {
              "column": 18,
              "line": 110
            }
          }
        },
        {
          "id": "3027",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 111
            },
            "start": {
              "column": 37,
              "line": 111
            }
          }
        },
        {
          "id": "3028",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 116
            },
            "start": {
              "column": 35,
              "line": 116
            }
          }
        },
        {
          "id": "3029",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 117
            },
            "start": {
              "column": 6,
              "line": 117
            }
          }
        },
        {
          "id": "3030",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 153,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "3031",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 123
            },
            "start": {
              "column": 9,
              "line": 123
            }
          }
        },
        {
          "id": "3032",
          "mutatorName": "BooleanLiteral",
          "replacement": "isShown",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 126
            },
            "start": {
              "column": 20,
              "line": 126
            }
          }
        },
        {
          "id": "3033",
          "mutatorName": "BooleanLiteral",
          "replacement": "isShown",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 128
            },
            "start": {
              "column": 17,
              "line": 128
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { PxValue } from '@rtm/shared-types/Numbers';\nimport type { FunctionComponent } from 'react';\n\nimport { APPROX_120_FPS_THROTTLE_TIMING_IN_MS } from '@/config/throttling';\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { ArrowUpIcon } from '@radix-ui/react-icons';\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport { getFooter } from '@/lib/html';\nimport { cn } from '@/lib/tailwind';\nimport throttle from 'throttleit';\n\n// {ToDo} Remove this if, one day, this bug is fixed: https://bugs.webkit.org/show_bug.cgi?id=201556\n// https://github.com/argyleink/scrollyfills?tab=readme-ov-file#polyfills\n// eslint-disable-next-line import/no-extraneous-dependencies\nrequire('scrollyfills').scrollend;\n\nexport interface GoToTopButtonProps {\n  scrollYthreshold?: PxValue;\n}\n\nconst SCROLL_Y_THRESHOLD_DEFAULT = 400;\n\nconst GoToTopButton: FunctionComponent<GoToTopButtonProps> = ({ scrollYthreshold: scrollYthresholdValue }) => {\n  const [isShown, setIsShown] = useState<boolean>(false);\n  const scopedT = useScopedI18n(i18ns.srOnly);\n\n  const btnRef = useRef<HTMLButtonElement>(null);\n  const skipUpdateUntilScrollEnd = useRef<boolean>(false);\n  const scrollYthreshold = useRef<PxValue>(scrollYthresholdValue ?? SCROLL_Y_THRESHOLD_DEFAULT);\n\n  const ariaLabel = scopedT('goToTop');\n\n  const onClickFn = useCallback(() => {\n    skipUpdateUntilScrollEnd.current = true;\n    window.scrollTo({\n      behavior: 'smooth',\n      top: 0\n    });\n  }, []);\n\n  const footerCollide = useCallback((): boolean => {\n    const documentHeight = document.body.scrollHeight;\n    const currentBottomPx = Math.ceil(window.scrollY + window.innerHeight);\n\n    if (currentBottomPx >= documentHeight) return true;\n\n    const maybeFooter = getFooter();\n    if (!maybeFooter) return false;\n\n    const distanceFromPageBottom = Math.abs(currentBottomPx - documentHeight);\n\n    if (distanceFromPageBottom <= maybeFooter.getBoundingClientRect().height) return true;\n\n    return false;\n  }, []);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (skipUpdateUntilScrollEnd.current) return;\n\n      if (footerCollide()) {\n        setIsShown(false);\n        return;\n      }\n\n      if (window.scrollY > scrollYthreshold.current) setIsShown(true);\n      else setIsShown(false);\n    };\n\n    const throttledScrollHandler = throttle(handleScroll, APPROX_120_FPS_THROTTLE_TIMING_IN_MS);\n\n    window.addEventListener('scroll', throttledScrollHandler);\n\n    return () => window.removeEventListener('scroll', throttledScrollHandler);\n  }, [footerCollide]);\n\n  useEffect(() => {\n    const handleScrollEnd = () => {\n      if (!skipUpdateUntilScrollEnd.current) return;\n      skipUpdateUntilScrollEnd.current = false;\n\n      if (footerCollide()) {\n        setIsShown(false);\n        return;\n      }\n\n      if (window.scrollY > scrollYthreshold.current) setIsShown(true);\n      else setIsShown(false);\n    };\n\n    window.addEventListener('scrollend', handleScrollEnd);\n\n    return () => {\n      window.removeEventListener('scrollend', handleScrollEnd);\n    };\n  }, [footerCollide]);\n\n  useEffect(() => {\n    setIsShown(window.scrollY > scrollYthreshold.current);\n  }, []);\n\n  useEffect(() => {\n    const btnInstance = getRefCurrentPtr(btnRef);\n    if (!btnInstance) return;\n\n    if (isShown) {\n      btnInstance.style.transform = '';\n      return;\n    }\n\n    const btnHeight = btnInstance.getBoundingClientRect().height;\n    btnInstance.style.transform = `translateY(${btnHeight}px)`;\n  }, [isShown]);\n\n  return (\n    <button\n      className={cn(\n        'fixed bottom-0 right-0 m-2 h-10 w-10 cursor-pointer rounded-md bg-card p-2 text-lg font-bold opacity-0 transition-all duration-200 ease-in-out',\n        { 'opacity-65 hover:opacity-100 focus:opacity-100': isShown }\n      )}\n      onClick={isShown ? onClickFn : undefined}\n      aria-hidden={!isShown}\n      aria-label={ariaLabel}\n      disabled={!isShown}\n      ref={btnRef}\n    >\n      <ArrowUpIcon className=\"h-full w-full\" />\n    </button>\n  );\n};\n\nexport default GoToTopButton;\n"
    },
    "src/components/ui/misc/HomepageVideo.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3034",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 62,
              "line": 7
            }
          }
        },
        {
          "id": "3035",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 10
            },
            "start": {
              "column": 12,
              "line": 10
            }
          }
        },
        {
          "id": "3036",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 10
            },
            "start": {
              "column": 22,
              "line": 10
            }
          }
        },
        {
          "id": "3037",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 11
            },
            "start": {
              "column": 18,
              "line": 11
            }
          }
        },
        {
          "id": "3038",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 12
            },
            "start": {
              "column": 15,
              "line": 12
            }
          }
        },
        {
          "id": "3039",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 14
            },
            "start": {
              "column": 12,
              "line": 14
            }
          }
        },
        {
          "id": "3040",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\ninterface HomepageVideoProps {}\n\nconst HomepageVideo: FunctionComponent<HomepageVideoProps> = () => (\n  <video\n    className=\"absolute bottom-0 left-0 h-full w-full object-cover\"\n    style={{ zIndex: -1 }}\n    playsInline={true}\n    autoPlay={true}\n    preload=\"none\"\n    muted={true}\n    loop={true}\n  >\n    <source src=\"/assets/medias/videos/rtm-demo.webm\" type=\"video/webm; codecs=av01.0.05M.08\" media=\"(min-width: 415px)\" />\n  </video>\n);\n\nexport default HomepageVideo;\n"
    },
    "src/components/ui/navbar/SitewideNavbar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3041",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 44,
              "line": 24
            }
          }
        },
        {
          "id": "3042",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(26,65): error TS2322: Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 31
            },
            "start": {
              "column": 59,
              "line": 26
            }
          }
        },
        {
          "id": "3043",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 55,
              "line": 27
            }
          }
        },
        {
          "id": "3044",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 28
            },
            "start": {
              "column": 14,
              "line": 28
            }
          }
        },
        {
          "id": "3045",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(33,64): error TS2322: Type 'undefined' is not assignable to type 'ReactElement<any, string | JSXElementConstructor<any>>[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 38
            },
            "start": {
              "column": 58,
              "line": 33
            }
          }
        },
        {
          "id": "3046",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 54,
              "line": 34
            }
          }
        },
        {
          "id": "3047",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 35
            },
            "start": {
              "column": 61,
              "line": 35
            }
          }
        },
        {
          "id": "3048",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(40,30): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 42,
              "line": 40
            }
          }
        },
        {
          "id": "3049",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(43,3): error TS2322: Type 'undefined[]' is not assignable to type 'NavbarItems'.\n  Type 'undefined' is not assignable to type 'NavbarItem'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 45
            },
            "start": {
              "column": 43,
              "line": 42
            }
          }
        },
        {
          "id": "3050",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(43,3): error TS2322: Type '{}[]' is not assignable to type 'NavbarItems'.\n  Type '{}' is missing the following properties from type 'NavbarItem': i18nTitle, jsx\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 87,
              "line": 42
            }
          }
        },
        {
          "id": "3051",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 43
            },
            "start": {
              "column": 30,
              "line": 43
            }
          }
        },
        {
          "id": "3052",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(50,7): error TS2322: Type '() => Promise<void>' is not assignable to type 'FunctionComponent<SitewideNavbarProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'Promise<AwaitedReactNode>'.\n      Type 'void' is not assignable to type 'AwaitedReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 98
            },
            "start": {
              "column": 76,
              "line": 50
            }
          }
        },
        {
          "id": "3053",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(51,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n  Overload 2 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 57 more ... | \"blog-categories.patch-notes-bis._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 52
            },
            "start": {
              "column": 27,
              "line": 52
            }
          }
        },
        {
          "id": "3054",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 54
            },
            "start": {
              "column": 31,
              "line": 54
            }
          }
        },
        {
          "id": "3055",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 60
            },
            "start": {
              "column": 46,
              "line": 56
            }
          }
        },
        {
          "id": "3056",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 57
            },
            "start": {
              "column": 14,
              "line": 57
            }
          }
        },
        {
          "id": "3057",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(61,9): error TS2322: Type 'undefined[]' is not assignable to type 'NavbarItems'.\n  Type 'undefined' is not assignable to type 'NavbarItem'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 65
            },
            "start": {
              "column": 58,
              "line": 62
            }
          }
        },
        {
          "id": "3058",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(61,9): error TS2322: Type '{}[]' is not assignable to type 'NavbarItems'.\n  Type '{}' is missing the following properties from type 'NavbarItem': i18nTitle, jsx\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 65
            },
            "start": {
              "column": 69,
              "line": 62
            }
          }
        },
        {
          "id": "3059",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 67
            },
            "start": {
              "column": 37,
              "line": 67
            }
          }
        },
        {
          "id": "3060",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 85
            },
            "start": {
              "column": 27,
              "line": 85
            }
          }
        },
        {
          "id": "3061",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 89
            },
            "start": {
              "column": 27,
              "line": 89
            }
          }
        }
      ],
      "source": "import type { FunctionComponent, ReactElement } from 'react';\nimport type { NavbarItems } from '@/types/NavData';\n\nimport { NAVBAR_EXTRAS_COMPONENTS_DESKTOP, NAVBAR_EXTRAS_COMPONENTS_MOBILE } from '@/config/SitewideNavbar/Extras/utils/ComponentsMapping';\nimport SITEWIDE_NAVBAR_ROUTES, { SITEWIDE_NAVBAR_ROUTES_TITLES } from '@/config/SitewideNavbar/routesImpl';\nimport SITEWIDE_NAVBAR_DROPDOWNS_CONFIG from '@/config/SitewideNavbar/dropdownsConfig';\nimport NAVBAR_STYLE from '@/components/config/styles/navbar/NavbarStyle';\nimport NavbarButton from '@/components/layouts/navbar/NavbarButton';\nimport NavbarToggle from '@/components/layouts/navbar/NavbarToggle';\nimport getComputedNavData from '@/lib/misc/getComputedNavData';\nimport NavbarElement from '@/components/ui/hoc/NavbarElement';\nimport { SITEWIDE_NAVBAR_ID } from '@/config/elementsId';\nimport { getServerSideI18n } from '@/i18n/server';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nimport LogoHead from '../cta/LogoHead';\n\ninterface SitewideNavbarProps {}\n\nconst { LOGO_HEIGHT, LOGO_WIDTH } = NAVBAR_STYLE;\nconst navbarExtrasForMobileClassNameBase = 'h-[40px]';\n\nconst buildNavbarExtrasForDesktop: () => ReactElement[] = () =>\n  Object.values(NAVBAR_EXTRAS_COMPONENTS_DESKTOP).map((jsx, index) => (\n    <li key={`${index}-navbar-extra-desktop`} className=\"flex h-fit w-fit p-[2px]\">\n      {jsx}\n    </li>\n  ));\n\nconst buildNavbarExtrasForMobile: () => ReactElement[] = () =>\n  Object.values(NAVBAR_EXTRAS_COMPONENTS_MOBILE).map((jsx, index) => (\n    <li className={navbarExtrasForMobileClassNameBase} key={`${index}-navbar-extra-mobile`}>\n      {jsx}\n    </li>\n  ));\n\nfunction buildNavbarItems(): NavbarItems {\n  const computedNavData = getComputedNavData(SITEWIDE_NAVBAR_ROUTES, SITEWIDE_NAVBAR_ROUTES_TITLES, SITEWIDE_NAVBAR_DROPDOWNS_CONFIG);\n  const navbarItems = computedNavData.map(({ embeddedEntities, i18nTitle, path }) => ({\n    jsx: <NavbarElement key={`${i18nTitle}-${path}-navbar-btn`} embeddedEntities={embeddedEntities} i18nTitle={i18nTitle} path={path} />,\n    i18nTitle\n  }));\n  return navbarItems;\n}\n\n// {ToDo} https://github.com/Tirraa/dashboard_rtm/issues/126\nconst SitewideNavbar: FunctionComponent<SitewideNavbarProps> = async () => {\n  const globalT = await getServerSideI18n();\n  const logoAlt = globalT(`${i18ns.vocab}.sr-only.brand-logo`);\n\n  const navbarItemClassName = 'p-[5px]';\n  const navbarItems = buildNavbarItems();\n  const desktopNavbarItems = navbarItems.map((item, index) => (\n    <li key={`${index}-navbar-btn-desktop`} className={navbarItemClassName}>\n      {item.jsx}\n    </li>\n  ));\n\n  const mobileNavbarItems: NavbarItems = navbarItems.map((item) => ({\n    ...item,\n    jsx: item.jsx.props.embeddedEntities ? <NavbarButton {...item.jsx.props} /> : item.jsx\n  }));\n\n  const navbarExtrasClassNameBase = 'gap-4 h-full flex-row flex-nowrap items-center';\n  const navbarBrand = (\n    <Link className=\"relative left-[-9px] scale-100 transition-transform hover:scale-105 rtl:left-[9px]\" href={ROUTES_ROOTS.WEBSITE}>\n      <LogoHead height={LOGO_HEIGHT} width={LOGO_WIDTH} alt={logoAlt} priority />\n    </Link>\n  );\n\n  return (\n    <nav\n      className=\"max-w-screen min-w-screen sticky inset-x-0 top-0 z-30 flex h-auto w-screen select-none items-center justify-center bg-black backdrop-blur-lg backdrop-saturate-150 dark:bg-card\"\n      data-pagefind-ignore=\"all\"\n      id={SITEWIDE_NAVBAR_ID}\n    >\n      <header className=\"max-w-screen relative z-30 flex h-[82px] w-screen flex-row flex-nowrap items-center justify-between gap-4 px-5 text-primary-foreground\">\n        {navbarBrand}\n\n        <ul className=\"hidden justify-center gap-4 lg:flex\">{desktopNavbarItems}</ul>\n\n        <ul className={cn('relative hidden justify-end lg:flex ltr:left-1 rtl:right-1', navbarExtrasClassNameBase)}>\n          {buildNavbarExtrasForDesktop()}\n        </ul>\n\n        <ul className={cn('flex justify-end lg:hidden', navbarExtrasClassNameBase)}>\n          {buildNavbarExtrasForMobile()}\n          <li className={navbarExtrasForMobileClassNameBase}>\n            <NavbarToggle items={mobileNavbarItems} />\n          </li>\n        </ul>\n      </header>\n    </nav>\n  );\n};\n\nexport default SitewideNavbar;\n"
    },
    "src/components/ui/search/Result.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3062",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/search/Result.tsx(26,3): error TS2345: Argument of type '({ navigationMenuItemProps, className, metaTitle, excerpt, href, ...props }: Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps> & ResultProps & InternalLinkProps, ref: ForwardedRef<...>) => void' is not assignable to parameter of type 'ForwardRefRenderFunction<HTMLAnchorElement, Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps> & ResultProps & InternalLinkProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 67
            },
            "start": {
              "column": 88,
              "line": 26
            }
          }
        },
        {
          "id": "3063",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 33
            },
            "start": {
              "column": 11,
              "line": 33
            }
          }
        },
        {
          "id": "3064",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 191,
              "line": 34
            },
            "start": {
              "column": 11,
              "line": 34
            }
          }
        },
        {
          "id": "3065",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 37
            },
            "start": {
              "column": 11,
              "line": 35
            }
          }
        },
        {
          "id": "3066",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/search/Result.tsx(31,8): error TS2322: Type '{ children: Element; download?: any; hrefLang?: string | undefined; media?: string | undefined; ping?: string | undefined; target?: HTMLAttributeAnchorTarget | undefined; ... 281 more ...; ref: ForwardedRef<...>; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property '\"aria-current\"' are incompatible.\n    Type 'boolean | \"\" | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined' is not assignable to type 'boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 40
            },
            "start": {
              "column": 36,
              "line": 40
            }
          }
        },
        {
          "id": "3067",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/ui/search/Result.tsx(52,16): error TS2741: Property '__html' is missing in type '{}' but required in type '{ __html: string | TrustedHTML; }'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 52
            },
            "start": {
              "column": 41,
              "line": 52
            }
          }
        },
        {
          "id": "3068",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/search/Result.tsx(61,39): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\nsrc/components/ui/search/Result.tsx(61,79): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\nsrc/components/ui/search/Result.tsx(62,41): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 58
            },
            "start": {
              "column": 9,
              "line": 58
            }
          }
        },
        {
          "id": "3069",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/search/Result.tsx(61,39): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\nsrc/components/ui/search/Result.tsx(61,79): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\nsrc/components/ui/search/Result.tsx(62,41): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 58
            },
            "start": {
              "column": 9,
              "line": 58
            }
          }
        },
        {
          "id": "3070",
          "mutatorName": "EqualityOperator",
          "replacement": "navigationMenuItemProps !== undefined",
          "statusReason": "src/components/ui/search/Result.tsx(61,39): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\nsrc/components/ui/search/Result.tsx(61,79): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\nsrc/components/ui/search/Result.tsx(62,41): error TS18048: 'navigationMenuItemProps' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 58
            },
            "start": {
              "column": 9,
              "line": 58
            }
          }
        },
        {
          "id": "3071",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 70
            },
            "start": {
              "column": 22,
              "line": 70
            }
          }
        }
      ],
      "source": "import type { AnchorHTMLAttributes as ReactAnchorHTMLAttributes, KeyboardEventHandler } from 'react';\nimport type { WithClassname, AppPath } from '@rtm/shared-types/Next';\nimport type { LinkProps } from 'next/link';\n\nimport * as NavigationMenu from '@radix-ui/react-navigation-menu';\nimport { hrefAndPathnameExactMatch } from '@/lib/str';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\nimport Link from 'next/link';\n\nimport { CardContent, CardHeader, CardTitle, Card } from '../Card';\n\ninterface ResultProps extends Partial<WithClassname> {\n  navigationMenuItemProps?: {\n    onKeyDown?: KeyboardEventHandler<HTMLAnchorElement>;\n    className?: string;\n    key: string;\n  };\n  metaTitle: string;\n  excerpt: string;\n  href: AppPath;\n}\n\nconst Result = forwardRef<HTMLAnchorElement, Omit<ReactAnchorHTMLAttributes<HTMLAnchorElement>, keyof LinkProps> & ResultProps & LinkProps>(\n  ({ navigationMenuItemProps, className, metaTitle, excerpt, href, ...props }, ref) => {\n    const currentPathname = usePathname();\n    const exactMatch = hrefAndPathnameExactMatch(href, currentPathname);\n\n    const inner = (\n      <Link\n        className={cn(\n          'search-menu-result-link',\n          'flex h-fit w-full flex-col transition-transform duration-300 hover:delay-0 hover:duration-100 focus:delay-0 focus:duration-100 dark:hover:brightness-125 dark:focus:brightness-125',\n          {\n            'pointer-events-none opacity-50': exactMatch\n          },\n          className\n        )}\n        aria-current={exactMatch ? 'page' : undefined}\n        href={href}\n        ref={ref}\n        {...props}\n      >\n        <Card className=\"h-fit overflow-hidden rounded shadow-lg transition-[box-shadow] duration-300 hover:shadow-xl focus:shadow-xl\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"flex justify-between\" titleType=\"h3\">\n              {metaTitle}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p dangerouslySetInnerHTML={{ __html: excerpt }} />\n          </CardContent>\n        </Card>\n      </Link>\n    );\n\n    if (navigationMenuItemProps === undefined) return inner;\n\n    return (\n      <NavigationMenu.Item className={navigationMenuItemProps.className} key={navigationMenuItemProps.key}>\n        <NavigationMenu.Link onKeyDown={navigationMenuItemProps.onKeyDown} asChild>\n          {inner}\n        </NavigationMenu.Link>\n      </NavigationMenu.Item>\n    );\n  }\n);\n\nResult.displayName = 'Result';\n\nexport default Result;\n"
    },
    "src/components/ui/search/helpers/functions/navbarSearchButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3072",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 3,
              "line": 16
            }
          }
        },
        {
          "id": "3073",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(148,75): error TS2554: Expected 0 arguments, but got 4.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 34,
              "line": 21
            }
          }
        },
        {
          "id": "3074",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 33
            },
            "start": {
              "column": 28,
              "line": 28
            }
          }
        },
        {
          "id": "3075",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 29
            },
            "start": {
              "column": 11,
              "line": 29
            }
          }
        },
        {
          "id": "3076",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 29
            },
            "start": {
              "column": 11,
              "line": 29
            }
          }
        },
        {
          "id": "3077",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 32
            },
            "start": {
              "column": 38,
              "line": 29
            }
          }
        },
        {
          "id": "3078",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 37
            },
            "start": {
              "column": 21,
              "line": 34
            }
          }
        },
        {
          "id": "3079",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,11): error TS2339: Property 'quickAccessBtns' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,28): error TS2339: Property 'allTabValues' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,42): error TS2339: Property 'tabTriggers' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(82,55): error TS2339: Property 'banners' does not exist on type 'undefined'.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(84,37): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(268,34): error TS7031: Binding element 'category' implicitly has an 'any' type.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(268,44): error TS7031: Binding element 'i18nTitle' implicitly has an 'any' type.\nsrc/components/layouts/navbar/search/NavbarSearchButtonInner.tsx(295,32): error TS7006: Parameter 'v' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 66
            },
            "start": {
              "column": 46,
              "line": 45
            }
          }
        },
        {
          "id": "3080",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(72,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 100
            },
            "start": {
              "column": 41,
              "line": 72
            }
          }
        },
        {
          "id": "3081",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 74
            },
            "start": {
              "column": 7,
              "line": 74
            }
          }
        },
        {
          "id": "3082",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 74
            },
            "start": {
              "column": 7,
              "line": 74
            }
          }
        },
        {
          "id": "3083",
          "mutatorName": "EqualityOperator",
          "replacement": "currentElementIndex !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 74
            },
            "start": {
              "column": 7,
              "line": 74
            }
          }
        },
        {
          "id": "3084",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 81
            },
            "start": {
              "column": 34,
              "line": 74
            }
          }
        },
        {
          "id": "3085",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 80
            },
            "start": {
              "column": 18,
              "line": 75
            }
          }
        },
        {
          "id": "3086",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(79,7): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 77
            },
            "start": {
              "column": 11,
              "line": 77
            }
          }
        },
        {
          "id": "3087",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(79,7): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 77
            },
            "start": {
              "column": 11,
              "line": 77
            }
          }
        },
        {
          "id": "3088",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeContainer !== null",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(79,7): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 77
            },
            "start": {
              "column": 11,
              "line": 77
            }
          }
        },
        {
          "id": "3089",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 83
            },
            "start": {
              "column": 7,
              "line": 83
            }
          }
        },
        {
          "id": "3090",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 83
            },
            "start": {
              "column": 7,
              "line": 83
            }
          }
        },
        {
          "id": "3091",
          "mutatorName": "EqualityOperator",
          "replacement": "currentElementIndex !== maxIndex",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 83
            },
            "start": {
              "column": 7,
              "line": 83
            }
          }
        },
        {
          "id": "3092",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 90
            },
            "start": {
              "column": 41,
              "line": 83
            }
          }
        },
        {
          "id": "3093",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 89
            },
            "start": {
              "column": 18,
              "line": 84
            }
          }
        },
        {
          "id": "3094",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(88,7): error TS18047: 'maybeContainer' is possibly 'null'.\nsrc/components/ui/search/helpers/functions/navbarSearchButton.tsx(88,34): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 86
            },
            "start": {
              "column": 11,
              "line": 86
            }
          }
        },
        {
          "id": "3095",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(88,7): error TS18047: 'maybeContainer' is possibly 'null'.\nsrc/components/ui/search/helpers/functions/navbarSearchButton.tsx(88,34): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 86
            },
            "start": {
              "column": 11,
              "line": 86
            }
          }
        },
        {
          "id": "3096",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeContainer !== null",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(88,7): error TS18047: 'maybeContainer' is possibly 'null'.\nsrc/components/ui/search/helpers/functions/navbarSearchButton.tsx(88,34): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 86
            },
            "start": {
              "column": 11,
              "line": 86
            }
          }
        },
        {
          "id": "3097",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 99
            },
            "start": {
              "column": 17,
              "line": 92
            }
          }
        },
        {
          "id": "3098",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(98,5): error TS18047: 'maybeContainer' is possibly 'null'.\nsrc/components/ui/search/helpers/functions/navbarSearchButton.tsx(98,32): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 95
            },
            "start": {
              "column": 9,
              "line": 95
            }
          }
        },
        {
          "id": "3099",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(98,5): error TS18047: 'maybeContainer' is possibly 'null'.\nsrc/components/ui/search/helpers/functions/navbarSearchButton.tsx(98,32): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 95
            },
            "start": {
              "column": 9,
              "line": 95
            }
          }
        },
        {
          "id": "3100",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeContainer !== null",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(98,5): error TS18047: 'maybeContainer' is possibly 'null'.\nsrc/components/ui/search/helpers/functions/navbarSearchButton.tsx(98,32): error TS18047: 'maybeContainer' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 95
            },
            "start": {
              "column": 9,
              "line": 95
            }
          }
        },
        {
          "id": "3101",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 96
            },
            "start": {
              "column": 27,
              "line": 96
            }
          }
        },
        {
          "id": "3102",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/search/helpers/functions/navbarSearchButton.tsx(96,29): error TS2322: Type '\"\"' is not assignable to type 'ScrollLogicalPosition | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 96
            },
            "start": {
              "column": 36,
              "line": 96
            }
          }
        },
        {
          "id": "3103",
          "mutatorName": "ArithmeticOperator",
          "replacement": "maybeContainer.scrollTop - 15",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 98
            },
            "start": {
              "column": 32,
              "line": 98
            }
          }
        }
      ],
      "source": "import type { QuickAccessBtnMetadatas, BannersMetadatas } from '@/config/searchMenu';\nimport type { FocusEventHandler, MutableRefObject, RefObject } from 'react';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\nimport type { Index } from '@rtm/shared-types/Numbers';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { TabsTrigger } from '@/components/ui/Tabs';\nimport { capitalize } from '@/lib/str';\n\nexport function doUpdateMemorizedTabValueAndSetTabValue<TabValue extends string>(\n  v: TabValue,\n  memorizedTabValue: MutableRefObject<string>,\n  setTabValue: (v: TabValue) => unknown\n) {\n  memorizedTabValue.current = v;\n  setTabValue(v);\n}\n\nexport const doBuildTabTrigger = <TabValue extends string>(\n  tabValue: TabValue,\n  title: string,\n  memorizedTabValue: MutableRefObject<TabValue>,\n  setTabValue: (v: TabValue) => unknown\n) => (\n  <TabsTrigger\n    onFocusCapture={(e) => {\n      if (memorizedTabValue.current) {\n        e.preventDefault();\n        setTabValue(memorizedTabValue.current);\n      }\n    }}\n    onFocus={(e) => {\n      e.preventDefault();\n      doUpdateMemorizedTabValueAndSetTabValue(tabValue, memorizedTabValue, setTabValue);\n    }}\n    className=\"search-menu-tabslist-item w-full flex-1 font-semibold hover:bg-primary hover:text-white max-lg:h-10 lg:w-fit\"\n    value={tabValue}\n  >\n    {capitalize(title)}\n  </TabsTrigger>\n);\n\nexport const createNavbarSearchButtonProps = <\n  AllTabValues extends readonly string[],\n  TabTriggers extends Record<AllTabValues[Index], I18nVocabTarget>,\n  Banners extends Record<AllTabValues[Index], BannersMetadatas>,\n  QuickAccessBtns extends Record<AppPath, QuickAccessBtnMetadatas>\n>({\n  quickAccessBtns,\n  allTabValues,\n  tabTriggers,\n  banners\n}: {\n  quickAccessBtns: QuickAccessBtns;\n  allTabValues: AllTabValues;\n  tabTriggers: TabTriggers;\n  banners: Banners;\n}) =>\n  ({\n    tabTriggers: Object.entries(tabTriggers) as [keyof typeof tabTriggers, (typeof tabTriggers)[keyof typeof tabTriggers]][],\n    quickAccessBtns: Object.entries(quickAccessBtns) as [AppPath, QuickAccessBtnMetadatas][],\n    banners: Object.entries(banners) as [keyof typeof banners, BannersMetadatas][],\n    allTabValues\n  }) as const;\n\nexport function buildResultOnFocus(\n  currentElementIndex: Index,\n  maxIndex: Index,\n  resultsContainerRef: RefObject<MaybeNull<HTMLDivElement>>\n): FocusEventHandler<HTMLAnchorElement> {\n  // eslint-disable-next-line no-magic-numbers\n  if (currentElementIndex === 0) {\n    return () => {\n      const maybeContainer = getRefCurrentPtr(resultsContainerRef);\n      if (maybeContainer === null) return;\n      // eslint-disable-next-line no-magic-numbers\n      maybeContainer.scrollTo(0, 0);\n    };\n  }\n\n  if (currentElementIndex === maxIndex) {\n    return () => {\n      const maybeContainer = getRefCurrentPtr(resultsContainerRef);\n      if (maybeContainer === null) return;\n      // eslint-disable-next-line no-magic-numbers\n      maybeContainer.scrollTo(0, maybeContainer.scrollHeight);\n    };\n  }\n\n  return (e) => {\n    const maybeContainer = getRefCurrentPtr(resultsContainerRef);\n    const { target } = e;\n    if (maybeContainer === null) return;\n    target.scrollIntoView({ block: 'end' });\n    // eslint-disable-next-line no-magic-numbers\n    maybeContainer.scrollTo(0, maybeContainer.scrollTop + 15);\n  };\n}\n"
    },
    "src/components/ui/toast/Toast.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3104",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 35
            },
            "start": {
              "column": 37,
              "line": 21
            }
          }
        },
        {
          "id": "3105",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 142,
              "line": 27
            },
            "start": {
              "column": 11,
              "line": 27
            }
          }
        },
        {
          "id": "3106",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 30
            },
            "start": {
              "column": 16,
              "line": 30
            }
          }
        },
        {
          "id": "3107",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 30
            },
            "start": {
              "column": 38,
              "line": 30
            }
          }
        },
        {
          "id": "3108",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 606,
              "line": 40
            },
            "start": {
              "column": 3,
              "line": 40
            }
          }
        },
        {
          "id": "3109",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 51
            },
            "start": {
              "column": 3,
              "line": 41
            }
          }
        },
        {
          "id": "3110",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 47
            },
            "start": {
              "column": 15,
              "line": 42
            }
          }
        },
        {
          "id": "3111",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 46
            },
            "start": {
              "column": 16,
              "line": 43
            }
          }
        },
        {
          "id": "3112",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 44
            },
            "start": {
              "column": 22,
              "line": 44
            }
          }
        },
        {
          "id": "3113",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 45
            },
            "start": {
              "column": 18,
              "line": 45
            }
          }
        },
        {
          "id": "3114",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 50
            },
            "start": {
              "column": 22,
              "line": 48
            }
          }
        },
        {
          "id": "3115",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 49
            },
            "start": {
              "column": 16,
              "line": 49
            }
          }
        },
        {
          "id": "3116",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 59
            },
            "start": {
              "column": 46,
              "line": 57
            }
          }
        },
        {
          "id": "3117",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 58
            },
            "start": {
              "column": 60,
              "line": 58
            }
          }
        },
        {
          "id": "3118",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 72
            },
            "start": {
              "column": 3,
              "line": 63
            }
          }
        },
        {
          "id": "3119",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 525,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "3120",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 89
            },
            "start": {
              "column": 3,
              "line": 77
            }
          }
        },
        {
          "id": "3121",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 352,
              "line": 80
            },
            "start": {
              "column": 9,
              "line": 80
            }
          }
        },
        {
          "id": "3122",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 134,
              "line": 94
            },
            "start": {
              "column": 3,
              "line": 94
            }
          }
        },
        {
          "id": "3123",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 94
            },
            "start": {
              "column": 74,
              "line": 94
            }
          }
        },
        {
          "id": "3124",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 137,
              "line": 99
            },
            "start": {
              "column": 3,
              "line": 99
            }
          }
        },
        {
          "id": "3125",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 100,
              "line": 99
            },
            "start": {
              "column": 80,
              "line": 99
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ComponentPropsWithoutRef, ReactElement, ElementRef } from 'react';\nimport type { VariantProps } from 'class-variance-authority';\n\nimport * as ToastPrimitives from '@radix-ui/react-toast';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { cva } from 'class-variance-authority';\nimport { i18ns } from '##/config/i18n';\nimport { capitalize } from '@/lib/str';\nimport { cn } from '@/lib/tailwind';\nimport { forwardRef } from 'react';\nimport { X } from 'lucide-react';\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = forwardRef<ElementRef<typeof ToastPrimitives.Viewport>, ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>>(\n  ({ className, ...props }, ref) => {\n    const globalT = getClientSideI18n();\n\n    return (\n      <ToastPrimitives.Viewport\n        className={cn(\n          'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n          className\n        )}\n        label={`${capitalize(globalT(`${i18ns.vocab}.notifications`))} ({hotkey})`}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        destructive: 'destructive group border-destructive bg-destructive text-destructive-foreground',\n        default: 'border bg-background text-foreground'\n      }\n    },\n    defaultVariants: {\n      variant: 'default'\n    }\n  }\n);\n\nconst Toast = forwardRef<\n  ElementRef<typeof ToastPrimitives.Root>,\n  ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return <ToastPrimitives.Root className={cn(toastVariants({ variant }), className)} ref={ref} {...props} />;\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = forwardRef<ElementRef<typeof ToastPrimitives.Action>, ComponentPropsWithoutRef<typeof ToastPrimitives.Action>>(\n  ({ className, ...props }, ref) => (\n    <ToastPrimitives.Action\n      className={cn(\n        'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n);\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = forwardRef<ElementRef<typeof ToastPrimitives.Close>, ComponentPropsWithoutRef<typeof ToastPrimitives.Close>>(\n  ({ className, ...props }, ref) => (\n    <ToastPrimitives.Close\n      className={cn(\n        'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n        className\n      )}\n      toast-close=\"\"\n      ref={ref}\n      {...props}\n    >\n      <X className=\"h-4 w-4\" />\n    </ToastPrimitives.Close>\n  )\n);\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = forwardRef<ElementRef<typeof ToastPrimitives.Title>, ComponentPropsWithoutRef<typeof ToastPrimitives.Title>>(\n  ({ className, ...props }, ref) => <ToastPrimitives.Title className={cn('text-sm font-semibold', className)} ref={ref} {...props} />\n);\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = forwardRef<ElementRef<typeof ToastPrimitives.Description>, ComponentPropsWithoutRef<typeof ToastPrimitives.Description>>(\n  ({ className, ...props }, ref) => <ToastPrimitives.Description className={cn('text-sm opacity-90', className)} ref={ref} {...props} />\n);\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = ReactElement<typeof ToastAction>;\n\nexport { type ToastActionElement, ToastDescription, type ToastProps, ToastProvider, ToastViewport, ToastAction, ToastTitle, ToastClose, Toast };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/toast/Toaster.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3126",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 27,
              "line": 9
            }
          }
        },
        {
          "id": "3127",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 23
            },
            "start": {
              "column": 19,
              "line": 14
            }
          }
        },
        {
          "id": "3128",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 17
            },
            "start": {
              "column": 14,
              "line": 17
            }
          }
        },
        {
          "id": "3129",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 17
            },
            "start": {
              "column": 14,
              "line": 17
            }
          }
        },
        {
          "id": "3130",
          "mutatorName": "LogicalOperator",
          "replacement": "title || <ToastTitle>{title}</ToastTitle>",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 17
            },
            "start": {
              "column": 14,
              "line": 17
            }
          }
        },
        {
          "id": "3131",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 18
            },
            "start": {
              "column": 14,
              "line": 18
            }
          }
        },
        {
          "id": "3132",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 18
            },
            "start": {
              "column": 14,
              "line": 18
            }
          }
        },
        {
          "id": "3133",
          "mutatorName": "LogicalOperator",
          "replacement": "description || <ToastDescription>{description}</ToastDescription>",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 18
            },
            "start": {
              "column": 14,
              "line": 18
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport { ToastDescription, ToastProvider, ToastViewport, ToastClose, ToastTitle, Toast } from '@/components/ui/toast/Toast';\nimport { useToast } from '@/components/hooks/useToast';\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(({ description, action, title, id, ...props }) => (\n        <Toast key={id} {...props}>\n          <div className=\"grid gap-1\">\n            {title && <ToastTitle>{title}</ToastTitle>}\n            {description && <ToastDescription>{description}</ToastDescription>}\n          </div>\n          {action}\n          <ToastClose />\n        </Toast>\n      ))}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/Auth/authOptions.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3134",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/config/Auth/authOptions.ts(12,89): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "87", "88", "89", "90", "91", "92", "95"],
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 116,
              "line": 12
            }
          }
        },
        {
          "id": "3135",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": ".toMatch() expects to receive a string, but got object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "87", "88", "89", "90", "91", "92", "95"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "3136",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["89"],
          "coveredBy": ["85", "87", "88", "89", "90", "91", "92", "95"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "3137",
          "mutatorName": "LogicalOperator",
          "replacement": "!avatar && !id",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["89"],
          "coveredBy": ["85", "87", "88", "89", "90", "91", "92", "95"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "3138",
          "mutatorName": "BooleanLiteral",
          "replacement": "avatar",
          "statusReason": ".toMatch() expects to receive a string, but got object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "87", "88", "89", "90", "91", "92", "95"],
          "location": {
            "end": {
              "column": 14,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "3139",
          "mutatorName": "BooleanLiteral",
          "replacement": "id",
          "statusReason": ".toMatch() expects to receive a string, but got object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "87", "88", "90", "92"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 18,
              "line": 16
            }
          }
        },
        {
          "id": "3140",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'FAKE_AVATAR' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["87"],
          "coveredBy": ["85", "87", "88", "92"],
          "location": {
            "end": {
              "column": 15,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "3141",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to match /^https:\\/\\/cdn\\.discordapp\\.com\\/emb…/\\",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "87", "88", "92"],
          "location": {
            "end": {
              "column": 15,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "3142",
          "mutatorName": "MethodExpression",
          "replacement": "avatar.endsWith('a_')",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["88"],
          "coveredBy": ["87", "88", "92"],
          "location": {
            "end": {
              "column": 41,
              "line": 19
            },
            "start": {
              "column": 18,
              "line": 19
            }
          }
        },
        {
          "id": "3143",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["87"],
          "coveredBy": ["87", "88", "92"],
          "location": {
            "end": {
              "column": 40,
              "line": 19
            },
            "start": {
              "column": 36,
              "line": 19
            }
          }
        },
        {
          "id": "3144",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["88"],
          "coveredBy": ["88", "92"],
          "location": {
            "end": {
              "column": 49,
              "line": 19
            },
            "start": {
              "column": 44,
              "line": 19
            }
          }
        },
        {
          "id": "3145",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["87"],
          "coveredBy": ["87"],
          "location": {
            "end": {
              "column": 57,
              "line": 19
            },
            "start": {
              "column": 52,
              "line": 19
            }
          }
        },
        {
          "id": "3146",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["87"],
          "coveredBy": ["87", "88", "92"],
          "location": {
            "end": {
              "column": 82,
              "line": 20
            },
            "start": {
              "column": 20,
              "line": 20
            }
          }
        },
        {
          "id": "3147",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/config/Auth/authOptions.ts(40,11): error TS2322: Type '({ session, token }: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Promise<void>' is not assignable to type '(params: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Awaitable<Session | DefaultSession>'.\n  Type 'Promise<void>' is not assignable to type 'Awaitable<Session | DefaultSession>'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLike<Session | DefaultSession>'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = Session | DefaultSession, TResult2 = never>(onfulfilled?: ((value: Session | DefaultSession) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | ... 1 more ... | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'Session | DefaultSession'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(50,51): error TS2339: Property 'user' does not exist on type 'never'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(84,51): error TS2339: Property 'user' does not exist on type 'never'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(204,51): error TS2339: Property 'user' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92", "93", "94", "95"],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 104,
              "line": 25
            }
          }
        },
        {
          "id": "3148",
          "mutatorName": "BooleanLiteral",
          "replacement": "BOT_TOKEN",
          "statusReason": ".toMatch() expects to receive a string, but got undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "86", "92", "93", "94", "95"],
          "location": {
            "end": {
              "column": 17,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "3149",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/config/Auth/authOptions.ts(35,39): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(36,36): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92", "93", "94", "95"],
          "location": {
            "end": {
              "column": 17,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "3150",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["93"],
          "coveredBy": ["85", "86", "92", "93", "94", "95"],
          "location": {
            "end": {
              "column": 17,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "3151",
          "mutatorName": "BooleanLiteral",
          "replacement": "id",
          "statusReason": "src/config/Auth/authOptions.ts(35,39): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(36,36): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92", "94", "95"],
          "location": {
            "end": {
              "column": 10,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "3152",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/config/Auth/authOptions.ts(35,39): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(36,36): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92", "94", "95"],
          "location": {
            "end": {
              "column": 10,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "3153",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/config/Auth/authOptions.ts(35,39): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(36,36): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92", "94", "95"],
          "location": {
            "end": {
              "column": 10,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "3154",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { user: { …(2) }, …(1) } to strictly equal { user: { …(3) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "86", "92", "95"],
          "location": {
            "end": {
              "column": 24,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "3155",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { user: { …(3) }, …(1) } to strictly equal { user: { …(2) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["95"],
          "coveredBy": ["85", "86", "92", "95"],
          "location": {
            "end": {
              "column": 24,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "3156",
          "mutatorName": "EqualityOperator",
          "replacement": "imageURL !== null",
          "statusReason": "expected { user: { …(2) }, …(1) } to strictly equal { user: { …(3) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "86", "92", "95"],
          "location": {
            "end": {
              "column": 24,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "3157",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/config/Auth/authOptions.ts(43,13): error TS1360: Type '{}' does not satisfy the expected type 'Session'.\n  Property 'expires' is missing in type '{}' but required in type 'Session'.\nsrc/config/Auth/authOptions.ts(59,11): error TS2322: Type '({ session, token }: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Promise<{}>' is not assignable to type '(params: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Awaitable<Session | DefaultSession>'.\n  Type 'Promise<{}>' is not assignable to type 'Awaitable<Session | DefaultSession>'.\n    Type 'Promise<{}>' is not assignable to type 'PromiseLike<Session | DefaultSession>'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = {}, TResult2 = never>(onfulfilled?: ((value: {}) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = Session | DefaultSession, TResult2 = never>(onfulfilled?: ((value: Session | DefaultSession) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | ... 1 more ... | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type '{}' is not assignable to type 'Session | DefaultSession'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(50,51): error TS2339: Property 'user' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(84,51): error TS2339: Property 'user' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(204,51): error TS2339: Property 'user' does not exist on type '{}'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["85", "86", "92"],
          "location": {
            "end": {
              "column": 4,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 43
            }
          }
        },
        {
          "id": "3158",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected { user: {}, …(1) } to strictly equal { user: { …(3) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["85"],
          "coveredBy": ["85", "86", "92"],
          "location": {
            "end": {
              "column": 47,
              "line": 44
            },
            "start": {
              "column": 11,
              "line": 44
            }
          }
        },
        {
          "id": "3159",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 71
            },
            "start": {
              "column": 38,
              "line": 52
            }
          }
        },
        {
          "id": "3160",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 59
            },
            "start": {
              "column": 14,
              "line": 53
            }
          }
        },
        {
          "id": "3161",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 58
            },
            "start": {
              "column": 21,
              "line": 54
            }
          }
        },
        {
          "id": "3162",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 55
            },
            "start": {
              "column": 22,
              "line": 55
            }
          }
        },
        {
          "id": "3163",
          "mutatorName": "LogicalOperator",
          "replacement": "process.env.DISCORD_CLIENT_SECRET && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 56
            },
            "start": {
              "column": 21,
              "line": 56
            }
          }
        },
        {
          "id": "3164",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 56
            },
            "start": {
              "column": 58,
              "line": 56
            }
          }
        },
        {
          "id": "3165",
          "mutatorName": "LogicalOperator",
          "replacement": "process.env.DISCORD_CLIENT_ID && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 57
            },
            "start": {
              "column": 17,
              "line": 57
            }
          }
        },
        {
          "id": "3166",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 57
            },
            "start": {
              "column": 50,
              "line": 57
            }
          }
        },
        {
          "id": "3167",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 66
            },
            "start": {
              "column": 14,
              "line": 61
            }
          }
        },
        {
          "id": "3168",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 65
            },
            "start": {
              "column": 39,
              "line": 62
            }
          }
        },
        {
          "id": "3169",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 70
            },
            "start": {
              "column": 10,
              "line": 68
            }
          }
        },
        {
          "id": "3170",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 69
            },
            "start": {
              "column": 42,
              "line": 69
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { NextAuthOptions, Session } from 'next-auth';\nimport type { IDiscordApi } from '@/meta/discordapi';\nimport type { Href } from '@rtm/shared-types/Next';\nimport type { JWT } from 'next-auth/jwt';\n\nimport DiscordProvider from 'next-auth/providers/discord';\nimport { keysFactory, getOrSet } from '@/cache/generic';\nimport ROUTES_ROOTS from '##/config/routes';\nimport discordApi from '@/meta/discordapi';\n\nexport async function getDiscordProfilePicture(sub: string, __discordApi: IDiscordApi): Promise<MaybeNull<string>> {\n  const freshProfile = await __discordApi.getFreshProfile(sub);\n\n  const { epicFail, avatar, id } = freshProfile;\n  if (!avatar || !id) return null;\n  if (epicFail) return avatar;\n\n  const format = avatar.startsWith('a_') ? 'gif' : 'png';\n  const imageURL = `https://cdn.discordapp.com/avatars/${id}/${avatar}.${format}`;\n\n  return imageURL;\n}\n\nexport async function getSession(session: Session, token: JWT, __discordApi: IDiscordApi = discordApi) {\n  const BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;\n  if (!BOT_TOKEN) return session;\n\n  const { sub: id } = token;\n  if (!id) return session;\n\n  // Stryker Workaround 1. Empty object mutant is pointless.\n  // Stryker disable next-line ObjectLiteral\n  const imageURL = (await getOrSet(\n    keysFactory.discordProfilePicture(id),\n    () => getDiscordProfilePicture(id, __discordApi),\n    // eslint-disable-next-line no-magic-numbers\n    660_000\n  )) as MaybeNull<Href>; // TTL: https://discord.com/developers/docs/topics/rate-limits#invalid-request-limit-aka-cloudflare-bans\n\n  if (imageURL === null) return session;\n\n  return {\n    user: { ...session.user, image: imageURL },\n    expires: session.expires\n  } satisfies Session;\n}\n\n/* v8 ignore start */\n// Stryker disable all\n\nconst authOptions: NextAuthOptions = {\n  providers: [\n    DiscordProvider({\n      authorization: 'https://discord.com/api/oauth2/authorize?scope=guilds+identify',\n      clientSecret: process.env.DISCORD_CLIENT_SECRET ?? '',\n      clientId: process.env.DISCORD_CLIENT_ID ?? ''\n    })\n  ],\n\n  callbacks: {\n    async session({ session, token }) {\n      const s = await getSession(session, token);\n      return s;\n    }\n  },\n\n  pages: {\n    signIn: ROUTES_ROOTS.LANDING_PAGES + 'sign-up'\n  }\n};\n\nexport default authOptions;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/Blog/client.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3171",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 85,
              "line": 14
            }
          }
        },
        {
          "id": "3172",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 3,
              "line": 15
            }
          }
        },
        {
          "id": "3173",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 16
            },
            "start": {
              "column": 12,
              "line": 16
            }
          }
        },
        {
          "id": "3174",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 17
            },
            "start": {
              "column": 16,
              "line": 17
            }
          }
        },
        {
          "id": "3175",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 3,
              "line": 19
            }
          }
        },
        {
          "id": "3176",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 20
            },
            "start": {
              "column": 12,
              "line": 20
            }
          }
        },
        {
          "id": "3177",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 21
            },
            "start": {
              "column": 16,
              "line": 21
            }
          }
        },
        {
          "id": "3178",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 3,
              "line": 23
            }
          }
        },
        {
          "id": "3179",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 118,
              "line": 24
            },
            "start": {
              "column": 12,
              "line": 24
            }
          }
        },
        {
          "id": "3180",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 25
            },
            "start": {
              "column": 16,
              "line": 25
            }
          }
        },
        {
          "id": "3181",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 30
            },
            "start": {
              "column": 3,
              "line": 27
            }
          }
        },
        {
          "id": "3182",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 28
            },
            "start": {
              "column": 12,
              "line": 28
            }
          }
        },
        {
          "id": "3183",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 29
            },
            "start": {
              "column": 16,
              "line": 29
            }
          }
        },
        {
          "id": "3184",
          "mutatorName": "ArithmeticOperator",
          "replacement": "BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE.length + 1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 122,
              "line": 40
            },
            "start": {
              "column": 33,
              "line": 40
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { I18nVocabTarget, LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { BlogPostPreviewComponentWithMetadatas } from '@/types/Blog';\nimport type { Score } from '@rtm/shared-types/Numbers';\n\nimport { compareAlphabeticallyDesc, compareAlphabeticallyAsc } from '@/lib/str';\nimport { compareDesc } from 'date-fns/compareDesc';\nimport { compareAsc } from 'date-fns/compareAsc';\n\nimport type { BlogConfigType } from './server';\n\nconst COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE: FiltersAssoc = [\n  {\n    score: (post1: P, post2: P) => compareDesc(new Date(post1.date), new Date(post2.date)),\n    i18nTitle: 'filters.date-desc'\n  },\n  {\n    score: (post1: P, post2: P) => compareAsc(new Date(post1.date), new Date(post2.date)),\n    i18nTitle: 'filters.date-asc'\n  },\n  {\n    score: (post1: P, post2: P) => compareAlphabeticallyAsc(post1.title, post2.title, post1.language as LanguageFlag),\n    i18nTitle: 'filters.alphabet-asc'\n  },\n  {\n    score: (post1: P, post2: P) => compareAlphabeticallyDesc(post1.title, post2.title, post1.language as LanguageFlag),\n    i18nTitle: 'filters.alphabet-desc'\n  }\n];\n\nconst BlogConfigClient = {\n  DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_SUBCATEGORIES_ON_BLOG_CATEGORY_PAGE: compareAlphabeticallyAsc,\n  DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_POSTS_ON_BLOG_CATEGORY_PAGE: compareDesc,\n  COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE\n} as const satisfies BlogConfigClientType;\n\n// eslint-disable-next-line no-magic-numbers\nexport const MAX_FILTER_INDEX = BlogConfigClient.COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE.length - 1;\n\nexport default BlogConfigClient;\n\ntype P = BlogPostPreviewComponentWithMetadatas;\n\ntype BlogConfigClientType = Pick<\n  BlogConfigType,\n  | 'DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_SUBCATEGORIES_ON_BLOG_CATEGORY_PAGE'\n  | 'DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_POSTS_ON_BLOG_CATEGORY_PAGE'\n  | 'COMPARE_FUNCTIONS_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE'\n>;\n\ntype Filter = {\n  score: (post1: P, post2: P) => Score;\n  i18nTitle: I18nVocabTarget;\n};\n\nexport type FiltersAssoc = Filter[];\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/DashboardSidebar/sidebarRoutesIcons.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3185",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 13
            },
            "start": {
              "column": 52,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { DashboardRoutesIcons } from '@/config/DashboardSidebar/utils/IconsMapping';\n\nimport { ActivityLogIcon, SketchLogoIcon, DashboardIcon } from '@radix-ui/react-icons';\n\n/* eslint-disable perfectionist/sort-objects */\nconst SIDEBAR_ROUTES_ICONS: DashboardRoutesIcons = {\n  MAIN_PAGE: SketchLogoIcon,\n  BAR_PAGE: ActivityLogIcon,\n  FOO_PAGE: DashboardIcon\n};\n/* eslint-enable perfectionist/sort-objects */\n\nexport default SIDEBAR_ROUTES_ICONS;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/DashboardSidebar/utils/IconsMapping.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3186",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 133,
              "line": 14
            },
            "start": {
              "column": 32,
              "line": 14
            }
          }
        },
        {
          "id": "3187",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 63,
              "line": 18
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { IconProps } from '@radix-ui/react-icons/dist/types';\nimport type { ComponentType } from 'react';\n\nimport DashboardSidebarButton from '@/components/layouts/dashboard/DashboardSidebarButton';\nimport SIDEBAR_ROUTES_ICONS from '@/config/DashboardSidebar/sidebarRoutesIcons';\n\nimport type { DashboardRoutesSidebarReactElements, DashboardRoutesKeys, DashboardRoutes } from './RoutesMapping';\n\nexport type DashboardRoutesIcons = Record<keyof DashboardRoutes, ComponentType<IconProps>>;\n\nconst createSidebarComponent = (__SidebarIcon: ComponentType<IconProps>) => <DashboardSidebarButton __SidebarIcon={__SidebarIcon} />;\n\nconst computedDashboardRoutesSidebarComponents = {} as DashboardRoutesSidebarReactElements;\n\nfor (const [k, icon] of Object.entries(SIDEBAR_ROUTES_ICONS)) {\n  computedDashboardRoutesSidebarComponents[k as DashboardRoutesKeys] = createSidebarComponent(icon);\n}\n\nconst DASHBOARD_ROUTES_SIDEBAR_COMPONENTS: DashboardRoutesSidebarReactElements = computedDashboardRoutesSidebarComponents;\n\nexport default DASHBOARD_ROUTES_SIDEBAR_COMPONENTS;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/SitewideNavbar/Extras/utils/ComponentsMapping.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3188",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 84,
              "line": 11
            }
          }
        },
        {
          "id": "3189",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 83,
              "line": 18
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport NavbarSearchButton from '@/components/layouts/navbar/search/NavbarSearchButton';\nimport NavbarLanguageMenu from '@/components/layouts/navbar/NavbarLanguageMenu';\nimport NavbarLoginButton from '@/components/layouts/navbar/NavbarLoginButton';\nimport NavbarThemeButton from '@/components/layouts/navbar/NavbarThemeButton';\n\nimport type { NavbarExtrasFeaturesReactElements } from './RoutesMapping';\n\nexport const NAVBAR_EXTRAS_COMPONENTS_DESKTOP: NavbarExtrasFeaturesReactElements = {\n  SEARCH_BTN: <NavbarSearchButton />,\n  LANGUAGE: <NavbarLanguageMenu />,\n  THEME: <NavbarThemeButton />,\n  LOGIN: <NavbarLoginButton />\n};\n\nexport const NAVBAR_EXTRAS_COMPONENTS_MOBILE: NavbarExtrasFeaturesReactElements = {\n  SEARCH_BTN: <NavbarSearchButton />,\n  // eslint-disable-next-line perfectionist/sort-objects\n  LANGUAGE: <NavbarLanguageMenu isMobile />,\n  LOGIN: <NavbarLoginButton isMobile />,\n  THEME: <NavbarThemeButton />\n};\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/SitewideNavbar/dropdownsConfig.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3190",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 13
            },
            "start": {
              "column": 87,
              "line": 10
            }
          }
        },
        {
          "id": "3191",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 12
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { PatchNotesRoutesKeys } from '@/config/SitewideNavbar/PatchNotes/utils/RoutesMapping';\nimport type { NavbarDropdownsConfig } from '@/types/WebsiteUtils';\nimport type { EmbeddedEntities } from '@/types/NavData';\n\nimport PATCH_NOTES_ROUTES, { PATCH_NOTES_ROUTES_TITLES } from '@/config/SitewideNavbar/PatchNotes/routesImpl';\n\nconst PATCH_NOTES_PAGE: EmbeddedEntities = Object.keys(PATCH_NOTES_ROUTES).map((k) => {\n  const k2 = k as PatchNotesRoutesKeys;\n  return { i18nTitle: PATCH_NOTES_ROUTES_TITLES[k2], path: PATCH_NOTES_ROUTES[k2] };\n});\n\nconst SITEWIDE_NAVBAR_DROPDOWNS_CONFIG: NavbarDropdownsConfig = { PATCH_NOTES_PAGE } as const;\nexport default SITEWIDE_NAVBAR_DROPDOWNS_CONFIG;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/Workarounds/pagefind.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3192",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 662
            },
            "start": {
              "column": 53,
              "line": 8
            }
          }
        },
        {
          "id": "3193",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 65
            },
            "start": {
              "column": 3,
              "line": 9
            }
          }
        },
        {
          "id": "3194",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 60
            },
            "start": {
              "column": 11,
              "line": 10
            }
          }
        },
        {
          "id": "3195",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 60
            },
            "start": {
              "column": 24,
              "line": 10
            }
          }
        },
        {
          "id": "3196",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 25
            },
            "start": {
              "column": 20,
              "line": 11
            }
          }
        },
        {
          "id": "3197",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "3198",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 19
            },
            "start": {
              "column": 31,
              "line": 13
            }
          }
        },
        {
          "id": "3199",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 18
            },
            "start": {
              "column": 13,
              "line": 14
            }
          }
        },
        {
          "id": "3200",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 118,
              "line": 20
            },
            "start": {
              "column": 20,
              "line": 20
            }
          }
        },
        {
          "id": "3201",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 21
            },
            "start": {
              "column": 16,
              "line": 21
            }
          }
        },
        {
          "id": "3202",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 22
            },
            "start": {
              "column": 18,
              "line": 22
            }
          }
        },
        {
          "id": "3203",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 23
            },
            "start": {
              "column": 22,
              "line": 23
            }
          }
        },
        {
          "id": "3204",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 39
            },
            "start": {
              "column": 16,
              "line": 26
            }
          }
        },
        {
          "id": "3205",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 32
            },
            "start": {
              "column": 9,
              "line": 27
            }
          }
        },
        {
          "id": "3206",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 28
            },
            "start": {
              "column": 20,
              "line": 28
            }
          }
        },
        {
          "id": "3207",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 29
            },
            "start": {
              "column": 15,
              "line": 29
            }
          }
        },
        {
          "id": "3208",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 31
            },
            "start": {
              "column": 17,
              "line": 31
            }
          }
        },
        {
          "id": "3209",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 33
            }
          }
        },
        {
          "id": "3210",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 34
            },
            "start": {
              "column": 20,
              "line": 34
            }
          }
        },
        {
          "id": "3211",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 35
            },
            "start": {
              "column": 15,
              "line": 35
            }
          }
        },
        {
          "id": "3212",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 37
            },
            "start": {
              "column": 17,
              "line": 37
            }
          }
        },
        {
          "id": "3213",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 46
            },
            "start": {
              "column": 27,
              "line": 40
            }
          }
        },
        {
          "id": "3214",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 45
            },
            "start": {
              "column": 9,
              "line": 41
            }
          }
        },
        {
          "id": "3215",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 114,
              "line": 47
            },
            "start": {
              "column": 16,
              "line": 47
            }
          }
        },
        {
          "id": "3216",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 48
            },
            "start": {
              "column": 20,
              "line": 48
            }
          }
        },
        {
          "id": "3217",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 49
            },
            "start": {
              "column": 16,
              "line": 49
            }
          }
        },
        {
          "id": "3218",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "3219",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 76,
              "line": 51
            },
            "start": {
              "column": 12,
              "line": 51
            }
          }
        },
        {
          "id": "3220",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 54
            },
            "start": {
              "column": 16,
              "line": 52
            }
          }
        },
        {
          "id": "3221",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 53
            },
            "start": {
              "column": 23,
              "line": 53
            }
          }
        },
        {
          "id": "3222",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 53
            },
            "start": {
              "column": 24,
              "line": 53
            }
          }
        },
        {
          "id": "3223",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 57
            },
            "start": {
              "column": 13,
              "line": 55
            }
          }
        },
        {
          "id": "3224",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 56
            },
            "start": {
              "column": 16,
              "line": 56
            }
          }
        },
        {
          "id": "3225",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 58
            },
            "start": {
              "column": 18,
              "line": 58
            }
          }
        },
        {
          "id": "3226",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 62
            },
            "start": {
              "column": 9,
              "line": 62
            }
          }
        },
        {
          "id": "3227",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 64
            },
            "start": {
              "column": 12,
              "line": 64
            }
          }
        },
        {
          "id": "3228",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 121
            },
            "start": {
              "column": 3,
              "line": 66
            }
          }
        },
        {
          "id": "3229",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 117
            },
            "start": {
              "column": 11,
              "line": 67
            }
          }
        },
        {
          "id": "3230",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 117
            },
            "start": {
              "column": 24,
              "line": 67
            }
          }
        },
        {
          "id": "3231",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 82
            },
            "start": {
              "column": 20,
              "line": 68
            }
          }
        },
        {
          "id": "3232",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 81
            },
            "start": {
              "column": 9,
              "line": 69
            }
          }
        },
        {
          "id": "3233",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 76
            },
            "start": {
              "column": 31,
              "line": 70
            }
          }
        },
        {
          "id": "3234",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 75
            },
            "start": {
              "column": 13,
              "line": 71
            }
          }
        },
        {
          "id": "3235",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 118,
              "line": 77
            },
            "start": {
              "column": 20,
              "line": 77
            }
          }
        },
        {
          "id": "3236",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 78
            },
            "start": {
              "column": 16,
              "line": 78
            }
          }
        },
        {
          "id": "3237",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 79
            },
            "start": {
              "column": 18,
              "line": 79
            }
          }
        },
        {
          "id": "3238",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 80
            },
            "start": {
              "column": 22,
              "line": 80
            }
          }
        },
        {
          "id": "3239",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 96
            },
            "start": {
              "column": 16,
              "line": 83
            }
          }
        },
        {
          "id": "3240",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 89
            },
            "start": {
              "column": 9,
              "line": 84
            }
          }
        },
        {
          "id": "3241",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 85
            },
            "start": {
              "column": 20,
              "line": 85
            }
          }
        },
        {
          "id": "3242",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 86
            },
            "start": {
              "column": 15,
              "line": 86
            }
          }
        },
        {
          "id": "3243",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 88
            },
            "start": {
              "column": 17,
              "line": 88
            }
          }
        },
        {
          "id": "3244",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 95
            },
            "start": {
              "column": 9,
              "line": 90
            }
          }
        },
        {
          "id": "3245",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 91
            },
            "start": {
              "column": 20,
              "line": 91
            }
          }
        },
        {
          "id": "3246",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 92
            },
            "start": {
              "column": 15,
              "line": 92
            }
          }
        },
        {
          "id": "3247",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 94
            },
            "start": {
              "column": 17,
              "line": 94
            }
          }
        },
        {
          "id": "3248",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 103
            },
            "start": {
              "column": 27,
              "line": 97
            }
          }
        },
        {
          "id": "3249",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 102
            },
            "start": {
              "column": 9,
              "line": 98
            }
          }
        },
        {
          "id": "3250",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 114,
              "line": 104
            },
            "start": {
              "column": 16,
              "line": 104
            }
          }
        },
        {
          "id": "3251",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 105
            },
            "start": {
              "column": 20,
              "line": 105
            }
          }
        },
        {
          "id": "3252",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 106
            },
            "start": {
              "column": 16,
              "line": 106
            }
          }
        },
        {
          "id": "3253",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 107
            },
            "start": {
              "column": 16,
              "line": 107
            }
          }
        },
        {
          "id": "3254",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 76,
              "line": 108
            },
            "start": {
              "column": 12,
              "line": 108
            }
          }
        },
        {
          "id": "3255",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 111
            },
            "start": {
              "column": 16,
              "line": 109
            }
          }
        },
        {
          "id": "3256",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 110
            },
            "start": {
              "column": 23,
              "line": 110
            }
          }
        },
        {
          "id": "3257",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 110
            },
            "start": {
              "column": 24,
              "line": 110
            }
          }
        },
        {
          "id": "3258",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 114
            },
            "start": {
              "column": 13,
              "line": 112
            }
          }
        },
        {
          "id": "3259",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 113
            },
            "start": {
              "column": 16,
              "line": 113
            }
          }
        },
        {
          "id": "3260",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 115
            },
            "start": {
              "column": 18,
              "line": 115
            }
          }
        },
        {
          "id": "3261",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 119
            },
            "start": {
              "column": 9,
              "line": 119
            }
          }
        },
        {
          "id": "3262",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 120
            },
            "start": {
              "column": 12,
              "line": 120
            }
          }
        },
        {
          "id": "3263",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 177
            },
            "start": {
              "column": 3,
              "line": 122
            }
          }
        },
        {
          "id": "3264",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 173
            },
            "start": {
              "column": 11,
              "line": 123
            }
          }
        },
        {
          "id": "3265",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 173
            },
            "start": {
              "column": 24,
              "line": 123
            }
          }
        },
        {
          "id": "3266",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 138
            },
            "start": {
              "column": 20,
              "line": 124
            }
          }
        },
        {
          "id": "3267",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 137
            },
            "start": {
              "column": 9,
              "line": 125
            }
          }
        },
        {
          "id": "3268",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 132
            },
            "start": {
              "column": 31,
              "line": 126
            }
          }
        },
        {
          "id": "3269",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 131
            },
            "start": {
              "column": 13,
              "line": 127
            }
          }
        },
        {
          "id": "3270",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 145,
              "line": 133
            },
            "start": {
              "column": 20,
              "line": 133
            }
          }
        },
        {
          "id": "3271",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 134
            },
            "start": {
              "column": 18,
              "line": 134
            }
          }
        },
        {
          "id": "3272",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 135
            },
            "start": {
              "column": 16,
              "line": 135
            }
          }
        },
        {
          "id": "3273",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 136
            },
            "start": {
              "column": 22,
              "line": 136
            }
          }
        },
        {
          "id": "3274",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 152
            },
            "start": {
              "column": 16,
              "line": 139
            }
          }
        },
        {
          "id": "3275",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 145
            },
            "start": {
              "column": 9,
              "line": 140
            }
          }
        },
        {
          "id": "3276",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 141
            },
            "start": {
              "column": 20,
              "line": 141
            }
          }
        },
        {
          "id": "3277",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 142
            },
            "start": {
              "column": 15,
              "line": 142
            }
          }
        },
        {
          "id": "3278",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 144
            },
            "start": {
              "column": 17,
              "line": 144
            }
          }
        },
        {
          "id": "3279",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 151
            },
            "start": {
              "column": 9,
              "line": 146
            }
          }
        },
        {
          "id": "3280",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 147
            },
            "start": {
              "column": 20,
              "line": 147
            }
          }
        },
        {
          "id": "3281",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 148
            },
            "start": {
              "column": 15,
              "line": 148
            }
          }
        },
        {
          "id": "3282",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 150
            },
            "start": {
              "column": 17,
              "line": 150
            }
          }
        },
        {
          "id": "3283",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 153
            },
            "start": {
              "column": 16,
              "line": 153
            }
          }
        },
        {
          "id": "3284",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 160
            },
            "start": {
              "column": 27,
              "line": 154
            }
          }
        },
        {
          "id": "3285",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 159
            },
            "start": {
              "column": 9,
              "line": 155
            }
          }
        },
        {
          "id": "3286",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 132,
              "line": 161
            },
            "start": {
              "column": 20,
              "line": 161
            }
          }
        },
        {
          "id": "3287",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 128,
              "line": 162
            },
            "start": {
              "column": 16,
              "line": 162
            }
          }
        },
        {
          "id": "3288",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 165
            },
            "start": {
              "column": 13,
              "line": 163
            }
          }
        },
        {
          "id": "3289",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 164
            },
            "start": {
              "column": 16,
              "line": 164
            }
          }
        },
        {
          "id": "3290",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 166
            },
            "start": {
              "column": 16,
              "line": 166
            }
          }
        },
        {
          "id": "3291",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 167
            },
            "start": {
              "column": 12,
              "line": 167
            }
          }
        },
        {
          "id": "3292",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 170
            },
            "start": {
              "column": 16,
              "line": 168
            }
          }
        },
        {
          "id": "3293",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 169
            },
            "start": {
              "column": 23,
              "line": 169
            }
          }
        },
        {
          "id": "3294",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 169
            },
            "start": {
              "column": 24,
              "line": 169
            }
          }
        },
        {
          "id": "3295",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 171
            },
            "start": {
              "column": 18,
              "line": 171
            }
          }
        },
        {
          "id": "3296",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 175
            },
            "start": {
              "column": 9,
              "line": 175
            }
          }
        },
        {
          "id": "3297",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 176
            },
            "start": {
              "column": 12,
              "line": 176
            }
          }
        },
        {
          "id": "3298",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 234
            },
            "start": {
              "column": 3,
              "line": 178
            }
          }
        },
        {
          "id": "3299",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 230
            },
            "start": {
              "column": 11,
              "line": 179
            }
          }
        },
        {
          "id": "3300",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 230
            },
            "start": {
              "column": 24,
              "line": 179
            }
          }
        },
        {
          "id": "3301",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 195
            },
            "start": {
              "column": 20,
              "line": 180
            }
          }
        },
        {
          "id": "3302",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 194
            },
            "start": {
              "column": 9,
              "line": 181
            }
          }
        },
        {
          "id": "3303",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 188
            },
            "start": {
              "column": 31,
              "line": 182
            }
          }
        },
        {
          "id": "3304",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 187
            },
            "start": {
              "column": 13,
              "line": 183
            }
          }
        },
        {
          "id": "3305",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 145,
              "line": 190
            },
            "start": {
              "column": 13,
              "line": 190
            }
          }
        },
        {
          "id": "3306",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 191
            },
            "start": {
              "column": 18,
              "line": 191
            }
          }
        },
        {
          "id": "3307",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 192
            },
            "start": {
              "column": 16,
              "line": 192
            }
          }
        },
        {
          "id": "3308",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 193
            },
            "start": {
              "column": 22,
              "line": 193
            }
          }
        },
        {
          "id": "3309",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 209
            },
            "start": {
              "column": 16,
              "line": 196
            }
          }
        },
        {
          "id": "3310",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 202
            },
            "start": {
              "column": 9,
              "line": 197
            }
          }
        },
        {
          "id": "3311",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 198
            },
            "start": {
              "column": 20,
              "line": 198
            }
          }
        },
        {
          "id": "3312",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 199
            },
            "start": {
              "column": 15,
              "line": 199
            }
          }
        },
        {
          "id": "3313",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 201
            },
            "start": {
              "column": 17,
              "line": 201
            }
          }
        },
        {
          "id": "3314",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 208
            },
            "start": {
              "column": 9,
              "line": 203
            }
          }
        },
        {
          "id": "3315",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 204
            },
            "start": {
              "column": 20,
              "line": 204
            }
          }
        },
        {
          "id": "3316",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 205
            },
            "start": {
              "column": 15,
              "line": 205
            }
          }
        },
        {
          "id": "3317",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 207
            },
            "start": {
              "column": 17,
              "line": 207
            }
          }
        },
        {
          "id": "3318",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 148,
              "line": 210
            },
            "start": {
              "column": 16,
              "line": 210
            }
          }
        },
        {
          "id": "3319",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 139,
              "line": 211
            },
            "start": {
              "column": 20,
              "line": 211
            }
          }
        },
        {
          "id": "3320",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 218
            },
            "start": {
              "column": 27,
              "line": 212
            }
          }
        },
        {
          "id": "3321",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 217
            },
            "start": {
              "column": 9,
              "line": 213
            }
          }
        },
        {
          "id": "3322",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 135,
              "line": 219
            },
            "start": {
              "column": 16,
              "line": 219
            }
          }
        },
        {
          "id": "3323",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 222
            },
            "start": {
              "column": 13,
              "line": 220
            }
          }
        },
        {
          "id": "3324",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 221
            },
            "start": {
              "column": 16,
              "line": 221
            }
          }
        },
        {
          "id": "3325",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 223
            },
            "start": {
              "column": 16,
              "line": 223
            }
          }
        },
        {
          "id": "3326",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 224
            },
            "start": {
              "column": 12,
              "line": 224
            }
          }
        },
        {
          "id": "3327",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 227
            },
            "start": {
              "column": 16,
              "line": 225
            }
          }
        },
        {
          "id": "3328",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 226
            },
            "start": {
              "column": 23,
              "line": 226
            }
          }
        },
        {
          "id": "3329",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 226
            },
            "start": {
              "column": 24,
              "line": 226
            }
          }
        },
        {
          "id": "3330",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 228
            },
            "start": {
              "column": 18,
              "line": 228
            }
          }
        },
        {
          "id": "3331",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 232
            },
            "start": {
              "column": 9,
              "line": 232
            }
          }
        },
        {
          "id": "3332",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 233
            },
            "start": {
              "column": 12,
              "line": 233
            }
          }
        },
        {
          "id": "3333",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 290
            },
            "start": {
              "column": 3,
              "line": 235
            }
          }
        },
        {
          "id": "3334",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 286
            },
            "start": {
              "column": 11,
              "line": 236
            }
          }
        },
        {
          "id": "3335",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 286
            },
            "start": {
              "column": 24,
              "line": 236
            }
          }
        },
        {
          "id": "3336",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 251
            },
            "start": {
              "column": 20,
              "line": 237
            }
          }
        },
        {
          "id": "3337",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 250
            },
            "start": {
              "column": 9,
              "line": 238
            }
          }
        },
        {
          "id": "3338",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 245
            },
            "start": {
              "column": 31,
              "line": 239
            }
          }
        },
        {
          "id": "3339",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 244
            },
            "start": {
              "column": 13,
              "line": 240
            }
          }
        },
        {
          "id": "3340",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 142,
              "line": 246
            },
            "start": {
              "column": 20,
              "line": 246
            }
          }
        },
        {
          "id": "3341",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 247
            },
            "start": {
              "column": 18,
              "line": 247
            }
          }
        },
        {
          "id": "3342",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 248
            },
            "start": {
              "column": 16,
              "line": 248
            }
          }
        },
        {
          "id": "3343",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 249
            },
            "start": {
              "column": 22,
              "line": 249
            }
          }
        },
        {
          "id": "3344",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 265
            },
            "start": {
              "column": 16,
              "line": 252
            }
          }
        },
        {
          "id": "3345",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 258
            },
            "start": {
              "column": 9,
              "line": 253
            }
          }
        },
        {
          "id": "3346",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 254
            },
            "start": {
              "column": 20,
              "line": 254
            }
          }
        },
        {
          "id": "3347",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 255
            },
            "start": {
              "column": 15,
              "line": 255
            }
          }
        },
        {
          "id": "3348",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 257
            },
            "start": {
              "column": 17,
              "line": 257
            }
          }
        },
        {
          "id": "3349",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 264
            },
            "start": {
              "column": 9,
              "line": 259
            }
          }
        },
        {
          "id": "3350",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 260
            },
            "start": {
              "column": 20,
              "line": 260
            }
          }
        },
        {
          "id": "3351",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 261
            },
            "start": {
              "column": 15,
              "line": 261
            }
          }
        },
        {
          "id": "3352",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 263
            },
            "start": {
              "column": 17,
              "line": 263
            }
          }
        },
        {
          "id": "3353",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 138,
              "line": 266
            },
            "start": {
              "column": 16,
              "line": 266
            }
          }
        },
        {
          "id": "3354",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 273
            },
            "start": {
              "column": 27,
              "line": 267
            }
          }
        },
        {
          "id": "3355",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 272
            },
            "start": {
              "column": 9,
              "line": 268
            }
          }
        },
        {
          "id": "3356",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 129,
              "line": 274
            },
            "start": {
              "column": 20,
              "line": 274
            }
          }
        },
        {
          "id": "3357",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 125,
              "line": 275
            },
            "start": {
              "column": 16,
              "line": 275
            }
          }
        },
        {
          "id": "3358",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 278
            },
            "start": {
              "column": 13,
              "line": 276
            }
          }
        },
        {
          "id": "3359",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 277
            },
            "start": {
              "column": 16,
              "line": 277
            }
          }
        },
        {
          "id": "3360",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 279
            },
            "start": {
              "column": 16,
              "line": 279
            }
          }
        },
        {
          "id": "3361",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 280
            },
            "start": {
              "column": 12,
              "line": 280
            }
          }
        },
        {
          "id": "3362",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 283
            },
            "start": {
              "column": 16,
              "line": 281
            }
          }
        },
        {
          "id": "3363",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 282
            },
            "start": {
              "column": 23,
              "line": 282
            }
          }
        },
        {
          "id": "3364",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 282
            },
            "start": {
              "column": 24,
              "line": 282
            }
          }
        },
        {
          "id": "3365",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 284
            },
            "start": {
              "column": 18,
              "line": 284
            }
          }
        },
        {
          "id": "3366",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 288
            },
            "start": {
              "column": 9,
              "line": 288
            }
          }
        },
        {
          "id": "3367",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 289
            },
            "start": {
              "column": 12,
              "line": 289
            }
          }
        },
        {
          "id": "3368",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 346
            },
            "start": {
              "column": 3,
              "line": 291
            }
          }
        },
        {
          "id": "3369",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 342
            },
            "start": {
              "column": 11,
              "line": 292
            }
          }
        },
        {
          "id": "3370",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 342
            },
            "start": {
              "column": 24,
              "line": 292
            }
          }
        },
        {
          "id": "3371",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 307
            },
            "start": {
              "column": 20,
              "line": 293
            }
          }
        },
        {
          "id": "3372",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 306
            },
            "start": {
              "column": 9,
              "line": 294
            }
          }
        },
        {
          "id": "3373",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 301
            },
            "start": {
              "column": 31,
              "line": 295
            }
          }
        },
        {
          "id": "3374",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 300
            },
            "start": {
              "column": 13,
              "line": 296
            }
          }
        },
        {
          "id": "3375",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 121,
              "line": 302
            },
            "start": {
              "column": 20,
              "line": 302
            }
          }
        },
        {
          "id": "3376",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 303
            },
            "start": {
              "column": 16,
              "line": 303
            }
          }
        },
        {
          "id": "3377",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 304
            },
            "start": {
              "column": 18,
              "line": 304
            }
          }
        },
        {
          "id": "3378",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 305
            },
            "start": {
              "column": 22,
              "line": 305
            }
          }
        },
        {
          "id": "3379",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 321
            },
            "start": {
              "column": 16,
              "line": 308
            }
          }
        },
        {
          "id": "3380",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 314
            },
            "start": {
              "column": 9,
              "line": 309
            }
          }
        },
        {
          "id": "3381",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 310
            },
            "start": {
              "column": 20,
              "line": 310
            }
          }
        },
        {
          "id": "3382",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 311
            },
            "start": {
              "column": 15,
              "line": 311
            }
          }
        },
        {
          "id": "3383",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 313
            },
            "start": {
              "column": 17,
              "line": 313
            }
          }
        },
        {
          "id": "3384",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 320
            },
            "start": {
              "column": 9,
              "line": 315
            }
          }
        },
        {
          "id": "3385",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 316
            },
            "start": {
              "column": 20,
              "line": 316
            }
          }
        },
        {
          "id": "3386",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 317
            },
            "start": {
              "column": 15,
              "line": 317
            }
          }
        },
        {
          "id": "3387",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 319
            },
            "start": {
              "column": 17,
              "line": 319
            }
          }
        },
        {
          "id": "3388",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 328
            },
            "start": {
              "column": 27,
              "line": 322
            }
          }
        },
        {
          "id": "3389",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 327
            },
            "start": {
              "column": 9,
              "line": 323
            }
          }
        },
        {
          "id": "3390",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 117,
              "line": 329
            },
            "start": {
              "column": 16,
              "line": 329
            }
          }
        },
        {
          "id": "3391",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 108,
              "line": 330
            },
            "start": {
              "column": 20,
              "line": 330
            }
          }
        },
        {
          "id": "3392",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 331
            },
            "start": {
              "column": 16,
              "line": 331
            }
          }
        },
        {
          "id": "3393",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 332
            },
            "start": {
              "column": 16,
              "line": 332
            }
          }
        },
        {
          "id": "3394",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 333
            },
            "start": {
              "column": 12,
              "line": 333
            }
          }
        },
        {
          "id": "3395",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 336
            },
            "start": {
              "column": 13,
              "line": 334
            }
          }
        },
        {
          "id": "3396",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 335
            },
            "start": {
              "column": 16,
              "line": 335
            }
          }
        },
        {
          "id": "3397",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 339
            },
            "start": {
              "column": 16,
              "line": 337
            }
          }
        },
        {
          "id": "3398",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 338
            },
            "start": {
              "column": 23,
              "line": 338
            }
          }
        },
        {
          "id": "3399",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 338
            },
            "start": {
              "column": 24,
              "line": 338
            }
          }
        },
        {
          "id": "3400",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 340
            },
            "start": {
              "column": 18,
              "line": 340
            }
          }
        },
        {
          "id": "3401",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 344
            },
            "start": {
              "column": 9,
              "line": 344
            }
          }
        },
        {
          "id": "3402",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 15,
              "line": 345
            },
            "start": {
              "column": 12,
              "line": 345
            }
          }
        },
        {
          "id": "3403",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 402
            },
            "start": {
              "column": 3,
              "line": 347
            }
          }
        },
        {
          "id": "3404",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 398
            },
            "start": {
              "column": 11,
              "line": 348
            }
          }
        },
        {
          "id": "3405",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 398
            },
            "start": {
              "column": 24,
              "line": 348
            }
          }
        },
        {
          "id": "3406",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 363
            },
            "start": {
              "column": 20,
              "line": 349
            }
          }
        },
        {
          "id": "3407",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 362
            },
            "start": {
              "column": 9,
              "line": 350
            }
          }
        },
        {
          "id": "3408",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 357
            },
            "start": {
              "column": 31,
              "line": 351
            }
          }
        },
        {
          "id": "3409",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 356
            },
            "start": {
              "column": 13,
              "line": 352
            }
          }
        },
        {
          "id": "3410",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 133,
              "line": 358
            },
            "start": {
              "column": 20,
              "line": 358
            }
          }
        },
        {
          "id": "3411",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 359
            },
            "start": {
              "column": 16,
              "line": 359
            }
          }
        },
        {
          "id": "3412",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 360
            },
            "start": {
              "column": 18,
              "line": 360
            }
          }
        },
        {
          "id": "3413",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 361
            },
            "start": {
              "column": 22,
              "line": 361
            }
          }
        },
        {
          "id": "3414",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 377
            },
            "start": {
              "column": 16,
              "line": 364
            }
          }
        },
        {
          "id": "3415",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 370
            },
            "start": {
              "column": 9,
              "line": 365
            }
          }
        },
        {
          "id": "3416",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 366
            },
            "start": {
              "column": 20,
              "line": 366
            }
          }
        },
        {
          "id": "3417",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 367
            },
            "start": {
              "column": 15,
              "line": 367
            }
          }
        },
        {
          "id": "3418",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 369
            },
            "start": {
              "column": 17,
              "line": 369
            }
          }
        },
        {
          "id": "3419",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 376
            },
            "start": {
              "column": 9,
              "line": 371
            }
          }
        },
        {
          "id": "3420",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 372
            },
            "start": {
              "column": 20,
              "line": 372
            }
          }
        },
        {
          "id": "3421",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 373
            },
            "start": {
              "column": 15,
              "line": 373
            }
          }
        },
        {
          "id": "3422",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 375
            },
            "start": {
              "column": 17,
              "line": 375
            }
          }
        },
        {
          "id": "3423",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 384
            },
            "start": {
              "column": 27,
              "line": 378
            }
          }
        },
        {
          "id": "3424",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 383
            },
            "start": {
              "column": 9,
              "line": 379
            }
          }
        },
        {
          "id": "3425",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 129,
              "line": 385
            },
            "start": {
              "column": 16,
              "line": 385
            }
          }
        },
        {
          "id": "3426",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 120,
              "line": 386
            },
            "start": {
              "column": 20,
              "line": 386
            }
          }
        },
        {
          "id": "3427",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 116,
              "line": 387
            },
            "start": {
              "column": 16,
              "line": 387
            }
          }
        },
        {
          "id": "3428",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 388
            },
            "start": {
              "column": 16,
              "line": 388
            }
          }
        },
        {
          "id": "3429",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 389
            },
            "start": {
              "column": 12,
              "line": 389
            }
          }
        },
        {
          "id": "3430",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 392
            },
            "start": {
              "column": 13,
              "line": 390
            }
          }
        },
        {
          "id": "3431",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 391
            },
            "start": {
              "column": 16,
              "line": 391
            }
          }
        },
        {
          "id": "3432",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 395
            },
            "start": {
              "column": 16,
              "line": 393
            }
          }
        },
        {
          "id": "3433",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 394
            },
            "start": {
              "column": 23,
              "line": 394
            }
          }
        },
        {
          "id": "3434",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 394
            },
            "start": {
              "column": 24,
              "line": 394
            }
          }
        },
        {
          "id": "3435",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 396
            },
            "start": {
              "column": 18,
              "line": 396
            }
          }
        },
        {
          "id": "3436",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 400
            },
            "start": {
              "column": 9,
              "line": 400
            }
          }
        },
        {
          "id": "3437",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 401
            },
            "start": {
              "column": 12,
              "line": 401
            }
          }
        },
        {
          "id": "3438",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 458
            },
            "start": {
              "column": 3,
              "line": 403
            }
          }
        },
        {
          "id": "3439",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 454
            },
            "start": {
              "column": 11,
              "line": 404
            }
          }
        },
        {
          "id": "3440",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 454
            },
            "start": {
              "column": 24,
              "line": 404
            }
          }
        },
        {
          "id": "3441",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 419
            },
            "start": {
              "column": 20,
              "line": 405
            }
          }
        },
        {
          "id": "3442",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 418
            },
            "start": {
              "column": 9,
              "line": 406
            }
          }
        },
        {
          "id": "3443",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 413
            },
            "start": {
              "column": 31,
              "line": 407
            }
          }
        },
        {
          "id": "3444",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 412
            },
            "start": {
              "column": 13,
              "line": 408
            }
          }
        },
        {
          "id": "3445",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 140,
              "line": 414
            },
            "start": {
              "column": 20,
              "line": 414
            }
          }
        },
        {
          "id": "3446",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 415
            },
            "start": {
              "column": 16,
              "line": 415
            }
          }
        },
        {
          "id": "3447",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 416
            },
            "start": {
              "column": 18,
              "line": 416
            }
          }
        },
        {
          "id": "3448",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 417
            },
            "start": {
              "column": 22,
              "line": 417
            }
          }
        },
        {
          "id": "3449",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 433
            },
            "start": {
              "column": 16,
              "line": 420
            }
          }
        },
        {
          "id": "3450",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 426
            },
            "start": {
              "column": 9,
              "line": 421
            }
          }
        },
        {
          "id": "3451",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 422
            },
            "start": {
              "column": 20,
              "line": 422
            }
          }
        },
        {
          "id": "3452",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 423
            },
            "start": {
              "column": 15,
              "line": 423
            }
          }
        },
        {
          "id": "3453",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 425
            },
            "start": {
              "column": 17,
              "line": 425
            }
          }
        },
        {
          "id": "3454",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 432
            },
            "start": {
              "column": 9,
              "line": 427
            }
          }
        },
        {
          "id": "3455",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 428
            },
            "start": {
              "column": 20,
              "line": 428
            }
          }
        },
        {
          "id": "3456",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 429
            },
            "start": {
              "column": 15,
              "line": 429
            }
          }
        },
        {
          "id": "3457",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 431
            },
            "start": {
              "column": 17,
              "line": 431
            }
          }
        },
        {
          "id": "3458",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 136,
              "line": 434
            },
            "start": {
              "column": 16,
              "line": 434
            }
          }
        },
        {
          "id": "3459",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 441
            },
            "start": {
              "column": 27,
              "line": 435
            }
          }
        },
        {
          "id": "3460",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 440
            },
            "start": {
              "column": 9,
              "line": 436
            }
          }
        },
        {
          "id": "3461",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 127,
              "line": 442
            },
            "start": {
              "column": 20,
              "line": 442
            }
          }
        },
        {
          "id": "3462",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 123,
              "line": 443
            },
            "start": {
              "column": 16,
              "line": 443
            }
          }
        },
        {
          "id": "3463",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 444
            },
            "start": {
              "column": 16,
              "line": 444
            }
          }
        },
        {
          "id": "3464",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 445
            },
            "start": {
              "column": 12,
              "line": 445
            }
          }
        },
        {
          "id": "3465",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 448
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "3466",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 447
            },
            "start": {
              "column": 16,
              "line": 447
            }
          }
        },
        {
          "id": "3467",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 451
            },
            "start": {
              "column": 16,
              "line": 449
            }
          }
        },
        {
          "id": "3468",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 450
            },
            "start": {
              "column": 23,
              "line": 450
            }
          }
        },
        {
          "id": "3469",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 450
            },
            "start": {
              "column": 24,
              "line": 450
            }
          }
        },
        {
          "id": "3470",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 452
            },
            "start": {
              "column": 18,
              "line": 452
            }
          }
        },
        {
          "id": "3471",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 456
            },
            "start": {
              "column": 9,
              "line": 456
            }
          }
        },
        {
          "id": "3472",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 457
            },
            "start": {
              "column": 12,
              "line": 457
            }
          }
        },
        {
          "id": "3473",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 515
            },
            "start": {
              "column": 3,
              "line": 459
            }
          }
        },
        {
          "id": "3474",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 511
            },
            "start": {
              "column": 11,
              "line": 460
            }
          }
        },
        {
          "id": "3475",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 511
            },
            "start": {
              "column": 24,
              "line": 460
            }
          }
        },
        {
          "id": "3476",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 476
            },
            "start": {
              "column": 20,
              "line": 461
            }
          }
        },
        {
          "id": "3477",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 475
            },
            "start": {
              "column": 9,
              "line": 462
            }
          }
        },
        {
          "id": "3478",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 145,
              "line": 464
            },
            "start": {
              "column": 13,
              "line": 464
            }
          }
        },
        {
          "id": "3479",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 471
            },
            "start": {
              "column": 31,
              "line": 465
            }
          }
        },
        {
          "id": "3480",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 470
            },
            "start": {
              "column": 13,
              "line": 466
            }
          }
        },
        {
          "id": "3481",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 472
            },
            "start": {
              "column": 16,
              "line": 472
            }
          }
        },
        {
          "id": "3482",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 473
            },
            "start": {
              "column": 18,
              "line": 473
            }
          }
        },
        {
          "id": "3483",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 474
            },
            "start": {
              "column": 22,
              "line": 474
            }
          }
        },
        {
          "id": "3484",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 490
            },
            "start": {
              "column": 16,
              "line": 477
            }
          }
        },
        {
          "id": "3485",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 483
            },
            "start": {
              "column": 9,
              "line": 478
            }
          }
        },
        {
          "id": "3486",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 479
            },
            "start": {
              "column": 20,
              "line": 479
            }
          }
        },
        {
          "id": "3487",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 480
            },
            "start": {
              "column": 15,
              "line": 480
            }
          }
        },
        {
          "id": "3488",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 482
            },
            "start": {
              "column": 17,
              "line": 482
            }
          }
        },
        {
          "id": "3489",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 489
            },
            "start": {
              "column": 9,
              "line": 484
            }
          }
        },
        {
          "id": "3490",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 485
            },
            "start": {
              "column": 20,
              "line": 485
            }
          }
        },
        {
          "id": "3491",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 486
            },
            "start": {
              "column": 15,
              "line": 486
            }
          }
        },
        {
          "id": "3492",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 488
            },
            "start": {
              "column": 17,
              "line": 488
            }
          }
        },
        {
          "id": "3493",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 148,
              "line": 491
            },
            "start": {
              "column": 16,
              "line": 491
            }
          }
        },
        {
          "id": "3494",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 139,
              "line": 492
            },
            "start": {
              "column": 20,
              "line": 492
            }
          }
        },
        {
          "id": "3495",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 499
            },
            "start": {
              "column": 27,
              "line": 493
            }
          }
        },
        {
          "id": "3496",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 498
            },
            "start": {
              "column": 9,
              "line": 494
            }
          }
        },
        {
          "id": "3497",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 135,
              "line": 500
            },
            "start": {
              "column": 16,
              "line": 500
            }
          }
        },
        {
          "id": "3498",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 501
            },
            "start": {
              "column": 16,
              "line": 501
            }
          }
        },
        {
          "id": "3499",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 76,
              "line": 502
            },
            "start": {
              "column": 12,
              "line": 502
            }
          }
        },
        {
          "id": "3500",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 505
            },
            "start": {
              "column": 13,
              "line": 503
            }
          }
        },
        {
          "id": "3501",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 504
            },
            "start": {
              "column": 16,
              "line": 504
            }
          }
        },
        {
          "id": "3502",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 508
            },
            "start": {
              "column": 16,
              "line": 506
            }
          }
        },
        {
          "id": "3503",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 507
            },
            "start": {
              "column": 23,
              "line": 507
            }
          }
        },
        {
          "id": "3504",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 507
            },
            "start": {
              "column": 24,
              "line": 507
            }
          }
        },
        {
          "id": "3505",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 509
            },
            "start": {
              "column": 18,
              "line": 509
            }
          }
        },
        {
          "id": "3506",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 513
            },
            "start": {
              "column": 9,
              "line": 513
            }
          }
        },
        {
          "id": "3507",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 514
            },
            "start": {
              "column": 12,
              "line": 514
            }
          }
        },
        {
          "id": "3508",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 601
            },
            "start": {
              "column": 3,
              "line": 516
            }
          }
        },
        {
          "id": "3509",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 597
            },
            "start": {
              "column": 11,
              "line": 517
            }
          }
        },
        {
          "id": "3510",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 597
            },
            "start": {
              "column": 24,
              "line": 517
            }
          }
        },
        {
          "id": "3511",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 539
            },
            "start": {
              "column": 20,
              "line": 518
            }
          }
        },
        {
          "id": "3512",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 538
            },
            "start": {
              "column": 9,
              "line": 519
            }
          }
        },
        {
          "id": "3513",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 525
            },
            "start": {
              "column": 19,
              "line": 520
            }
          }
        },
        {
          "id": "3514",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 521
            },
            "start": {
              "column": 19,
              "line": 521
            }
          }
        },
        {
          "id": "3515",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 522
            },
            "start": {
              "column": 17,
              "line": 522
            }
          }
        },
        {
          "id": "3516",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 523
            },
            "start": {
              "column": 22,
              "line": 523
            }
          }
        },
        {
          "id": "3517",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 160,
              "line": 527
            },
            "start": {
              "column": 13,
              "line": 527
            }
          }
        },
        {
          "id": "3518",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 534
            },
            "start": {
              "column": 31,
              "line": 528
            }
          }
        },
        {
          "id": "3519",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 533
            },
            "start": {
              "column": 13,
              "line": 529
            }
          }
        },
        {
          "id": "3520",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 535
            },
            "start": {
              "column": 16,
              "line": 535
            }
          }
        },
        {
          "id": "3521",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 536
            },
            "start": {
              "column": 18,
              "line": 536
            }
          }
        },
        {
          "id": "3522",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 537
            },
            "start": {
              "column": 22,
              "line": 537
            }
          }
        },
        {
          "id": "3523",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 571
            },
            "start": {
              "column": 16,
              "line": 540
            }
          }
        },
        {
          "id": "3524",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 546
            },
            "start": {
              "column": 9,
              "line": 541
            }
          }
        },
        {
          "id": "3525",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 542
            },
            "start": {
              "column": 20,
              "line": 542
            }
          }
        },
        {
          "id": "3526",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 543
            },
            "start": {
              "column": 15,
              "line": 543
            }
          }
        },
        {
          "id": "3527",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 545
            },
            "start": {
              "column": 17,
              "line": 545
            }
          }
        },
        {
          "id": "3528",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 552
            },
            "start": {
              "column": 9,
              "line": 547
            }
          }
        },
        {
          "id": "3529",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 548
            },
            "start": {
              "column": 20,
              "line": 548
            }
          }
        },
        {
          "id": "3530",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 549
            },
            "start": {
              "column": 15,
              "line": 549
            }
          }
        },
        {
          "id": "3531",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 551
            },
            "start": {
              "column": 17,
              "line": 551
            }
          }
        },
        {
          "id": "3532",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 558
            },
            "start": {
              "column": 9,
              "line": 553
            }
          }
        },
        {
          "id": "3533",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 554
            },
            "start": {
              "column": 17,
              "line": 554
            }
          }
        },
        {
          "id": "3534",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 555
            },
            "start": {
              "column": 15,
              "line": 555
            }
          }
        },
        {
          "id": "3535",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 556
            },
            "start": {
              "column": 20,
              "line": 556
            }
          }
        },
        {
          "id": "3536",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 564
            },
            "start": {
              "column": 9,
              "line": 559
            }
          }
        },
        {
          "id": "3537",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 560
            },
            "start": {
              "column": 17,
              "line": 560
            }
          }
        },
        {
          "id": "3538",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 561
            },
            "start": {
              "column": 15,
              "line": 561
            }
          }
        },
        {
          "id": "3539",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 562
            },
            "start": {
              "column": 20,
              "line": 562
            }
          }
        },
        {
          "id": "3540",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 570
            },
            "start": {
              "column": 9,
              "line": 565
            }
          }
        },
        {
          "id": "3541",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 566
            },
            "start": {
              "column": 20,
              "line": 566
            }
          }
        },
        {
          "id": "3542",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 567
            },
            "start": {
              "column": 17,
              "line": 567
            }
          }
        },
        {
          "id": "3543",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 569
            },
            "start": {
              "column": 15,
              "line": 569
            }
          }
        },
        {
          "id": "3544",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 235,
              "line": 573
            },
            "start": {
              "column": 9,
              "line": 573
            }
          }
        },
        {
          "id": "3545",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 235,
              "line": 575
            },
            "start": {
              "column": 9,
              "line": 575
            }
          }
        },
        {
          "id": "3546",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 196,
              "line": 577
            },
            "start": {
              "column": 9,
              "line": 577
            }
          }
        },
        {
          "id": "3547",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 582
            },
            "start": {
              "column": 13,
              "line": 578
            }
          }
        },
        {
          "id": "3548",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 579
            },
            "start": {
              "column": 16,
              "line": 579
            }
          }
        },
        {
          "id": "3549",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 580
            },
            "start": {
              "column": 20,
              "line": 580
            }
          }
        },
        {
          "id": "3550",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 581
            },
            "start": {
              "column": 16,
              "line": 581
            }
          }
        },
        {
          "id": "3551",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 589
            },
            "start": {
              "column": 27,
              "line": 583
            }
          }
        },
        {
          "id": "3552",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 588
            },
            "start": {
              "column": 9,
              "line": 584
            }
          }
        },
        {
          "id": "3553",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 590
            },
            "start": {
              "column": 16,
              "line": 590
            }
          }
        },
        {
          "id": "3554",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 591
            },
            "start": {
              "column": 12,
              "line": 591
            }
          }
        },
        {
          "id": "3555",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 594
            },
            "start": {
              "column": 16,
              "line": 592
            }
          }
        },
        {
          "id": "3556",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 593
            },
            "start": {
              "column": 23,
              "line": 593
            }
          }
        },
        {
          "id": "3557",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 593
            },
            "start": {
              "column": 24,
              "line": 593
            }
          }
        },
        {
          "id": "3558",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 595
            },
            "start": {
              "column": 18,
              "line": 595
            }
          }
        },
        {
          "id": "3559",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 599
            },
            "start": {
              "column": 9,
              "line": 599
            }
          }
        },
        {
          "id": "3560",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 600
            },
            "start": {
              "column": 12,
              "line": 600
            }
          }
        },
        {
          "id": "3561",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 661
            },
            "start": {
              "column": 3,
              "line": 602
            }
          }
        },
        {
          "id": "3562",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 7,
              "line": 657
            },
            "start": {
              "column": 11,
              "line": 603
            }
          }
        },
        {
          "id": "3563",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 657
            },
            "start": {
              "column": 24,
              "line": 603
            }
          }
        },
        {
          "id": "3564",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 619
            },
            "start": {
              "column": 20,
              "line": 604
            }
          }
        },
        {
          "id": "3565",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 618
            },
            "start": {
              "column": 9,
              "line": 605
            }
          }
        },
        {
          "id": "3566",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 167,
              "line": 607
            },
            "start": {
              "column": 13,
              "line": 607
            }
          }
        },
        {
          "id": "3567",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 614
            },
            "start": {
              "column": 31,
              "line": 608
            }
          }
        },
        {
          "id": "3568",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 613
            },
            "start": {
              "column": 13,
              "line": 609
            }
          }
        },
        {
          "id": "3569",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 615
            },
            "start": {
              "column": 16,
              "line": 615
            }
          }
        },
        {
          "id": "3570",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 616
            },
            "start": {
              "column": 18,
              "line": 616
            }
          }
        },
        {
          "id": "3571",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 617
            },
            "start": {
              "column": 22,
              "line": 617
            }
          }
        },
        {
          "id": "3572",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 633
            },
            "start": {
              "column": 16,
              "line": 620
            }
          }
        },
        {
          "id": "3573",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 626
            },
            "start": {
              "column": 9,
              "line": 621
            }
          }
        },
        {
          "id": "3574",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 622
            },
            "start": {
              "column": 20,
              "line": 622
            }
          }
        },
        {
          "id": "3575",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 623
            },
            "start": {
              "column": 15,
              "line": 623
            }
          }
        },
        {
          "id": "3576",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 625
            },
            "start": {
              "column": 17,
              "line": 625
            }
          }
        },
        {
          "id": "3577",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 632
            },
            "start": {
              "column": 9,
              "line": 627
            }
          }
        },
        {
          "id": "3578",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 628
            },
            "start": {
              "column": 20,
              "line": 628
            }
          }
        },
        {
          "id": "3579",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 629
            },
            "start": {
              "column": 15,
              "line": 629
            }
          }
        },
        {
          "id": "3580",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 631
            },
            "start": {
              "column": 17,
              "line": 631
            }
          }
        },
        {
          "id": "3581",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 163,
              "line": 635
            },
            "start": {
              "column": 9,
              "line": 635
            }
          }
        },
        {
          "id": "3582",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 150,
              "line": 637
            },
            "start": {
              "column": 9,
              "line": 637
            }
          }
        },
        {
          "id": "3583",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 150,
              "line": 639
            },
            "start": {
              "column": 9,
              "line": 639
            }
          }
        },
        {
          "id": "3584",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 646
            },
            "start": {
              "column": 27,
              "line": 640
            }
          }
        },
        {
          "id": "3585",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 645
            },
            "start": {
              "column": 9,
              "line": 641
            }
          }
        },
        {
          "id": "3586",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 647
            },
            "start": {
              "column": 16,
              "line": 647
            }
          }
        },
        {
          "id": "3587",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 648
            },
            "start": {
              "column": 12,
              "line": 648
            }
          }
        },
        {
          "id": "3588",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 651
            },
            "start": {
              "column": 13,
              "line": 649
            }
          }
        },
        {
          "id": "3589",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 650
            },
            "start": {
              "column": 16,
              "line": 650
            }
          }
        },
        {
          "id": "3590",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 654
            },
            "start": {
              "column": 16,
              "line": 652
            }
          }
        },
        {
          "id": "3591",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 653
            },
            "start": {
              "column": 23,
              "line": 653
            }
          }
        },
        {
          "id": "3592",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 653
            },
            "start": {
              "column": 24,
              "line": 653
            }
          }
        },
        {
          "id": "3593",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 655
            },
            "start": {
              "column": 18,
              "line": 655
            }
          }
        },
        {
          "id": "3594",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 659
            },
            "start": {
              "column": 9,
              "line": 659
            }
          }
        },
        {
          "id": "3595",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 660
            },
            "start": {
              "column": 12,
              "line": 660
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n/* eslint-disable no-magic-numbers */\n/* eslint-disable require-await */\n/* eslint-disable perfectionist/sort-objects */\n\nexport const FAKE_RESULTS: PagefindSearchResult[] = [\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 11,\n              weight: 1\n            }\n          ],\n          excerpt: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test <mark>Hello</mark> world! (bis).',\n          url: '/server/app/en/blog/patch-notes-bis/dashboard-bis/post-01.html',\n          title: 'Dashboard note (bis)',\n          locations: [11]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 8,\n          text: ''\n        }\n      ],\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 11,\n          weight: 1\n        }\n      ],\n      excerpt: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test <mark>Hello</mark> world! (bis).',\n      raw_content: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test Hello world! (bis).',\n      content: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test Hello world! (bis).',\n      raw_url: '/server/app/en/blog/patch-notes-bis/dashboard-bis/post-01.html',\n      url: '/server/app/en/blog/patch-notes-bis/dashboard-bis/post-01.html',\n      filters: {\n        documentType: ['BlogPost']\n      },\n      meta: {\n        title: 'Dashboard note (bis)'\n      },\n      locations: [11],\n      word_count: 14\n    }),\n\n    id: 'en_e2b5cd7',\n    score: 0.0748041,\n    words: [11]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 11,\n              weight: 1\n            }\n          ],\n          excerpt: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test <mark>Hello</mark> world! (bis).',\n          url: '/server/app/en/blog/patch-notes-bis/dashboard-bis/post-01.html',\n          title: 'Dashboard note (bis)',\n          locations: [11]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 8,\n          text: ''\n        }\n      ],\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 11,\n          weight: 1\n        }\n      ],\n      excerpt: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test <mark>Hello</mark> world! (bis).',\n      raw_content: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test Hello world! (bis).',\n      content: 'Dashboard note (bis). Dec 24, 2021, 9:00 PM Dashboard note test Hello world! (bis).',\n      raw_url: '/server/app/en/blog/patch-notes-bis/dashboard-bis/post-01.html',\n      url: '/server/app/en/blog/patch-notes-bis/dashboard-bis/post-01.html',\n      filters: {\n        documentType: ['BlogPost']\n      },\n      meta: {\n        title: 'Dashboard note (bis)'\n      },\n      locations: [11],\n      word_count: 14\n    }),\n    score: 0.074523866,\n    id: 'en_9fb5eda',\n    words: [11]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 15,\n              weight: 1\n            }\n          ],\n          excerpt: 'Organizing Your Workspace for Maximum Productivity 🗂️. Dec 24, 2022, 9:00 PM Dashboard note test <mark>Hello</mark> world!',\n          title: 'Organizing Your Workspace for Maximum Productivity 🗂️',\n          url: '/server/app/en/blog/patch-notes/dashboard/post-26.html',\n          locations: [15]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 12,\n          text: ''\n        }\n      ],\n      excerpt: 'Organizing Your Workspace for Maximum Productivity 🗂️. Dec 24, 2022, 9:00 PM Dashboard note test <mark>Hello</mark> world!',\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 15,\n          weight: 1\n        }\n      ],\n      raw_content: 'Organizing Your Workspace for Maximum Productivity 🗂️. Dec 24, 2022, 9:00 PM Dashboard note test Hello world!',\n      content: 'Organizing Your Workspace for Maximum Productivity 🗂️. Dec 24, 2022, 9:00 PM Dashboard note test Hello world!',\n      meta: {\n        title: 'Organizing Your Workspace for Maximum Productivity 🗂️'\n      },\n      raw_url: '/server/app/en/blog/patch-notes/dashboard/post-26.html',\n      url: '/server/app/en/blog/patch-notes/dashboard/post-26.html',\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [15],\n      word_count: 17\n    }),\n    score: 0.07369562,\n    id: 'en_2f90e76',\n    words: [15]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 16,\n              weight: 1\n            }\n          ],\n          excerpt:\n            'Surprising Benefits of Regular Intermittent Fasting Practice ⏰ Dec 24, 2022, 9:00 PM Dashboard note test <mark>Hello</mark> world!',\n          title: 'Surprising Benefits of Regular Intermittent Fasting Practice ⏰',\n          url: '/server/app/en/blog/patch-notes/dashboard/post-47.html',\n          locations: [16]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 13,\n          text: ''\n        }\n      ],\n      excerpt: 'Surprising Benefits of Regular Intermittent Fasting Practice ⏰ Dec 24, 2022, 9:00 PM Dashboard note test <mark>Hello</mark> world!',\n      raw_content: 'Surprising Benefits of Regular Intermittent Fasting Practice ⏰ Dec 24, 2022, 9:00 PM Dashboard note test Hello world!',\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 16,\n          weight: 1\n        }\n      ],\n      content: 'Surprising Benefits of Regular Intermittent Fasting Practice ⏰ Dec 24, 2022, 9:00 PM Dashboard note test Hello world!',\n      meta: {\n        title: 'Surprising Benefits of Regular Intermittent Fasting Practice ⏰'\n      },\n      raw_url: '/server/app/en/blog/patch-notes/dashboard/post-47.html',\n      url: '/server/app/en/blog/patch-notes/dashboard/post-47.html',\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [16],\n      word_count: 18\n    }),\n    score: 0.073423624,\n    id: 'en_644c198',\n    words: [16]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 17,\n              weight: 1\n            }\n          ],\n          excerpt: 'Best Personal Development Books to Read This Year 📖 Dec 24, 2022, 9:00 PM Dashboard note test <mark>Hello</mark> world!',\n          title: 'Best Personal Development Books to Read This Year 📖',\n          url: '/server/app/en/blog/patch-notes/dashboard/post-32.html',\n          locations: [17]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 14,\n          text: ''\n        }\n      ],\n      excerpt: 'Best Personal Development Books to Read This Year 📖 Dec 24, 2022, 9:00 PM Dashboard note test <mark>Hello</mark> world!',\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 17,\n          weight: 1\n        }\n      ],\n      raw_content: 'Best Personal Development Books to Read This Year 📖 Dec 24, 2022, 9:00 PM Dashboard note test Hello world!',\n      content: 'Best Personal Development Books to Read This Year 📖 Dec 24, 2022, 9:00 PM Dashboard note test Hello world!',\n      meta: {\n        title: 'Best Personal Development Books to Read This Year 📖'\n      },\n      raw_url: '/server/app/en/blog/patch-notes/dashboard/post-32.html',\n      url: '/server/app/en/blog/patch-notes/dashboard/post-32.html',\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [17],\n      word_count: 19\n    }),\n    score: 0.073153615,\n    id: 'en_92d46e3',\n    words: [17]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 9,\n              weight: 1\n            }\n          ],\n          excerpt: 'Note relative au bot Discord. Vendredi 24 décembre 2021 <mark>Salut,</mark> je fais des tests! LOL.',\n          url: '/server/app/fr/blog/patch-notes/discord-bot/post-01.html',\n          title: 'Note relative au bot Discord',\n          locations: [9]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 9,\n          text: ''\n        }\n      ],\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 9,\n          weight: 1\n        }\n      ],\n      excerpt: 'Note relative au bot Discord. Vendredi 24 décembre 2021 <mark>Salut,</mark> je fais des tests! LOL.',\n      raw_content: 'Note relative au bot Discord. Vendredi 24 décembre 2021 Salut, je fais des tests! LOL.',\n      content: 'Note relative au bot Discord. Vendredi 24 décembre 2021 Salut, je fais des tests! LOL.',\n      raw_url: '/server/app/fr/blog/patch-notes/discord-bot/post-01.html',\n      url: '/server/app/fr/blog/patch-notes/discord-bot/post-01.html',\n      meta: {\n        title: 'Note relative au bot Discord'\n      },\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [9],\n      word_count: 15\n    }),\n    score: 0.15284202,\n    id: 'fr_5cada67',\n    words: [9]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 10,\n              weight: 1\n            }\n          ],\n          excerpt: 'Note relative au bot Discord (bis). Vendredi 24 décembre 2021 <mark>Salut,</mark> je fais des tests! LOL (bis).',\n          url: '/server/app/fr/blog/patch-notes-bis/discord-bot-bis/post-01.html',\n          title: 'Note relative au bot Discord (bis)',\n          locations: [10]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 10,\n          text: ''\n        }\n      ],\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 10,\n          weight: 1\n        }\n      ],\n      excerpt: 'Note relative au bot Discord (bis). Vendredi 24 décembre 2021 <mark>Salut,</mark> je fais des tests! LOL (bis).',\n      raw_content: 'Note relative au bot Discord (bis). Vendredi 24 décembre 2021 Salut, je fais des tests! LOL (bis).',\n      content: 'Note relative au bot Discord (bis). Vendredi 24 décembre 2021 Salut, je fais des tests! LOL (bis).',\n      raw_url: '/server/app/fr/blog/patch-notes-bis/discord-bot-bis/post-01.html',\n      url: '/server/app/fr/blog/patch-notes-bis/discord-bot-bis/post-01.html',\n      meta: {\n        title: 'Note relative au bot Discord (bis)'\n      },\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [10],\n      word_count: 17\n    }),\n    score: 0.14520231,\n    id: 'fr_5f6012d',\n    words: [10]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 14,\n              weight: 1\n            }\n          ],\n          excerpt: 'Note relative au Dashboard. 12 janv. 2017, 12:30 Test de note relative au Dashboard <mark>Salut</mark> tout le monde !',\n          url: '/server/app/fr/blog/patch-notes/dashboard/post-05.html',\n          title: 'Note relative au Dashboard',\n          locations: [14]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 8,\n          text: ''\n        }\n      ],\n      excerpt: 'Note relative au Dashboard. 12 janv. 2017, 12:30 Test de note relative au Dashboard <mark>Salut</mark> tout le monde !',\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 14,\n          weight: 1\n        }\n      ],\n      raw_content: 'Note relative au Dashboard. 12 janv. 2017, 12:30 Test de note relative au Dashboard Salut tout le monde !',\n      content: 'Note relative au Dashboard. 12 janv. 2017, 12:30 Test de note relative au Dashboard Salut tout le monde !',\n      raw_url: '/server/app/fr/blog/patch-notes/dashboard/post-05.html',\n      url: '/server/app/fr/blog/patch-notes/dashboard/post-05.html',\n      meta: {\n        title: 'Note relative au Dashboard'\n      },\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [14],\n      word_count: 19\n    }),\n    score: 0.13828999,\n    id: 'fr_ebee6e2',\n    words: [14]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          excerpt:\n            'Note relative au Dashboard (bis). 24 déc. 2021, 21:00 Test de note relative au Dashboard <mark>Salut</mark> tout le monde ! (bis).',\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 15,\n              weight: 1\n            }\n          ],\n          url: '/server/app/fr/blog/patch-notes-bis/dashboard-bis/post-01.html',\n          title: 'Note relative au Dashboard (bis)',\n          locations: [15]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 9,\n          text: ''\n        }\n      ],\n      excerpt: 'Note relative au Dashboard (bis). 24 déc. 2021, 21:00 Test de note relative au Dashboard <mark>Salut</mark> tout le monde ! (bis).',\n      raw_content: 'Note relative au Dashboard (bis). 24 déc. 2021, 21:00 Test de note relative au Dashboard Salut tout le monde ! (bis).',\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 15,\n          weight: 1\n        }\n      ],\n      content: 'Note relative au Dashboard (bis). 24 déc. 2021, 21:00 Test de note relative au Dashboard Salut tout le monde ! (bis).',\n      raw_url: '/server/app/fr/blog/patch-notes-bis/dashboard-bis/post-01.html',\n      url: '/server/app/fr/blog/patch-notes-bis/dashboard-bis/post-01.html',\n      meta: {\n        title: 'Note relative au Dashboard (bis)'\n      },\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [15],\n      word_count: 21\n    }),\n    score: 0.13200587,\n    id: 'fr_2588b25',\n    words: [15]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          anchor: {\n            text: 'Bonjour, ceci est un titre !',\n            id: 'bonjour-ceci-est-un-titre-',\n            element: 'h1',\n            location: 5\n          },\n          excerpt:\n            \"Bonjour, ceci est un titre ! Test de note relative au Dashboard <mark>Salut</mark> tout le monde ! function lol() { konsole.log('Hello world'); }\",\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 17,\n              weight: 1\n            }\n          ],\n          url: '/server/app/fr/blog/patch-notes/dashboard/post-06.html#bonjour-ceci-est-un-titre-',\n          title: 'Bonjour, ceci est un titre !',\n          locations: [17]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 5,\n          text: ''\n        },\n        {\n          text: 'Bonjour, ceci est un titre !',\n          id: 'bonjour-ceci-est-un-titre-',\n          element: 'h1',\n          location: 5\n        },\n        {\n          text: 'Bonjour, ceci est un titre (niveau 2) !',\n          id: 'bonjour-ceci-est-un-titre-niveau-2-',\n          element: 'h2',\n          location: 28\n        },\n        {\n          element: 'h3',\n          text: 'Hop !',\n          location: 41,\n          id: 'hop-'\n        }\n      ],\n      raw_content:\n        \"OLOL. 24 déc. 2021, 19:00 Bonjour, ceci est un titre ! Test de note relative au Dashboard Salut tout le monde ! function lol() { konsole.log('Hello world'); } Bonjour, ceci est un titre (niveau 2) ! Et hop, une image ! Hop !\",\n      content:\n        \"OLOL. 24 déc. 2021, 19:00 Bonjour, ceci est un titre ! Test de note relative au Dashboard Salut tout le monde ! function lol() { konsole.log('Hello world'); } Bonjour, ceci est un titre (niveau 2) ! Et hop, une image ! Hop !\",\n      excerpt:\n        \"OLOL. 24 déc. 2021, 19:00 Bonjour, ceci est un titre ! Test de note relative au Dashboard <mark>Salut</mark> tout le monde ! function lol() { konsole.log('Hello world'); } Bonjour, ceci\",\n      meta: {\n        image: '/assets/medias/img/vectors/logo/rtm-full-body.svg',\n        image_alt: 'Image',\n        title: 'OLOL'\n      },\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 17,\n          weight: 1\n        }\n      ],\n      raw_url: '/server/app/fr/blog/patch-notes/dashboard/post-06.html',\n      url: '/server/app/fr/blog/patch-notes/dashboard/post-06.html',\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [17],\n      word_count: 43\n    }),\n    score: 0.088012286,\n    id: 'fr_97fed77',\n    words: [17]\n  },\n  {\n    data: async () => ({\n      sub_results: [\n        {\n          excerpt:\n            'Note relative au Dashboard. 14 août 2019, 21:00 Cornemuse. Violoncelle. Xylophone. Test de note relative au Dashboard <mark>Salut</mark> tout le monde !',\n          weighted_locations: [\n            {\n              balanced_score: 512.1433,\n              location: 17,\n              weight: 1\n            }\n          ],\n          url: '/server/app/fr/blog/patch-notes/dashboard/post-01.html',\n          title: 'Note relative au Dashboard',\n          locations: [17]\n        }\n      ],\n      anchors: [\n        {\n          element: 'div',\n          id: '--top',\n          location: 0,\n          text: ''\n        },\n        {\n          element: 'article',\n          id: '--mdx-body',\n          location: 11,\n          text: ''\n        }\n      ],\n      excerpt:\n        'Note relative au Dashboard. 14 août 2019, 21:00 Cornemuse. Violoncelle. Xylophone. Test de note relative au Dashboard <mark>Salut</mark> tout le monde !',\n      raw_content:\n        'Note relative au Dashboard. 14 août 2019, 21:00 Cornemuse. Violoncelle. Xylophone. Test de note relative au Dashboard Salut tout le monde !',\n      content:\n        'Note relative au Dashboard. 14 août 2019, 21:00 Cornemuse. Violoncelle. Xylophone. Test de note relative au Dashboard Salut tout le monde !',\n      weighted_locations: [\n        {\n          balanced_score: 512.1433,\n          location: 17,\n          weight: 1\n        }\n      ],\n      raw_url: '/server/app/fr/blog/patch-notes/dashboard/post-01.html',\n      url: '/server/app/fr/blog/patch-notes/dashboard/post-01.html',\n      meta: {\n        title: 'Note relative au Dashboard'\n      },\n      filters: {\n        documentType: ['BlogPost']\n      },\n      locations: [17],\n      word_count: 22\n    }),\n    score: 0.12907322,\n    id: 'fr_3251605',\n    words: [17]\n  }\n];\n\n/* eslint-enable no-magic-numbers */\n/* eslint-enable require-await */\n/* eslint-enable perfectionist/sort-objects */\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/discord.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3596",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 11
            },
            "start": {
              "column": 52,
              "line": 11
            }
          }
        },
        {
          "id": "3597",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 11
            },
            "start": {
              "column": 53,
              "line": 11
            }
          }
        },
        {
          "id": "3598",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 11
            },
            "start": {
              "column": 76,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { Href } from '@rtm/shared-types/Next';\n\ntype DiscordConfigType = {\n  SUPPORT_SERVER_INVITE_LINK: Href;\n  BOT_INVITE_LINK: Href;\n};\n\nconst [CLIENT_ID, PERMISSIONS]: [string, string] = ['1120800430897778700', '8'];\nconst DISCORD_CONFIG: DiscordConfigType = {\n  BOT_INVITE_LINK: `https://discord.com/api/oauth2/authorize?client_id=${CLIENT_ID}&permissions=${PERMISSIONS}&scope=bot`,\n  SUPPORT_SERVER_INVITE_LINK: 'https://discord.gg/QWTXj3Dv4k'\n} as const;\n\nexport default DISCORD_CONFIG;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/elementsId.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3599",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 4
            },
            "start": {
              "column": 36,
              "line": 4
            }
          }
        },
        {
          "id": "3600",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 5
            },
            "start": {
              "column": 35,
              "line": 5
            }
          }
        },
        {
          "id": "3601",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 6
            },
            "start": {
              "column": 34,
              "line": 6
            }
          }
        },
        {
          "id": "3602",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 7
            },
            "start": {
              "column": 32,
              "line": 7
            }
          }
        },
        {
          "id": "3603",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 8
            },
            "start": {
              "column": 28,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nexport const FOOTER_CONTAINER_ID = '--footer';\nexport const SITEWIDE_NAVBAR_ID = '--sitewide-navbar';\nexport const BODY_CONTAINER_ID = '--top';\nexport const SEARCH_MODAL_ID = '--search-modal';\nexport const MDX_BODY_ID = '--mdx-body';\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/pagefind.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3604",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 60,
              "line": 30
            }
          }
        },
        {
          "id": "3605",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 35
            },
            "start": {
              "column": 12,
              "line": 31
            }
          }
        },
        {
          "id": "3606",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 32
            },
            "start": {
              "column": 14,
              "line": 32
            }
          }
        },
        {
          "id": "3607",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 15,
              "line": 33
            },
            "start": {
              "column": 13,
              "line": 33
            }
          }
        },
        {
          "id": "3608",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 34
            },
            "start": {
              "column": 12,
              "line": 34
            }
          }
        },
        {
          "id": "3609",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 28,
              "line": 36
            },
            "start": {
              "column": 26,
              "line": 36
            }
          }
        },
        {
          "id": "3610",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 38
            },
            "start": {
              "column": 12,
              "line": 38
            }
          }
        },
        {
          "id": "3611",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 54,
              "line": 42
            }
          }
        },
        {
          "id": "3612",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 47
            },
            "start": {
              "column": 12,
              "line": 43
            }
          }
        },
        {
          "id": "3613",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 44
            },
            "start": {
              "column": 14,
              "line": 44
            }
          }
        },
        {
          "id": "3614",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 15,
              "line": 45
            },
            "start": {
              "column": 13,
              "line": 45
            }
          }
        },
        {
          "id": "3615",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 46
            },
            "start": {
              "column": 12,
              "line": 46
            }
          }
        },
        {
          "id": "3616",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 28,
              "line": 48
            },
            "start": {
              "column": 26,
              "line": 48
            }
          }
        },
        {
          "id": "3617",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 65
            },
            "start": {
              "column": 61,
              "line": 54
            }
          }
        },
        {
          "id": "3618",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 56
            },
            "start": {
              "column": 20,
              "line": 56
            }
          }
        },
        {
          "id": "3619",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 58
            },
            "start": {
              "column": 11,
              "line": 58
            }
          }
        },
        {
          "id": "3620",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 64
            },
            "start": {
              "column": 13,
              "line": 64
            }
          }
        },
        {
          "id": "3621",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 75
            },
            "start": {
              "column": 58,
              "line": 67
            }
          }
        },
        {
          "id": "3622",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 69
            },
            "start": {
              "column": 20,
              "line": 69
            }
          }
        },
        {
          "id": "3623",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 71
            },
            "start": {
              "column": 11,
              "line": 71
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { Quantity } from '@rtm/shared-types/Numbers';\n\nimport { FAKE_RESULTS } from './Workarounds/pagefind';\n\nconst DOCUMENT_TYPES = {\n  LandingPage: 'LandingPage',\n  BlogPost: 'BlogPost',\n  Page: 'Page'\n} as const;\n\ntype PagefindConfigType = {\n  DEFAULT_MIN_REQ_LENGTH_TO_TRIGGER_PRELOAD: Quantity;\n  DOCUMENT_TYPES: typeof DOCUMENT_TYPES;\n  DOCUMENT_TYPE_FILTER_KEY: string;\n  URL_UNWANTED_PREFIX: string;\n  URL_UNWANTED_SUFFIX: string;\n};\n\nconst PAGEFIND_CONFIG: PagefindConfigType = {\n  DEFAULT_MIN_REQ_LENGTH_TO_TRIGGER_PRELOAD: 3,\n  DOCUMENT_TYPE_FILTER_KEY: 'documentType',\n  URL_UNWANTED_PREFIX: '/server/app',\n  URL_UNWANTED_SUFFIX: '.html',\n  DOCUMENT_TYPES\n} as const;\n\nconst FAKE_EMPTY_PAGEFIND_RESULTS: PagefindSearchResults = {\n  timings: {\n    preload: -1,\n    search: -1,\n    total: -1\n  },\n  unfilteredResultCount: -1,\n  totalFilters: {},\n  results: [],\n  filters: {}\n};\n\nconst FAKE_PAGEFIND_RESULTS: PagefindSearchResults = {\n  timings: {\n    preload: -1,\n    search: -1,\n    total: -1\n  },\n  unfilteredResultCount: -1,\n  results: FAKE_RESULTS,\n  totalFilters: {},\n  filters: {}\n};\n\nexport const BROKEN_PAGEFIND_STUB: typeof window.pagefind = {\n  // eslint-disable-next-line require-await\n  debouncedSearch: async () => FAKE_EMPTY_PAGEFIND_RESULTS,\n  // eslint-disable-next-line require-await\n  search: async () => FAKE_EMPTY_PAGEFIND_RESULTS,\n  // eslint-disable-next-line require-await\n  destroy: async () => {},\n  // eslint-disable-next-line require-await\n  preload: async () => {},\n  init: async () => {},\n  isBroken: true\n};\n\nexport const DEV_PAGEFIND_STUB: typeof window.pagefind = {\n  // eslint-disable-next-line require-await\n  debouncedSearch: async () => FAKE_PAGEFIND_RESULTS,\n  // eslint-disable-next-line require-await\n  search: async () => FAKE_PAGEFIND_RESULTS,\n  destroy: async () => {},\n  preload: async () => {},\n  init: async () => {}\n};\n\nexport default PAGEFIND_CONFIG;\n\nexport type PagefindFilterDocumentType = keyof typeof PAGEFIND_CONFIG.DOCUMENT_TYPES;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/searchMenu.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3624",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 15
            },
            "start": {
              "column": 42,
              "line": 15
            }
          }
        }
      ],
      "source": "import type { SearchDocumentFlag } from '@/lib/pagefind/helpers/search';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\nimport type { ComponentType, ReactElement } from 'react';\nimport type { Index } from '@rtm/shared-types/Numbers';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport { PilcrowIcon, ReaderIcon, GlobeIcon } from '@radix-ui/react-icons';\nimport { LayoutDashboardIcon, HomeIcon } from 'lucide-react';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { i18ns } from '##/config/i18n';\n\nexport const RESULTS_SLICE_LEN = 5;\nexport const THROTTLE_DELAY = 200;\nexport const SEARCH_TEXT_INITIAL_STATE = '';\nexport const RESULTS_INITIAL_STATE: MaybeNull<ReactElement[]> = null;\n\nconst allTabValues = ['All', 'Page', 'BlogPost'] as const satisfies SearchDocumentFlag[];\n\nexport const navbarSearchBtnProps = {\n  quickAccessBtns: {\n    /* eslint-disable perfectionist/sort-objects */\n    [ROUTES_ROOTS.WEBSITE]: { icon: HomeIcon, i18nTitle: `${i18ns.searchMenuSrOnly}.homepage-access` },\n    [ROUTES_ROOTS.BLOG]: { icon: PilcrowIcon, i18nTitle: `${i18ns.searchMenuSrOnly}.blog-access` },\n    [ROUTES_ROOTS.DASHBOARD]: { icon: LayoutDashboardIcon, i18nTitle: `${i18ns.searchMenuSrOnly}.dashboard-access` }\n    /* eslint-enable perfectionist/sort-objects */\n  } satisfies Record<AppPath, QuickAccessBtnMetadatas>,\n  banners: {\n    /* eslint-disable perfectionist/sort-objects */\n    All: { icon: GlobeIcon, i18nTitle: `${i18ns.searchMenuOptions}.all` },\n    Page: { icon: ReaderIcon, i18nTitle: `${i18ns.searchMenuOptions}.pages` },\n    BlogPost: { icon: PilcrowIcon, i18nTitle: `${i18ns.searchMenuOptions}.blog` }\n    /* eslint-enable perfectionist/sort-objects */\n  } as const satisfies Record<TabValue, BannersMetadatas>,\n  tabInputLabels: {\n    /* eslint-disable perfectionist/sort-objects */\n    All: `${i18ns.searchMenuOptions}.all` satisfies I18nVocabTarget,\n    Page: `${i18ns.searchMenuOptions}.pages` satisfies I18nVocabTarget,\n    BlogPost: `${i18ns.searchMenuOptions}.blog` satisfies I18nVocabTarget\n    /* eslint-enable perfectionist/sort-objects */\n  } as const satisfies Record<TabValue, I18nVocabTarget>,\n  tabTriggers: {\n    /* eslint-disable perfectionist/sort-objects */\n    All: `${i18ns.vocab}.all`,\n    Page: `${i18ns.vocab}.pages`,\n    BlogPost: `${i18ns.vocab}.blog`\n    /* eslint-enable perfectionist/sort-objects */\n  } as const satisfies Record<TabValue, I18nVocabTarget>,\n\n  tabValueInitialState: 'All' as const satisfies TabValue,\n  allTabValues\n} as const;\n\ntype IconComponentType<P = { className?: string }> = ComponentType<P>;\nexport type QuickAccessBtnMetadatas = { i18nTitle: I18nVocabTarget; icon: IconComponentType };\nexport type BannersMetadatas = { i18nTitle: I18nVocabTarget; icon: IconComponentType };\n\ntype TabValue = (typeof allTabValues)[Index];\n"
    },
    "src/config/themes.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3625",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 20
            },
            "start": {
              "column": 46,
              "line": 20
            }
          }
        },
        {
          "id": "3626",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 24
            },
            "start": {
              "column": 51,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\ntype ColorScheme = 'light' | 'dark';\ntype ThemeVariantKey = 'LIGHT' | 'DARK';\ntype ThemeConfig = Record<'VARIANTS_COLORS_SCHEME', Record<ThemeVariantKey, ColorScheme>> & Record<'VARIANTS', Record<ThemeVariantKey, string>>;\n\nconst THEME_CONFIG = {\n  VARIANTS_COLORS_SCHEME: {\n    LIGHT: 'light',\n    DARK: 'dark'\n  },\n\n  VARIANTS: {\n    LIGHT: 'light',\n    DARK: 'dark'\n  }\n} as const satisfies ThemeConfig;\n\nconst DEFAULT_VARIANT_KEY: ThemeVariantKey = 'LIGHT';\n\ntype ThemeVariant = (typeof THEME_CONFIG.VARIANTS)[keyof typeof THEME_CONFIG.VARIANTS];\n\nexport const DEFAULT_DARK_VARIANT: ThemeVariant = 'dark';\nconst DEFAULT_LIGHT_VARIANT: ThemeVariant = THEME_CONFIG.VARIANTS[DEFAULT_VARIANT_KEY];\nexport const DEFAULT_VARIANT: ThemeVariant = DEFAULT_LIGHT_VARIANT;\nexport const DEFAULT_VARIANT_COLOR_SCHEME: ColorScheme = THEME_CONFIG.VARIANTS_COLORS_SCHEME[DEFAULT_VARIANT_KEY];\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/utils.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3627",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 4
            },
            "start": {
              "column": 41,
              "line": 4
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nexport const API_ERROR_TRACE_ENDPOINT = '/api/trace-error';\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/I18nProvider.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3628",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 60,
              "line": 17
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { FunctionComponent } from 'react';\n\nimport { I18nProviderClient } from '@/i18n/client';\nimport Loader from '@/components/ui/Loader';\n\nexport interface I18nProviderProps extends WithChildren {\n  locale: LanguageFlag;\n}\n\nconst I18nProvider: FunctionComponent<I18nProviderProps> = ({ children, locale }) => (\n  <I18nProviderClient fallback={<Loader />} locale={locale}>\n    {children}\n  </I18nProviderClient>\n);\n\nexport default I18nProvider;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/Providers.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3629",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 54,
              "line": 19
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport PagefindPhantom from '@/components/phantoms/Pagefind';\nimport { Toaster } from '@/components/ui/toast/Toaster';\nimport { SessionProvider } from 'next-auth/react';\n\nimport type { I18nProviderProps } from './I18nProvider';\n\nimport I18nProvider from './I18nProvider';\nimport UIProvider from './UIProvider';\n\ninterface ProvidersProps extends I18nProviderProps {}\n\nconst Providers: FunctionComponent<ProvidersProps> = ({ children, locale }) => (\n  <SessionProvider>\n    <I18nProvider locale={locale}>\n      <UIProvider>\n        <Toaster />\n        <PagefindPhantom>{children}</PagefindPhantom>\n      </UIProvider>\n    </I18nProvider>\n  </SessionProvider>\n);\n\nexport default Providers;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/ThemeProvider.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3630",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 140,
              "line": 10
            },
            "start": {
              "column": 30,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\n'use client';\n\nimport type { ThemeProviderProps } from 'next-themes/dist/types';\n\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\n\nexport const ThemeProvider = ({ children, ...props }: ThemeProviderProps) => <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/UIProvider.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3631",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 56,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { ThemeProvider } from './ThemeProvider';\n\ninterface UIProviderProps extends WithChildren {}\n\nconst UIProvider: FunctionComponent<UIProviderProps> = ({ children }) => (\n  <ThemeProvider disableTransitionOnChange defaultTheme=\"system\" attribute=\"class\" enableSystem>\n    {children}\n  </ThemeProvider>\n);\n\nexport default UIProvider;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/errors/PagefindIntegrationError.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3632",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 15
            },
            "start": {
              "column": 5,
              "line": 11
            }
          }
        },
        {
          "id": "3633",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 12
            },
            "start": {
              "column": 20,
              "line": 12
            }
          }
        },
        {
          "id": "3634",
          "mutatorName": "OptionalChaining",
          "replacement": "options.cause",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 12
            },
            "start": {
              "column": 29,
              "line": 12
            }
          }
        },
        {
          "id": "3635",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 13
            },
            "start": {
              "column": 17,
              "line": 13
            }
          }
        },
        {
          "id": "3636",
          "mutatorName": "OptionalChaining",
          "replacement": "options.stack",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 14
            },
            "start": {
              "column": 18,
              "line": 14
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nclass PagefindIntegrationError extends Error {\n  constructor(\n    message: string,\n    options?: {\n      cause?: unknown;\n      stack?: string;\n    }\n  ) {\n    super(message, { cause: options?.cause });\n    this.name = 'PagefindIntegrationError';\n    this.stack = options?.stack;\n  }\n}\n\nexport default PagefindIntegrationError;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/fonts.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3637",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 29,
              "line": 6
            }
          }
        },
        {
          "id": "3638",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 7
            },
            "start": {
              "column": 13,
              "line": 7
            }
          }
        },
        {
          "id": "3639",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 7
            },
            "start": {
              "column": 14,
              "line": 7
            }
          }
        },
        {
          "id": "3640",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 8
            },
            "start": {
              "column": 13,
              "line": 8
            }
          }
        },
        {
          "id": "3641",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 9
            },
            "start": {
              "column": 12,
              "line": 9
            }
          }
        },
        {
          "id": "3642",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 9
            },
            "start": {
              "column": 13,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport { Inter } from 'next/font/google';\n\nexport const fInter = Inter({\n  fallback: ['sans-serif'],\n  variable: '--font-sans',\n  subsets: ['latin']\n});\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/i18n/lazybones.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3643",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "src/i18n/lazybones.ts(4,7): error TS2322: Type '\"Stryker was here!\"' is not assignable to type '\"\"'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 5
            },
            "start": {
              "column": 24,
              "line": 5
            }
          }
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { TypedLeafsJSONData } from '@rtm/shared-types/JSON';\nimport type { VocabObjValue } from '@rtm/shared-types/I18n';\n\nconst _: EmptyString = '';\n\nexport const SHARED_TESTING_BLOG_CATEGORY_METADATAS = {\n  'fake-subcategory': {\n    'meta-description': _,\n    title: _\n  },\n  '_meta-description': _,\n  _title: _\n} as const satisfies TypedLeafsJSONData<VocabObjValue>;\n\nexport const SHARED_TESTING_BLOG_SUBCATEGORIES_PAGES_TITLES = {\n  'blog-testing-category': _,\n  'fake-subcategory': _\n} as const satisfies TypedLeafsJSONData<VocabObjValue>;\n"
    },
    "src/i18n/locales/fragments/schema/pagesTitles.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3644",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 6
            },
            "start": {
              "column": 24,
              "line": 6
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport { pagesTitles } from '@rtm/generated';\n\nconst _: EmptyString = '';\n\nconst PAGES_TITLES = {\n  ...pagesTitles,\n\n  homepage: _,\n  blog: _\n} as const;\n\nexport default PAGES_TITLES;\n\ntype EmptyString = '';\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/i18n/locales/schema.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3645",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 12
            },
            "start": {
              "column": 23,
              "line": 12
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { TypedLeafsJSONData } from '@rtm/shared-types/JSON';\n\nimport { blogAuthorOptionsVocabSchema } from '##/config/contentlayer/blog/authorsMetadatas';\nimport { blogTagOptionsVocabSchema } from '##/config/contentlayer/blog/blogTagsMetadatas';\nimport { blogCategories } from '@rtm/generated';\n\nimport PAGES_TITLES from './fragments/schema/pagesTitles';\n\nconst _: NotScanned = '';\n\nexport const SHARED_VOCAB_SCHEMA = {\n  vocab: {\n    'start-typing': _,\n    notifications: _,\n    breadcrumbs: _,\n    'sign-up': _,\n    brand: _,\n    draft: _,\n    pages: _,\n    logo: _,\n    page: _,\n    tags: _,\n    blog: _,\n    all: _,\n    toc: _\n  },\n\n  'pages-titles': PAGES_TITLES\n} as const satisfies TypedLeafsJSONData<NotScanned>;\n\nexport default {\n  'search-menu': {\n    'sr-only': {\n      'choose-search-mode': _,\n      'close-search-menu': _,\n      'dashboard-access': _,\n      'homepage-access': _,\n      'quick-access': _,\n      'blog-access': _,\n      'next-screen': _,\n      'prev-screen': _,\n      results: _\n    },\n\n    options: {\n      pages: _,\n      blog: _,\n      all: _\n    },\n\n    'nothing-found': _\n  },\n\n  vocab: {\n    ...SHARED_VOCAB_SCHEMA.vocab,\n    'sr-only': {\n      'brand-logo': _,\n      'sort-by': _,\n      goToTop: _\n    },\n\n    'copy-to-clipboard': _,\n    'invite-the-bot': _,\n    'no-blog-post': _,\n    'footer-copy': _,\n    'brand-short': _,\n    'more-pages': _,\n    'see-more': _,\n    pagination: _,\n    loading: _,\n    '404': _,\n    prev: _,\n    next: _\n  },\n\n  navbar: {\n    'sr-only': {\n      'close-language-switcher-menu': _,\n      'open-language-switcher-menu': _,\n      'language-switcher-menu': _,\n      'close-hamburger-menu': _,\n      'switch-to-light-mode': _,\n      'open-hamburger-menu': _,\n      'switch-to-dark-mode': _,\n      'open-search-menu': _,\n      'hamburger-menu': _\n    },\n\n    assistance: _\n  },\n\n  blog: {\n    toc: {\n      'sr-only': {\n        'hide-toc': _,\n        'show-toc': _\n      }\n    },\n\n    'tags-filters': {\n      'no-result-found': _,\n      'clear-filters': _\n    },\n\n    authors: blogAuthorOptionsVocabSchema,\n    tags: blogTagOptionsVocabSchema,\n    categories: blogCategories\n  },\n\n  dashboard: {\n    'sr-only': {\n      'hide-sidebar': _,\n      'show-sidebar': _\n    },\n\n    'pages-titles': {\n      main: _,\n      foo: _,\n      bar: _\n    }\n  },\n\n  filters: {\n    'select-a-filter': _,\n    'alphabet-desc': _,\n    'alphabet-asc': _,\n    'date-desc': _,\n    'date-asc': _\n  },\n\n  errors: {\n    brokenPagefindIntegration: {\n      message: _,\n      title: _\n    }\n  },\n\n  auth: {\n    logout: _,\n    signup: _,\n    login: _\n  },\n\n  'pages-titles': SHARED_VOCAB_SCHEMA['pages-titles'],\n\n  metadescriptions: {\n    homepage: _\n  },\n\n  _infos: {\n    lng: '__SCANNED__'\n  }\n} as const satisfies TypedLeafsJSONData<MaybeScanned>;\n\ntype NotScanned = '';\ntype Scanned = '__SCANNED__';\ntype MaybeScanned = NotScanned | Scanned;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/blog/api.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3646",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(17,71): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "32",
            "35",
            "38",
            "39",
            "135",
            "136",
            "137",
            "142",
            "143",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 106,
              "line": 17
            }
          }
        },
        {
          "id": "3647",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(17,71): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "32",
            "35",
            "38",
            "39",
            "135",
            "136",
            "137",
            "142",
            "143",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "3648",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(17,71): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["469"],
          "location": {
            "end": {
              "column": 4,
              "line": 23
            },
            "start": {
              "column": 11,
              "line": 21
            }
          }
        },
        {
          "id": "3649",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(26,106): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 141,
              "line": 26
            }
          }
        },
        {
          "id": "3650",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/blog/api.ts(30,17): error TS18047: 'allPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "3651",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/blog/api.ts(30,17): error TS18047: 'allPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "3652",
          "mutatorName": "EqualityOperator",
          "replacement": "allPosts !== null",
          "statusReason": "src/lib/blog/api.ts(30,17): error TS18047: 'allPosts' is possibly 'null'.\nsrc/lib/blog/api.ts(30,46): error TS7031: Binding element 'currentPostLanguage' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393",
            "469"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "3653",
          "mutatorName": "MethodExpression",
          "replacement": "allPosts",
          "statusReason": "expected 12 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["38"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 105,
              "line": 30
            },
            "start": {
              "column": 17,
              "line": 30
            }
          }
        },
        {
          "id": "3654",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 33,
              "line": 30
            }
          }
        },
        {
          "id": "3655",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 12 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["38"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 72,
              "line": 30
            }
          }
        },
        {
          "id": "3656",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 72,
              "line": 30
            }
          }
        },
        {
          "id": "3657",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostLanguage !== language",
          "statusReason": "expected 9 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["38"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "135",
            "137",
            "142",
            "144",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 72,
              "line": 30
            }
          }
        },
        {
          "id": "3658",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(38,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "372",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 67
            },
            "start": {
              "column": 28,
              "line": 38
            }
          }
        },
        {
          "id": "3659",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "3660",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "3661",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedBlogCtx.TESTING || category === BlogConfig.TESTING_CATEGORY",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "372",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "3662",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedBlogCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "372",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "3663",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 35,
              "line": 41
            }
          }
        },
        {
          "id": "3664",
          "mutatorName": "EqualityOperator",
          "replacement": "category !== BlogConfig.TESTING_CATEGORY",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 35,
              "line": 41
            }
          }
        },
        {
          "id": "3665",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/blog/api.ts(41,85): error TS2322: Type 'string' is not assignable to type 'BlogPostType'.\n  Type 'string' is not assignable to type 'Omit<BlogPostSchema, \"type\" | \"headings\">'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["372"],
          "location": {
            "end": {
              "column": 86,
              "line": 41
            },
            "start": {
              "column": 84,
              "line": 41
            }
          }
        },
        {
          "id": "3666",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidPair",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 46
            }
          }
        },
        {
          "id": "3667",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 46
            }
          }
        },
        {
          "id": "3668",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 46
            }
          }
        },
        {
          "id": "3669",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/blog/api.ts(46,29): error TS2322: Type 'string' is not assignable to type 'BlogPostType'.\n  Type 'string' is not assignable to type 'Omit<BlogPostSchema, \"type\" | \"headings\">'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["31"],
          "location": {
            "end": {
              "column": 30,
              "line": 46
            },
            "start": {
              "column": 28,
              "line": 46
            }
          }
        },
        {
          "id": "3670",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(60,3): error TS2322: Type 'BlogPostType[] | undefined' is not assignable to type 'BlogPostType[]'.\n  Type 'undefined' is not assignable to type 'BlogPostType[]'.\nsrc/lib/blog/api.ts(60,76): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "151", "181", "256", "257", "258", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 6,
              "line": 54
            },
            "start": {
              "column": 44,
              "line": 48
            }
          }
        },
        {
          "id": "3671",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(33) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["151"],
          "coveredBy": ["151", "256", "257", "258"],
          "location": {
            "end": {
              "column": 6,
              "line": 54
            },
            "start": {
              "column": 5,
              "line": 49
            }
          }
        },
        {
          "id": "3672",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["151", "256", "257", "258"],
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "3673",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "3674",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "3675",
          "mutatorName": "LogicalOperator",
          "replacement": "// Stryker Workaround 3. Pointless mutants: there's no ambiguity here.\n// Stryker disable next-line ConditionalExpression\ncurrentPostSubcategory === subcategory || currentPostLanguage === language",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(33) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["151"],
          "coveredBy": ["151", "256", "257", "258"],
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "3676",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "3677",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSubcategory !== subcategory",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["151"],
          "coveredBy": ["151", "256", "257", "258"],
          "location": {
            "end": {
              "column": 47,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "3678",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 51,
              "line": 53
            }
          }
        },
        {
          "id": "3679",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostLanguage !== language",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(21) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["151"],
          "coveredBy": ["151", "256", "257", "258"],
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 51,
              "line": 53
            }
          }
        },
        {
          "id": "3680",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(60,3): error TS2322: Type 'BlogPostType[] | undefined' is not assignable to type 'BlogPostType[]'.\n  Type 'undefined' is not assignable to type 'BlogPostType[]'.\nsrc/lib/blog/api.ts(60,131): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "151", "181", "256", "257", "258", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 6,
              "line": 62
            },
            "start": {
              "column": 47,
              "line": 56
            }
          }
        },
        {
          "id": "3681",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "statusReason": "expected 12 to be 5 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "181", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 6,
              "line": 62
            },
            "start": {
              "column": 5,
              "line": 57
            }
          }
        },
        {
          "id": "3682",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "181", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "3683",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "3684",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "3685",
          "mutatorName": "LogicalOperator",
          "replacement": "// Stryker Workaround 4. Pointless mutants: there's no ambiguity here.\n// Stryker disable next-line ConditionalExpression\n!currentPostDraft && currentPostSubcategory === subcategory || currentPostLanguage === language",
          "statusReason": "expected 9 to be 5 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "181", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "3686",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "3687",
          "mutatorName": "LogicalOperator",
          "replacement": "!currentPostDraft || currentPostSubcategory === subcategory",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(9) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 10,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "181", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "3688",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "181", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 26,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "3689",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 30,
              "line": 61
            }
          }
        },
        {
          "id": "3690",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSubcategory !== subcategory",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "181", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 30,
              "line": 61
            }
          }
        },
        {
          "id": "3691",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 72,
              "line": 61
            }
          }
        },
        {
          "id": "3692",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostLanguage !== language",
          "statusReason": "expected 'posts' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "27", "32", "39", "135", "136", "142", "143", "181", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 72,
              "line": 61
            }
          }
        },
        {
          "id": "3693",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(74,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "256", "257", "258", "323", "324", "373", "392", "393"],
          "location": {
            "end": {
              "column": 2,
              "line": 88
            },
            "start": {
              "column": 37,
              "line": 74
            }
          }
        },
        {
          "id": "3694",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "3695",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "3696",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedBlogCtx.TESTING || category === BlogConfig.TESTING_CATEGORY",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["323"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "256", "257", "258", "323", "324", "373", "392", "393"],
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "3697",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedBlogCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "256", "257", "258", "323", "324", "373", "392", "393"],
          "location": {
            "end": {
              "column": 31,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "3698",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 35,
              "line": 77
            }
          }
        },
        {
          "id": "3699",
          "mutatorName": "EqualityOperator",
          "replacement": "category !== BlogConfig.TESTING_CATEGORY",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 35,
              "line": 77
            }
          }
        },
        {
          "id": "3700",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(79,80): error TS2322: Type 'undefined' is not assignable to type 'MaybeNull<BlogPostType>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "256", "257", "258", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 99,
              "line": 80
            },
            "start": {
              "column": 74,
              "line": 79
            }
          }
        },
        {
          "id": "3701",
          "mutatorName": "LogicalOperator",
          "replacement": "postsCollection.find(({\n  slug: currentPostSlug\n}) => currentPostSlug === targettedSlug) && null",
          "statusReason": "src/lib/blog/api.ts(80,5): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<BlogPostType>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<BlogPostType>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["256", "257", "258"],
          "location": {
            "end": {
              "column": 99,
              "line": 80
            },
            "start": {
              "column": 5,
              "line": 80
            }
          }
        },
        {
          "id": "3702",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["256", "257", "258"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 26,
              "line": 80
            }
          }
        },
        {
          "id": "3703",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { metadescription: 'FAKE', …(16) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["258"],
          "coveredBy": ["256", "257", "258"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 57,
              "line": 80
            }
          }
        },
        {
          "id": "3704",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["256", "257", "258"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 57,
              "line": 80
            }
          }
        },
        {
          "id": "3705",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSlug !== targettedSlug",
          "statusReason": "expected 'fake-post-02' to be 'fake-post-01' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["256", "257", "258"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 57,
              "line": 80
            }
          }
        },
        {
          "id": "3706",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(82,83): error TS2322: Type 'undefined' is not assignable to type 'MaybeNull<BlogPostType>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "256", "257", "258", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 145,
              "line": 83
            },
            "start": {
              "column": 77,
              "line": 82
            }
          }
        },
        {
          "id": "3707",
          "mutatorName": "LogicalOperator",
          "replacement": "postsCollection.find(({\n  draft: currentPostDraft,\n  slug: currentPostSlug\n}) => !currentPostDraft && currentPostSlug === targettedSlug) && null",
          "statusReason": "src/lib/blog/api.ts(83,5): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<BlogPostType>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<BlogPostType>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 145,
              "line": 83
            },
            "start": {
              "column": 5,
              "line": 83
            }
          }
        },
        {
          "id": "3708",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["323"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 26,
              "line": 83
            }
          }
        },
        {
          "id": "3709",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/blog/blog-testing-category/fake-subc…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "392", "393"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "3710",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["323"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "392", "393"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "3711",
          "mutatorName": "LogicalOperator",
          "replacement": "!currentPostDraft || currentPostSlug === targettedSlug",
          "statusReason": "expected '/blog/blog-testing-category/fake-subc…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "392", "393"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "3712",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["323"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "392", "393"],
          "location": {
            "end": {
              "column": 99,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "3713",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/blog/blog-testing-category/fake-subc…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "392", "393"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 103,
              "line": 83
            }
          }
        },
        {
          "id": "3714",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSlug !== targettedSlug",
          "statusReason": "expected 'fake-post-02' to be 'fake-post-01' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["323"],
          "coveredBy": ["25", "32", "135", "136", "142", "143", "323", "392", "393"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 103,
              "line": 83
            }
          }
        },
        {
          "id": "3715",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(94,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["26", "27"],
          "location": {
            "end": {
              "column": 2,
              "line": 101
            },
            "start": {
              "column": 28,
              "line": 94
            }
          }
        },
        {
          "id": "3716",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(103,97): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "256", "257", "323", "324", "392", "393"],
          "location": {
            "end": {
              "column": 2,
              "line": 106
            },
            "start": {
              "column": 130,
              "line": 103
            }
          }
        },
        {
          "id": "3717",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(108,65): error TS2322: Type 'undefined' is not assignable to type '(keyof BlogArchitecture)[]'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 145,
              "line": 108
            },
            "start": {
              "column": 59,
              "line": 108
            }
          }
        },
        {
          "id": "3718",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(110,97): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["392", "393"],
          "location": {
            "end": {
              "column": 2,
              "line": 114
            },
            "start": {
              "column": 105,
              "line": 110
            }
          }
        },
        {
          "id": "3719",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["392"],
          "coveredBy": ["392", "393"],
          "location": {
            "end": {
              "column": 55,
              "line": 113
            },
            "start": {
              "column": 10,
              "line": 113
            }
          }
        },
        {
          "id": "3720",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["392"],
          "coveredBy": ["392", "393"],
          "location": {
            "end": {
              "column": 55,
              "line": 113
            },
            "start": {
              "column": 10,
              "line": 113
            }
          }
        },
        {
          "id": "3721",
          "mutatorName": "LogicalOperator",
          "replacement": "!isForcedPath || postsCollection.length === 0",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["392"],
          "coveredBy": ["392", "393"],
          "location": {
            "end": {
              "column": 55,
              "line": 113
            },
            "start": {
              "column": 10,
              "line": 113
            }
          }
        },
        {
          "id": "3722",
          "mutatorName": "BooleanLiteral",
          "replacement": "isForcedPath",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["392"],
          "coveredBy": ["392", "393"],
          "location": {
            "end": {
              "column": 23,
              "line": 113
            },
            "start": {
              "column": 10,
              "line": 113
            }
          }
        },
        {
          "id": "3723",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["392"],
          "coveredBy": ["392"],
          "location": {
            "end": {
              "column": 55,
              "line": 113
            },
            "start": {
              "column": 27,
              "line": 113
            }
          }
        },
        {
          "id": "3724",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection.length !== 0",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["392"],
          "coveredBy": ["392"],
          "location": {
            "end": {
              "column": 55,
              "line": 113
            },
            "start": {
              "column": 27,
              "line": 113
            }
          }
        },
        {
          "id": "3725",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(116,92): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["396"],
          "location": {
            "end": {
              "column": 2,
              "line": 125
            },
            "start": {
              "column": 99,
              "line": 116
            }
          }
        },
        {
          "id": "3726",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(122,36): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["396"],
          "location": {
            "end": {
              "column": 113,
              "line": 120
            },
            "start": {
              "column": 27,
              "line": 120
            }
          }
        },
        {
          "id": "3727",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 113,
              "line": 120
            },
            "start": {
              "column": 56,
              "line": 120
            }
          }
        },
        {
          "id": "3728",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 113,
              "line": 120
            },
            "start": {
              "column": 56,
              "line": 120
            }
          }
        },
        {
          "id": "3729",
          "mutatorName": "EqualityOperator",
          "replacement": "date.substring(date.indexOf('T') + 1) === '00:00:00.000Z'",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["396"],
          "coveredBy": ["396"],
          "location": {
            "end": {
              "column": 113,
              "line": 120
            },
            "start": {
              "column": 56,
              "line": 120
            }
          }
        },
        {
          "id": "3730",
          "mutatorName": "MethodExpression",
          "replacement": "date",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["396"],
          "coveredBy": ["396"],
          "location": {
            "end": {
              "column": 93,
              "line": 120
            },
            "start": {
              "column": 56,
              "line": 120
            }
          }
        },
        {
          "id": "3731",
          "mutatorName": "ArithmeticOperator",
          "replacement": "date.indexOf('T') - 1",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["396"],
          "coveredBy": ["396"],
          "location": {
            "end": {
              "column": 92,
              "line": 120
            },
            "start": {
              "column": 71,
              "line": 120
            }
          }
        },
        {
          "id": "3732",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["396"],
          "coveredBy": ["396"],
          "location": {
            "end": {
              "column": 87,
              "line": 120
            },
            "start": {
              "column": 84,
              "line": 120
            }
          }
        },
        {
          "id": "3733",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["396"],
          "coveredBy": ["396"],
          "location": {
            "end": {
              "column": 113,
              "line": 120
            },
            "start": {
              "column": 98,
              "line": 120
            }
          }
        },
        {
          "id": "3734",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(127,56): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "151",
            "181",
            "190",
            "191",
            "192",
            "193",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "374",
            "392",
            "393",
            "397",
            "398",
            "409",
            "410"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 135
            },
            "start": {
              "column": 64,
              "line": 127
            }
          }
        },
        {
          "id": "3735",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 130
            },
            "start": {
              "column": 7,
              "line": 130
            }
          }
        },
        {
          "id": "3736",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 130
            },
            "start": {
              "column": 7,
              "line": 130
            }
          }
        },
        {
          "id": "3737",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedBlogCtx.TESTING || category === BlogConfig.TESTING_CATEGORY",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "151",
            "181",
            "190",
            "191",
            "192",
            "193",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "374",
            "392",
            "393",
            "397",
            "398",
            "409",
            "410"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 130
            },
            "start": {
              "column": 7,
              "line": 130
            }
          }
        },
        {
          "id": "3738",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedBlogCtx.TESTING",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "151",
            "181",
            "190",
            "191",
            "192",
            "193",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "374",
            "392",
            "393",
            "397",
            "398",
            "409",
            "410"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 130
            },
            "start": {
              "column": 7,
              "line": 130
            }
          }
        },
        {
          "id": "3739",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 130
            },
            "start": {
              "column": 35,
              "line": 130
            }
          }
        },
        {
          "id": "3740",
          "mutatorName": "EqualityOperator",
          "replacement": "category !== BlogConfig.TESTING_CATEGORY",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["374"],
          "coveredBy": ["374"],
          "location": {
            "end": {
              "column": 75,
              "line": 130
            },
            "start": {
              "column": 35,
              "line": 130
            }
          }
        },
        {
          "id": "3741",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["374"],
          "coveredBy": ["374"],
          "location": {
            "end": {
              "column": 89,
              "line": 130
            },
            "start": {
              "column": 84,
              "line": 130
            }
          }
        },
        {
          "id": "3742",
          "mutatorName": "BooleanLiteral",
          "replacement": "categories.includes((category as any))",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "151",
            "181",
            "190",
            "191",
            "192",
            "193",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "397",
            "398",
            "409",
            "410"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 133
            },
            "start": {
              "column": 7,
              "line": 133
            }
          }
        },
        {
          "id": "3743",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "151",
            "181",
            "190",
            "191",
            "192",
            "193",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "397",
            "398",
            "409",
            "410"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 133
            },
            "start": {
              "column": 7,
              "line": 133
            }
          }
        },
        {
          "id": "3744",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 27,
          "static": false,
          "killedBy": ["138"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "151",
            "181",
            "190",
            "191",
            "192",
            "193",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "397",
            "398",
            "409",
            "410"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 133
            },
            "start": {
              "column": 7,
              "line": 133
            }
          }
        },
        {
          "id": "3745",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["138"],
          "coveredBy": ["29", "34", "138", "140", "141", "145", "147", "148", "191", "192", "254", "397", "398", "410"],
          "location": {
            "end": {
              "column": 58,
              "line": 133
            },
            "start": {
              "column": 53,
              "line": 133
            }
          }
        },
        {
          "id": "3746",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "135",
            "136",
            "137",
            "139",
            "142",
            "143",
            "144",
            "146",
            "151",
            "181",
            "190",
            "193",
            "253",
            "255",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "409"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 134
            },
            "start": {
              "column": 10,
              "line": 134
            }
          }
        },
        {
          "id": "3747",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(140,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "33",
            "34",
            "35",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "190",
            "193",
            "253",
            "255",
            "398"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 150
            },
            "start": {
              "column": 21,
              "line": 140
            }
          }
        },
        {
          "id": "3748",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategory(category)",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": [
            "33",
            "34",
            "35",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "190",
            "193",
            "253",
            "255",
            "398"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 143
            },
            "start": {
              "column": 7,
              "line": 143
            }
          }
        },
        {
          "id": "3749",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 143
            },
            "start": {
              "column": 7,
              "line": 143
            }
          }
        },
        {
          "id": "3750",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 143
            },
            "start": {
              "column": 7,
              "line": 143
            }
          }
        },
        {
          "id": "3751",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["398"],
          "coveredBy": ["34", "138", "140", "141", "145", "147", "148", "398"],
          "location": {
            "end": {
              "column": 51,
              "line": 143
            },
            "start": {
              "column": 46,
              "line": 143
            }
          }
        },
        {
          "id": "3752",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["33"],
          "coveredBy": ["33", "35", "135", "136", "137", "139", "142", "143", "144", "146", "190", "193", "253", "255"],
          "location": {
            "end": {
              "column": 4,
              "line": 148
            },
            "start": {
              "column": 37,
              "line": 145
            }
          }
        },
        {
          "id": "3753",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/blog/blog-testing-category/__INVALID…' to be '/blog/blog-testing-category' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["137"],
          "coveredBy": ["33", "35", "135", "136", "137", "139", "142", "143", "144", "146", "190", "193", "253", "255"],
          "location": {
            "end": {
              "column": 51,
              "line": 147
            },
            "start": {
              "column": 9,
              "line": 147
            }
          }
        },
        {
          "id": "3754",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["33"],
          "coveredBy": ["33", "35", "135", "136", "137", "139", "142", "143", "144", "146", "190", "193", "253", "255"],
          "location": {
            "end": {
              "column": 51,
              "line": 147
            },
            "start": {
              "column": 9,
              "line": 147
            }
          }
        },
        {
          "id": "3755",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["33", "135", "136", "142", "143", "190", "253"],
          "location": {
            "end": {
              "column": 64,
              "line": 147
            },
            "start": {
              "column": 60,
              "line": 147
            }
          }
        },
        {
          "id": "3756",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["35"],
          "coveredBy": ["35", "137", "139", "144", "146", "193", "255"],
          "location": {
            "end": {
              "column": 15,
              "line": 149
            },
            "start": {
              "column": 10,
              "line": 149
            }
          }
        },
        {
          "id": "3757",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(156,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "397"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 164
            },
            "start": {
              "column": 21,
              "line": 156
            }
          }
        },
        {
          "id": "3758",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategory(category)",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393",
            "397"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 159
            },
            "start": {
              "column": 7,
              "line": 159
            }
          }
        },
        {
          "id": "3759",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 159
            },
            "start": {
              "column": 7,
              "line": 159
            }
          }
        },
        {
          "id": "3760",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 159
            },
            "start": {
              "column": 7,
              "line": 159
            }
          }
        },
        {
          "id": "3761",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["29"],
          "coveredBy": ["29", "397"],
          "location": {
            "end": {
              "column": 51,
              "line": 159
            },
            "start": {
              "column": 46,
              "line": 159
            }
          }
        },
        {
          "id": "3762",
          "mutatorName": "BooleanLiteral",
          "replacement": "subcategories.includes(subcategory)",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 162
            },
            "start": {
              "column": 7,
              "line": 162
            }
          }
        },
        {
          "id": "3763",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 162
            },
            "start": {
              "column": 7,
              "line": 162
            }
          }
        },
        {
          "id": "3764",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 17,
          "static": false,
          "killedBy": ["30"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 162
            },
            "start": {
              "column": 7,
              "line": 162
            }
          }
        },
        {
          "id": "3765",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["30"],
          "coveredBy": ["30", "31"],
          "location": {
            "end": {
              "column": 57,
              "line": 162
            },
            "start": {
              "column": 52,
              "line": 162
            }
          }
        },
        {
          "id": "3766",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "32",
            "39",
            "135",
            "136",
            "142",
            "143",
            "151",
            "181",
            "256",
            "257",
            "258",
            "323",
            "324",
            "392",
            "393"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 163
            },
            "start": {
              "column": 10,
              "line": 163
            }
          }
        },
        {
          "id": "3767",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/guards/blogSubcategoryGuard.ts(21,53): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/blog/guards/blogPostGuard.ts(28,32): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 142,
              "line": 166
            },
            "start": {
              "column": 43,
              "line": 166
            }
          }
        },
        {
          "id": "3768",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/guards/blogPostGuard.ts(26,58): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 169
            },
            "start": {
              "column": 69,
              "line": 168
            }
          }
        },
        {
          "id": "3769",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(171,80): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["32"],
          "location": {
            "end": {
              "column": 2,
              "line": 174
            },
            "start": {
              "column": 88,
              "line": 171
            }
          }
        },
        {
          "id": "3770",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '//posts/blog/blog-testing-category/fa…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["32"],
          "location": {
            "end": {
              "column": 66,
              "line": 172
            },
            "start": {
              "column": 51,
              "line": 172
            }
          }
        },
        {
          "id": "3771",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'blog/blog-testing-category/fake-subca…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["32"],
          "location": {
            "end": {
              "column": 71,
              "line": 172
            },
            "start": {
              "column": 68,
              "line": 172
            }
          }
        },
        {
          "id": "3772",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(176,68): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 2,
              "line": 184
            },
            "start": {
              "column": 105,
              "line": 176
            }
          }
        },
        {
          "id": "3773",
          "mutatorName": "ArithmeticOperator",
          "replacement": "BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT + 1",
          "statusReason": "expected 251 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 82,
              "line": 178
            },
            "start": {
              "column": 21,
              "line": 178
            }
          }
        },
        {
          "id": "3774",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 251 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 179
            },
            "start": {
              "column": 7,
              "line": 179
            }
          }
        },
        {
          "id": "3775",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…' to strictly equal '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["37"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 179
            },
            "start": {
              "column": 7,
              "line": 179
            }
          }
        },
        {
          "id": "3776",
          "mutatorName": "EqualityOperator",
          "replacement": "description.length < takeLimit",
          "statusReason": "expected '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…' to strictly equal '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["37"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 179
            },
            "start": {
              "column": 7,
              "line": 179
            }
          }
        },
        {
          "id": "3777",
          "mutatorName": "EqualityOperator",
          "replacement": "description.length > takeLimit",
          "statusReason": "expected 251 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 179
            },
            "start": {
              "column": 7,
              "line": 179
            }
          }
        },
        {
          "id": "3778",
          "mutatorName": "MethodExpression",
          "replacement": "description",
          "statusReason": "expected 252 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36"],
          "location": {
            "end": {
              "column": 64,
              "line": 182
            },
            "start": {
              "column": 29,
              "line": 182
            }
          }
        },
        {
          "id": "3779",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 249 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36"],
          "location": {
            "end": {
              "column": 70,
              "line": 182
            },
            "start": {
              "column": 67,
              "line": 182
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryFromUnknownCategory, UnknownBlogSlug, StrictBlogPost, BlogCategory, BlogPostType, StrictBlog } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { IsoDateTimeString } from 'contentlayer/core';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport buildAbsolutePathFromParts from '@rtm/shared-lib/portable/str/buildAbsolutePathFromParts';\nimport { getBlogSubcategoriesByCategory } from '@/cache/blog';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { LANGUAGES } from '##/config/i18n';\nimport { redirect } from 'next/navigation';\n\nimport { getFormattedDate } from '../str';\nimport ComputedBlogCtx from './ctx';\n\nexport async function getAllBlogPostsByCategory(categ: BlogCategory): Promise<MaybeNull<BlogPostType[]>> {\n  try {\n    const posts = await BlogConfig.BLOG_CATEGORIES_ALL_POSTS_CONSTS_ASSOC[categ]();\n    return posts;\n  } catch {\n    return null;\n  }\n}\n\nexport async function getAllBlogPostsByCategoryAndLanguage(categ: BlogCategory, language: LanguageFlag): Promise<MaybeNull<BlogPostType[]>> {\n  const allPosts = await getAllBlogPostsByCategory(categ);\n  if (allPosts === null) return null;\n\n  const posts = allPosts.filter(({ language: currentPostLanguage }) => currentPostLanguage === language);\n  return posts;\n}\n\nexport async function getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory,\n  language: LanguageFlag\n): Promise<BlogPostType[]> {\n  // Stryker Workaround 1. Pointless mutants: there's no ambiguity here.\n  // Stryker disable next-line ConditionalExpression,EqualityOperator\n  if (!ComputedBlogCtx.TESTING && category === BlogConfig.TESTING_CATEGORY) return [];\n\n  const isValidPair: boolean = await isValidBlogCategoryAndSubcategoryPair(category, subcategory, language);\n  // Stryker Workaround 2. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!isValidPair) return [];\n\n  const getBlogPostsWithAllowedDraftsCtx = (postsCollection: BlogPostType[]): BlogPostType[] =>\n    postsCollection.filter(\n      ({ subcategory: currentPostSubcategory, language: currentPostLanguage }) =>\n        // Stryker Workaround 3. Pointless mutants: there's no ambiguity here.\n        // Stryker disable next-line ConditionalExpression\n        currentPostSubcategory === subcategory && currentPostLanguage === language\n    );\n\n  const getBlogPostsWithDisallowedDraftsCtx = (postsCollection: BlogPostType[]): BlogPostType[] =>\n    postsCollection.filter(\n      ({ subcategory: currentPostSubcategory, language: currentPostLanguage, draft: currentPostDraft }) =>\n        // Stryker Workaround 4. Pointless mutants: there's no ambiguity here.\n        // Stryker disable next-line ConditionalExpression\n        !currentPostDraft && currentPostSubcategory === subcategory && currentPostLanguage === language\n    );\n\n  const postsCollection = (await getAllBlogPostsByCategory(category)) as BlogPostType[];\n\n  return ComputedBlogCtx.ALLOWED_DRAFTS ? getBlogPostsWithAllowedDraftsCtx(postsCollection) : getBlogPostsWithDisallowedDraftsCtx(postsCollection);\n}\n\nexport async function getBlogPostUnstrict(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory,\n  targettedSlug: UnknownBlogSlug,\n  language: LanguageFlag\n): Promise<MaybeNull<BlogPostType>> {\n  // Stryker Workaround 5. Pointless mutants: there's no ambiguity here.\n  // Stryker disable next-line ConditionalExpression,EqualityOperator\n  if (!ComputedBlogCtx.TESTING && category === BlogConfig.TESTING_CATEGORY) return null;\n\n  const getBlogPostWithAllowedDraftsCtx: () => MaybeNull<BlogPostType> = () =>\n    postsCollection.find(({ slug: currentPostSlug }) => currentPostSlug === targettedSlug) ?? null;\n\n  const getBlogPostWithDisallowedDraftsCtx: () => MaybeNull<BlogPostType> = () =>\n    postsCollection.find(({ draft: currentPostDraft, slug: currentPostSlug }) => !currentPostDraft && currentPostSlug === targettedSlug) ?? null;\n\n  const postsCollection: BlogPostType[] = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(category, subcategory, language);\n\n  return ComputedBlogCtx.ALLOWED_DRAFTS ? getBlogPostWithAllowedDraftsCtx() : getBlogPostWithDisallowedDraftsCtx();\n}\n\nexport async function getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict<C extends keyof StrictBlog>(\n  category: C,\n  subcategory: keyof StrictBlog[C],\n  language: keyof StrictBlog[C][keyof StrictBlog[C]] | LanguageFlag\n): Promise<BlogPostType[]> {\n  const allPosts: BlogPostType[] = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n    category as any,\n    subcategory as any,\n    language as any\n  );\n  return allPosts;\n}\n\nexport async function getBlogPostStrict({ subcategory, category, lang, slug }: StrictBlogPost): Promise<MaybeNull<BlogPostType>> {\n  const post: MaybeNull<BlogPostType> = await getBlogPostUnstrict(category as any, subcategory as any, slug as any, lang as any);\n  return post;\n}\n\nexport const getAllBlogCategories: () => BlogCategory[] = () => Object.keys(BlogConfig.BLOG_CATEGORIES_ALL_POSTS_CONSTS_ASSOC) as BlogCategory[];\n\nexport function blogSubcategoryShouldTriggerNotFound(postsCollection: Partial<BlogPostType>[]): boolean {\n  const isForcedPath = BlogConfig.USE_BLOG_POSTS_NOTFOUND_WHEN_SUBCATEGORY_IS_EMPTY_INSTEAD_OF_NOT_FOUND;\n  // eslint-disable-next-line no-magic-numbers\n  return !isForcedPath && postsCollection.length === 0;\n}\n\nexport function getBlogPostFormattedDate(language: LanguageFlag, date: IsoDateTimeString): string {\n  // Stryker Workaround 6. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  // eslint-disable-next-line no-magic-numbers\n  const postDateHasTime = (date: IsoDateTimeString) => date.substring(date.indexOf('T') + 1) !== '00:00:00.000Z';\n\n  const giveTime = postDateHasTime(date);\n  const formattedDate = getFormattedDate(language, new Date(date), giveTime);\n  return formattedDate;\n}\n\nexport function isValidBlogCategory(category: string): boolean {\n  // Stryker Workaround 7. Testing \"&& true\" is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!ComputedBlogCtx.TESTING && category === BlogConfig.TESTING_CATEGORY) return false;\n\n  const categories = getAllBlogCategories();\n  if (!categories.includes(category as any)) return false;\n  return true;\n}\n\nexport async function isValidBlogCategoryAndSubcategoryPairInAnyLanguage(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory\n): Promise<boolean> {\n  // Stryker Workaround 8. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!isValidBlogCategory(category)) return false;\n\n  for (const language of LANGUAGES) {\n    const currentSubcategories = await getBlogSubcategoriesByCategory(category, language);\n    if (currentSubcategories.includes(subcategory)) return true;\n  }\n  return false;\n}\n\nexport async function isValidBlogCategoryAndSubcategoryPair(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory,\n  language: LanguageFlag\n): Promise<boolean> {\n  // Stryker Workaround 9. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!isValidBlogCategory(category)) return false;\n\n  const subcategories = await getBlogSubcategoriesByCategory(category, language);\n  if (!subcategories.includes(subcategory)) return false;\n  return true;\n}\n\nexport const redirectToBlogCategoryPage = (category: BlogCategory): void => redirect(buildAbsolutePathFromParts(ROUTES_ROOTS.BLOG, category));\n\nexport const redirectToBlogCategoryAndSubcategoryPairPageUnstrict = (category: BlogCategory, subcategory: BlogSubcategoryFromUnknownCategory): void =>\n  redirect(buildAbsolutePathFromParts(ROUTES_ROOTS.BLOG, category, subcategory));\n\nexport function getBlogPostPathWithoutI18nPart(language: string, url: string): AppPath {\n  const blogPostPathWithoutI18nPart = url.replace(`/${language}/`, '/');\n  return blogPostPathWithoutI18nPart;\n}\n\nexport function getSlicedBlogPostDescription(description: string): CroppedDescription | DescriptionAsIs {\n  // eslint-disable-next-line no-magic-numbers\n  const takeLimit = BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT - 1;\n  if (description.length <= takeLimit) return description;\n\n  // eslint-disable-next-line no-magic-numbers\n  const slicedDescription = description.substring(0, takeLimit) + '…';\n  return slicedDescription;\n}\n\ntype DescriptionAsIs = string;\ntype CroppedDescription = string;\n"
    },
    "src/lib/blog/blogCategoryPageBuilder.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3780",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(25,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 136
            },
            "start": {
              "column": 43,
              "line": 25
            }
          }
        },
        {
          "id": "3781",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 29,
              "line": 26
            }
          }
        },
        {
          "id": "3782",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 37
            },
            "start": {
              "column": 31,
              "line": 27
            }
          }
        },
        {
          "id": "3783",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 29
            },
            "start": {
              "column": 11,
              "line": 29
            }
          }
        },
        {
          "id": "3784",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 29
            },
            "start": {
              "column": 11,
              "line": 29
            }
          }
        },
        {
          "id": "3785",
          "mutatorName": "EqualityOperator",
          "replacement": "histogram[curSubcateg] !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 29
            },
            "start": {
              "column": 11,
              "line": 29
            }
          }
        },
        {
          "id": "3786",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "3787",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "3788",
          "mutatorName": "LogicalOperator",
          "replacement": "histogram[curSubcateg].length < limit + 1 || post.language === language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "3789",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "3790",
          "mutatorName": "EqualityOperator",
          "replacement": "histogram[curSubcateg].length <= limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "3791",
          "mutatorName": "EqualityOperator",
          "replacement": "histogram[curSubcateg].length >= limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 32
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "3792",
          "mutatorName": "ArithmeticOperator",
          "replacement": "limit - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 32
            },
            "start": {
              "column": 43,
              "line": 32
            }
          }
        },
        {
          "id": "3793",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 32
            },
            "start": {
              "column": 56,
              "line": 32
            }
          }
        },
        {
          "id": "3794",
          "mutatorName": "EqualityOperator",
          "replacement": "post.language !== language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 32
            },
            "start": {
              "column": 56,
              "line": 32
            }
          }
        },
        {
          "id": "3795",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 36
            },
            "start": {
              "column": 84,
              "line": 32
            }
          }
        },
        {
          "id": "3796",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "3797",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "3798",
          "mutatorName": "MethodExpression",
          "replacement": "Object.values(histogram).some(posts2 => posts2.length >= limit + 1)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "3799",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 35
            },
            "start": {
              "column": 44,
              "line": 35
            }
          }
        },
        {
          "id": "3800",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 35
            },
            "start": {
              "column": 56,
              "line": 35
            }
          }
        },
        {
          "id": "3801",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 35
            },
            "start": {
              "column": 56,
              "line": 35
            }
          }
        },
        {
          "id": "3802",
          "mutatorName": "EqualityOperator",
          "replacement": "posts2.length > limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 35
            },
            "start": {
              "column": 56,
              "line": 35
            }
          }
        },
        {
          "id": "3803",
          "mutatorName": "EqualityOperator",
          "replacement": "posts2.length < limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 35
            },
            "start": {
              "column": 56,
              "line": 35
            }
          }
        },
        {
          "id": "3804",
          "mutatorName": "ArithmeticOperator",
          "replacement": "limit - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 35
            },
            "start": {
              "column": 73,
              "line": 35
            }
          }
        },
        {
          "id": "3805",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 46
            },
            "start": {
              "column": 44,
              "line": 40
            }
          }
        },
        {
          "id": "3806",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 45
            },
            "start": {
              "column": 68,
              "line": 41
            }
          }
        },
        {
          "id": "3807",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 44
            },
            "start": {
              "column": 96,
              "line": 42
            }
          }
        },
        {
          "id": "3808",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 43
            },
            "start": {
              "column": 31,
              "line": 43
            }
          }
        },
        {
          "id": "3809",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 49
            },
            "start": {
              "column": 27,
              "line": 49
            }
          }
        },
        {
          "id": "3810",
          "mutatorName": "MethodExpression",
          "replacement": "Object.values(postsCollectionsSnippets).some(posts2 => posts2.length === 0)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 49
            },
            "start": {
              "column": 33,
              "line": 49
            }
          }
        },
        {
          "id": "3811",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 49
            },
            "start": {
              "column": 79,
              "line": 49
            }
          }
        },
        {
          "id": "3812",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 49
            },
            "start": {
              "column": 91,
              "line": 49
            }
          }
        },
        {
          "id": "3813",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 49
            },
            "start": {
              "column": 91,
              "line": 49
            }
          }
        },
        {
          "id": "3814",
          "mutatorName": "EqualityOperator",
          "replacement": "posts2.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 49
            },
            "start": {
              "column": 91,
              "line": 49
            }
          }
        },
        {
          "id": "3815",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(51,32): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 106
            },
            "start": {
              "column": 47,
              "line": 51
            }
          }
        },
        {
          "id": "3816",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 52
            },
            "start": {
              "column": 36,
              "line": 52
            }
          }
        },
        {
          "id": "3817",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 53
            },
            "start": {
              "column": 18,
              "line": 53
            }
          }
        },
        {
          "id": "3818",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 103
            },
            "start": {
              "column": 82,
              "line": 57
            }
          }
        },
        {
          "id": "3819",
          "mutatorName": "UpdateOperator",
          "replacement": "--counter",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 58
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "3820",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 59
            },
            "start": {
              "column": 16,
              "line": 59
            }
          }
        },
        {
          "id": "3821",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 59
            },
            "start": {
              "column": 16,
              "line": 59
            }
          }
        },
        {
          "id": "3822",
          "mutatorName": "EqualityOperator",
          "replacement": "counter > max",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 59
            },
            "start": {
              "column": 16,
              "line": 59
            }
          }
        },
        {
          "id": "3823",
          "mutatorName": "EqualityOperator",
          "replacement": "counter < max",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 59
            },
            "start": {
              "column": 16,
              "line": 59
            }
          }
        },
        {
          "id": "3824",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 61
            },
            "start": {
              "column": 11,
              "line": 61
            }
          }
        },
        {
          "id": "3825",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 61
            },
            "start": {
              "column": 11,
              "line": 61
            }
          }
        },
        {
          "id": "3826",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 61
            },
            "start": {
              "column": 11,
              "line": 61
            }
          }
        },
        {
          "id": "3827",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(58,40): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 63
            },
            "start": {
              "column": 40,
              "line": 63
            }
          }
        },
        {
          "id": "3828",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 75
            },
            "start": {
              "column": 11,
              "line": 75
            }
          }
        },
        {
          "id": "3829",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 75
            },
            "start": {
              "column": 11,
              "line": 75
            }
          }
        },
        {
          "id": "3830",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length >= limit",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 75
            },
            "start": {
              "column": 11,
              "line": 75
            }
          }
        },
        {
          "id": "3831",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length <= limit",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 75
            },
            "start": {
              "column": 11,
              "line": 75
            }
          }
        },
        {
          "id": "3832",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 84
            },
            "start": {
              "column": 33,
              "line": 75
            }
          }
        },
        {
          "id": "3833",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 78
            },
            "start": {
              "column": 60,
              "line": 78
            }
          }
        },
        {
          "id": "3834",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(74,42): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 79
            },
            "start": {
              "column": 42,
              "line": 79
            }
          }
        },
        {
          "id": "3835",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 86
            },
            "start": {
              "column": 82,
              "line": 86
            }
          }
        },
        {
          "id": "3836",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 91
            },
            "start": {
              "column": 16,
              "line": 91
            }
          }
        },
        {
          "id": "3837",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 102
            },
            "start": {
              "column": 11,
              "line": 102
            }
          }
        },
        {
          "id": "3838",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 102
            },
            "start": {
              "column": 11,
              "line": 102
            }
          }
        },
        {
          "id": "3839",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLast && !showMoreLink || max > 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 102
            },
            "start": {
              "column": 11,
              "line": 102
            }
          }
        },
        {
          "id": "3840",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 102
            },
            "start": {
              "column": 11,
              "line": 102
            }
          }
        },
        {
          "id": "3841",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLast || !showMoreLink",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 102
            },
            "start": {
              "column": 11,
              "line": 102
            }
          }
        },
        {
          "id": "3842",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLast",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 102
            },
            "start": {
              "column": 11,
              "line": 102
            }
          }
        },
        {
          "id": "3843",
          "mutatorName": "BooleanLiteral",
          "replacement": "showMoreLink",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 102
            },
            "start": {
              "column": 22,
              "line": 102
            }
          }
        },
        {
          "id": "3844",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 102
            },
            "start": {
              "column": 39,
              "line": 102
            }
          }
        },
        {
          "id": "3845",
          "mutatorName": "EqualityOperator",
          "replacement": "max >= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 102
            },
            "start": {
              "column": 39,
              "line": 102
            }
          }
        },
        {
          "id": "3846",
          "mutatorName": "EqualityOperator",
          "replacement": "max <= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 102
            },
            "start": {
              "column": 39,
              "line": 102
            }
          }
        },
        {
          "id": "3847",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 109
            },
            "start": {
              "column": 7,
              "line": 109
            }
          }
        },
        {
          "id": "3848",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 109
            },
            "start": {
              "column": 7,
              "line": 109
            }
          }
        },
        {
          "id": "3849",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 109
            },
            "start": {
              "column": 7,
              "line": 109
            }
          }
        },
        {
          "id": "3850",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(108,9): error TS2322: Type 'undefined[]' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]][]'.\n  Type 'undefined' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 112,
              "line": 113
            },
            "start": {
              "column": 84,
              "line": 113
            }
          }
        },
        {
          "id": "3851",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(108,9): error TS2322: Type '[][]' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]][]'.\n  Type '[]' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]]'.\n    Source has 0 element(s) but target requires 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 112,
              "line": 113
            },
            "start": {
              "column": 98,
              "line": 113
            }
          }
        },
        {
          "id": "3852",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 113
            },
            "start": {
              "column": 109,
              "line": 113
            }
          }
        },
        {
          "id": "3853",
          "mutatorName": "MethodExpression",
          "replacement": "entries",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 122
            },
            "start": {
              "column": 25,
              "line": 116
            }
          }
        },
        {
          "id": "3854",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(111,38): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type '(a: [BlogSubcategoryFromUnknownCategory, unknown[]], b: [BlogSubcategoryFromUnknownCategory, unknown[]]) => number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 121
            },
            "start": {
              "column": 38,
              "line": 116
            }
          }
        },
        {
          "id": "3855",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(113,15): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 118
            },
            "start": {
              "column": 15,
              "line": 118
            }
          }
        },
        {
          "id": "3856",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(114,15): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 57 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 56 more ... | \"blog-categories.patch-notes-bis.discord-bot-bis.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 119
            },
            "start": {
              "column": 15,
              "line": 119
            }
          }
        },
        {
          "id": "3857",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(29,11): error TS18048: 'histogram' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(32,11): error TS18048: 'histogram' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(33,9): error TS18048: 'histogram' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(35,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: { [s: string]: unknown; } | ArrayLike<unknown>): unknown[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{ [s: string]: unknown; } | ArrayLike<unknown>'.\n  Overload 2 of 2, '(o: {}): any[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(35,56): error TS18046: 'posts2' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(41,56): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: ArrayLike<unknown> | { [s: string]: unknown; }): [string, unknown][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type 'ArrayLike<unknown> | { [s: string]: unknown; }'.\n  Overload 2 of 2, '(o: {}): [string, any][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(42,7): error TS18048: 'postsCollectionsSnippets' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(42,85): error TS18046: 'posts2' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(42,97): error TS7006: Parameter 'post' implicitly has an 'any' type.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(49,47): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: { [s: string]: unknown; } | ArrayLike<unknown>): unknown[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{ [s: string]: unknown; } | ArrayLike<unknown>'.\n  Overload 2 of 2, '(o: {}): any[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(49,91): error TS18046: 'posts2' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(54,32): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: ArrayLike<unknown> | { [s: string]: unknown; }): [string, unknown][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type 'ArrayLike<unknown> | { [s: string]: unknown; }'.\n  Overload 2 of 2, '(o: {}): [string, any][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(57,55): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: ArrayLike<unknown> | { [s: string]: unknown; }): [string, unknown][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type 'ArrayLike<unknown> | { [s: string]: unknown; }'.\n  Overload 2 of 2, '(o: {}): [string, any][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(61,11): error TS18046: 'posts' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(75,11): error TS18046: 'posts' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(83,9): error TS18046: 'posts' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(95,11): error TS2322: Type 'unknown' is not assignable to type 'ReactNode'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(124,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(124,21): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 127
            },
            "start": {
              "column": 49,
              "line": 124
            }
          }
        },
        {
          "id": "3858",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 132
            },
            "start": {
              "column": 7,
              "line": 132
            }
          }
        },
        {
          "id": "3859",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 132
            },
            "start": {
              "column": 7,
              "line": 132
            }
          }
        }
      ],
      "source": "import type { BlogCategoriesAndSubcategoriesAssoc, BlogSubcategoryFromUnknownCategory, BlogCategory, BlogPostType } from '@/types/Blog';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { ReactElement } from 'react';\n\nimport buildPathFromParts from '@rtm/shared-lib/portable/str/buildPathFromParts';\nimport BlogPostsNotFound from '@/components/ui/blog/BlogPostsNotFound';\nimport BlogPostPreview from '@/components/ui/blog/BlogPostPreview';\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { getBlogSubcategoriesByCategory } from '@/cache/blog';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { Button } from '@/components/ui/Button';\nimport BlogConfig from '@/config/Blog/server';\nimport GithubSlugger from 'github-slugger';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nconst slugger = new GithubSlugger();\n\n// {ToDo} https://github.com/Tirraa/dashboard_rtm/issues/126\nasync function blogCategoryPageBuilder(\n  posts: BlogPostType[],\n  category: BlogCategory,\n  language: LanguageFlag\n): Promise<ReactElement[] | ReactElement> {\n  function buildHistogram() {\n    for (const post of posts) {\n      const curSubcateg = post.subcategory as BlogSubcategoryFromUnknownCategory;\n      if (histogram[curSubcateg] === undefined) continue;\n\n      // eslint-disable-next-line no-magic-numbers\n      if (histogram[curSubcateg].length < limit + 1 && post.language === language) {\n        histogram[curSubcateg].push(post);\n        // eslint-disable-next-line no-magic-numbers\n        if (Object.values(histogram).every((posts2) => posts2.length >= limit + 1)) break;\n      }\n    }\n  }\n\n  function buildPostsCollectionsSnippets() {\n    for (const [subcategory, posts2] of Object.entries(histogram)) {\n      postsCollectionsSnippets[subcategory as BlogSubcategoryFromUnknownCategory] = posts2.map((post) => (\n        <BlogPostPreview key={`${post._raw.flattenedPath}-post-snippet`} isNotOnBlogSubcategoryPage language={language} post={post} />\n      ));\n    }\n  }\n\n  // eslint-disable-next-line no-magic-numbers\n  const isEmptySnippets = () => Object.values(postsCollectionsSnippets).every((posts2) => posts2.length === 0);\n\n  function contentGenerator(): ReactElement[] {\n    const result: ReactElement[] = [];\n    let isLast = false;\n    const max = Object.entries(postsCollectionsSnippets).length;\n    let counter = 0;\n\n    for (const [subcategory, posts] of Object.entries(postsCollectionsSnippets)) {\n      ++counter;\n      isLast = counter >= max;\n      // eslint-disable-next-line no-magic-numbers\n      if (posts.length === 0) continue;\n      const narrowedCategoryAndSubcategoryAssoc = `${category}.${subcategory}` as BlogCategoriesAndSubcategoriesAssoc;\n      const curSubcategTitle = globalT(`${i18ns.blogCategories}.${narrowedCategoryAndSubcategoryAssoc}.title`);\n      const href = buildPathFromParts(category, subcategory);\n      const title = (\n        <Link\n          className=\"mb-4 flex h-fit w-fit border-b-[2px] border-transparent leading-none transition-all hover:border-b-[2px] hover:border-inherit hover:pr-2 hover:indent-1 focus:border-b-[2px] focus:border-inherit focus:pr-2 focus:indent-1\"\n          href={href}\n        >\n          <h2 className=\"mb-1 mt-2\">{curSubcategTitle}</h2>\n        </Link>\n      );\n\n      let showMoreLink = null;\n      if (posts.length > limit) {\n        showMoreLink = (\n          <div className=\"flex w-full justify-center\">\n            <Button className={cn(BUTTON_CONFIG.CLASSNAME, 'mt-4 lg:mb-0')} size=\"lg\" asChild>\n              <Link href={href}>{globalT(`${i18ns.vocab}.see-more`)}</Link>\n            </Button>\n          </div>\n        );\n        posts.pop();\n      }\n\n      const sep = <hr className=\"color-inherit m-auto my-5 w-36 opacity-50\" key={`${subcategory}-${curSubcategTitle}-sep`} />;\n\n      const section = (\n        <section\n          className=\"my-4 [&>article:not(:last-of-type)]:mb-6\"\n          key={`${subcategory}-${curSubcategTitle}-section`}\n          id={slugger.slug(curSubcategTitle)}\n        >\n          {title}\n          {posts}\n          {showMoreLink}\n        </section>\n      );\n\n      result.push(section);\n      // eslint-disable-next-line no-magic-numbers\n      if (!isLast && !showMoreLink && max > 1) result.push(sep);\n    }\n\n    return result;\n  }\n\n  // eslint-disable-next-line no-magic-numbers\n  if (posts.length === 0) return <BlogPostsNotFound />;\n\n  const globalT = await getServerSideI18n();\n  const subcategs: BlogSubcategoryFromUnknownCategory[] = await getBlogSubcategoriesByCategory(category, language);\n  const entries: [BlogSubcategoryFromUnknownCategory, unknown[]][] = subcategs.map((subcateg) => [subcateg, []]);\n  const { pagesTitles } = i18ns;\n\n  const sortedEntries = entries.sort(([entry1], [entry2]) =>\n    BlogConfig.DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_SUBCATEGORIES_ON_BLOG_CATEGORY_PAGE(\n      globalT(`${pagesTitles}.${entry1}`),\n      globalT(`${pagesTitles}.${entry2}`),\n      language\n    )\n  );\n\n  const [histogram, postsCollectionsSnippets] = [\n    Object.fromEntries(entries) as Record<BlogSubcategoryFromUnknownCategory, BlogPostType[]>,\n    Object.fromEntries(sortedEntries) as Record<BlogSubcategoryFromUnknownCategory, ReactElement[]>\n  ];\n  const limit = BlogConfig.DISPLAYED_BLOG_POSTS_PER_SUBCATEGORY_ON_BLOG_CATEGORY_PAGE_LIMIT;\n\n  buildHistogram();\n  buildPostsCollectionsSnippets();\n  if (isEmptySnippets()) return <BlogPostsNotFound />;\n\n  const result: ReactElement[] = contentGenerator();\n  return result;\n}\n\nexport default blogCategoryPageBuilder;\n"
    },
    "src/lib/blog/ctx.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3860",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "3861",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "3862",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'test'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "3863",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 42,
              "line": 10
            }
          }
        },
        {
          "id": "3864",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "3865",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "3866",
          "mutatorName": "LogicalOperator",
          "replacement": "BlogConfig.ENABLE_DRAFTS_IN_PROD && process.env.NODE_ENV === 'development'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "3867",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 11
            },
            "start": {
              "column": 60,
              "line": 11
            }
          }
        },
        {
          "id": "3868",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'development'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 11
            },
            "start": {
              "column": 60,
              "line": 11
            }
          }
        },
        {
          "id": "3869",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 11
            },
            "start": {
              "column": 85,
              "line": 11
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\nimport BlogConfig from '@/config/Blog/server';\n\ntype ComputedBlogCtxType = {\n  ALLOWED_DRAFTS: boolean;\n  TESTING: boolean;\n};\n\nconst TESTING = process.env.NODE_ENV === 'test';\nconst ALLOWED_DRAFTS = BlogConfig.ENABLE_DRAFTS_IN_PROD || process.env.NODE_ENV === 'development';\n\nconst ComputedBlogCtx: ComputedBlogCtxType = {\n  ALLOWED_DRAFTS,\n  TESTING\n} as const;\n\nexport default ComputedBlogCtx;\n\n// Stryker restore all\n"
    },
    "src/lib/blog/guards/blogCategoryGuard.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3870",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 1, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["410"],
          "coveredBy": ["409", "410"],
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 78,
              "line": 8
            }
          }
        },
        {
          "id": "3871",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategory(category)",
          "statusReason": "expected [Function] to not throw an error but 'Error: NEXT_NOT_FOUND' was thrown",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["409"],
          "coveredBy": ["409", "410"],
          "location": {
            "end": {
              "column": 37,
              "line": 11
            },
            "start": {
              "column": 7,
              "line": 11
            }
          }
        },
        {
          "id": "3872",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [Function] to not throw an error but 'Error: NEXT_NOT_FOUND' was thrown",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["409"],
          "coveredBy": ["409", "410"],
          "location": {
            "end": {
              "column": 37,
              "line": 11
            },
            "start": {
              "column": 7,
              "line": 11
            }
          }
        },
        {
          "id": "3873",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected number of assertions to be 1, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["410"],
          "coveredBy": ["409", "410"],
          "location": {
            "end": {
              "column": 37,
              "line": 11
            },
            "start": {
              "column": 7,
              "line": 11
            }
          }
        }
      ],
      "source": "import type { BlogCategoryPageProps } from '@/types/Blog';\n\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport { notFound } from 'next/navigation';\n\nimport { isValidBlogCategory } from '../api';\n\nexport default function blogCategoryGuard({ params }: BlogCategoryPageProps) {\n  const category = params[BlogTaxonomy.CATEGORY];\n\n  if (!isValidBlogCategory(category)) notFound();\n}\n"
    },
    "src/lib/blog/guards/blogPostGuard.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3874",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["136"],
          "coveredBy": ["135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 76,
              "line": 17
            }
          }
        },
        {
          "id": "3875",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/guards/blogPostGuard.ts(18,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/blog/guards/blogPostGuard.ts(18,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/lib/blog/guards/blogPostGuard.ts(20,94): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/lib/blog/guards/blogPostGuard.ts(24,61): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/lib/blog/guards/blogPostGuard.ts(27,58): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/lib/blog/guards/blogPostGuard.ts(28,43): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/lib/blog/guards/blogPostGuard.ts(29,32): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/lib/blog/guards/blogPostGuard.ts(31,63): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 100,
              "line": 18
            },
            "start": {
              "column": 35,
              "line": 18
            }
          }
        },
        {
          "id": "3876",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/guards/blogPostGuard.ts(22,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/blog/guards/blogPostGuard.ts(22,16): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/lib/blog/guards/blogPostGuard.ts(24,84): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 86,
              "line": 22
            },
            "start": {
              "column": 28,
              "line": 22
            }
          }
        },
        {
          "id": "3877",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 32,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "3878",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/blog/blog-testing-category' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["136"],
          "coveredBy": ["135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 32,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "3879",
          "mutatorName": "LogicalOperator",
          "replacement": "!post || validCombination",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 32,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "3880",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 12,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "3881",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["136"],
          "coveredBy": ["136", "143"],
          "location": {
            "end": {
              "column": 4,
              "line": 28
            },
            "start": {
              "column": 34,
              "line": 26
            }
          }
        },
        {
          "id": "3882",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "137", "138", "139", "140", "141", "142", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 52,
              "line": 28
            },
            "start": {
              "column": 14,
              "line": 28
            }
          }
        },
        {
          "id": "3883",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/blog-testing-category' to be '/blog/blog-testing-category' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["137"],
          "coveredBy": ["135", "137", "138", "139", "140", "141", "142", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 52,
              "line": 28
            },
            "start": {
              "column": 14,
              "line": 28
            }
          }
        },
        {
          "id": "3884",
          "mutatorName": "LogicalOperator",
          "replacement": "!post || isValidBlogCategory(category)",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "137", "138", "139", "140", "141", "142", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 52,
              "line": 28
            },
            "start": {
              "column": 14,
              "line": 28
            }
          }
        },
        {
          "id": "3885",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "137", "138", "139", "140", "141", "142", "144", "145", "146", "147", "148"],
          "location": {
            "end": {
              "column": 19,
              "line": 28
            },
            "start": {
              "column": 14,
              "line": 28
            }
          }
        },
        {
          "id": "3886",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["137"],
          "coveredBy": ["137", "139", "144", "146"],
          "location": {
            "end": {
              "column": 4,
              "line": 30
            },
            "start": {
              "column": 54,
              "line": 28
            }
          }
        },
        {
          "id": "3887",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "138", "140", "141", "142", "145", "147", "148"],
          "location": {
            "end": {
              "column": 19,
              "line": 30
            },
            "start": {
              "column": 14,
              "line": 30
            }
          }
        },
        {
          "id": "3888",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "138", "140", "141", "142", "145", "147", "148"],
          "location": {
            "end": {
              "column": 19,
              "line": 30
            },
            "start": {
              "column": 14,
              "line": 30
            }
          }
        },
        {
          "id": "3889",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["138"],
          "coveredBy": ["135", "138", "140", "141", "142", "145", "147", "148"],
          "location": {
            "end": {
              "column": 19,
              "line": 30
            },
            "start": {
              "column": 14,
              "line": 30
            }
          }
        },
        {
          "id": "3890",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["138"],
          "coveredBy": ["138", "140", "141", "145", "147", "148"],
          "location": {
            "end": {
              "column": 4,
              "line": 32
            },
            "start": {
              "column": 21,
              "line": 30
            }
          }
        }
      ],
      "source": "import type { BlogPostPageProps } from '@/types/Blog';\n\nimport { buildAbsolutePathFromParts } from '@rtm/shared-lib/str';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\n\nimport {\n  redirectToBlogCategoryAndSubcategoryPairPageUnstrict,\n  isValidBlogCategoryAndSubcategoryPairInAnyLanguage,\n  redirectToBlogCategoryPage,\n  getBlogPostUnstrict,\n  isValidBlogCategory\n} from '../api';\n\nexport default async function blogPostGuard({ params }: BlogPostPageProps) {\n  const [category, subcategory] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY]];\n\n  const validCombination: boolean = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n\n  const [slug, language] = [params[BlogTaxonomy.SLUG], params[I18nTaxonomy.LANGUAGE]];\n\n  const post = validCombination ? await getBlogPostUnstrict(category, subcategory, slug, language) : undefined;\n\n  if (!post && validCombination) {\n    redirectToBlogCategoryAndSubcategoryPairPageUnstrict(category, subcategory);\n  } else if (!post && isValidBlogCategory(category)) {\n    redirectToBlogCategoryPage(category);\n  } else if (!post) {\n    redirect(buildAbsolutePathFromParts(ROUTES_ROOTS.WEBSITE, category));\n  }\n}\n"
    },
    "src/lib/blog/guards/blogSubcategoryGuard.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3891",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["191"],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 90,
              "line": 10
            }
          }
        },
        {
          "id": "3892",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 16
            },
            "start": {
              "column": 29,
              "line": 16
            }
          }
        },
        {
          "id": "3893",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 16
            },
            "start": {
              "column": 29,
              "line": 16
            }
          }
        },
        {
          "id": "3894",
          "mutatorName": "EqualityOperator",
          "replacement": "ROUTES_ROOTS.WEBSITE + category !== ROUTES_ROOTS.BLOG + category",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["191"],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 93,
              "line": 16
            },
            "start": {
              "column": 29,
              "line": 16
            }
          }
        },
        {
          "id": "3895",
          "mutatorName": "ArithmeticOperator",
          "replacement": "ROUTES_ROOTS.WEBSITE - category",
          "statusReason": "src/lib/blog/guards/blogSubcategoryGuard.ts(16,29): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(16,29): error TS2367: This comparison appears to be unintentional because the types 'number' and 'string' have no overlap.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(16,52): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 60,
              "line": 16
            },
            "start": {
              "column": 29,
              "line": 16
            }
          }
        },
        {
          "id": "3896",
          "mutatorName": "ArithmeticOperator",
          "replacement": "ROUTES_ROOTS.BLOG - category",
          "statusReason": "src/lib/blog/guards/blogSubcategoryGuard.ts(16,29): error TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(16,65): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(16,85): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 93,
              "line": 16
            },
            "start": {
              "column": 65,
              "line": 16
            }
          }
        },
        {
          "id": "3897",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["190"],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "3898",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["191"],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "3899",
          "mutatorName": "LogicalOperator",
          "replacement": "!validCategory || !categServedAtRoot",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["190"],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "3900",
          "mutatorName": "BooleanLiteral",
          "replacement": "validCategory",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["190"],
          "coveredBy": ["190", "191", "192", "193", "253", "254", "255"],
          "location": {
            "end": {
              "column": 21,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "3901",
          "mutatorName": "BooleanLiteral",
          "replacement": "categServedAtRoot",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["191"],
          "coveredBy": ["191", "192", "254"],
          "location": {
            "end": {
              "column": 43,
              "line": 17
            },
            "start": {
              "column": 25,
              "line": 17
            }
          }
        },
        {
          "id": "3902",
          "mutatorName": "BooleanLiteral",
          "replacement": "validCombination",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["190"],
          "coveredBy": ["190", "193", "253", "255"],
          "location": {
            "end": {
              "column": 24,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "3903",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["190"],
          "coveredBy": ["190", "193", "253", "255"],
          "location": {
            "end": {
              "column": 24,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "3904",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["193"],
          "coveredBy": ["190", "193", "253", "255"],
          "location": {
            "end": {
              "column": 24,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryPageProps } from '@/types/Blog';\n\nimport { buildAbsolutePathFromParts } from '@rtm/shared-lib/str';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\n\nimport { isValidBlogCategoryAndSubcategoryPairInAnyLanguage, redirectToBlogCategoryPage, isValidBlogCategory } from '../api';\n\nexport default async function blogSubcategoryGuard({ params }: BlogSubcategoryPageProps) {\n  const category = params[BlogTaxonomy.CATEGORY];\n\n  const validCategory = isValidBlogCategory(category);\n  // Stryker Workaround 1. Mutant will be killed with `= true` as expected, but `= false` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  const categServedAtRoot = ROUTES_ROOTS.WEBSITE + category === ROUTES_ROOTS.BLOG + category;\n  if (!validCategory && !categServedAtRoot) redirect(buildAbsolutePathFromParts(ROUTES_ROOTS.WEBSITE, category));\n\n  const subcategory = params[BlogTaxonomy.SUBCATEGORY];\n\n  const validCombination: boolean = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n  if (!validCombination) redirectToBlogCategoryPage(category);\n}\n"
    },
    "src/lib/blog/static/getBlogStaticParams.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3905",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/static/getBlogStaticParams.ts(10,54): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["151", "181"],
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 82,
              "line": 10
            }
          }
        },
        {
          "id": "3906",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/blog/static/getBlogStaticParams.ts(11,49): error TS2322: Type 'string' is not assignable to type 'BlogStaticParams'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["151", "181"],
          "location": {
            "end": {
              "column": 50,
              "line": 11
            },
            "start": {
              "column": 48,
              "line": 11
            }
          }
        },
        {
          "id": "3907",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": ["151", "181"],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 37,
              "line": 14
            }
          }
        },
        {
          "id": "3908",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": ["151", "181"],
          "location": {
            "end": {
              "column": 6,
              "line": 36
            },
            "start": {
              "column": 41,
              "line": 15
            }
          }
        },
        {
          "id": "3909",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": ["151", "181"],
          "location": {
            "end": {
              "column": 8,
              "line": 35
            },
            "start": {
              "column": 44,
              "line": 19
            }
          }
        },
        {
          "id": "3910",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["181"],
          "coveredBy": ["151", "181"],
          "location": {
            "end": {
              "column": 10,
              "line": 34
            },
            "start": {
              "column": 42,
              "line": 24
            }
          }
        },
        {
          "id": "3911",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/lib/blog/static/getBlogStaticParams.ts(27,17): error TS2739: Type '{}' is missing the following properties from type 'BlogStaticParams': subcateg, locale, categ, slug\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["151", "181"],
          "location": {
            "end": {
              "column": 12,
              "line": 32
            },
            "start": {
              "column": 44,
              "line": 27
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryFromUnknownCategory, BlogStaticParams, UnknownBlogSlug, BlogCategory, BlogPostType } from '@/types/Blog';\n\nimport { getBlogSubcategoriesByCategory } from '@/cache/blog';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport { getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict, getAllBlogCategories } from '../api';\n\nexport default async function getBlogStaticParams(): Promise<BlogStaticParams[]> {\n  const blogStaticParams: BlogStaticParams[] = [];\n  const blogCategories = getAllBlogCategories();\n\n  for (const language of LANGUAGES) {\n    for (const categ of blogCategories) {\n      const category = categ as BlogCategory;\n      const curSubcategs: BlogSubcategoryFromUnknownCategory[] = await getBlogSubcategoriesByCategory(category, language);\n\n      for (const subcateg of curSubcategs) {\n        const subcategory = subcateg as BlogSubcategoryFromUnknownCategory;\n\n        const relatedPosts: BlogPostType[] = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(category, subcategory, language);\n\n        for (const post of relatedPosts) {\n          const slug = post.slug as UnknownBlogSlug;\n\n          const entity: BlogStaticParams = {\n            [BlogTaxonomy.SUBCATEGORY]: subcategory,\n            [I18nTaxonomy.LANGUAGE]: language,\n            [BlogTaxonomy.CATEGORY]: category,\n            [BlogTaxonomy.SLUG]: slug\n          };\n          blogStaticParams.push(entity);\n        }\n      }\n    }\n  }\n\n  return blogStaticParams;\n}\n"
    },
    "src/lib/blog/staticGeneration.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "3912",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 39
            },
            "start": {
              "column": 74,
              "line": 36
            }
          }
        },
        {
          "id": "3913",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 55
            },
            "start": {
              "column": 3,
              "line": 44
            }
          }
        },
        {
          "id": "3914",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 48
            },
            "start": {
              "column": 40,
              "line": 48
            }
          }
        },
        {
          "id": "3915",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 48
            },
            "start": {
              "column": 73,
              "line": 48
            }
          }
        },
        {
          "id": "3916",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 49
            },
            "start": {
              "column": 31,
              "line": 49
            }
          }
        },
        {
          "id": "3917",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 52
            },
            "start": {
              "column": 50,
              "line": 52
            }
          }
        },
        {
          "id": "3918",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 52
            },
            "start": {
              "column": 50,
              "line": 52
            }
          }
        },
        {
          "id": "3919",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeOpenGraphImages === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 52
            },
            "start": {
              "column": 50,
              "line": 52
            }
          }
        },
        {
          "id": "3920",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 52
            },
            "start": {
              "column": 87,
              "line": 52
            }
          }
        },
        {
          "id": "3921",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 54
            },
            "start": {
              "column": 10,
              "line": 54
            }
          }
        },
        {
          "id": "3922",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 81
            },
            "start": {
              "column": 3,
              "line": 60
            }
          }
        },
        {
          "id": "3923",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 61
            },
            "start": {
              "column": 45,
              "line": 61
            }
          }
        },
        {
          "id": "3924",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "3925",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "3926",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 63
            },
            "start": {
              "column": 7,
              "line": 63
            }
          }
        },
        {
          "id": "3927",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 68
            },
            "start": {
              "column": 40,
              "line": 68
            }
          }
        },
        {
          "id": "3928",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 137,
              "line": 68
            },
            "start": {
              "column": 73,
              "line": 68
            }
          }
        },
        {
          "id": "3929",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 69
            },
            "start": {
              "column": 31,
              "line": 69
            }
          }
        },
        {
          "id": "3930",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 76
            },
            "start": {
              "column": 5,
              "line": 76
            }
          }
        },
        {
          "id": "3931",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 76
            },
            "start": {
              "column": 5,
              "line": 76
            }
          }
        },
        {
          "id": "3932",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeCategoryAndSubcategoriesOGPicturesAssoc === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 76
            },
            "start": {
              "column": 5,
              "line": 76
            }
          }
        },
        {
          "id": "3933",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 78
            },
            "start": {
              "column": 50,
              "line": 78
            }
          }
        },
        {
          "id": "3934",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 78
            },
            "start": {
              "column": 50,
              "line": 78
            }
          }
        },
        {
          "id": "3935",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeOpenGraphImages === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 78
            },
            "start": {
              "column": 50,
              "line": 78
            }
          }
        },
        {
          "id": "3936",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 78
            },
            "start": {
              "column": 87,
              "line": 78
            }
          }
        },
        {
          "id": "3937",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 80
            },
            "start": {
              "column": 10,
              "line": 80
            }
          }
        },
        {
          "id": "3938",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 99
            },
            "start": {
              "column": 48,
              "line": 90
            }
          }
        },
        {
          "id": "3939",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 93
            },
            "start": {
              "column": 22,
              "line": 93
            }
          }
        },
        {
          "id": "3940",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 93
            },
            "start": {
              "column": 22,
              "line": 93
            }
          }
        },
        {
          "id": "3941",
          "mutatorName": "EqualityOperator",
          "replacement": "middlewareStrategy === 'redirect'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 93
            },
            "start": {
              "column": 22,
              "line": 93
            }
          }
        },
        {
          "id": "3942",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 93
            },
            "start": {
              "column": 45,
              "line": 93
            }
          }
        },
        {
          "id": "3943",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 95
            },
            "start": {
              "column": 20,
              "line": 95
            }
          }
        },
        {
          "id": "3944",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 95
            },
            "start": {
              "column": 20,
              "line": 95
            }
          }
        },
        {
          "id": "3945",
          "mutatorName": "LogicalOperator",
          "replacement": "language !== DEFAULT_LANGUAGE || maybeDefaultLanguageBlogPost !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 95
            },
            "start": {
              "column": 20,
              "line": 95
            }
          }
        },
        {
          "id": "3946",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 95
            },
            "start": {
              "column": 20,
              "line": 95
            }
          }
        },
        {
          "id": "3947",
          "mutatorName": "EqualityOperator",
          "replacement": "language === DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 95
            },
            "start": {
              "column": 20,
              "line": 95
            }
          }
        },
        {
          "id": "3948",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 95
            },
            "start": {
              "column": 53,
              "line": 95
            }
          }
        },
        {
          "id": "3949",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeDefaultLanguageBlogPost === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 95
            },
            "start": {
              "column": 53,
              "line": 95
            }
          }
        },
        {
          "id": "3950",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 97
            },
            "start": {
              "column": 21,
              "line": 97
            }
          }
        },
        {
          "id": "3951",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 97
            },
            "start": {
              "column": 21,
              "line": 97
            }
          }
        },
        {
          "id": "3952",
          "mutatorName": "EqualityOperator",
          "replacement": "language !== DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 97
            },
            "start": {
              "column": 21,
              "line": 97
            }
          }
        },
        {
          "id": "3953",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 98
            },
            "start": {
              "column": 10,
              "line": 98
            }
          }
        },
        {
          "id": "3954",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 162
            },
            "start": {
              "column": 22,
              "line": 105
            }
          }
        },
        {
          "id": "3955",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 111
            },
            "start": {
              "column": 51,
              "line": 106
            }
          }
        },
        {
          "id": "3956",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 116
            },
            "start": {
              "column": 7,
              "line": 116
            }
          }
        },
        {
          "id": "3957",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 116
            },
            "start": {
              "column": 7,
              "line": 116
            }
          }
        },
        {
          "id": "3958",
          "mutatorName": "LogicalOperator",
          "replacement": "post === null && !isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 116
            },
            "start": {
              "column": 7,
              "line": 116
            }
          }
        },
        {
          "id": "3959",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 116
            },
            "start": {
              "column": 7,
              "line": 116
            }
          }
        },
        {
          "id": "3960",
          "mutatorName": "EqualityOperator",
          "replacement": "post !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 116
            },
            "start": {
              "column": 7,
              "line": 116
            }
          }
        },
        {
          "id": "3961",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 116
            },
            "start": {
              "column": 24,
              "line": 116
            }
          }
        },
        {
          "id": "3962",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 120
            },
            "start": {
              "column": 16,
              "line": 120
            }
          }
        },
        {
          "id": "3963",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 122
            },
            "start": {
              "column": 40,
              "line": 122
            }
          }
        },
        {
          "id": "3964",
          "mutatorName": "MethodExpression",
          "replacement": "LANGUAGES",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 125
            },
            "start": {
              "column": 35,
              "line": 125
            }
          }
        },
        {
          "id": "3965",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 125
            },
            "start": {
              "column": 52,
              "line": 125
            }
          }
        },
        {
          "id": "3966",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 125
            },
            "start": {
              "column": 62,
              "line": 125
            }
          }
        },
        {
          "id": "3967",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 125
            },
            "start": {
              "column": 62,
              "line": 125
            }
          }
        },
        {
          "id": "3968",
          "mutatorName": "EqualityOperator",
          "replacement": "lang === language",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 125
            },
            "start": {
              "column": 62,
              "line": 125
            }
          }
        },
        {
          "id": "3969",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 133
            },
            "start": {
              "column": 65,
              "line": 129
            }
          }
        },
        {
          "id": "3970",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 131
            },
            "start": {
              "column": 9,
              "line": 131
            }
          }
        },
        {
          "id": "3971",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 131
            },
            "start": {
              "column": 9,
              "line": 131
            }
          }
        },
        {
          "id": "3972",
          "mutatorName": "EqualityOperator",
          "replacement": "maybePost !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 131
            },
            "start": {
              "column": 9,
              "line": 131
            }
          }
        },
        {
          "id": "3973",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 136
            },
            "start": {
              "column": 7,
              "line": 136
            }
          }
        },
        {
          "id": "3974",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 136
            },
            "start": {
              "column": 7,
              "line": 136
            }
          }
        },
        {
          "id": "3975",
          "mutatorName": "EqualityOperator",
          "replacement": "xDefault === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 136
            },
            "start": {
              "column": 7,
              "line": 136
            }
          }
        },
        {
          "id": "3976",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 136
            },
            "start": {
              "column": 41,
              "line": 136
            }
          }
        },
        {
          "id": "3977",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 138
            },
            "start": {
              "column": 48,
              "line": 138
            }
          }
        },
        {
          "id": "3978",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 140
            },
            "start": {
              "column": 7,
              "line": 140
            }
          }
        },
        {
          "id": "3979",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 140
            },
            "start": {
              "column": 7,
              "line": 140
            }
          }
        },
        {
          "id": "3980",
          "mutatorName": "EqualityOperator",
          "replacement": "seo !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 140
            },
            "start": {
              "column": 7,
              "line": 140
            }
          }
        },
        {
          "id": "3981",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 146
            },
            "start": {
              "column": 26,
              "line": 140
            }
          }
        },
        {
          "id": "3982",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 141
            },
            "start": {
              "column": 24,
              "line": 141
            }
          }
        },
        {
          "id": "3983",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 142
            },
            "start": {
              "column": 34,
              "line": 142
            }
          }
        },
        {
          "id": "3984",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 143
            },
            "start": {
              "column": 9,
              "line": 143
            }
          }
        },
        {
          "id": "3985",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 143
            },
            "start": {
              "column": 9,
              "line": 143
            }
          }
        },
        {
          "id": "3986",
          "mutatorName": "EqualityOperator",
          "replacement": "openGraphImages !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 143
            },
            "start": {
              "column": 9,
              "line": 143
            }
          }
        },
        {
          "id": "3987",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 143
            },
            "start": {
              "column": 47,
              "line": 143
            }
          }
        },
        {
          "id": "3988",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 145
            },
            "start": {
              "column": 12,
              "line": 145
            }
          }
        },
        {
          "id": "3989",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 149
            },
            "start": {
              "column": 30,
              "line": 149
            }
          }
        },
        {
          "id": "3990",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 151
            },
            "start": {
              "column": 7,
              "line": 151
            }
          }
        },
        {
          "id": "3991",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 151
            },
            "start": {
              "column": 7,
              "line": 151
            }
          }
        },
        {
          "id": "3992",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 154
            },
            "start": {
              "column": 24,
              "line": 151
            }
          }
        },
        {
          "id": "3993",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 152
            },
            "start": {
              "column": 9,
              "line": 152
            }
          }
        },
        {
          "id": "3994",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 152
            },
            "start": {
              "column": 9,
              "line": 152
            }
          }
        },
        {
          "id": "3995",
          "mutatorName": "EqualityOperator",
          "replacement": "openGraph !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 152
            },
            "start": {
              "column": 9,
              "line": 152
            }
          }
        },
        {
          "id": "3996",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 152
            },
            "start": {
              "column": 46,
              "line": 152
            }
          }
        },
        {
          "id": "3997",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 152
            },
            "start": {
              "column": 56,
              "line": 152
            }
          }
        },
        {
          "id": "3998",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 153
            },
            "start": {
              "column": 14,
              "line": 153
            }
          }
        },
        {
          "id": "3999",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 153
            },
            "start": {
              "column": 14,
              "line": 153
            }
          }
        },
        {
          "id": "4000",
          "mutatorName": "EqualityOperator",
          "replacement": "openGraph.images !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 153
            },
            "start": {
              "column": 14,
              "line": 153
            }
          }
        },
        {
          "id": "4001",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 153
            },
            "start": {
              "column": 65,
              "line": 153
            }
          }
        },
        {
          "id": "4002",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 156
            },
            "start": {
              "column": 7,
              "line": 156
            }
          }
        },
        {
          "id": "4003",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 156
            },
            "start": {
              "column": 7,
              "line": 156
            }
          }
        },
        {
          "id": "4004",
          "mutatorName": "EqualityOperator",
          "replacement": "openGraph !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 156
            },
            "start": {
              "column": 7,
              "line": 156
            }
          }
        },
        {
          "id": "4005",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 158
            },
            "start": {
              "column": 7,
              "line": 158
            }
          }
        },
        {
          "id": "4006",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 158
            },
            "start": {
              "column": 7,
              "line": 158
            }
          }
        },
        {
          "id": "4007",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 159
            },
            "start": {
              "column": 7,
              "line": 159
            }
          }
        },
        {
          "id": "4008",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 159
            },
            "start": {
              "column": 7,
              "line": 159
            }
          }
        },
        {
          "id": "4009",
          "mutatorName": "LogicalOperator",
          "replacement": "alternates || !alternates.canonical",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 159
            },
            "start": {
              "column": 7,
              "line": 159
            }
          }
        },
        {
          "id": "4010",
          "mutatorName": "BooleanLiteral",
          "replacement": "alternates.canonical",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 159
            },
            "start": {
              "column": 21,
              "line": 159
            }
          }
        },
        {
          "id": "4011",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 161
            },
            "start": {
              "column": 10,
              "line": 161
            }
          }
        }
      ],
      "source": "import type {\n  BlogCategoriesAndSubcategoriesAssoc,\n  BlogSubcategoryFromUnknownCategory,\n  BlogSubcategoryPageProps,\n  BlogCategoryPageProps,\n  BlogPostPageProps,\n  BlogStaticParams,\n  UnknownBlogSlug,\n  BlogPostType,\n  BlogCategory\n} from '@/types/Blog';\nimport type { MaybeObjectValue, MaybeUndefined, MaybeNull, Couple } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { AlternateURLs } from 'next/dist/lib/metadata/types/alternative-urls-types';\nimport type { I18nMiddlewareConfig, LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { OpenGraph } from 'next/dist/lib/metadata/types/opengraph-types';\nimport type { Href } from '@rtm/shared-types/Next';\nimport type { Metadata } from 'next';\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport { DEFAULT_LANGUAGE, LANGUAGES, i18ns } from '##/config/i18n';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getServerSideI18n } from '@/i18n/server';\nimport BlogConfig from '@/config/Blog/server';\n\nimport { isValidBlogCategoryAndSubcategoryPair, getBlogPostUnstrict } from './api';\nimport blogSubcategoryGuard from './guards/blogSubcategoryGuard';\nimport doGetBlogStaticParams from './static/getBlogStaticParams';\nimport blogCategoryGuard from './guards/blogCategoryGuard';\nimport { getPathnameWithoutI18nFlag } from '../i18n';\nimport blogPostGuard from './guards/blogPostGuard';\n\n/* v8 ignore start */\n// Stryker disable all\n\nexport async function getBlogStaticParams(): Promise<BlogStaticParams[]> {\n  const blogStaticParams = await doGetBlogStaticParams();\n  return blogStaticParams;\n}\n\nexport async function getBlogCategoryMetadatas(\n  { params }: BlogCategoryPageProps,\n  metadataBase: MaybeObjectValue<URL> = process.env.METADABASE_URL ? new URL(process.env.METADABASE_URL) : undefined\n) {\n  const globalT = await getServerSideI18n();\n  const category = params[BlogTaxonomy.CATEGORY];\n  const { blogCategories, vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), globalT(`${blogCategories}.${category}._title`));\n  const description = globalT(`${blogCategories}.${category}._meta-description`);\n\n  const maybeOpenGraphImages = (BlogConfig.OG.CATEGORIES_PICTURES as Record<PropertyKey, MaybeObjectValue<Href[]>>)[category];\n  const openGraph: MaybeObjectValue<OpenGraph> = maybeOpenGraphImages !== undefined ? { images: maybeOpenGraphImages } : undefined;\n\n  return { metadataBase, description, openGraph, title };\n}\n\nexport async function getBlogSubcategoryMetadatas(\n  { params }: BlogSubcategoryPageProps,\n  metadataBase: MaybeObjectValue<URL> = process.env.METADABASE_URL ? new URL(process.env.METADABASE_URL) : undefined\n) {\n  const [category, subcategory, language] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[I18nTaxonomy.LANGUAGE]];\n\n  if (!isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)) return {};\n\n  const globalT = await getServerSideI18n();\n  const { blogCategories, vocab } = i18ns;\n  const narrowedCategoryAndSubcategoryAssoc = `${category}.${subcategory}` as BlogCategoriesAndSubcategoriesAssoc;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), globalT(`${blogCategories}.${narrowedCategoryAndSubcategoryAssoc}.title`));\n  const description = globalT(`${blogCategories}.${narrowedCategoryAndSubcategoryAssoc}.meta-description`);\n\n  const maybeCategoryAndSubcategoriesOGPicturesAssoc = (\n    BlogConfig.OG.SUBCATEGORIES_PICTURES as Record<PropertyKey, MaybeObjectValue<Record<PropertyKey, MaybeObjectValue<Href[]>>>>\n  )[category];\n\n  const maybeOpenGraphImages =\n    maybeCategoryAndSubcategoriesOGPicturesAssoc !== undefined ? maybeCategoryAndSubcategoriesOGPicturesAssoc[subcategory] : undefined;\n\n  const openGraph: MaybeObjectValue<OpenGraph> = maybeOpenGraphImages !== undefined ? { images: maybeOpenGraphImages } : undefined;\n\n  return { metadataBase, description, openGraph, title };\n}\n\nasync function getXDefaultAndCanonical(\n  currentPost: BlogPostType,\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory,\n  slug: UnknownBlogSlug,\n  language: LanguageFlag,\n  middlewareStrategy: I18nMiddlewareConfig['urlMappingStrategy']\n): Promise<Couple<MaybeUndefined<Href>, Href>> {\n  const maybeDefaultLanguageBlogPost = await getBlogPostUnstrict(category, subcategory, slug, DEFAULT_LANGUAGE);\n\n  const defaultUrl = middlewareStrategy !== 'redirect' ? getPathnameWithoutI18nFlag(currentPost.url) : currentPost.url;\n\n  const xDefault = language !== DEFAULT_LANGUAGE && maybeDefaultLanguageBlogPost !== null ? defaultUrl : undefined;\n\n  const canonical = language === DEFAULT_LANGUAGE ? defaultUrl : currentPost.url;\n  return [xDefault, canonical];\n}\n\nexport async function getBlogPostMetadatas(\n  { params }: BlogPostPageProps,\n  middlewareStrategy: I18nMiddlewareConfig['urlMappingStrategy'],\n  metadataBase: MaybeObjectValue<URL> = process.env.METADABASE_URL ? new URL(process.env.METADABASE_URL) : undefined\n): Promise<Metadata> {\n  const [category, subcategory, slug, language] = [\n    params[BlogTaxonomy.CATEGORY],\n    params[BlogTaxonomy.SUBCATEGORY],\n    params[BlogTaxonomy.SLUG],\n    params[I18nTaxonomy.LANGUAGE]\n  ];\n\n  const globalT = await getServerSideI18n();\n\n  const post: MaybeNull<BlogPostType> = await getBlogPostUnstrict(category, subcategory, slug, language);\n  if (post === null || !isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)) return {};\n\n  const currentPost = post as BlogPostType;\n  const { date: publishedTime, tags, url } = currentPost;\n  const type = 'article';\n\n  const title = buildPageTitle(globalT(`${i18ns.vocab}.brand-short`), currentPost.title);\n  const { metadescription: description, seo } = currentPost;\n\n  const maybeAlternateLanguages = LANGUAGES.filter((lang) => lang !== language);\n  const languages = {} as Record<LanguageFlag | 'x-default', Href>;\n  const featuredPictureUrl = currentPost.featuredPictureUrl;\n\n  for (const maybeAlternateLanguage of maybeAlternateLanguages) {\n    const maybePost = await getBlogPostUnstrict(category, subcategory, slug, maybeAlternateLanguage);\n    if (maybePost === null) continue;\n    languages[maybeAlternateLanguage] = maybePost.url;\n  }\n\n  const [xDefault, canonical] = await getXDefaultAndCanonical(currentPost, category, subcategory, slug, language, middlewareStrategy);\n  if (xDefault !== undefined) languages['x-default'] = xDefault;\n\n  const openGraphImages = featuredPictureUrl ? { url: featuredPictureUrl } : undefined;\n\n  if (seo === undefined) {\n    const alternates = { canonical, languages };\n    const openGraph: OpenGraph = { publishedTime, tags, type, url };\n    if (openGraphImages === undefined) return { metadataBase, description, alternates, openGraph, title };\n    openGraph.images = openGraphImages;\n    return { metadataBase, description, alternates, openGraph, title };\n  }\n\n  const { alternates, robots } = seo;\n  let openGraph: OpenGraph = { publishedTime, type, tags, ...seo.openGraph };\n\n  if (openGraphImages) {\n    if (openGraph === undefined) openGraph = { images: [openGraphImages] };\n    else if (openGraph.images === undefined) openGraph.images = [openGraphImages];\n  }\n\n  if (openGraph === undefined) openGraph = {};\n  (openGraph as OpenGraph).url = url;\n  if (alternates) (alternates as AlternateURLs).languages = languages;\n  if (alternates && !alternates.canonical) (alternates as AlternateURLs).canonical = canonical;\n\n  return { metadataBase, description, alternates, openGraph, robots, title };\n}\n\nexport { blogSubcategoryGuard, blogCategoryGuard, blogPostGuard };\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/html.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4012",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 96,
              "line": 6
            },
            "start": {
              "column": 33,
              "line": 6
            }
          }
        },
        {
          "id": "4013",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 8
            },
            "start": {
              "column": 26,
              "line": 8
            }
          }
        },
        {
          "id": "4014",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 76,
              "line": 10
            },
            "start": {
              "column": 26,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport { FOOTER_CONTAINER_ID, SITEWIDE_NAVBAR_ID, BODY_CONTAINER_ID } from '@/config/elementsId';\n\nexport const getBodyContainer = () => document.getElementById(BODY_CONTAINER_ID) as HTMLElement;\n\nexport const getNavbar = () => document.getElementById(SITEWIDE_NAVBAR_ID);\n\nexport const getFooter = () => document.getElementById(FOOTER_CONTAINER_ID);\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/i18n.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4015",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/i18n.ts(11,88): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 95,
              "line": 11
            }
          }
        },
        {
          "id": "4016",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/i18n.ts(15,39): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/i18n.ts(15,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/i18n.ts(19,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/i18n.ts(19,18): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 134,
              "line": 13
            },
            "start": {
              "column": 19,
              "line": 13
            }
          }
        },
        {
          "id": "4017",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["399"],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 75,
              "line": 13
            },
            "start": {
              "column": 60,
              "line": 13
            }
          }
        },
        {
          "id": "4018",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 75,
              "line": 13
            },
            "start": {
              "column": 60,
              "line": 13
            }
          }
        },
        {
          "id": "4019",
          "mutatorName": "EqualityOperator",
          "replacement": "endIndex !== -1",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["399"],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 75,
              "line": 13
            },
            "start": {
              "column": 60,
              "line": 13
            }
          }
        },
        {
          "id": "4020",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 75,
              "line": 13
            },
            "start": {
              "column": 73,
              "line": 13
            }
          }
        },
        {
          "id": "4021",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["400"],
          "coveredBy": ["231", "232", "399", "400", "401", "403"],
          "location": {
            "end": {
              "column": 99,
              "line": 13
            },
            "start": {
              "column": 78,
              "line": 13
            }
          }
        },
        {
          "id": "4022",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "402", "433", "434", "435"],
          "location": {
            "end": {
              "column": 133,
              "line": 13
            },
            "start": {
              "column": 102,
              "line": 13
            }
          }
        },
        {
          "id": "4023",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/i18n.ts(15,38): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 37,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "4024",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/i18n.ts(15,39): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 37,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "4025",
          "mutatorName": "EqualityOperator",
          "replacement": "providedEndIndex === undefined",
          "statusReason": "src/lib/i18n.ts(15,64): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["229", "230", "231", "232", "399", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 37,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "4026",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["399"],
          "coveredBy": ["231", "232", "399"],
          "location": {
            "end": {
              "column": 54,
              "line": 18
            },
            "start": {
              "column": 51,
              "line": 18
            }
          }
        },
        {
          "id": "4027",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/i18n.ts(22,64): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["229", "230", "231", "232", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 86,
              "line": 22
            }
          }
        },
        {
          "id": "4028",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "230", "231", "232", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 62,
              "line": 24
            },
            "start": {
              "column": 59,
              "line": 24
            }
          }
        },
        {
          "id": "4029",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(pathnameI18nFlag)",
          "statusReason": "expected '/' to be '/afr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["400"],
          "coveredBy": ["229", "230", "231", "232", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 45,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "4030",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "230", "231", "232", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 45,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "4031",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/' to be '/afr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["400"],
          "coveredBy": ["229", "230", "231", "232", "400", "401", "402", "403", "433", "434", "435"],
          "location": {
            "end": {
              "column": 45,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "4032",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "231", "232", "400", "435"],
          "location": {
            "end": {
              "column": 54,
              "line": 30
            },
            "start": {
              "column": 31,
              "line": 30
            }
          }
        },
        {
          "id": "4033",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["400"],
          "coveredBy": ["229", "231", "232", "400", "435"],
          "location": {
            "end": {
              "column": 54,
              "line": 30
            },
            "start": {
              "column": 31,
              "line": 30
            }
          }
        },
        {
          "id": "4034",
          "mutatorName": "EqualityOperator",
          "replacement": "secondSlashIndex !== -1",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "231", "232", "400", "435"],
          "location": {
            "end": {
              "column": 54,
              "line": 30
            },
            "start": {
              "column": 31,
              "line": 30
            }
          }
        },
        {
          "id": "4035",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["400"],
          "coveredBy": ["229", "231", "232", "400", "435"],
          "location": {
            "end": {
              "column": 54,
              "line": 30
            },
            "start": {
              "column": 52,
              "line": 30
            }
          }
        },
        {
          "id": "4036",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "231", "232", "400", "435"],
          "location": {
            "end": {
              "column": 116,
              "line": 30
            },
            "start": {
              "column": 80,
              "line": 30
            }
          }
        },
        {
          "id": "4037",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/i18n.ts(34,62): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232", "399"],
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 86,
              "line": 34
            }
          }
        },
        {
          "id": "4038",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(languageFlag)",
          "statusReason": "src/lib/i18n.ts(37,3): error TS2322: Type 'string' is not assignable to type 'MaybeNull<\"fr\" | \"en\">'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232", "399"],
          "location": {
            "end": {
              "column": 41,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "4039",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/i18n.ts(37,3): error TS2322: Type 'string' is not assignable to type 'MaybeNull<\"fr\" | \"en\">'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232", "399"],
          "location": {
            "end": {
              "column": 41,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "4040",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/i18n.ts(37,3): error TS2322: Type 'string' is not assignable to type 'MaybeNull<\"fr\" | \"en\">'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232", "399"],
          "location": {
            "end": {
              "column": 41,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { AppPathAsIs, AppPath } from '@rtm/shared-types/Next';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { Index } from '@rtm/shared-types/Numbers';\n\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport indexOfNthOccurrence from './portable/str/indexOfNthOccurrence';\nimport isValidLanguageFlag from './portable/i18n/isValidLanguageFlag';\n\nfunction computePathnameI18nFlagUnstrict(pathname: AppPath, providedEndIndex?: Index): string {\n  // eslint-disable-next-line no-magic-numbers\n  const compute = (pathname: AppPath, endIndex: Index) => (endIndex === -1 ? pathname.substring(1) : pathname.substring(1, endIndex));\n\n  if (providedEndIndex !== undefined) return compute(pathname, providedEndIndex);\n\n  // eslint-disable-next-line no-magic-numbers\n  const endIndex = indexOfNthOccurrence(pathname, '/', 2);\n  return compute(pathname, endIndex);\n}\n\nexport function getPathnameWithoutI18nFlag(pathname: AppPath): AppPathAsIs | AppPath {\n  // eslint-disable-next-line no-magic-numbers\n  const secondSlashIndex = indexOfNthOccurrence(pathname, '/', 2);\n\n  const pathnameI18nFlag = computePathnameI18nFlagUnstrict(pathname, secondSlashIndex);\n  if (!isValidLanguageFlag(pathnameI18nFlag)) return pathname;\n\n  // eslint-disable-next-line no-magic-numbers\n  const pathnameWithouti18n = secondSlashIndex === -1 ? ROUTES_ROOTS.WEBSITE : pathname.substring(secondSlashIndex);\n  return pathnameWithouti18n;\n}\n\nexport function getPathnameMaybeI18nFlag(pathname: AppPath): MaybeNull<LanguageFlag> {\n  const languageFlag = computePathnameI18nFlagUnstrict(pathname);\n  if (!isValidLanguageFlag(languageFlag)) return null;\n  return languageFlag;\n}\n"
    },
    "src/lib/landingPages/api.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4041",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/landingPages/api.ts(16,5): error TS18048: 'allLandingPages' is possibly 'undefined'.\nsrc/lib/landingPages/api.ts(16,39): error TS7031: Binding element 'currentLanguage' implicitly has an 'any' type.\nsrc/lib/landingPages/api.ts(16,62): error TS7031: Binding element 'currentSlug' implicitly has an 'any' type.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(11,36): error TS18048: 'allLandingPages' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 11
            },
            "start": {
              "column": 35,
              "line": 11
            }
          }
        },
        {
          "id": "4042",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/landingPages/api.ts(13,112): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 135,
              "line": 13
            }
          }
        },
        {
          "id": "4043",
          "mutatorName": "LogicalOperator",
          "replacement": "allLandingPages.find(({\n  language: currentLanguage,\n  slug: currentSlug\n}) => currentSlug === slug && currentLanguage === language) && null",
          "statusReason": "src/lib/landingPages/api.ts(23,64): error TS2339: Property 'category' does not exist on type 'never'.\nsrc/lib/landingPages/api.ts(24,93): error TS2339: Property 'draft' does not exist on type 'never'.\nsrc/lib/landingPages/api.ts(25,3): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<LandingPage>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<LandingPage>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 141,
              "line": 16
            },
            "start": {
              "column": 5,
              "line": 16
            }
          }
        },
        {
          "id": "4044",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected [] to strictly equal [ { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["122"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 132,
              "line": 16
            },
            "start": {
              "column": 26,
              "line": 16
            }
          }
        },
        {
          "id": "4045",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(2) }, { …(2) }, { …(2) }, …(3) ] to strictly equal [ { …(2) }, { …(2) }, { …(2) }, …(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["107"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 132,
              "line": 16
            },
            "start": {
              "column": 80,
              "line": 16
            }
          }
        },
        {
          "id": "4046",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [] to strictly equal [ { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["122"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 132,
              "line": 16
            },
            "start": {
              "column": 80,
              "line": 16
            }
          }
        },
        {
          "id": "4047",
          "mutatorName": "LogicalOperator",
          "replacement": "currentSlug === slug || currentLanguage === language",
          "statusReason": "expected [ { …(2) }, { …(2) }, { …(2) }, …(3) ] to strictly equal [ { …(2) }, { …(2) }, { …(2) }, …(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["107"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 132,
              "line": 16
            },
            "start": {
              "column": 80,
              "line": 16
            }
          }
        },
        {
          "id": "4048",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [] to strictly equal [ { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["122"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 100,
              "line": 16
            },
            "start": {
              "column": 80,
              "line": 16
            }
          }
        },
        {
          "id": "4049",
          "mutatorName": "EqualityOperator",
          "replacement": "currentSlug !== slug",
          "statusReason": "expected [ { …(2) }, { …(2) }, { …(2) }, …(3) ] to strictly equal [ { …(2) }, { …(2) }, { …(2) }, …(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["107"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 100,
              "line": 16
            },
            "start": {
              "column": 80,
              "line": 16
            }
          }
        },
        {
          "id": "4050",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ { …(2) }, { …(2) } ] to strictly equal [ { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["122"],
          "coveredBy": ["107", "122", "208", "209", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 132,
              "line": 16
            },
            "start": {
              "column": 104,
              "line": 16
            }
          }
        },
        {
          "id": "4051",
          "mutatorName": "EqualityOperator",
          "replacement": "currentLanguage !== language",
          "statusReason": "expected [ { locale: 'en', …(1) }, …(5) ] to strictly equal [ { …(2) }, { …(2) }, { …(2) }, …(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["107"],
          "coveredBy": ["107", "122", "208", "209", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 132,
              "line": 16
            },
            "start": {
              "column": 104,
              "line": 16
            }
          }
        },
        {
          "id": "4052",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 112,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4053",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 112,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4054",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedLandingPagesCtx.TESTING || matchingLandingPage?.category === LandingPagesConfig.TESTING_CATEGORY",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["357"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 112,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4055",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedLandingPagesCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["357"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358", "428"],
          "location": {
            "end": {
              "column": 39,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4056",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 112,
              "line": 20
            },
            "start": {
              "column": 43,
              "line": 20
            }
          }
        },
        {
          "id": "4057",
          "mutatorName": "EqualityOperator",
          "replacement": "matchingLandingPage?.category !== LandingPagesConfig.TESTING_CATEGORY",
          "statusReason": "expected { metadescription: 'FAKE', …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["428"],
          "coveredBy": ["428"],
          "location": {
            "end": {
              "column": 112,
              "line": 20
            },
            "start": {
              "column": 43,
              "line": 20
            }
          }
        },
        {
          "id": "4058",
          "mutatorName": "OptionalChaining",
          "replacement": "matchingLandingPage.category",
          "statusReason": "src/lib/landingPages/api.ts(20,43): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["428"],
          "location": {
            "end": {
              "column": 72,
              "line": 20
            },
            "start": {
              "column": 43,
              "line": 20
            }
          }
        },
        {
          "id": "4059",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["357"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358"],
          "location": {
            "end": {
              "column": 98,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "4060",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { metadescription: 'FAKE', …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["358"],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358"],
          "location": {
            "end": {
              "column": 98,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "4061",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingLandingPage && !ComputedLandingPagesCtx.ALLOWED_DRAFTS || matchingLandingPage.draft",
          "statusReason": "src/lib/landingPages/api.ts(21,73): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358"],
          "location": {
            "end": {
              "column": 98,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "4062",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/landingPages/api.ts(21,15): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358"],
          "location": {
            "end": {
              "column": 69,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "4063",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingLandingPage || !ComputedLandingPagesCtx.ALLOWED_DRAFTS",
          "statusReason": "src/lib/landingPages/api.ts(21,73): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122", "208", "209", "210", "211", "346", "347", "357", "358"],
          "location": {
            "end": {
              "column": 69,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "4064",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedLandingPagesCtx.ALLOWED_DRAFTS",
          "statusReason": "expected { metadescription: 'FAKE', …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["358"],
          "coveredBy": ["107", "122", "208", "209", "346", "347", "357", "358"],
          "location": {
            "end": {
              "column": 69,
              "line": 21
            },
            "start": {
              "column": 30,
              "line": 21
            }
          }
        },
        {
          "id": "4065",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 29
            },
            "start": {
              "column": 54,
              "line": 28
            }
          }
        }
      ],
      "source": "import type LpLanguageAndSlugPair from '@/types/adapters/LpLanguageAndSlugPair';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { UnknownLandingPageSlug } from '@/types/LandingPage';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport LandingPagesConfig from '@/config/landingPages';\n\nimport ComputedLandingPagesCtx from './ctx';\n\nexport const getAllLandingPages = () => LandingPagesConfig.allLandingPages();\n\nexport function getLandingPageByLanguageAndSlugUnstrict(language: LanguageFlag, slug: UnknownLandingPageSlug): MaybeNull<LandingPage> {\n  const allLandingPages = getAllLandingPages();\n  const matchingLandingPage =\n    allLandingPages.find(({ language: currentLanguage, slug: currentSlug }) => currentSlug === slug && currentLanguage === language) ?? null;\n\n  // Stryker Workaround 1. Mutant will be killed with `&& false` as expected, but `&& true` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!ComputedLandingPagesCtx.TESTING && matchingLandingPage?.category === LandingPagesConfig.TESTING_CATEGORY) return null;\n  if (matchingLandingPage && !ComputedLandingPagesCtx.ALLOWED_DRAFTS && matchingLandingPage.draft) return null;\n  return matchingLandingPage;\n}\n\n// Stryker Workaround 2. Pointless static mutant.\n// Stryker disable all\n\nexport const getLandingPageByLanguageAndSlugStrict = ({ lang, slug }: LpLanguageAndSlugPair): MaybeNull<LandingPage> =>\n  getLandingPageByLanguageAndSlugUnstrict(lang as any, slug as any);\n\n// Stryker restore all\n"
    },
    "src/lib/landingPages/ctx.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4066",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "4067",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "4068",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'test'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "4069",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 42,
              "line": 10
            }
          }
        },
        {
          "id": "4070",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "4071",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "4072",
          "mutatorName": "LogicalOperator",
          "replacement": "LandingPagesConfig.ENABLE_DRAFTS_IN_PROD && process.env.NODE_ENV === 'development'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "4073",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 68,
              "line": 11
            }
          }
        },
        {
          "id": "4074",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'development'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 68,
              "line": 11
            }
          }
        },
        {
          "id": "4075",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 93,
              "line": 11
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\nimport LandingPagesConfig from '@/config/landingPages';\n\ntype ComputedLandingPagesCtxType = {\n  ALLOWED_DRAFTS: boolean;\n  TESTING: boolean;\n};\n\nconst TESTING = process.env.NODE_ENV === 'test';\nconst ALLOWED_DRAFTS = LandingPagesConfig.ENABLE_DRAFTS_IN_PROD || process.env.NODE_ENV === 'development';\n\nconst ComputedLandingPagesCtx: ComputedLandingPagesCtxType = {\n  ALLOWED_DRAFTS,\n  TESTING\n} as const;\n\nexport default ComputedLandingPagesCtx;\n\n// Stryker restore all\n"
    },
    "src/lib/landingPages/static/getLandingPagesStaticParams.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4076",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal [ { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["122"],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 40,
              "line": 7
            }
          }
        },
        {
          "id": "4077",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(17,23): error TS2345: Argument of type '{ locale: string; \"lp-slug\": string; }' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 26,
              "line": 8
            },
            "start": {
              "column": 24,
              "line": 8
            }
          }
        },
        {
          "id": "4078",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(8,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(13,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 53,
              "line": 11
            }
          }
        },
        {
          "id": "4079",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(language)",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(14,63): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 39,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "4080",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(8,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(14,63): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,98): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(20,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 39,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "4081",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(14,63): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 39,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "4082",
          "mutatorName": "BooleanLiteral",
          "replacement": "matchedLp",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(17,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,98): error TS18047: 'matchedLp' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 19,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "4083",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(8,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,98): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(20,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 19,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "4084",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(17,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,98): error TS18047: 'matchedLp' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 19,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "4085",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [ {}, {}, {}, {}, {}, {} ] to strictly equal [ { …(2) }, { …(2) }, { …(2) }, …(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["107"],
          "coveredBy": ["107", "122"],
          "location": {
            "end": {
              "column": 114,
              "line": 17
            },
            "start": {
              "column": 23,
              "line": 17
            }
          }
        }
      ],
      "source": "import LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport { isValidLanguageFlag } from '##/lib/builders/unifiedImport';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\n\nimport { getLandingPageByLanguageAndSlugUnstrict, getAllLandingPages } from '../api';\n\nfunction getLandingPagesStaticParams() {\n  const staticParams = [];\n  const allLandingPages = getAllLandingPages();\n\n  for (const { language, slug } of allLandingPages) {\n    if (!isValidLanguageFlag(language)) continue;\n\n    const matchedLp = getLandingPageByLanguageAndSlugUnstrict(language, slug);\n    if (!matchedLp) continue;\n\n    staticParams.push({ [I18nTaxonomy.LANGUAGE]: matchedLp.language, [LandingPageTaxonomy.SLUG]: matchedLp.slug });\n  }\n\n  return staticParams;\n}\n\nexport default getLandingPagesStaticParams;\n"
    },
    "src/lib/landingPages/staticGeneration.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4086",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 47,
              "line": 24
            }
          }
        },
        {
          "id": "4087",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 39,
              "line": 34
            }
          }
        },
        {
          "id": "4088",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 37
            },
            "start": {
              "column": 22,
              "line": 37
            }
          }
        },
        {
          "id": "4089",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 37
            },
            "start": {
              "column": 22,
              "line": 37
            }
          }
        },
        {
          "id": "4090",
          "mutatorName": "EqualityOperator",
          "replacement": "middlewareStrategy === 'redirect'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 37
            },
            "start": {
              "column": 22,
              "line": 37
            }
          }
        },
        {
          "id": "4091",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 37
            },
            "start": {
              "column": 45,
              "line": 37
            }
          }
        },
        {
          "id": "4092",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 39
            },
            "start": {
              "column": 20,
              "line": 39
            }
          }
        },
        {
          "id": "4093",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 39
            },
            "start": {
              "column": 20,
              "line": 39
            }
          }
        },
        {
          "id": "4094",
          "mutatorName": "LogicalOperator",
          "replacement": "language !== DEFAULT_LANGUAGE || maybeDefaultLanguageLp !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 39
            },
            "start": {
              "column": 20,
              "line": 39
            }
          }
        },
        {
          "id": "4095",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 39
            },
            "start": {
              "column": 20,
              "line": 39
            }
          }
        },
        {
          "id": "4096",
          "mutatorName": "EqualityOperator",
          "replacement": "language === DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 39
            },
            "start": {
              "column": 20,
              "line": 39
            }
          }
        },
        {
          "id": "4097",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 39
            },
            "start": {
              "column": 53,
              "line": 39
            }
          }
        },
        {
          "id": "4098",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeDefaultLanguageLp === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 39
            },
            "start": {
              "column": 53,
              "line": 39
            }
          }
        },
        {
          "id": "4099",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 41
            },
            "start": {
              "column": 21,
              "line": 41
            }
          }
        },
        {
          "id": "4100",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 41
            },
            "start": {
              "column": 21,
              "line": 41
            }
          }
        },
        {
          "id": "4101",
          "mutatorName": "EqualityOperator",
          "replacement": "language !== DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 41
            },
            "start": {
              "column": 21,
              "line": 41
            }
          }
        },
        {
          "id": "4102",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 42
            },
            "start": {
              "column": 10,
              "line": 42
            }
          }
        },
        {
          "id": "4103",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 85
            },
            "start": {
              "column": 22,
              "line": 49
            }
          }
        },
        {
          "id": "4104",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 50
            },
            "start": {
              "column": 28,
              "line": 50
            }
          }
        },
        {
          "id": "4105",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentLp",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 52
            }
          }
        },
        {
          "id": "4106",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 52
            }
          }
        },
        {
          "id": "4107",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 52
            }
          }
        },
        {
          "id": "4108",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 58
            },
            "start": {
              "column": 40,
              "line": 58
            }
          }
        },
        {
          "id": "4109",
          "mutatorName": "MethodExpression",
          "replacement": "LANGUAGES",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 60
            },
            "start": {
              "column": 35,
              "line": 60
            }
          }
        },
        {
          "id": "4110",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 60
            },
            "start": {
              "column": 52,
              "line": 60
            }
          }
        },
        {
          "id": "4111",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 60
            },
            "start": {
              "column": 62,
              "line": 60
            }
          }
        },
        {
          "id": "4112",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 60
            },
            "start": {
              "column": 62,
              "line": 60
            }
          }
        },
        {
          "id": "4113",
          "mutatorName": "EqualityOperator",
          "replacement": "lang === language",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 60
            },
            "start": {
              "column": 62,
              "line": 60
            }
          }
        },
        {
          "id": "4114",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 67
            },
            "start": {
              "column": 65,
              "line": 63
            }
          }
        },
        {
          "id": "4115",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 65
            },
            "start": {
              "column": 9,
              "line": 65
            }
          }
        },
        {
          "id": "4116",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 65
            },
            "start": {
              "column": 9,
              "line": 65
            }
          }
        },
        {
          "id": "4117",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeLp !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 65
            },
            "start": {
              "column": 9,
              "line": 65
            }
          }
        },
        {
          "id": "4118",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 70
            },
            "start": {
              "column": 7,
              "line": 70
            }
          }
        },
        {
          "id": "4119",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 70
            },
            "start": {
              "column": 7,
              "line": 70
            }
          }
        },
        {
          "id": "4120",
          "mutatorName": "EqualityOperator",
          "replacement": "xDefault === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 70
            },
            "start": {
              "column": 7,
              "line": 70
            }
          }
        },
        {
          "id": "4121",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 70
            },
            "start": {
              "column": 41,
              "line": 70
            }
          }
        },
        {
          "id": "4122",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 72
            },
            "start": {
              "column": 39,
              "line": 72
            }
          }
        },
        {
          "id": "4123",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "4124",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "4125",
          "mutatorName": "EqualityOperator",
          "replacement": "featuredPictureUrl === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "4126",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 96,
              "line": 73
            },
            "start": {
              "column": 67,
              "line": 73
            }
          }
        },
        {
          "id": "4127",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 73
            },
            "start": {
              "column": 68,
              "line": 73
            }
          }
        },
        {
          "id": "4128",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "4129",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "4130",
          "mutatorName": "EqualityOperator",
          "replacement": "seo !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "4131",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 136,
              "line": 75
            },
            "start": {
              "column": 33,
              "line": 75
            }
          }
        },
        {
          "id": "4132",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 75
            },
            "start": {
              "column": 47,
              "line": 75
            }
          }
        },
        {
          "id": "4133",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "4134",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "4135",
          "mutatorName": "EqualityOperator",
          "replacement": "(openGraph as OpenGraph).url !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "4136",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 80
            },
            "start": {
              "column": 7,
              "line": 80
            }
          }
        },
        {
          "id": "4137",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 80
            },
            "start": {
              "column": 7,
              "line": 80
            }
          }
        },
        {
          "id": "4138",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 81
            },
            "start": {
              "column": 7,
              "line": 81
            }
          }
        },
        {
          "id": "4139",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 81
            },
            "start": {
              "column": 7,
              "line": 81
            }
          }
        },
        {
          "id": "4140",
          "mutatorName": "LogicalOperator",
          "replacement": "alternates || !alternates.canonical",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 81
            },
            "start": {
              "column": 7,
              "line": 81
            }
          }
        },
        {
          "id": "4141",
          "mutatorName": "BooleanLiteral",
          "replacement": "alternates.canonical",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 81
            },
            "start": {
              "column": 21,
              "line": 81
            }
          }
        },
        {
          "id": "4142",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 82
            },
            "start": {
              "column": 7,
              "line": 82
            }
          }
        },
        {
          "id": "4143",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 82
            },
            "start": {
              "column": 7,
              "line": 82
            }
          }
        },
        {
          "id": "4144",
          "mutatorName": "EqualityOperator",
          "replacement": "featuredPictureUrl === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 82
            },
            "start": {
              "column": 7,
              "line": 82
            }
          }
        },
        {
          "id": "4145",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 82
            },
            "start": {
              "column": 60,
              "line": 82
            }
          }
        },
        {
          "id": "4146",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 82
            },
            "start": {
              "column": 61,
              "line": 82
            }
          }
        },
        {
          "id": "4147",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 84
            },
            "start": {
              "column": 10,
              "line": 84
            }
          }
        }
      ],
      "source": "import type { MaybeObjectValue, MaybeUndefined, MaybeNull, Couple } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { AlternateURLs } from 'next/dist/lib/metadata/types/alternative-urls-types';\nimport type { UnknownLandingPageSlug, LandingPageProps } from '@/types/LandingPage';\nimport type { I18nMiddlewareConfig, LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { OpenGraph } from 'next/dist/lib/metadata/types/opengraph-types';\nimport type { LandingPage } from 'contentlayer/generated';\nimport type { Href } from '@rtm/shared-types/Next';\nimport type { Metadata } from 'next';\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport { DEFAULT_LANGUAGE, LANGUAGES, i18ns } from '##/config/i18n';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { notFound } from 'next/navigation';\n\nimport doGetLandingPagesStaticParams from './static/getLandingPagesStaticParams';\nimport { getLandingPageByLanguageAndSlugUnstrict } from './api';\nimport { getPathnameWithoutI18nFlag } from '../i18n';\n\n/* v8 ignore start */\n// Stryker disable all\n\nexport function getLandingPagesStaticParams() {\n  const landingPagesStaticParams = doGetLandingPagesStaticParams();\n  return landingPagesStaticParams;\n}\n\nfunction getXDefaultAndCanonical(\n  currentLp: LandingPage,\n  slug: UnknownLandingPageSlug,\n  language: LanguageFlag,\n  middlewareStrategy: I18nMiddlewareConfig['urlMappingStrategy']\n): Couple<MaybeUndefined<Href>, Href> {\n  const maybeDefaultLanguageLp = getLandingPageByLanguageAndSlugUnstrict(language, slug);\n\n  const defaultUrl = middlewareStrategy !== 'redirect' ? getPathnameWithoutI18nFlag(currentLp.url) : currentLp.url;\n\n  const xDefault = language !== DEFAULT_LANGUAGE && maybeDefaultLanguageLp !== null ? defaultUrl : undefined;\n\n  const canonical = language === DEFAULT_LANGUAGE ? defaultUrl : currentLp.url;\n  return [xDefault, canonical];\n}\n\nexport async function getLandingPageMetadatas(\n  { params }: LandingPageProps,\n  middlewareStrategy: I18nMiddlewareConfig['urlMappingStrategy'],\n  metadataBase: MaybeObjectValue<URL> = process.env.METADABASE_URL ? new URL(process.env.METADABASE_URL) : undefined\n): Promise<Metadata> {\n  const [language, slug] = [params[I18nTaxonomy.LANGUAGE], params[LandingPageTaxonomy.SLUG]];\n  const currentLp: MaybeNull<LandingPage> = getLandingPageByLanguageAndSlugUnstrict(language, slug);\n  if (!currentLp) notFound();\n\n  const globalT = await getServerSideI18n();\n  const { metadescription: description, featuredPictureUrl, title: lpTitle, seo, url } = currentLp;\n\n  const { vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), lpTitle);\n\n  const maybeAlternateLanguages = LANGUAGES.filter((lang) => lang !== language);\n  const languages = {} as Record<LanguageFlag | 'x-default', Href>;\n\n  for (const maybeAlternateLanguage of maybeAlternateLanguages) {\n    const maybeLp = getLandingPageByLanguageAndSlugUnstrict(maybeAlternateLanguage, slug);\n    if (maybeLp === null) continue;\n    languages[maybeAlternateLanguage] = maybeLp.url;\n  }\n\n  const [xDefault, canonical] = getXDefaultAndCanonical(currentLp, slug, language, middlewareStrategy);\n  if (xDefault !== undefined) languages['x-default'] = xDefault;\n\n  const defaultOpenGraph: OpenGraph = { url };\n  if (featuredPictureUrl !== undefined) defaultOpenGraph.images = [{ url: featuredPictureUrl }];\n\n  if (seo === undefined) return { alternates: { canonical, languages }, openGraph: defaultOpenGraph, metadataBase, description, title };\n\n  const { openGraph = defaultOpenGraph, alternates, robots } = seo;\n\n  if ((openGraph as OpenGraph).url === undefined) (openGraph as OpenGraph).url = url;\n  if (alternates) (alternates as AlternateURLs).languages = languages;\n  if (alternates && !alternates.canonical) (alternates as AlternateURLs).canonical = canonical;\n  if (featuredPictureUrl !== undefined) openGraph.images = [{ url: featuredPictureUrl }];\n\n  return { metadataBase, description, alternates, openGraph, robots, title };\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/misc/getAuthenticatedUserRouteShortcut.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4148",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 88,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { MaybeObjectValue, MaybeUndefined } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport { VIP_SHORTCUTS } from '@/middleware';\n\nimport { getPathnameWithoutI18nFlag } from '../i18n';\n\nfunction getAuthenticatedUserRouteShortcut(pathname: AppPath): MaybeUndefined<AppPath> {\n  const currentRoute = getPathnameWithoutI18nFlag(pathname);\n  const vipShortcut = (VIP_SHORTCUTS as Record<PropertyKey, MaybeObjectValue<AppPath>>)[currentRoute];\n  return vipShortcut;\n}\n\nexport default getAuthenticatedUserRouteShortcut;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/misc/getComputedNavData.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4149",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/misc/getComputedNavData.ts(11,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["320", "321", "322"],
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 20,
              "line": 12
            }
          }
        },
        {
          "id": "4150",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/misc/getComputedNavData.ts(12,9): error TS2322: Type 'void[]' is not assignable to type 'NavDataEntities'.\n  Type 'void' is not assignable to type 'NavDataEntity'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["320", "321", "322"],
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 75,
              "line": 13
            }
          }
        },
        {
          "id": "4151",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/lib/misc/getComputedNavData.ts(14,11): error TS2739: Type '{}' is missing the following properties from type 'NavDataEntity': i18nTitle, path\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["320", "321", "322"],
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 42,
              "line": 15
            }
          }
        },
        {
          "id": "4152",
          "mutatorName": "OptionalChaining",
          "replacement": "dropdownConfig[k2]",
          "statusReason": "src/lib/misc/getComputedNavData.ts(17,11): error TS18048: 'dropdownConfig' is possibly 'undefined'.\nsrc/lib/misc/getComputedNavData.ts(17,57): error TS18048: 'dropdownConfig' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["320", "321", "322"],
          "location": {
            "end": {
              "column": 31,
              "line": 18
            },
            "start": {
              "column": 11,
              "line": 18
            }
          }
        },
        {
          "id": "4153",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [ { …(2) }, { …(2) }, { …(2) } ] to strictly equal [ { …(3) }, { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["322"],
          "coveredBy": ["322"],
          "location": {
            "end": {
              "column": 100,
              "line": 18
            },
            "start": {
              "column": 34,
              "line": 18
            }
          }
        },
        {
          "id": "4154",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected [ { …(3) }, { …(2) }, { …(2) } ] to strictly equal [ { …(3) }, { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["322"],
          "coveredBy": ["322"],
          "location": {
            "end": {
              "column": 98,
              "line": 18
            },
            "start": {
              "column": 54,
              "line": 18
            }
          }
        }
      ],
      "source": "import type { DropdownsConfig, NavDataEntities, NavDataEntity } from '@/types/NavData';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\nimport type RoutesKeysUnion from '@/types/RoutesKeysUnion';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\n// {ToDo} Recursive embeddedEntities\n// https://github.com/Tirraa/dashboard_rtm/issues/132\nfunction getComputedNavData<ScopedRoutesK extends RoutesKeysUnion>(\n  routes: Record<ScopedRoutesK, AppPath>,\n  routesTitles: Record<ScopedRoutesK, I18nVocabTarget>,\n  dropdownConfig?: DropdownsConfig<ScopedRoutesK>\n): NavDataEntities {\n  const computedNavData: NavDataEntities = Object.keys(routes).map((k) => {\n    const k2 = k as ScopedRoutesK;\n    const currentEntity: NavDataEntity = {\n      i18nTitle: routesTitles[k2],\n      path: routes[k2],\n      ...(dropdownConfig?.[k2] ? { embeddedEntities: [...(dropdownConfig[k2] as NavDataEntities)] } : {})\n    };\n    return currentEntity;\n  });\n  return computedNavData;\n}\n\nexport default getComputedNavData;\n"
    },
    "src/lib/misc/getPathParts.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4155",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(82,38): error TS2339: Property 'reduce' does not exist on type 'void'.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(82,46): error TS7006: Parameter 'acc' implicitly has an 'any' type.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(82,51): error TS7006: Parameter 'part' implicitly has an 'any' type.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(82,57): error TS7006: Parameter 'currentIndex' implicitly has an 'any' type.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(99,26): error TS2345: Argument of type 'void' is not assignable to parameter of type 'string[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["433", "434", "435"],
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 42,
              "line": 5
            }
          }
        },
        {
          "id": "4156",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ 'absolutely_not_lang', 'foo', 'bar' ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["434"],
          "coveredBy": ["433", "434", "435"],
          "location": {
            "end": {
              "column": 48,
              "line": 8
            },
            "start": {
              "column": 7,
              "line": 8
            }
          }
        },
        {
          "id": "4157",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["433"],
          "coveredBy": ["433", "434", "435"],
          "location": {
            "end": {
              "column": 48,
              "line": 8
            },
            "start": {
              "column": 7,
              "line": 8
            }
          }
        },
        {
          "id": "4158",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18nFlag.charAt(0) !== '/'",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["433"],
          "coveredBy": ["433", "434", "435"],
          "location": {
            "end": {
              "column": 48,
              "line": 8
            },
            "start": {
              "column": 7,
              "line": 8
            }
          }
        },
        {
          "id": "4159",
          "mutatorName": "MethodExpression",
          "replacement": "pathnameWithoutI18nFlag",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["433"],
          "coveredBy": ["433", "434", "435"],
          "location": {
            "end": {
              "column": 40,
              "line": 8
            },
            "start": {
              "column": 7,
              "line": 8
            }
          }
        },
        {
          "id": "4160",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["433"],
          "coveredBy": ["433", "434", "435"],
          "location": {
            "end": {
              "column": 48,
              "line": 8
            },
            "start": {
              "column": 45,
              "line": 8
            }
          }
        },
        {
          "id": "4161",
          "mutatorName": "MethodExpression",
          "replacement": "pathnameWithoutI18nFlag",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["433"],
          "coveredBy": ["433", "435"],
          "location": {
            "end": {
              "column": 112,
              "line": 8
            },
            "start": {
              "column": 76,
              "line": 8
            }
          }
        },
        {
          "id": "4162",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '_', 'a', 'b', 's', 'o', 'l', …(22) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["433"],
          "coveredBy": ["433", "434", "435"],
          "location": {
            "end": {
              "column": 43,
              "line": 10
            },
            "start": {
              "column": 40,
              "line": 10
            }
          }
        }
      ],
      "source": "import type { AppPath } from '@rtm/shared-types/Next';\n\nimport { getPathnameWithoutI18nFlag } from '../i18n';\n\nfunction getPathParts(pathname: AppPath) {\n  let pathnameWithoutI18nFlag = getPathnameWithoutI18nFlag(pathname);\n  // eslint-disable-next-line no-magic-numbers\n  if (pathnameWithoutI18nFlag.charAt(0) === '/') pathnameWithoutI18nFlag = pathnameWithoutI18nFlag.substring(1);\n\n  return pathnameWithoutI18nFlag.split('/');\n}\n\nexport default getPathParts;\n"
    },
    "src/lib/misc/handleSignOut.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4163",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 45,
              "line": 11
            }
          }
        },
        {
          "id": "4164",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 12
            }
          }
        },
        {
          "id": "4165",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 12
            }
          }
        },
        {
          "id": "4166",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 15
            },
            "start": {
              "column": 37,
              "line": 12
            }
          }
        },
        {
          "id": "4167",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 13
            },
            "start": {
              "column": 13,
              "line": 13
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport { signOut } from 'next-auth/react';\n\nimport isProtectedRoute from './isProtectedRoute';\n\nfunction handleSignOut(currentUrl: AppPath) {\n  if (isProtectedRoute(currentUrl)) {\n    signOut({ callbackUrl: ROUTES_ROOTS.WEBSITE });\n    return;\n  }\n  signOut();\n}\n\nexport default handleSignOut;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/misc/isProtectedRoute.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4168",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/middlewares/withProtectedRoutes.ts(39,7): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/lib/misc/handleSignOut.ts(12,7): error TS1345: An expression of type 'void' cannot be tested for truthiness.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["401", "402", "403"],
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 46,
              "line": 7
            }
          }
        },
        {
          "id": "4169",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["401"],
          "coveredBy": ["401", "402", "403"],
          "location": {
            "end": {
              "column": 86,
              "line": 9
            },
            "start": {
              "column": 53,
              "line": 9
            }
          }
        },
        {
          "id": "4170",
          "mutatorName": "MethodExpression",
          "replacement": "currentRoute.endsWith(r)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["402"],
          "coveredBy": ["401", "402", "403"],
          "location": {
            "end": {
              "column": 86,
              "line": 9
            },
            "start": {
              "column": 60,
              "line": 9
            }
          }
        }
      ],
      "source": "import type { AppPath } from '@rtm/shared-types/Next';\n\nimport { APP_PROTECTED_PATHS } from '@/middleware';\n\nimport { getPathnameWithoutI18nFlag } from '../i18n';\n\nfunction isProtectedRoute(pathname: AppPath) {\n  const currentRoute = getPathnameWithoutI18nFlag(pathname);\n  const isProtectedRoute = APP_PROTECTED_PATHS.find((r) => currentRoute.startsWith(r));\n  return Boolean(isProtectedRoute);\n}\n\nexport default isProtectedRoute;\n"
    },
    "src/lib/next.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4171",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 14
            },
            "start": {
              "column": 20,
              "line": 14
            }
          }
        },
        {
          "id": "4172",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 120,
              "line": 16
            },
            "start": {
              "column": 44,
              "line": 16
            }
          }
        },
        {
          "id": "4173",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 70,
              "line": 18
            }
          }
        },
        {
          "id": "4174",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 107,
              "line": 19
            },
            "start": {
              "column": 18,
              "line": 19
            }
          }
        },
        {
          "id": "4175",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 35,
              "line": 21
            }
          }
        },
        {
          "id": "4176",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 23
            },
            "start": {
              "column": 34,
              "line": 23
            }
          }
        },
        {
          "id": "4177",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 23
            },
            "start": {
              "column": 35,
              "line": 23
            }
          }
        },
        {
          "id": "4178",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 23
            },
            "start": {
              "column": 46,
              "line": 23
            }
          }
        },
        {
          "id": "4179",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 23
            },
            "start": {
              "column": 54,
              "line": 23
            }
          }
        },
        {
          "id": "4180",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 23
            },
            "start": {
              "column": 63,
              "line": 23
            }
          }
        },
        {
          "id": "4181",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 23
            },
            "start": {
              "column": 72,
              "line": 23
            }
          }
        },
        {
          "id": "4182",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 24
            },
            "start": {
              "column": 14,
              "line": 24
            }
          }
        },
        {
          "id": "4183",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 24
            },
            "start": {
              "column": 32,
              "line": 24
            }
          }
        },
        {
          "id": "4184",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 25
            },
            "start": {
              "column": 13,
              "line": 25
            }
          }
        },
        {
          "id": "4185",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/next.ts(33,68): error TS2322: Type 'string' is not assignable to type 'MiddlewareFactory'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["175"],
          "location": {
            "end": {
              "column": 69,
              "line": 33
            },
            "start": {
              "column": 67,
              "line": 33
            }
          }
        },
        {
          "id": "4186",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/next.ts(33,83): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["175", "176", "177", "178", "179", "180"],
          "location": {
            "end": {
              "column": 2,
              "line": 41
            },
            "start": {
              "column": 98,
              "line": 33
            }
          }
        },
        {
          "id": "4187",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Hit limit reached (3201/3200)",
          "status": "Timeout",
          "static": true,
          "killedBy": [],
          "coveredBy": ["175", "176", "177", "178", "179", "180"],
          "location": {
            "end": {
              "column": 24,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "4188",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected \"spy\" to be called at least once",
          "status": "Killed",
          "testsCompleted": 208,
          "static": true,
          "killedBy": ["176"],
          "coveredBy": ["175", "176", "177", "178", "179", "180"],
          "location": {
            "end": {
              "column": 24,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "4189",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/next.ts(35,7): error TS2774: This condition will always return true since this function is always defined. Did you mean to call it instead?\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["175", "176", "177", "178", "179", "180"],
          "location": {
            "end": {
              "column": 4,
              "line": 39
            },
            "start": {
              "column": 26,
              "line": 35
            }
          }
        },
        {
          "id": "4190",
          "mutatorName": "ArithmeticOperator",
          "replacement": "index - 1",
          "statusReason": "expected \"spy\" to be called at least once",
          "status": "Killed",
          "testsCompleted": 2,
          "static": true,
          "killedBy": ["176"],
          "coveredBy": ["175", "176", "177", "178", "179", "180"],
          "location": {
            "end": {
              "column": 65,
              "line": 37
            },
            "start": {
              "column": 56,
              "line": 37
            }
          }
        },
        {
          "id": "4191",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected undefined to be an instance of NextResponse",
          "status": "Killed",
          "testsCompleted": 5,
          "static": true,
          "killedBy": ["179"],
          "coveredBy": ["175", "176", "177", "178", "179", "180"],
          "location": {
            "end": {
              "column": 35,
              "line": 40
            },
            "start": {
              "column": 10,
              "line": 40
            }
          }
        }
      ],
      "source": "import type { JSONValue } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { MiddlewareFactory } from '@rtm/shared-types/Next';\nimport type { NextMiddleware, NextRequest } from 'next/server';\nimport type { NextFont } from 'next/dist/compiled/@next/font';\n\nimport { API_ERROR_TRACE_ENDPOINT } from '@/config/utils';\nimport { NextResponse } from 'next/server';\n\nimport { getPathnameMaybeI18nFlag } from './i18n';\n\n/* v8 ignore start */\n// Stryker disable all\n\nexport const fcn = (f: NextFont): string => f.className;\n\nexport const getMaybeI18nFlagFromRequest = (request: NextRequest) => getPathnameMaybeI18nFlag(request.nextUrl.pathname);\n\nexport function traceError(error: Error, additionalInfo?: JSONValue) {\n  const report = { ...error, additionalInfo: additionalInfo ? JSON.stringify(additionalInfo) : undefined };\n\n  fetch(API_ERROR_TRACE_ENDPOINT, {\n    // * ... https://goulet.dev/posts/error-serialization-in-js/\n    body: JSON.stringify(report, ['message', 'name', 'stack', 'cause', 'additionalInfo']),\n    headers: { 'Content-Type': 'application/json' },\n    method: 'POST'\n  });\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n\n// eslint-disable-next-line no-magic-numbers\nexport function stackMiddlewares(functions: MiddlewareFactory[] = [], index = 0): NextMiddleware {\n  const currentMiddleware = functions[index];\n  if (currentMiddleware) {\n    // eslint-disable-next-line no-magic-numbers\n    const nextMiddleware = stackMiddlewares(functions, index + 1);\n    return currentMiddleware(nextMiddleware);\n  }\n  return () => NextResponse.next();\n}\n"
    },
    "src/lib/pagefind/builders/documentTypeInlineFilter.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4192",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 8
            },
            "start": {
              "column": 34,
              "line": 8
            }
          }
        },
        {
          "id": "4193",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 126,
              "line": 8
            },
            "start": {
              "column": 123,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { PagefindFilterDocumentType } from '@/config/pagefind';\n\nimport PAGEFIND_CONFIG from '@/config/pagefind';\n\nconst documentTypeInlineFilter = (documentType: PagefindFilterDocumentType) => PAGEFIND_CONFIG.DOCUMENT_TYPE_FILTER_KEY + ':' + documentType;\n\nexport default documentTypeInlineFilter;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/pagefind/helpers/perf.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4194",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 38,
              "line": 8
            }
          }
        },
        {
          "id": "4195",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 7,
              "line": 9
            }
          }
        },
        {
          "id": "4196",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 7,
              "line": 9
            }
          }
        },
        {
          "id": "4197",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof window.pagefind !== 'undefined'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 7,
              "line": 9
            }
          }
        },
        {
          "id": "4198",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 34,
              "line": 9
            }
          }
        },
        {
          "id": "4199",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 85,
              "line": 13
            }
          }
        },
        {
          "id": "4200",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "4201",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "4202",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof window.pagefind !== 'undefined'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 14
            },
            "start": {
              "column": 7,
              "line": 14
            }
          }
        },
        {
          "id": "4203",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 14
            },
            "start": {
              "column": 34,
              "line": 14
            }
          }
        },
        {
          "id": "4204",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "4205",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "4206",
          "mutatorName": "EqualityOperator",
          "replacement": "req.length <= minReqLengthToTriggerPreload",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "4207",
          "mutatorName": "EqualityOperator",
          "replacement": "req.length >= minReqLengthToTriggerPreload",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "4208",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 37,
              "line": 19
            }
          }
        },
        {
          "id": "4209",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4210",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 3,
              "line": 28
            }
          }
        },
        {
          "id": "4211",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 29
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { Quantity } from '@rtm/shared-types/Numbers';\n\nimport PAGEFIND_CONFIG from '@/config/pagefind';\n\nexport async function initPagefind() {\n  if (typeof window.pagefind === 'undefined') return;\n  await window.pagefind.init();\n}\n\nasync function preloadPagefind(req: string, minReqLengthToTriggerPreload: Quantity) {\n  if (typeof window.pagefind === 'undefined') return;\n  if (req.length < minReqLengthToTriggerPreload) return;\n  await window.pagefind.preload(req);\n}\n\nexport function tryToInitPagefind() {\n  try {\n    initPagefind();\n  } catch {}\n}\n\nexport function tryToPreloadPagefind(\n  req: string,\n  minReqLengthToTriggerPreload: Quantity = PAGEFIND_CONFIG.DEFAULT_MIN_REQ_LENGTH_TO_TRIGGER_PRELOAD\n) {\n  try {\n    preloadPagefind(req, minReqLengthToTriggerPreload);\n  } catch {}\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/pagefind/helpers/search.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4212",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 8
            },
            "start": {
              "column": 86,
              "line": 8
            }
          }
        },
        {
          "id": "4213",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 36
            },
            "start": {
              "column": 93,
              "line": 8
            }
          }
        },
        {
          "id": "4214",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 32
            },
            "start": {
              "column": 97,
              "line": 9
            }
          }
        },
        {
          "id": "4215",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 9,
              "line": 22
            },
            "start": {
              "column": 11,
              "line": 10
            }
          }
        },
        {
          "id": "4216",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 22
            },
            "start": {
              "column": 41,
              "line": 11
            }
          }
        },
        {
          "id": "4217",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 21
            },
            "start": {
              "column": 18,
              "line": 12
            }
          }
        },
        {
          "id": "4218",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 20
            },
            "start": {
              "column": 17,
              "line": 13
            }
          }
        },
        {
          "id": "4219",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 16
            },
            "start": {
              "column": 13,
              "line": 14
            }
          }
        },
        {
          "id": "4220",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 19
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        },
        {
          "id": "4221",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 9,
              "line": 26
            },
            "start": {
              "column": 18,
              "line": 23
            }
          }
        },
        {
          "id": "4222",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 26
            },
            "start": {
              "column": 41,
              "line": 24
            }
          }
        },
        {
          "id": "4223",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 108,
              "line": 25
            },
            "start": {
              "column": 18,
              "line": 25
            }
          }
        },
        {
          "id": "4224",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 9,
              "line": 30
            },
            "start": {
              "column": 15,
              "line": 27
            }
          }
        },
        {
          "id": "4225",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 30
            },
            "start": {
              "column": 41,
              "line": 28
            }
          }
        },
        {
          "id": "4226",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 29
            },
            "start": {
              "column": 18,
              "line": 29
            }
          }
        },
        {
          "id": "4227",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 31
            },
            "start": {
              "column": 10,
              "line": 31
            }
          }
        },
        {
          "id": "4228",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 42
            },
            "start": {
              "column": 44,
              "line": 38
            }
          }
        },
        {
          "id": "4229",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 39
            },
            "start": {
              "column": 28,
              "line": 39
            }
          }
        },
        {
          "id": "4230",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 40
            },
            "start": {
              "column": 45,
              "line": 40
            }
          }
        },
        {
          "id": "4231",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 40
            },
            "start": {
              "column": 60,
              "line": 40
            }
          }
        },
        {
          "id": "4232",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 40
            },
            "start": {
              "column": 83,
              "line": 40
            }
          }
        },
        {
          "id": "4233",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 100,
              "line": 40
            },
            "start": {
              "column": 98,
              "line": 40
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { PagefindFilterDocumentType } from '@/config/pagefind';\n\nimport PAGEFIND_CONFIG from '@/config/pagefind';\n\nexport async function searchDocument(req: string, documentType: SearchDocumentFlag = 'All') {\n  const handlers: Record<SearchDocumentFlag, (req: string) => Promise<PagefindSearchResults>> = {\n    Page: async (req) =>\n      await window.pagefind.search(req, {\n        filters: {\n          none: [\n            {\n              [PAGEFIND_CONFIG.DOCUMENT_TYPE_FILTER_KEY]: PAGEFIND_CONFIG.DOCUMENT_TYPES.BlogPost\n            },\n            {\n              [PAGEFIND_CONFIG.DOCUMENT_TYPE_FILTER_KEY]: PAGEFIND_CONFIG.DOCUMENT_TYPES.LandingPage\n            }\n          ]\n        }\n      }),\n    LandingPage: async (req) =>\n      await window.pagefind.search(req, {\n        filters: { [PAGEFIND_CONFIG.DOCUMENT_TYPE_FILTER_KEY]: PAGEFIND_CONFIG.DOCUMENT_TYPES.LandingPage }\n      }),\n    BlogPost: async (req) =>\n      await window.pagefind.search(req, {\n        filters: { [PAGEFIND_CONFIG.DOCUMENT_TYPE_FILTER_KEY]: PAGEFIND_CONFIG.DOCUMENT_TYPES.BlogPost }\n      }),\n    All: async (req) => await window.pagefind.search(req)\n  };\n\n  const results = await handlers[documentType](req);\n  return results;\n}\n\nexport function getCleanedURL(url: string) {\n  const [prefix, suffix] = [PAGEFIND_CONFIG.URL_UNWANTED_PREFIX, PAGEFIND_CONFIG.URL_UNWANTED_SUFFIX];\n  const cleanedUrl = url.replace(new RegExp(`^${prefix}`), '').replace(new RegExp(`${suffix}$`), '');\n  return cleanedUrl;\n}\n\nexport type SearchDocumentFlag = PagefindFilterDocumentType | 'All';\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/pages/api.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4234",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/pages/api.ts(15,5): error TS18048: 'allPages' is possibly 'undefined'.\nsrc/lib/pages/api.ts(15,32): error TS7031: Binding element 'currentLanguage' implicitly has an 'any' type.\nsrc/lib/pages/api.ts(15,55): error TS7031: Binding element 'currentPath' implicitly has an 'any' type.\nsrc/lib/pages/static/getPagesStaticParams.ts(12,36): error TS18048: 'allPages' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 10
            },
            "start": {
              "column": 28,
              "line": 10
            }
          }
        },
        {
          "id": "4235",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/pages/api.ts(12,98): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 114,
              "line": 12
            }
          }
        },
        {
          "id": "4236",
          "mutatorName": "LogicalOperator",
          "replacement": "allPages.find(({\n  language: currentLanguage,\n  path: currentPath\n}) => currentPath === path && currentLanguage === language) && null",
          "statusReason": "src/lib/pages/api.ts(22,50): error TS2339: Property 'root' does not exist on type 'never'.\nsrc/lib/pages/api.ts(23,72): error TS2339: Property 'draft' does not exist on type 'never'.\nsrc/lib/pages/api.ts(24,3): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<Page>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<Page>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 134,
              "line": 15
            },
            "start": {
              "column": 5,
              "line": 15
            }
          }
        },
        {
          "id": "4237",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["367"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 125,
              "line": 15
            },
            "start": {
              "column": 19,
              "line": 15
            }
          }
        },
        {
          "id": "4238",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'index' to be 'testing-pages-root/fake-page-00' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["367"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 125,
              "line": 15
            },
            "start": {
              "column": 73,
              "line": 15
            }
          }
        },
        {
          "id": "4239",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["367"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 125,
              "line": 15
            },
            "start": {
              "column": 73,
              "line": 15
            }
          }
        },
        {
          "id": "4240",
          "mutatorName": "LogicalOperator",
          "replacement": "currentPath === path || currentLanguage === language",
          "statusReason": "expected 'index' to be 'testing-pages-root/fake-page-00' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["367"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 125,
              "line": 15
            },
            "start": {
              "column": 73,
              "line": 15
            }
          }
        },
        {
          "id": "4241",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'index' to be 'testing-pages-root/fake-page-00' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["367"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 93,
              "line": 15
            },
            "start": {
              "column": 73,
              "line": 15
            }
          }
        },
        {
          "id": "4242",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPath !== path",
          "statusReason": "expected 'index' to be 'testing-pages-root/fake-page-00' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["367"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 93,
              "line": 15
            },
            "start": {
              "column": 73,
              "line": 15
            }
          }
        },
        {
          "id": "4243",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { metadescription: 'FAKE', …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": ["351"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 125,
              "line": 15
            },
            "start": {
              "column": 97,
              "line": 15
            }
          }
        },
        {
          "id": "4244",
          "mutatorName": "EqualityOperator",
          "replacement": "currentLanguage !== language",
          "statusReason": "Cannot read properties of null (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["348"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 125,
              "line": 15
            },
            "start": {
              "column": 97,
              "line": 15
            }
          }
        },
        {
          "id": "4245",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "4246",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "4247",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedPagesCtx.TESTING || matchingPage?.root === PagesConfig.TESTING_ROOT",
          "statusReason": "Cannot read properties of null (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["348"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 83,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "4248",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedPagesCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["348"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368", "438"],
          "location": {
            "end": {
              "column": 32,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "4249",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 19
            },
            "start": {
              "column": 36,
              "line": 19
            }
          }
        },
        {
          "id": "4250",
          "mutatorName": "EqualityOperator",
          "replacement": "matchingPage?.root !== PagesConfig.TESTING_ROOT",
          "statusReason": "expected { metadescription: 'FAKE', …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["438"],
          "coveredBy": ["438"],
          "location": {
            "end": {
              "column": 83,
              "line": 19
            },
            "start": {
              "column": 36,
              "line": 19
            }
          }
        },
        {
          "id": "4251",
          "mutatorName": "OptionalChaining",
          "replacement": "matchingPage.root",
          "statusReason": "src/lib/pages/api.ts(19,36): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["438"],
          "location": {
            "end": {
              "column": 54,
              "line": 19
            },
            "start": {
              "column": 36,
              "line": 19
            }
          }
        },
        {
          "id": "4252",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of null (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["348"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368"],
          "location": {
            "end": {
              "column": 77,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4253",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { metadescription: 'FAKE', …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": ["368"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368"],
          "location": {
            "end": {
              "column": 77,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4254",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingPage && !ComputedPagesCtx.ALLOWED_DRAFTS || matchingPage.draft",
          "statusReason": "src/lib/pages/api.ts(20,59): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368"],
          "location": {
            "end": {
              "column": 77,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4255",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/pages/api.ts(20,15): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368"],
          "location": {
            "end": {
              "column": 55,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4256",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingPage || !ComputedPagesCtx.ALLOWED_DRAFTS",
          "statusReason": "src/lib/pages/api.ts(20,59): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "350", "351", "363", "364", "367", "368"],
          "location": {
            "end": {
              "column": 55,
              "line": 20
            },
            "start": {
              "column": 7,
              "line": 20
            }
          }
        },
        {
          "id": "4257",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedPagesCtx.ALLOWED_DRAFTS",
          "statusReason": "expected { metadescription: 'FAKE', …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["368"],
          "coveredBy": ["40", "65", "66", "67", "194", "348", "349", "363", "364", "367", "368"],
          "location": {
            "end": {
              "column": 55,
              "line": 20
            },
            "start": {
              "column": 23,
              "line": 20
            }
          }
        },
        {
          "id": "4258",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 28
            },
            "start": {
              "column": 47,
              "line": 27
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { UnknownPagePath, LangAndPathPair } from '@/types/Page';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { Page } from 'contentlayer/generated';\n\nimport PagesConfig from '@/config/pages';\n\nimport ComputedPagesCtx from './ctx';\n\nexport const getAllPages = () => PagesConfig.allPages();\n\nexport function getPageByLanguageAndPathUnstrict(language: LanguageFlag, path: UnknownPagePath): MaybeNull<Page> {\n  const allPages = getAllPages();\n  const matchingPage =\n    allPages.find(({ language: currentLanguage, path: currentPath }) => currentPath === path && currentLanguage === language) ?? null;\n\n  // Stryker Workaround 1. Mutant will be killed with `&& false` as expected, but `&& true` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!ComputedPagesCtx.TESTING && matchingPage?.root === PagesConfig.TESTING_ROOT) return null;\n  if (matchingPage && !ComputedPagesCtx.ALLOWED_DRAFTS && matchingPage.draft) return null;\n  return matchingPage;\n}\n\n// Stryker Workaround 2. Pointless static mutant.\n// Stryker disable all\n\nexport const getPageByLanguageAndPathStrict = ({ lang, path }: LangAndPathPair): MaybeNull<Page> =>\n  getPageByLanguageAndPathUnstrict(lang as any, path as any);\n\n// Stryker restore all\n"
    },
    "src/lib/pages/ctx.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4259",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "4260",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "4261",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'test'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "4262",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 10
            },
            "start": {
              "column": 42,
              "line": 10
            }
          }
        },
        {
          "id": "4263",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "4264",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "4265",
          "mutatorName": "LogicalOperator",
          "replacement": "PagesConfig.ENABLE_DRAFTS_IN_PROD && process.env.NODE_ENV === 'development'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "4266",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 11
            },
            "start": {
              "column": 61,
              "line": 11
            }
          }
        },
        {
          "id": "4267",
          "mutatorName": "EqualityOperator",
          "replacement": "process.env.NODE_ENV !== 'development'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 11
            },
            "start": {
              "column": 61,
              "line": 11
            }
          }
        },
        {
          "id": "4268",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 11
            },
            "start": {
              "column": 86,
              "line": 11
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\nimport PagesConfig from '@/config/pages';\n\ntype ComputedPagesCtxType = {\n  ALLOWED_DRAFTS: boolean;\n  TESTING: boolean;\n};\n\nconst TESTING = process.env.NODE_ENV === 'test';\nconst ALLOWED_DRAFTS = PagesConfig.ENABLE_DRAFTS_IN_PROD || process.env.NODE_ENV === 'development';\n\nconst ComputedPagesCtx: ComputedPagesCtxType = {\n  ALLOWED_DRAFTS,\n  TESTING\n} as const;\n\nexport default ComputedPagesCtx;\n\n// Stryker restore all\n"
    },
    "src/lib/pages/static/getPageStaticParams.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4269",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal [ Array(11) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["67"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 32,
              "line": 8
            }
          }
        },
        {
          "id": "4270",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(19,23): error TS2345: Argument of type '{ path: string[]; locale: string; }' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 26,
              "line": 9
            },
            "start": {
              "column": 24,
              "line": 9
            }
          }
        },
        {
          "id": "4271",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(9,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/pages/static/getPageStaticParams.ts(14,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 46,
              "line": 12
            }
          }
        },
        {
          "id": "4272",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(language)",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(16,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 39,
              "line": 13
            },
            "start": {
              "column": 9,
              "line": 13
            }
          }
        },
        {
          "id": "4273",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(9,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/pages/static/getPageStaticParams.ts(16,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"en\" | \"fr\"'.\nsrc/lib/pages/static/getPageStaticParams.ts(19,46): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(19,93): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(22,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 39,
              "line": 13
            },
            "start": {
              "column": 9,
              "line": 13
            }
          }
        },
        {
          "id": "4274",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(16,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"en\" | \"fr\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 39,
              "line": 13
            },
            "start": {
              "column": 9,
              "line": 13
            }
          }
        },
        {
          "id": "4275",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(9,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/pages/static/getPageStaticParams.ts(16,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\nsrc/lib/pages/static/getPageStaticParams.ts(19,46): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(19,93): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(22,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 28,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "4276",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ { path: [ 'page-00' ], …(1) }, …(2) ] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 28,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "4277",
          "mutatorName": "BooleanLiteral",
          "replacement": "page",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(19,46): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(19,93): error TS18047: 'page' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 14,
              "line": 17
            },
            "start": {
              "column": 9,
              "line": 17
            }
          }
        },
        {
          "id": "4278",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(9,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/pages/static/getPageStaticParams.ts(19,46): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(19,93): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(22,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 14,
              "line": 17
            },
            "start": {
              "column": 9,
              "line": 17
            }
          }
        },
        {
          "id": "4279",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/pages/static/getPageStaticParams.ts(19,46): error TS18047: 'page' is possibly 'null'.\nsrc/lib/pages/static/getPageStaticParams.ts(19,93): error TS18047: 'page' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 14,
              "line": 17
            },
            "start": {
              "column": 9,
              "line": 17
            }
          }
        },
        {
          "id": "4280",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [ {} ] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 108,
              "line": 19
            },
            "start": {
              "column": 23,
              "line": 19
            }
          }
        },
        {
          "id": "4281",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ { …(2) } ] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 65,
              "line": 19
            },
            "start": {
              "column": 62,
              "line": 19
            }
          }
        }
      ],
      "source": "import { isValidLanguageFlag } from '##/lib/builders/unifiedImport';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\n\nimport { getPageByLanguageAndPathUnstrict, getAllPages } from '../api';\nimport isSkippedPath from './helpers/isSkippedPath';\n\nfunction getPageStaticParams() {\n  const staticParams = [];\n  const allPages = getAllPages();\n\n  for (const { language, path } of allPages) {\n    if (!isValidLanguageFlag(language)) continue;\n    if (isSkippedPath(path)) continue;\n\n    const page = getPageByLanguageAndPathUnstrict(language, path);\n    if (!page) continue;\n\n    staticParams.push({ [PageTaxonomy.PATH]: page.path.split('/'), [I18nTaxonomy.LANGUAGE]: page.language });\n  }\n\n  return staticParams;\n}\n\nexport default getPageStaticParams;\n"
    },
    "src/lib/pages/static/helpers/isSkippedPath.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4282",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/pages/static/getPagesStaticParams.ts(14,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/pages/staticGeneration.ts(24,21): error TS2554: Expected 0 arguments, but got 1.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(27,21): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 128,
              "line": 4
            },
            "start": {
              "column": 23,
              "line": 3
            }
          }
        },
        {
          "id": "4283",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 128,
              "line": 4
            },
            "start": {
              "column": 3,
              "line": 4
            }
          }
        },
        {
          "id": "4284",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ { path: [ 'page-00' ], …(1) }, …(2) ] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 128,
              "line": 4
            },
            "start": {
              "column": 3,
              "line": 4
            }
          }
        },
        {
          "id": "4285",
          "mutatorName": "LogicalOperator",
          "replacement": "PagesConfig.SKIP_AUTOMOUNT.paths.includes((path as any)) && PagesConfig.SKIP_AUTOMOUNT.prefixes.some(p => path.startsWith(p))",
          "statusReason": "expected [ { path: [ 'page-00' ], …(1) }, …(2) ] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 128,
              "line": 4
            },
            "start": {
              "column": 3,
              "line": 4
            }
          }
        },
        {
          "id": "4286",
          "mutatorName": "MethodExpression",
          "replacement": "PagesConfig.SKIP_AUTOMOUNT.prefixes.every(p => path.startsWith(p))",
          "statusReason": "expected [] to strictly equal [ Array(11) ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["67"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 128,
              "line": 4
            },
            "start": {
              "column": 61,
              "line": 4
            }
          }
        },
        {
          "id": "4287",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected [ { …(2) }, { …(2) } ] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["40", "65", "66", "67", "194"],
          "location": {
            "end": {
              "column": 127,
              "line": 4
            },
            "start": {
              "column": 102,
              "line": 4
            }
          }
        },
        {
          "id": "4288",
          "mutatorName": "MethodExpression",
          "replacement": "path.endsWith(p)",
          "statusReason": "expected [ { …(2) }, { …(2) } ] to strictly equal [ { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["194"],
          "coveredBy": ["194"],
          "location": {
            "end": {
              "column": 127,
              "line": 4
            },
            "start": {
              "column": 109,
              "line": 4
            }
          }
        }
      ],
      "source": "import PagesConfig from '@/config/pages';\n\nconst isSkippedPath = (path: string) =>\n  PagesConfig.SKIP_AUTOMOUNT.paths.includes(path as any) || PagesConfig.SKIP_AUTOMOUNT.prefixes.some((p) => path.startsWith(p));\n\nexport default isSkippedPath;\n"
    },
    "src/lib/pages/staticGeneration.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4289",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 39,
              "line": 25
            }
          }
        },
        {
          "id": "4290",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 44
            },
            "start": {
              "column": 39,
              "line": 35
            }
          }
        },
        {
          "id": "4291",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 38
            },
            "start": {
              "column": 22,
              "line": 38
            }
          }
        },
        {
          "id": "4292",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 38
            },
            "start": {
              "column": 22,
              "line": 38
            }
          }
        },
        {
          "id": "4293",
          "mutatorName": "EqualityOperator",
          "replacement": "middlewareStrategy === 'redirect'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 38
            },
            "start": {
              "column": 22,
              "line": 38
            }
          }
        },
        {
          "id": "4294",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 38
            },
            "start": {
              "column": 45,
              "line": 38
            }
          }
        },
        {
          "id": "4295",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 40
            },
            "start": {
              "column": 20,
              "line": 40
            }
          }
        },
        {
          "id": "4296",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 40
            },
            "start": {
              "column": 20,
              "line": 40
            }
          }
        },
        {
          "id": "4297",
          "mutatorName": "LogicalOperator",
          "replacement": "language !== DEFAULT_LANGUAGE || maybeDefaultLanguagePage !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 40
            },
            "start": {
              "column": 20,
              "line": 40
            }
          }
        },
        {
          "id": "4298",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 40
            },
            "start": {
              "column": 20,
              "line": 40
            }
          }
        },
        {
          "id": "4299",
          "mutatorName": "EqualityOperator",
          "replacement": "language === DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 40
            },
            "start": {
              "column": 20,
              "line": 40
            }
          }
        },
        {
          "id": "4300",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 40
            },
            "start": {
              "column": 53,
              "line": 40
            }
          }
        },
        {
          "id": "4301",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeDefaultLanguagePage === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 40
            },
            "start": {
              "column": 53,
              "line": 40
            }
          }
        },
        {
          "id": "4302",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 42
            },
            "start": {
              "column": 21,
              "line": 42
            }
          }
        },
        {
          "id": "4303",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 42
            },
            "start": {
              "column": 21,
              "line": 42
            }
          }
        },
        {
          "id": "4304",
          "mutatorName": "EqualityOperator",
          "replacement": "language !== DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 42
            },
            "start": {
              "column": 21,
              "line": 42
            }
          }
        },
        {
          "id": "4305",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 43
            },
            "start": {
              "column": 10,
              "line": 43
            }
          }
        },
        {
          "id": "4306",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 91
            },
            "start": {
              "column": 22,
              "line": 50
            }
          }
        },
        {
          "id": "4307",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 96,
              "line": 51
            },
            "start": {
              "column": 28,
              "line": 51
            }
          }
        },
        {
          "id": "4308",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 51
            },
            "start": {
              "column": 60,
              "line": 51
            }
          }
        },
        {
          "id": "4309",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 52
            }
          }
        },
        {
          "id": "4310",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 52
            }
          }
        },
        {
          "id": "4311",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPage",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 55
            },
            "start": {
              "column": 7,
              "line": 55
            }
          }
        },
        {
          "id": "4312",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 55
            },
            "start": {
              "column": 7,
              "line": 55
            }
          }
        },
        {
          "id": "4313",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 55
            },
            "start": {
              "column": 7,
              "line": 55
            }
          }
        },
        {
          "id": "4314",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 61
            },
            "start": {
              "column": 40,
              "line": 61
            }
          }
        },
        {
          "id": "4315",
          "mutatorName": "MethodExpression",
          "replacement": "LANGUAGES",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 63
            },
            "start": {
              "column": 30,
              "line": 63
            }
          }
        },
        {
          "id": "4316",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 63
            },
            "start": {
              "column": 47,
              "line": 63
            }
          }
        },
        {
          "id": "4317",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 63
            },
            "start": {
              "column": 57,
              "line": 63
            }
          }
        },
        {
          "id": "4318",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 63
            },
            "start": {
              "column": 57,
              "line": 63
            }
          }
        },
        {
          "id": "4319",
          "mutatorName": "EqualityOperator",
          "replacement": "lang === language",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 63
            },
            "start": {
              "column": 57,
              "line": 63
            }
          }
        },
        {
          "id": "4320",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 70
            },
            "start": {
              "column": 55,
              "line": 66
            }
          }
        },
        {
          "id": "4321",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 68
            },
            "start": {
              "column": 9,
              "line": 68
            }
          }
        },
        {
          "id": "4322",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 68
            },
            "start": {
              "column": 9,
              "line": 68
            }
          }
        },
        {
          "id": "4323",
          "mutatorName": "EqualityOperator",
          "replacement": "maybePage !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 68
            },
            "start": {
              "column": 9,
              "line": 68
            }
          }
        },
        {
          "id": "4324",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "4325",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "4326",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeDefaultLanguagePage === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "4327",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 73
            },
            "start": {
              "column": 52,
              "line": 73
            }
          }
        },
        {
          "id": "4328",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "4329",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "4330",
          "mutatorName": "EqualityOperator",
          "replacement": "xDefault === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "4331",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 76
            },
            "start": {
              "column": 41,
              "line": 76
            }
          }
        },
        {
          "id": "4332",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 46,
              "line": 78
            },
            "start": {
              "column": 39,
              "line": 78
            }
          }
        },
        {
          "id": "4333",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "4334",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "4335",
          "mutatorName": "EqualityOperator",
          "replacement": "featuredPictureUrl === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "4336",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 96,
              "line": 79
            },
            "start": {
              "column": 67,
              "line": 79
            }
          }
        },
        {
          "id": "4337",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 79
            },
            "start": {
              "column": 68,
              "line": 79
            }
          }
        },
        {
          "id": "4338",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 81
            },
            "start": {
              "column": 7,
              "line": 81
            }
          }
        },
        {
          "id": "4339",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 81
            },
            "start": {
              "column": 7,
              "line": 81
            }
          }
        },
        {
          "id": "4340",
          "mutatorName": "EqualityOperator",
          "replacement": "seo !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 81
            },
            "start": {
              "column": 7,
              "line": 81
            }
          }
        },
        {
          "id": "4341",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 136,
              "line": 81
            },
            "start": {
              "column": 33,
              "line": 81
            }
          }
        },
        {
          "id": "4342",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 81
            },
            "start": {
              "column": 47,
              "line": 81
            }
          }
        },
        {
          "id": "4343",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 85
            },
            "start": {
              "column": 7,
              "line": 85
            }
          }
        },
        {
          "id": "4344",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 85
            },
            "start": {
              "column": 7,
              "line": 85
            }
          }
        },
        {
          "id": "4345",
          "mutatorName": "EqualityOperator",
          "replacement": "(openGraph as OpenGraph).url !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 85
            },
            "start": {
              "column": 7,
              "line": 85
            }
          }
        },
        {
          "id": "4346",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 86
            },
            "start": {
              "column": 7,
              "line": 86
            }
          }
        },
        {
          "id": "4347",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 86
            },
            "start": {
              "column": 7,
              "line": 86
            }
          }
        },
        {
          "id": "4348",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 87
            },
            "start": {
              "column": 7,
              "line": 87
            }
          }
        },
        {
          "id": "4349",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 87
            },
            "start": {
              "column": 7,
              "line": 87
            }
          }
        },
        {
          "id": "4350",
          "mutatorName": "LogicalOperator",
          "replacement": "alternates || !alternates.canonical",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 87
            },
            "start": {
              "column": 7,
              "line": 87
            }
          }
        },
        {
          "id": "4351",
          "mutatorName": "BooleanLiteral",
          "replacement": "alternates.canonical",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 87
            },
            "start": {
              "column": 21,
              "line": 87
            }
          }
        },
        {
          "id": "4352",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 88
            },
            "start": {
              "column": 7,
              "line": 88
            }
          }
        },
        {
          "id": "4353",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 88
            },
            "start": {
              "column": 7,
              "line": 88
            }
          }
        },
        {
          "id": "4354",
          "mutatorName": "EqualityOperator",
          "replacement": "featuredPictureUrl === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 88
            },
            "start": {
              "column": 7,
              "line": 88
            }
          }
        },
        {
          "id": "4355",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 88
            },
            "start": {
              "column": 60,
              "line": 88
            }
          }
        },
        {
          "id": "4356",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 88
            },
            "start": {
              "column": 61,
              "line": 88
            }
          }
        },
        {
          "id": "4357",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 90
            },
            "start": {
              "column": 10,
              "line": 90
            }
          }
        }
      ],
      "source": "import type { MaybeObjectValue, MaybeUndefined, Couple } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { AlternateURLs } from 'next/dist/lib/metadata/types/alternative-urls-types';\nimport type { I18nMiddlewareConfig, LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { OpenGraph } from 'next/dist/lib/metadata/types/opengraph-types';\nimport type { UnknownPagePath, PageProps } from '@/types/Page';\nimport type { Href } from '@rtm/shared-types/Next';\nimport type { Page } from 'contentlayer/generated';\nimport type { Metadata } from 'next';\n\nimport buildPageTitle from '@rtm/shared-lib/portable/str/buildPageTitle';\nimport { DEFAULT_LANGUAGE, LANGUAGES, i18ns } from '##/config/i18n';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { notFound } from 'next/navigation';\n\nimport doGetPageStaticParams from './static/getPageStaticParams';\nimport isSkippedPath from './static/helpers/isSkippedPath';\nimport { getPageByLanguageAndPathUnstrict } from './api';\nimport { getPathnameWithoutI18nFlag } from '../i18n';\n\n/* v8 ignore start */\n// Stryker disable all\n\nexport function getPageStaticParams() {\n  const pageStaticParams = doGetPageStaticParams();\n  return pageStaticParams;\n}\n\nfunction getXDefaultAndCanonical(\n  currentPage: Page,\n  path: UnknownPagePath,\n  language: LanguageFlag,\n  middlewareStrategy: I18nMiddlewareConfig['urlMappingStrategy']\n): Couple<MaybeUndefined<Href>, Href> {\n  const maybeDefaultLanguagePage = getPageByLanguageAndPathUnstrict(language, path);\n\n  const defaultUrl = middlewareStrategy !== 'redirect' ? getPathnameWithoutI18nFlag(currentPage.url) : currentPage.url;\n\n  const xDefault = language !== DEFAULT_LANGUAGE && maybeDefaultLanguagePage !== null ? defaultUrl : undefined;\n\n  const canonical = language === DEFAULT_LANGUAGE ? defaultUrl : currentPage.url;\n  return [xDefault, canonical];\n}\n\nexport async function getPageMetadatas(\n  { params }: PageProps,\n  middlewareStrategy: I18nMiddlewareConfig['urlMappingStrategy'],\n  metadataBase: MaybeObjectValue<URL> = process.env.METADABASE_URL ? new URL(process.env.METADABASE_URL) : undefined\n): Promise<Metadata> {\n  const [path, language] = [params[PageTaxonomy.PATH].join('/'), params[I18nTaxonomy.LANGUAGE]];\n  if (isSkippedPath(path)) notFound();\n\n  const currentPage = getPageByLanguageAndPathUnstrict(language, path);\n  if (!currentPage) notFound();\n\n  const globalT = await getServerSideI18n();\n  const { metadescription: description, featuredPictureUrl, title: pageTitle, seo, url } = currentPage;\n\n  const { vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), pageTitle);\n\n  const alternateLanguages = LANGUAGES.filter((lang) => lang !== language);\n  const languages = {} as Record<LanguageFlag | 'x-default', Href>;\n\n  for (const alternateLanguage of alternateLanguages) {\n    const maybePage = getPageByLanguageAndPathUnstrict(alternateLanguage, path);\n    if (maybePage === null) continue;\n    languages[alternateLanguage] = maybePage.url;\n  }\n\n  const maybeDefaultLanguagePage = getPageByLanguageAndPathUnstrict(DEFAULT_LANGUAGE, path);\n  if (maybeDefaultLanguagePage !== null) languages['x-default'] = getPathnameWithoutI18nFlag(url);\n\n  const [xDefault, canonical] = getXDefaultAndCanonical(currentPage, path, language, middlewareStrategy);\n  if (xDefault !== undefined) languages['x-default'] = xDefault;\n\n  const defaultOpenGraph: OpenGraph = { url };\n  if (featuredPictureUrl !== undefined) defaultOpenGraph.images = [{ url: featuredPictureUrl }];\n\n  if (seo === undefined) return { alternates: { canonical, languages }, openGraph: defaultOpenGraph, metadataBase, description, title };\n\n  const { openGraph = defaultOpenGraph, alternates, robots } = seo;\n\n  if ((openGraph as OpenGraph).url === undefined) (openGraph as OpenGraph).url = url;\n  if (alternates) (alternates as AlternateURLs).languages = languages;\n  if (alternates && !alternates.canonical) (alternates as AlternateURLs).canonical = canonical;\n  if (featuredPictureUrl !== undefined) openGraph.images = [{ url: featuredPictureUrl }];\n\n  return { metadataBase, description, alternates, openGraph, robots, title };\n}\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/portable/i18n/isValidLanguageFlag.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4358",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "interop/lib/builders/pages/computedFields/functions/language.ts(17,27): error TS2554: Expected 0 arguments, but got 1.\ninterop/lib/builders/pages/computedFields/functions/language.ts(17,43): error TS2322: Type 'string' is not assignable to type '\"en\" | \"fr\"'.\ninterop/lib/builders/pages/computedFields/functions/path.ts(17,27): error TS2554: Expected 0 arguments, but got 1.\ninterop/lib/builders/pages/computedFields/functions/root.ts(22,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/i18n.ts(25,28): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/i18n.ts(34,28): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/i18n.ts(35,3): error TS2322: Type 'string' is not assignable to type '\"\" | \"en\" | \"fr\"'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(12,30): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(14,63): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"en\" | \"fr\"'.\nsrc/lib/pages/static/getPagesStaticParams.ts(13,30): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/pages/static/getPagesStaticParams.ts(16,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"en\" | \"fr\"'.\nsrc/lib/portable/i18n/__tests__/prebuild.isValidLanguageFlag.test.ts(10,85): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/i18n/__tests__/prebuild.isValidLanguageFlag.test.ts(17,32): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 101,
              "line": 5
            },
            "start": {
              "column": 29,
              "line": 5
            }
          }
        }
      ],
      "source": "import type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport { LANGUAGES } from '../../../../interop/config/i18n';\n\nconst isValidLanguageFlag = (key: string): key is LanguageFlag => (LANGUAGES as any[]).includes(key);\nexport default isValidLanguageFlag;\n"
    },
    "src/lib/portable/str/capitalize.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4359",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/i18n/locales/fr.ts(90,35): error TS2554: Expected 0 arguments, but got 1.\ninterop/lib/builders/blog/blogDataAssoc/getBlogDataVariableName.ts(10,78): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/getFormattedDate.ts(8,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/portable/str/getFormattedDate.ts(8,14): error TS2554: Expected 0 arguments, but got 1.\nsrc/i18n/locales/en.ts(88,35): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(7,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(8,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(9,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(13,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/cta/SignupButton.tsx(24,19): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/breadcrumbs/Breadcrumbs.tsx(87,33): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/PaginatedElements.tsx(101,57): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 2
            },
            "start": {
              "column": 20,
              "line": 2
            }
          }
        },
        {
          "id": "4360",
          "mutatorName": "ArithmeticOperator",
          "replacement": "str.charAt(0).toUpperCase() - str.substring(1)",
          "statusReason": "src/lib/portable/str/capitalize.ts(2,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/portable/str/capitalize.ts(2,45): error TS2322: Type 'number' is not assignable to type 'string'.\nsrc/lib/portable/str/capitalize.ts(2,75): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["396", "466", "473", "474"],
          "location": {
            "end": {
              "column": 91,
              "line": 2
            },
            "start": {
              "column": 45,
              "line": 2
            }
          }
        },
        {
          "id": "4361",
          "mutatorName": "MethodExpression",
          "replacement": "str.charAt(0).toLowerCase()",
          "statusReason": "expected 'vendredi 24 décembre 2021' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 70,
          "static": true,
          "killedBy": ["396"],
          "coveredBy": ["396", "466", "473", "474"],
          "location": {
            "end": {
              "column": 72,
              "line": 2
            },
            "start": {
              "column": 45,
              "line": 2
            }
          }
        },
        {
          "id": "4362",
          "mutatorName": "MethodExpression",
          "replacement": "str",
          "statusReason": "expected 'VENDREDI 24 DÉCEMBRE 2021endredi 24 d…' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 84,
          "static": true,
          "killedBy": ["396"],
          "coveredBy": ["396", "466", "473", "474"],
          "location": {
            "end": {
              "column": 58,
              "line": 2
            },
            "start": {
              "column": 45,
              "line": 2
            }
          }
        },
        {
          "id": "4363",
          "mutatorName": "MethodExpression",
          "replacement": "str",
          "statusReason": "Cannot read properties of undefined (reading 'filter')",
          "status": "Killed",
          "testsCompleted": 40,
          "static": true,
          "killedBy": ["25"],
          "coveredBy": ["396", "466", "473", "474"],
          "location": {
            "end": {
              "column": 91,
              "line": 2
            },
            "start": {
              "column": 75,
              "line": 2
            }
          }
        }
      ],
      "source": "// eslint-disable-next-line no-magic-numbers\nconst capitalize = (str: string): string => str.charAt(0).toUpperCase() + str.substring(1);\n\nexport default capitalize;\n"
    },
    "src/lib/portable/str/compareAlphabetically.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4364",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 133,
              "line": 6
            },
            "start": {
              "column": 60,
              "line": 6
            }
          }
        },
        {
          "id": "4365",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 132,
              "line": 6
            },
            "start": {
              "column": 109,
              "line": 6
            }
          }
        },
        {
          "id": "4366",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 130,
              "line": 6
            },
            "start": {
              "column": 124,
              "line": 6
            }
          }
        },
        {
          "id": "4367",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 135,
              "line": 10
            },
            "start": {
              "column": 61,
              "line": 10
            }
          }
        },
        {
          "id": "4368",
          "mutatorName": "UnaryOperator",
          "replacement": "+s1.localeCompare(s2, locale, {\n  sensitivity: 'base'\n})",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 135,
              "line": 10
            },
            "start": {
              "column": 81,
              "line": 10
            }
          }
        },
        {
          "id": "4369",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 134,
              "line": 10
            },
            "start": {
              "column": 111,
              "line": 10
            }
          }
        },
        {
          "id": "4370",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 132,
              "line": 10
            },
            "start": {
              "column": 126,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\nimport type { StringsCompareFun } from '@rtm/shared-types/StringManipulations';\n\n// Stryker Workaround 1. Pointless mutant (just a localeCompare wrapper)\n// Stryker disable next-line all\nexport const compareAlphabeticallyAsc: StringsCompareFun = (s1, s2, locale) => s1.localeCompare(s2, locale, { sensitivity: 'base' });\n\n// Stryker Workaround 2. Pointless mutant (just a localeCompare wrapper)\n// Stryker disable next-line all\nexport const compareAlphabeticallyDesc: StringsCompareFun = (s1, s2, locale) => -s1.localeCompare(s2, locale, { sensitivity: 'base' });\n\n/* v8 ignore stop */\n"
    },
    "src/lib/portable/str/countCharacter.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4371",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/app/[locale]/(pages)/(withfooter)/blog/[categ]/[subcateg]/[slug]/page.tsx(45,17): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["439", "440"],
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 52,
              "line": 6
            }
          }
        },
        {
          "id": "4372",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Impossible to countCharacter with:\n{\n  \"char\": \"a\"\n}\nchar's length must be: 1.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["439"],
          "coveredBy": ["439", "440"],
          "location": {
            "end": {
              "column": 24,
              "line": 10
            },
            "start": {
              "column": 7,
              "line": 10
            }
          }
        },
        {
          "id": "4373",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected function to throw an error, but it didn't",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["440"],
          "coveredBy": ["439", "440"],
          "location": {
            "end": {
              "column": 24,
              "line": 10
            },
            "start": {
              "column": 7,
              "line": 10
            }
          }
        },
        {
          "id": "4374",
          "mutatorName": "EqualityOperator",
          "replacement": "char.length === 1",
          "statusReason": "Impossible to countCharacter with:\n{\n  \"char\": \"a\"\n}\nchar's length must be: 1.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["439"],
          "coveredBy": ["439", "440"],
          "location": {
            "end": {
              "column": 24,
              "line": 10
            },
            "start": {
              "column": 7,
              "line": 10
            }
          }
        },
        {
          "id": "4375",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 10
            },
            "start": {
              "column": 79,
              "line": 10
            }
          }
        },
        {
          "id": "4376",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 115,
              "line": 10
            },
            "start": {
              "column": 89,
              "line": 10
            }
          }
        },
        {
          "id": "4377",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 47 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["439"],
          "coveredBy": ["439"],
          "location": {
            "end": {
              "column": 58,
              "line": 13
            },
            "start": {
              "column": 38,
              "line": 13
            }
          }
        },
        {
          "id": "4378",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected +0 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["439"],
          "coveredBy": ["439"],
          "location": {
            "end": {
              "column": 58,
              "line": 13
            },
            "start": {
              "column": 38,
              "line": 13
            }
          }
        },
        {
          "id": "4379",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChar !== char",
          "statusReason": "expected 43 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["439"],
          "coveredBy": ["439"],
          "location": {
            "end": {
              "column": 58,
              "line": 13
            },
            "start": {
              "column": 38,
              "line": 13
            }
          }
        },
        {
          "id": "4380",
          "mutatorName": "UpdateOperator",
          "replacement": "count--",
          "statusReason": "expected -4 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["439"],
          "coveredBy": ["439"],
          "location": {
            "end": {
              "column": 67,
              "line": 13
            },
            "start": {
              "column": 60,
              "line": 13
            }
          }
        }
      ],
      "source": "import InvalidArgumentsError from '../../../../interop/errors/InvalidArguments';\n\n/**\n * @throws {InvalidArgumentsError}\n */\nfunction countCharacter(str: string, char: string) {\n  // Stryker Workaround 1. Pointless mutants (fault tolerant).\n  // Stryker disable next-line ObjectLiteral,StringLiteral\n  // eslint-disable-next-line no-magic-numbers\n  if (char.length !== 1) throw new InvalidArgumentsError(countCharacter.name, { char }, \"char's length must be: 1\");\n\n  let count = 0;\n  for (const currentChar of str) if (currentChar === char) count++;\n  return count;\n}\n\nexport default countCharacter;\n"
    },
    "src/lib/portable/str/endsWithChar.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4381",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "interop/errors/InvalidArguments.ts(11,47): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(8,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(9,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(10,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(15,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(16,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(17,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(22,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(23,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(24,26): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 1
            },
            "start": {
              "column": 23,
              "line": 1
            }
          }
        },
        {
          "id": "4382",
          "mutatorName": "MethodExpression",
          "replacement": "endsChar.split('').every(char => str.endsWith(char))",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["361"],
          "coveredBy": [
            "164",
            "167",
            "174",
            "189",
            "237",
            "248",
            "252",
            "269",
            "272",
            "302",
            "337",
            "359",
            "360",
            "361",
            "366",
            "415",
            "416",
            "417",
            "419",
            "440"
          ],
          "location": {
            "end": {
              "column": 111,
              "line": 1
            },
            "start": {
              "column": 58,
              "line": 1
            }
          }
        },
        {
          "id": "4383",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["361"],
          "coveredBy": [
            "164",
            "167",
            "174",
            "189",
            "237",
            "248",
            "252",
            "269",
            "272",
            "302",
            "337",
            "359",
            "360",
            "361",
            "366",
            "415",
            "416",
            "417",
            "419",
            "440"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 1
            },
            "start": {
              "column": 73,
              "line": 1
            }
          }
        },
        {
          "id": "4384",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["361"],
          "coveredBy": [
            "164",
            "167",
            "174",
            "189",
            "237",
            "248",
            "252",
            "269",
            "272",
            "302",
            "337",
            "359",
            "360",
            "361",
            "366",
            "415",
            "416",
            "417",
            "419",
            "440"
          ],
          "location": {
            "end": {
              "column": 110,
              "line": 1
            },
            "start": {
              "column": 82,
              "line": 1
            }
          }
        },
        {
          "id": "4385",
          "mutatorName": "MethodExpression",
          "replacement": "str.startsWith(char)",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["361"],
          "coveredBy": [
            "164",
            "167",
            "174",
            "189",
            "237",
            "248",
            "252",
            "269",
            "272",
            "302",
            "337",
            "359",
            "360",
            "361",
            "366",
            "415",
            "416",
            "419",
            "440"
          ],
          "location": {
            "end": {
              "column": 110,
              "line": 1
            },
            "start": {
              "column": 92,
              "line": 1
            }
          }
        }
      ],
      "source": "const endsWithChars = (str: string, endsChar: string) => endsChar.split('').some((char) => str.endsWith(char));\n\nexport default endsWithChars;\n"
    },
    "src/lib/portable/str/getFormattedDate.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4386",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(123,42): error TS2554: Expected 0 arguments, but got 3.\nsrc/lib/blog/api.ts(124,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/portable/str/__tests__/prebuild.getFormattedDate.test.ts(11,29): error TS2554: Expected 0 arguments, but got 3.\nsrc/lib/portable/str/__tests__/prebuild.getFormattedDate.test.ts(12,29): error TS2554: Expected 0 arguments, but got 3.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 10
            },
            "start": {
              "column": 26,
              "line": 7
            }
          }
        },
        {
          "id": "4387",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 7
            },
            "start": {
              "column": 83,
              "line": 7
            }
          }
        },
        {
          "id": "4388",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '24/12/2021' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["396"],
          "coveredBy": ["396", "466"],
          "location": {
            "end": {
              "column": 126,
              "line": 9
            },
            "start": {
              "column": 39,
              "line": 9
            }
          }
        },
        {
          "id": "4389",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/str/getFormattedDate.ts(9,41): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(locales?: LocalesArgument, options?: DateTimeFormatOptions | undefined): DateTimeFormat', gave the following error.\n    Type '\"\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n  Overload 2 of 2, '(locales?: string | string[] | undefined, options?: DateTimeFormatOptions | undefined): DateTimeFormat', gave the following error.\n    Type '\"\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["396", "466"],
          "location": {
            "end": {
              "column": 58,
              "line": 9
            },
            "start": {
              "column": 52,
              "line": 9
            }
          }
        },
        {
          "id": "4390",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'Dimanche 1 février 1998' to be '1 févr. 1998, 07:29' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["466"],
          "coveredBy": ["466"],
          "location": {
            "end": {
              "column": 118,
              "line": 9
            },
            "start": {
              "column": 75,
              "line": 9
            }
          }
        },
        {
          "id": "4391",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/str/getFormattedDate.ts(9,41): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(locales?: LocalesArgument, options?: DateTimeFormatOptions | undefined): DateTimeFormat', gave the following error.\n    Type '\"\" | \"full\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n      Type '\"\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n  Overload 2 of 2, '(locales?: string | string[] | undefined, options?: DateTimeFormatOptions | undefined): DateTimeFormat', gave the following error.\n    Type '\"\" | \"full\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["466"],
          "location": {
            "end": {
              "column": 96,
              "line": 9
            },
            "start": {
              "column": 88,
              "line": 9
            }
          }
        },
        {
          "id": "4392",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/str/getFormattedDate.ts(9,39): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(locales?: LocalesArgument, options?: DateTimeFormatOptions | undefined): DateTimeFormat', gave the following error.\n    Argument of type '{ dateStyle: \"full\" | \"medium\"; timeStyle?: \"\" | undefined; }' is not assignable to parameter of type 'DateTimeFormatOptions'.\n      Types of property 'timeStyle' are incompatible.\n        Type '\"\" | undefined' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n          Type '\"\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n  Overload 2 of 2, '(locales?: string | string[] | undefined, options?: DateTimeFormatOptions | undefined): DateTimeFormat', gave the following error.\n    Argument of type '{ dateStyle: \"full\" | \"medium\"; timeStyle?: \"\" | undefined; }' is not assignable to parameter of type 'DateTimeFormatOptions'.\n      Types of property 'timeStyle' are incompatible.\n        Type '\"\" | undefined' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["466"],
          "location": {
            "end": {
              "column": 116,
              "line": 9
            },
            "start": {
              "column": 109,
              "line": 9
            }
          }
        }
      ],
      "source": "import type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport capitalize from './capitalize';\n\n// Stryker Workaround 1. Pointless mutant (no coverage on giveTime: boolean = true).\n// Stryker disable next-line BooleanLiteral\nconst getFormattedDate = (language: LanguageFlag, date: Date, giveTime: boolean = false): string =>\n  capitalize(\n    new Intl.DateTimeFormat(language, { dateStyle: 'full', ...(giveTime ? { dateStyle: 'medium', timeStyle: 'short' } : {}) }).format(date).toString()\n  );\n\nexport default getFormattedDate;\n"
    },
    "src/lib/portable/str/getSlashEnvelope.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4393",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "interop/config/routes.ts(9,35): error TS2554: Expected 0 arguments, but got 1.\ninterop/config/routes.ts(10,29): error TS2554: Expected 0 arguments, but got 1.\ninterop/config/routes.ts(11,26): error TS2554: Expected 0 arguments, but got 1.\ninterop/config/routes.ts(29,3): error TS1360: Type '{ DASHBOARD: string; PATCH_NOTES: string; LANDING_PAGES: undefined; WEBSITE: undefined; BLOG: undefined; }' does not satisfy the expected type 'RoutesRoots'.\n  Types of property 'LANDING_PAGES' are incompatible.\n    Type 'undefined' is not assignable to type 'string'.\nsrc/lib/i18n.ts(29,3): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/lib/str.ts(14,71): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/str.ts(15,48): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/str.ts(16,34): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/str.ts(17,34): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/str.ts(22,46): error TS2339: Property 'startsWith' does not exist on type 'never'.\nsrc/lib/blog/api.ts(166,113): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/lib/blog/api.ts(169,39): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/DashboardSidebar/routesImpl.ts(10,31): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/SitewideNavbar/PatchNotes/routesImpl.ts(10,31): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/SitewideNavbar/routesImpl.ts(11,31): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/SitewideNavbar/routesImpl.ts(15,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/blog/guards/__tests__/postbuild.blogCategoryGuard.mocked_blog_route_root.test.ts(23,7): error TS2322: Type 'string' is not assignable to type 'undefined'.\nsrc/lib/blog/guards/__tests__/postbuild.blogSubcategoryGuard.mocked_blog_route_root.test.ts(23,7): error TS2322: Type 'string' is not assignable to type 'undefined'.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(8,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(9,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(10,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(11,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(15,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/app/error.tsx(11,12): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/components/ui/navbar/SitewideNavbar.tsx(68,63): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/ui/breadcrumbs/custom/HomepageCrumb.tsx(21,47): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/app/[locale]/(pages)/blog/[categ]/[subcateg]/[slug]/page.tsx(42,32): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/components/pages/dashboard/main.tsx(15,13): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/pages/dashboard/bar.tsx(83,13): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/pages/dashboard/foo.tsx(15,13): error TS2322: Type 'undefined' is not assignable to type 'Url'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 3
            },
            "start": {
              "column": 26,
              "line": 3
            }
          }
        },
        {
          "id": "4394",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '/fr/blog/blog-testing-category/fake-s…' to be '/frblogblog-testing-category/fake-sub…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["25"],
          "coveredBy": ["229", "230", "467", "468"],
          "location": {
            "end": {
              "column": 74,
              "line": 3
            },
            "start": {
              "column": 71,
              "line": 3
            }
          }
        }
      ],
      "source": "import surroundString from './surroundString';\n\nconst getSlashEnvelope = (str: string): string => surroundString(str, '/');\nexport default getSlashEnvelope;\n"
    },
    "src/lib/portable/str/indexOfNthOccurrence.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4395",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/portable/str/indexOfNthOccurrence.ts(4,79): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 90,
              "line": 4
            }
          }
        },
        {
          "id": "4396",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["399"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 17,
              "line": 5
            },
            "start": {
              "column": 15,
              "line": 5
            }
          }
        },
        {
          "id": "4397",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 6
            },
            "start": {
              "column": 19,
              "line": 6
            }
          }
        },
        {
          "id": "4398",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= n",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 6
            },
            "start": {
              "column": 19,
              "line": 6
            }
          }
        },
        {
          "id": "4399",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= n",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["399"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 6
            },
            "start": {
              "column": 19,
              "line": 6
            }
          }
        },
        {
          "id": "4400",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 6
            },
            "start": {
              "column": 26,
              "line": 6
            }
          }
        },
        {
          "id": "4401",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["399"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 13
            },
            "start": {
              "column": 31,
              "line": 6
            }
          }
        },
        {
          "id": "4402",
          "mutatorName": "ArithmeticOperator",
          "replacement": "index - 1",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 8
            },
            "start": {
              "column": 41,
              "line": 8
            }
          }
        },
        {
          "id": "4403",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "4404",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "4405",
          "mutatorName": "EqualityOperator",
          "replacement": "index !== -1",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["399"],
          "coveredBy": [
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "163",
            "164",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "191",
            "192",
            "193",
            "229",
            "230",
            "231",
            "232",
            "250",
            "251",
            "254",
            "255",
            "268",
            "269",
            "270",
            "271",
            "272",
            "318",
            "319",
            "366",
            "394",
            "395",
            "399",
            "400",
            "401",
            "402",
            "403",
            "433",
            "434",
            "435"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "4406",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 12
            },
            "start": {
              "column": 19,
              "line": 12
            }
          }
        }
      ],
      "source": "import type { Index, Count } from '@rtm/shared-types/Numbers';\n\n// eslint-disable-next-line no-magic-numbers\nfunction indexOfNthOccurrence(strHaystack: string, needle: string, n: Count): Index | -1 {\n  let index = -1;\n  for (let i = 0; i < n; i++) {\n    // eslint-disable-next-line no-magic-numbers\n    index = strHaystack.indexOf(needle, index + 1);\n    // Stryker Workaround 1. Pointless mutants (out of scope: surviving is expected behavior).\n    // Stryker disable next-line ConditionalExpression,UnaryOperator\n    // eslint-disable-next-line no-magic-numbers\n    if (index === -1) break;\n  }\n  return index;\n}\n\nexport default indexOfNthOccurrence;\n"
    },
    "src/lib/portable/str/surroundString.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4407",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/portable/str/getSlashEnvelope.ts(3,51): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/portable/str/getSlashEnvelope.ts(3,66): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(11,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(12,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(13,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(14,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(20,27): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 2
            },
            "start": {
              "column": 24,
              "line": 1
            }
          }
        },
        {
          "id": "4408",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(!str.startsWith(envelope) ? envelope : '') + str - (!str.endsWith(envelope) ? envelope : '')",
          "statusReason": "src/lib/portable/str/surroundString.ts(2,3): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/portable/str/surroundString.ts(2,3): error TS2322: Type 'number' is not assignable to type 'string'.\nsrc/lib/portable/str/surroundString.ts(2,55): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["229", "230", "445", "446", "467", "468"],
          "location": {
            "end": {
              "column": 96,
              "line": 2
            },
            "start": {
              "column": 3,
              "line": 2
            }
          }
        },
        {
          "id": "4409",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(!str.startsWith(envelope) ? envelope : '') - str",
          "statusReason": "src/lib/portable/str/surroundString.ts(2,3): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/portable/str/surroundString.ts(2,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["229", "230", "445", "446", "467", "468"],
          "location": {
            "end": {
              "column": 52,
              "line": 2
            },
            "start": {
              "column": 3,
              "line": 2
            }
          }
        },
        {
          "id": "4410",
          "mutatorName": "BooleanLiteral",
          "replacement": "str.startsWith(envelope)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": true,
          "killedBy": ["231"],
          "coveredBy": ["229", "230", "445", "446", "467", "468"],
          "location": {
            "end": {
              "column": 29,
              "line": 2
            },
            "start": {
              "column": 4,
              "line": 2
            }
          }
        },
        {
          "id": "4411",
          "mutatorName": "MethodExpression",
          "replacement": "str.endsWith(envelope)",
          "statusReason": "expected '//foo/' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 268,
          "static": true,
          "killedBy": ["467"],
          "coveredBy": ["229", "230", "445", "446", "467", "468"],
          "location": {
            "end": {
              "column": 29,
              "line": 2
            },
            "start": {
              "column": 5,
              "line": 2
            }
          }
        },
        {
          "id": "4412",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Stryker was here!/fr' to be 'Stryker was here!/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 17,
          "static": true,
          "killedBy": ["400"],
          "coveredBy": ["229", "230", "445", "467"],
          "location": {
            "end": {
              "column": 45,
              "line": 2
            },
            "start": {
              "column": 43,
              "line": 2
            }
          }
        },
        {
          "id": "4413",
          "mutatorName": "BooleanLiteral",
          "replacement": "str.endsWith(envelope)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": true,
          "killedBy": ["231"],
          "coveredBy": ["229", "230", "445", "446", "467", "468"],
          "location": {
            "end": {
              "column": 79,
              "line": 2
            },
            "start": {
              "column": 56,
              "line": 2
            }
          }
        },
        {
          "id": "4414",
          "mutatorName": "MethodExpression",
          "replacement": "str.startsWith(envelope)",
          "statusReason": "expected '/foo' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 268,
          "static": true,
          "killedBy": ["467"],
          "coveredBy": ["229", "230", "445", "446", "467", "468"],
          "location": {
            "end": {
              "column": 79,
              "line": 2
            },
            "start": {
              "column": 57,
              "line": 2
            }
          }
        },
        {
          "id": "4415",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": true,
          "killedBy": ["231"],
          "coveredBy": ["229", "445", "467"],
          "location": {
            "end": {
              "column": 95,
              "line": 2
            },
            "start": {
              "column": 93,
              "line": 2
            }
          }
        }
      ],
      "source": "const surroundString = (str: string, envelope: string): string =>\n  (!str.startsWith(envelope) ? envelope : '') + str + (!str.endsWith(envelope) ? envelope : '');\n\nexport default surroundString;\n"
    },
    "src/lib/portable/tailwind/cn.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4416",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 9
            },
            "start": {
              "column": 12,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { ClassValue } from 'clsx';\n\nimport { twMerge } from 'tailwind-merge';\nimport { clsx } from 'clsx';\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs));\nexport default cn;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/portable/tailwind/getBreakpoint.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4417",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/portable/tailwind/getBreakpoint.ts(7,83): error TS2532: Object is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 6
            },
            "start": {
              "column": 20,
              "line": 6
            }
          }
        },
        {
          "id": "4418",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/hooks/useIsLargeScreen.ts(8,68): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/tailwind/__tests__/prebuild.getBreakpoint.test.ts(21,26): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/tailwind/__tests__/prebuild.getBreakpoint.test.ts(23,26): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 109,
              "line": 8
            },
            "start": {
              "column": 23,
              "line": 8
            }
          }
        }
      ],
      "source": "import type { TailwindScreensBreakpoint } from '@/types/Tailwind';\nimport type { PxValue } from '@rtm/shared-types/Numbers';\n\nimport config from 'tailwind.config';\n\nconst getScreens = () => config.theme.screens;\n\nconst getBreakpoint = (breakpoint: TailwindScreensBreakpoint): PxValue => parseInt(getScreens()[breakpoint]);\n\nexport default getBreakpoint;\n"
    },
    "src/lib/portable/typescript/getEnumKeys.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4419",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "interop/config/i18n.ts(30,14): error TS2322: Type 'undefined' is not assignable to type '(\"fr\" | \"en\")[]'.\ninterop/config/i18n.ts(30,54): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(12,32): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(13,11): error TS2322: Type 'string[]' is not assignable to type 'undefined'.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(19,11): error TS2322: Type 'undefined' is not assignable to type 'never[]'.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(19,41): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 2
            },
            "start": {
              "column": 21,
              "line": 1
            }
          }
        },
        {
          "id": "4420",
          "mutatorName": "MethodExpression",
          "replacement": "Object.keys(enumerableObject)",
          "statusReason": "expected [ '0', '1', 'foo', 'bar' ] to strictly equal [ 'foo', 'bar' ]",
          "status": "Killed",
          "testsCompleted": 391,
          "static": true,
          "killedBy": ["460"],
          "coveredBy": ["460", "461"],
          "location": {
            "end": {
              "column": 68,
              "line": 2
            },
            "start": {
              "column": 3,
              "line": 2
            }
          }
        },
        {
          "id": "4421",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected null to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["399"],
          "coveredBy": ["460", "461"],
          "location": {
            "end": {
              "column": 67,
              "line": 2
            },
            "start": {
              "column": 40,
              "line": 2
            }
          }
        }
      ],
      "source": "const getEnumKeys = <T extends Record<string, unknown>>(enumerableObject: T): (keyof T)[] =>\n  Object.keys(enumerableObject).filter((key) => isNaN(Number(key)));\n\nexport default getEnumKeys;\n"
    },
    "src/lib/str.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4422",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/str.ts(15,110): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["229", "230"],
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 118,
              "line": 15
            }
          }
        },
        {
          "id": "4423",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "4424",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "4425",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18n !== _href",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["230"],
          "coveredBy": ["229", "230"],
          "location": {
            "end": {
              "column": 36,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "4426",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229"],
          "location": {
            "end": {
              "column": 49,
              "line": 22
            },
            "start": {
              "column": 45,
              "line": 22
            }
          }
        },
        {
          "id": "4427",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["230"],
          "coveredBy": ["229", "230"],
          "location": {
            "end": {
              "column": 63,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "4428",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "230"],
          "location": {
            "end": {
              "column": 63,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "4429",
          "mutatorName": "LogicalOperator",
          "replacement": "_href !== _root || pathnameWithoutI18n.startsWith(_href)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["230"],
          "coveredBy": ["229", "230"],
          "location": {
            "end": {
              "column": 63,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "4430",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["230"],
          "coveredBy": ["229", "230"],
          "location": {
            "end": {
              "column": 22,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "4431",
          "mutatorName": "EqualityOperator",
          "replacement": "_href === _root",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229", "230"],
          "location": {
            "end": {
              "column": 22,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "4432",
          "mutatorName": "MethodExpression",
          "replacement": "pathnameWithoutI18n.endsWith(_href)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229"],
          "location": {
            "end": {
              "column": 63,
              "line": 23
            },
            "start": {
              "column": 26,
              "line": 23
            }
          }
        },
        {
          "id": "4433",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["229"],
          "coveredBy": ["229"],
          "location": {
            "end": {
              "column": 76,
              "line": 23
            },
            "start": {
              "column": 72,
              "line": 23
            }
          }
        },
        {
          "id": "4434",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["230"],
          "coveredBy": ["230"],
          "location": {
            "end": {
              "column": 15,
              "line": 24
            },
            "start": {
              "column": 10,
              "line": 24
            }
          }
        },
        {
          "id": "4435",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/str.ts(27,75): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 2,
              "line": 44
            },
            "start": {
              "column": 83,
              "line": 27
            }
          }
        },
        {
          "id": "4436",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/str.ts(29,31): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/str.ts(30,27): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 83,
              "line": 28
            },
            "start": {
              "column": 33,
              "line": 28
            }
          }
        },
        {
          "id": "4437",
          "mutatorName": "Regex",
          "replacement": "/\\/+/",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 78,
              "line": 28
            },
            "start": {
              "column": 72,
              "line": 28
            }
          }
        },
        {
          "id": "4438",
          "mutatorName": "Regex",
          "replacement": "/\\/$/",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 78,
              "line": 28
            },
            "start": {
              "column": 72,
              "line": 28
            }
          }
        },
        {
          "id": "4439",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 80,
              "line": 28
            }
          }
        },
        {
          "id": "4440",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/str.ts(30,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/str.ts(30,21): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 92,
              "line": 30
            },
            "start": {
              "column": 30,
              "line": 30
            }
          }
        },
        {
          "id": "4441",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["232"],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 26,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "4442",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 26,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "4443",
          "mutatorName": "EqualityOperator",
          "replacement": "_pathname !== _href",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 26,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "4444",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["231"],
          "coveredBy": ["231"],
          "location": {
            "end": {
              "column": 39,
              "line": 31
            },
            "start": {
              "column": 35,
              "line": 31
            }
          }
        },
        {
          "id": "4445",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/str.ts(33,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/str.ts(33,28): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 114,
              "line": 33
            },
            "start": {
              "column": 44,
              "line": 33
            }
          }
        },
        {
          "id": "4446",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/str.ts(34,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/str.ts(34,35): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["231", "232"],
          "location": {
            "end": {
              "column": 132,
              "line": 34
            },
            "start": {
              "column": 58,
              "line": 34
            }
          }
        },
        {
          "id": "4447",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 41
            },
            "start": {
              "column": 5,
              "line": 39
            }
          }
        },
        {
          "id": "4448",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 41
            },
            "start": {
              "column": 5,
              "line": 39
            }
          }
        },
        {
          "id": "4449",
          "mutatorName": "LogicalOperator",
          "replacement": "((pathnameI18nFlag === DEFAULT_LANGUAGE || pathnameI18nFlag === null) && pathnameWithoutI18nflag === _href || hrefI18nFlag === DEFAULT_LANGUAGE && pathnameWithoutI18nflag === hrefWithoutI18nFlag) && hrefI18nFlag === null && (pathnameWithoutI18nflag === href || pathnameWithoutI18nflag === _href)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 41
            },
            "start": {
              "column": 5,
              "line": 39
            }
          }
        },
        {
          "id": "4450",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 40
            },
            "start": {
              "column": 5,
              "line": 39
            }
          }
        },
        {
          "id": "4451",
          "mutatorName": "LogicalOperator",
          "replacement": "(pathnameI18nFlag === DEFAULT_LANGUAGE || pathnameI18nFlag === null) && pathnameWithoutI18nflag === _href && hrefI18nFlag === DEFAULT_LANGUAGE && pathnameWithoutI18nflag === hrefWithoutI18nFlag",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 40
            },
            "start": {
              "column": 5,
              "line": 39
            }
          }
        },
        {
          "id": "4452",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 39
            },
            "start": {
              "column": 6,
              "line": 39
            }
          }
        },
        {
          "id": "4453",
          "mutatorName": "LogicalOperator",
          "replacement": "pathnameI18nFlag === DEFAULT_LANGUAGE || pathnameI18nFlag === null || pathnameWithoutI18nflag === _href",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 39
            },
            "start": {
              "column": 6,
              "line": 39
            }
          }
        },
        {
          "id": "4454",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "4455",
          "mutatorName": "LogicalOperator",
          "replacement": "pathnameI18nFlag === DEFAULT_LANGUAGE && pathnameI18nFlag === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "4456",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "4457",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameI18nFlag !== DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "4458",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 39
            },
            "start": {
              "column": 48,
              "line": 39
            }
          }
        },
        {
          "id": "4459",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameI18nFlag !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 39
            },
            "start": {
              "column": 48,
              "line": 39
            }
          }
        },
        {
          "id": "4460",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 39
            },
            "start": {
              "column": 78,
              "line": 39
            }
          }
        },
        {
          "id": "4461",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18nflag !== _href",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 39
            },
            "start": {
              "column": 78,
              "line": 39
            }
          }
        },
        {
          "id": "4462",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 40
            },
            "start": {
              "column": 6,
              "line": 40
            }
          }
        },
        {
          "id": "4463",
          "mutatorName": "LogicalOperator",
          "replacement": "hrefI18nFlag === DEFAULT_LANGUAGE || pathnameWithoutI18nflag === hrefWithoutI18nFlag",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 40
            },
            "start": {
              "column": 6,
              "line": 40
            }
          }
        },
        {
          "id": "4464",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 40
            },
            "start": {
              "column": 6,
              "line": 40
            }
          }
        },
        {
          "id": "4465",
          "mutatorName": "EqualityOperator",
          "replacement": "hrefI18nFlag !== DEFAULT_LANGUAGE",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 40
            },
            "start": {
              "column": 6,
              "line": 40
            }
          }
        },
        {
          "id": "4466",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 40
            },
            "start": {
              "column": 43,
              "line": 40
            }
          }
        },
        {
          "id": "4467",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18nflag !== hrefWithoutI18nFlag",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 40
            },
            "start": {
              "column": 43,
              "line": 40
            }
          }
        },
        {
          "id": "4468",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 41
            },
            "start": {
              "column": 6,
              "line": 41
            }
          }
        },
        {
          "id": "4469",
          "mutatorName": "LogicalOperator",
          "replacement": "hrefI18nFlag === null || pathnameWithoutI18nflag === href || pathnameWithoutI18nflag === _href",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 41
            },
            "start": {
              "column": 6,
              "line": 41
            }
          }
        },
        {
          "id": "4470",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 41
            },
            "start": {
              "column": 6,
              "line": 41
            }
          }
        },
        {
          "id": "4471",
          "mutatorName": "EqualityOperator",
          "replacement": "hrefI18nFlag !== null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 41
            },
            "start": {
              "column": 6,
              "line": 41
            }
          }
        },
        {
          "id": "4472",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 41
            },
            "start": {
              "column": 32,
              "line": 41
            }
          }
        },
        {
          "id": "4473",
          "mutatorName": "LogicalOperator",
          "replacement": "pathnameWithoutI18nflag === href && pathnameWithoutI18nflag === _href",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 41
            },
            "start": {
              "column": 32,
              "line": 41
            }
          }
        },
        {
          "id": "4474",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 41
            },
            "start": {
              "column": 32,
              "line": 41
            }
          }
        },
        {
          "id": "4475",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18nflag !== href",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 41
            },
            "start": {
              "column": 32,
              "line": 41
            }
          }
        },
        {
          "id": "4476",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 41
            },
            "start": {
              "column": 68,
              "line": 41
            }
          }
        },
        {
          "id": "4477",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18nflag !== _href",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 101,
              "line": 41
            },
            "start": {
              "column": 68,
              "line": 41
            }
          }
        }
      ],
      "source": "import type { AppPath, Href } from '@rtm/shared-types/Next';\n\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { compareAlphabeticallyDesc, compareAlphabeticallyAsc } from './portable/str/compareAlphabetically';\nimport { getPathnameWithoutI18nFlag, getPathnameMaybeI18nFlag } from './i18n';\nimport indexOfNthOccurrence from './portable/str/indexOfNthOccurrence';\nimport getFormattedDate from './portable/str/getFormattedDate';\nimport getSlashEnvelope from './portable/str/getSlashEnvelope';\nimport countCharacter from './portable/str/countCharacter';\nimport endsWithChars from './portable/str/endsWithChar';\nimport capitalize from './portable/str/capitalize';\n\nexport function hrefMatchesPathname(href: AppPath, pathname: AppPath, root: AppPath = ROUTES_ROOTS.WEBSITE): boolean {\n  const pathnameWithoutI18n = getSlashEnvelope(getPathnameWithoutI18nFlag(pathname));\n  const _href = getSlashEnvelope(href);\n  const _root = getSlashEnvelope(root);\n\n  // Stryker Workaround 1. Tautology is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (pathnameWithoutI18n === _href) return true;\n  if (_href !== _root && pathnameWithoutI18n.startsWith(_href)) return true;\n  return false;\n}\n\nexport function hrefAndPathnameExactMatch(href: Href, pathname: AppPath): boolean {\n  const removeTrailingSlashes = (path: AppPath | Href) => path.replace(/\\/+$/, '');\n\n  const [_pathname, _href] = [removeTrailingSlashes(pathname), removeTrailingSlashes(href)];\n  if (_pathname === _href) return true;\n\n  const [pathnameI18nFlag, hrefI18nFlag] = [getPathnameMaybeI18nFlag(_pathname), getPathnameMaybeI18nFlag(_href)];\n  const [pathnameWithoutI18nflag, hrefWithoutI18nFlag] = [getPathnameWithoutI18nFlag(_pathname), getPathnameWithoutI18nFlag(_href)];\n\n  // Stryker Workaround 1. This code should be refactored, mutants analysis is unusable atm.\n  // Stryker disable all\n  return (\n    ((pathnameI18nFlag === DEFAULT_LANGUAGE || pathnameI18nFlag === null) && pathnameWithoutI18nflag === _href) ||\n    (hrefI18nFlag === DEFAULT_LANGUAGE && pathnameWithoutI18nflag === hrefWithoutI18nFlag) ||\n    (hrefI18nFlag === null && (pathnameWithoutI18nflag === href || pathnameWithoutI18nflag === _href))\n  );\n  // Stryker restore all\n}\n\nexport {\n  compareAlphabeticallyDesc,\n  compareAlphabeticallyAsc,\n  indexOfNthOccurrence,\n  getFormattedDate,\n  getSlashEnvelope,\n  countCharacter,\n  endsWithChars,\n  capitalize\n};\n"
    },
    "src/meta/discordapi.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4478",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 32
            },
            "start": {
              "column": 61,
              "line": 18
            }
          }
        },
        {
          "id": "4479",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 26
            },
            "start": {
              "column": 9,
              "line": 19
            }
          }
        },
        {
          "id": "4480",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 21
            },
            "start": {
              "column": 21,
              "line": 21
            }
          }
        },
        {
          "id": "4481",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 24
            },
            "start": {
              "column": 65,
              "line": 21
            }
          }
        },
        {
          "id": "4482",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 22
            },
            "start": {
              "column": 20,
              "line": 22
            }
          }
        },
        {
          "id": "4483",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 22
            },
            "start": {
              "column": 37,
              "line": 22
            }
          }
        },
        {
          "id": "4484",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 23
            },
            "start": {
              "column": 19,
              "line": 23
            }
          }
        },
        {
          "id": "4485",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 31
            },
            "start": {
              "column": 13,
              "line": 26
            }
          }
        },
        {
          "id": "4486",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "4487",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "4488",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 28
            },
            "start": {
              "column": 29,
              "line": 28
            }
          }
        },
        {
          "id": "4489",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Math.random() / MAX_DEFAULT_AVATAR_ID",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 29
            },
            "start": {
              "column": 34,
              "line": 29
            }
          }
        },
        {
          "id": "4490",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 108,
              "line": 30
            },
            "start": {
              "column": 14,
              "line": 30
            }
          }
        },
        {
          "id": "4491",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 30
            },
            "start": {
              "column": 24,
              "line": 30
            }
          }
        },
        {
          "id": "4492",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 30
            },
            "start": {
              "column": 93,
              "line": 30
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { Href } from '@rtm/shared-types/Next';\n\nimport { keysFactory, get } from '@/cache/generic';\n\ntype FreshProfile = { epicFail?: boolean; avatar: string; id: string };\n\nexport interface IDiscordApi {\n  getFreshProfile(sub: string): Promise<FreshProfile>;\n}\n\nconst MAX_DEFAULT_AVATAR_ID = 6;\n\nclass DiscordApi implements IDiscordApi {\n  async getFreshProfile(sub: string): Promise<FreshProfile> {\n    try {\n      return await (\n        await fetch(`https://discord.com/api/v10/users/${sub}`, {\n          headers: { Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}` },\n          method: 'GET'\n        })\n      ).json();\n    } catch {\n      const cachedURL = get(keysFactory.discordProfilePicture(sub)) as MaybeNull<Href>;\n      if (cachedURL) return { avatar: cachedURL, id: sub };\n      const randint = Math.floor(Math.random() * MAX_DEFAULT_AVATAR_ID);\n      return { avatar: `https://cdn.discordapp.com/embed/avatars/${randint}.png`, epicFail: true, id: sub };\n    }\n  }\n}\n\nconst DISCORD_API = new DiscordApi();\nexport default DISCORD_API;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middleware.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4493",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 7
            },
            "start": {
              "column": 23,
              "line": 7
            }
          }
        },
        {
          "id": "4494",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 7
            },
            "start": {
              "column": 34,
              "line": 7
            }
          }
        },
        {
          "id": "4495",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 7
            },
            "start": {
              "column": 35,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport { APP_PROTECTED_PATHS, VIP_SHORTCUTS } from '##/config/auth';\nimport { withAuthMiddlewaresChain } from '@/middlewaresChain';\n\nexport const config = { matcher: ['/((?!api|static|_next|.*\\\\..*).*)'] };\n\nexport { APP_PROTECTED_PATHS, VIP_SHORTCUTS };\nexport default withAuthMiddlewaresChain;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middlewares/withI18n.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4496",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 19
            },
            "start": {
              "column": 24,
              "line": 19
            }
          }
        },
        {
          "id": "4497",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 22
            },
            "start": {
              "column": 37,
              "line": 22
            }
          }
        },
        {
          "id": "4498",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 22
            },
            "start": {
              "column": 43,
              "line": 22
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { I18nMiddlewareConfig } from '@rtm/shared-types/I18n';\nimport type { MiddlewareFactory } from '@rtm/shared-types/Next';\nimport type { NextResponse, NextRequest } from 'next/server';\n\nimport { createI18nMiddleware } from 'next-international/middleware';\nimport { DEFAULT_LANGUAGE, LANGUAGES } from '##/config/i18n';\n\nexport const I18N_MIDDLEWARE_CONFIG: I18nMiddlewareConfig = {\n  urlMappingStrategy: 'rewriteDefault',\n  defaultLocale: DEFAULT_LANGUAGE,\n  locales: LANGUAGES\n} as const;\n\nconst i18nMiddlewareInstance = createI18nMiddleware(I18N_MIDDLEWARE_CONFIG);\n\nconst i18nMiddleware = (request: NextRequest): NextResponse => i18nMiddlewareInstance(request);\n\n// eslint-disable-next-line require-await\nconst withI18n: MiddlewareFactory = () => async (request: NextRequest) => i18nMiddleware(request);\n\nexport default withI18n;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middlewares/withProtectedRoutes.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4499",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 62,
              "line": 16
            }
          }
        },
        {
          "id": "4500",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 18
            },
            "start": {
              "column": 54,
              "line": 18
            }
          }
        },
        {
          "id": "4501",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 41,
              "line": 20
            }
          }
        },
        {
          "id": "4502",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 21
            },
            "start": {
              "column": 12,
              "line": 21
            }
          }
        },
        {
          "id": "4503",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 21
            },
            "start": {
              "column": 81,
              "line": 21
            }
          }
        },
        {
          "id": "4504",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 88,
              "line": 25
            }
          }
        },
        {
          "id": "4505",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 27
            },
            "start": {
              "column": 54,
              "line": 27
            }
          }
        },
        {
          "id": "4506",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 32
            },
            "start": {
              "column": 41,
              "line": 29
            }
          }
        },
        {
          "id": "4507",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 30
            },
            "start": {
              "column": 12,
              "line": 30
            }
          }
        },
        {
          "id": "4508",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 31
            },
            "start": {
              "column": 16,
              "line": 31
            }
          }
        },
        {
          "id": "4509",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 31
            },
            "start": {
              "column": 30,
              "line": 31
            }
          }
        },
        {
          "id": "4510",
          "mutatorName": "BooleanLiteral",
          "replacement": "Boolean(token)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 31
            },
            "start": {
              "column": 45,
              "line": 31
            }
          }
        },
        {
          "id": "4511",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 48,
              "line": 37
            }
          }
        },
        {
          "id": "4512",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 125,
              "line": 37
            }
          }
        },
        {
          "id": "4513",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "4514",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "4515",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 42
            },
            "start": {
              "column": 7,
              "line": 42
            }
          }
        },
        {
          "id": "4516",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 42
            },
            "start": {
              "column": 7,
              "line": 42
            }
          }
        },
        {
          "id": "4517",
          "mutatorName": "EqualityOperator",
          "replacement": "maybeShortcut === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 42
            },
            "start": {
              "column": 7,
              "line": 42
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { NextFetchEvent, NextMiddleware, NextRequest } from 'next/server';\nimport type { MiddlewareFactory, AppPath } from '@rtm/shared-types/Next';\nimport type { NextRequestWithAuth } from 'next-auth/middleware';\n\nimport getAuthenticatedUserRouteShortcut from '@/lib/misc/getAuthenticatedUserRouteShortcut';\nimport isProtectedRoute from '@/lib/misc/isProtectedRoute';\nimport { mainMiddlewaresChain } from '@/middlewaresChain';\nimport { buildPathFromParts } from '@rtm/shared-lib/str';\nimport { getMaybeI18nFlagFromRequest } from '@/lib/next';\nimport { withAuth } from 'next-auth/middleware';\nimport ROUTES_ROOTS from '##/config/routes';\n\nfunction protectedRoutesAuthMiddleware(request: NextRequest) {\n  const maybeI18nFlag = getMaybeI18nFlagFromRequest(request);\n  const i18nPrefix = maybeI18nFlag ? maybeI18nFlag : '';\n\n  return withAuth(mainMiddlewaresChain, {\n    pages: { signIn: buildPathFromParts(i18nPrefix, ROUTES_ROOTS.LANDING_PAGES, 'sign-up') }\n  });\n}\n\nfunction authenticatedShortcutsAuthMiddleware(request: NextRequest, shortcut: AppPath) {\n  const maybeI18nFlag = getMaybeI18nFlagFromRequest(request);\n  const i18nPrefix = maybeI18nFlag ? maybeI18nFlag : '';\n\n  return withAuth(mainMiddlewaresChain, {\n    pages: { signIn: buildPathFromParts(i18nPrefix, shortcut) },\n    callbacks: { authorized: ({ token }) => !Boolean(token) }\n  });\n}\n\n// {ToDo} Rewrite this when we'll get rid of Next Auth in this project\n// https://github.com/Tirraa/dashboard_rtm/issues/130\nconst withProtectedRoutes: MiddlewareFactory = (next: NextMiddleware) => async (req: NextRequest, _next: NextFetchEvent) => {\n  const request = req as NextRequestWithAuth;\n  if (isProtectedRoute(request.nextUrl.pathname)) return protectedRoutesAuthMiddleware(request)(request, _next);\n\n  const maybeShortcut = getAuthenticatedUserRouteShortcut(req.nextUrl.pathname);\n  if (maybeShortcut !== undefined) return authenticatedShortcutsAuthMiddleware(request, maybeShortcut)(request, _next);\n\n  const res = await next(request, _next);\n  return res;\n};\n\nexport default withProtectedRoutes;\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middlewaresChain.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4518",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 12
            },
            "start": {
              "column": 41,
              "line": 12
            }
          }
        },
        {
          "id": "4519",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 13
            },
            "start": {
              "column": 46,
              "line": 13
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n\nimport type { MiddlewareFactory } from '@rtm/shared-types/Next';\n\nimport withProtectedRoutes from '@/middlewares/withProtectedRoutes';\nimport { stackMiddlewares } from '@/lib/next';\nimport withI18n from '@/middlewares/withI18n';\n\n// {ToDo} Put withI18n at head when Next International's middleware will be properly chainable (Next International V2)\n// https://github.com/QuiiBz/next-international/issues/359\nconst MAIN_CHAIN: MiddlewareFactory[] = [withI18n];\nconst WITH_AUTH_CHAIN: MiddlewareFactory[] = [withProtectedRoutes, ...MAIN_CHAIN];\n\nexport const mainMiddlewaresChain = stackMiddlewares(MAIN_CHAIN);\nexport const withAuthMiddlewaresChain = stackMiddlewares(WITH_AUTH_CHAIN);\n\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/types/adapters/postbuild.LpLanguageAndSlugPair.test-d.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4520",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 18
            },
            "start": {
              "column": 10,
              "line": 18
            }
          }
        },
        {
          "id": "4521",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 95
            },
            "start": {
              "column": 59,
              "line": 18
            }
          }
        },
        {
          "id": "4522",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 19
            },
            "start": {
              "column": 6,
              "line": 19
            }
          }
        },
        {
          "id": "4523",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 23
            },
            "start": {
              "column": 45,
              "line": 19
            }
          }
        },
        {
          "id": "4524",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 25
            },
            "start": {
              "column": 6,
              "line": 25
            }
          }
        },
        {
          "id": "4525",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 29
            },
            "start": {
              "column": 59,
              "line": 25
            }
          }
        },
        {
          "id": "4526",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 31
            },
            "start": {
              "column": 6,
              "line": 31
            }
          }
        },
        {
          "id": "4527",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 58
            },
            "start": {
              "column": 53,
              "line": 31
            }
          }
        },
        {
          "id": "4528",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 60
            },
            "start": {
              "column": 6,
              "line": 60
            }
          }
        },
        {
          "id": "4529",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 94
            },
            "start": {
              "column": 45,
              "line": 60
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\n// Error will not be thrown in test ctx\nimport type { DefaultLanguageToken } from '@rtm/generated';\n\n// Error will not be thrown in test ctx\nimport { DEFAULT_LANGUAGE as DEFAULT_LANGUAGE_VALUE } from '##/config/i18n';\n// Error will not be thrown in test ctx\nimport { INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { expectAssignable, expectType } from 'jest-tsd';\nimport { describe, it } from 'vitest';\n\nimport type LpLanguageAndSlugPair from './LpLanguageAndSlugPair';\nimport type { IndexToken } from '../Page';\n\nconst _ = {};\n\ndescribe('LpLanguageAndSlugPair (Valid structure)', () => {\n  it('should pass (empty structure)', () => {\n    const fake = _ as LpLanguageAndSlugPair<{}>;\n\n    expectType<never>(fake);\n  });\n\n  it('should pass (mono-empty-category structure)', () => {\n    const fake = _ as LpLanguageAndSlugPair<{ 'dummy-category': {} }>;\n\n    expectType<never>(fake);\n  });\n\n  it('should pass (mono-category structure)', () => {\n    const fake = _ as LpLanguageAndSlugPair<{\n      'landing-pages-testing-category': {\n        [_ in DefaultLanguageToken]:\n          | 'landing-pages-testing-category-default-language-exclusivity'\n          | 'landing-pages-testing-category-fake-draft-lp-00'\n          | `landing-pages-testing-category-${IndexToken}`\n          | 'landing-pages-testing-category-fake-lp-00';\n      } & {\n        en:\n          | 'landing-pages-testing-category-fake-draft-lp-00'\n          | `landing-pages-testing-category-${IndexToken}`\n          | 'landing-pages-testing-category-fake-lp-00';\n      };\n    }>;\n\n    expectAssignable<typeof fake>({\n      slug: 'landing-pages-testing-category-default-language-exclusivity',\n      lang: DEFAULT_LANGUAGE_VALUE\n    } as const);\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-draft-lp-00', lang: DEFAULT_LANGUAGE_VALUE } as const);\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-lp-00', lang: DEFAULT_LANGUAGE_VALUE } as const);\n    expectAssignable<typeof fake>({ slug: `landing-pages-testing-category-${INDEX_TOKEN}`, lang: DEFAULT_LANGUAGE_VALUE } as const);\n\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-draft-lp-00', lang: 'en' } as const);\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-lp-00', lang: 'en' } as const);\n    expectAssignable<typeof fake>({ slug: `landing-pages-testing-category-${INDEX_TOKEN}`, lang: 'en' } as const);\n  });\n\n  it('should pass (mixed structure)', () => {\n    const fake = _ as LpLanguageAndSlugPair<{\n      'landing-pages-testing-category': {\n        [_ in DefaultLanguageToken]:\n          | 'landing-pages-testing-category-default-language-exclusivity'\n          | 'landing-pages-testing-category-fake-draft-lp-00'\n          | `landing-pages-testing-category-${IndexToken}`\n          | 'landing-pages-testing-category-fake-lp-00';\n      } & {\n        en:\n          | 'landing-pages-testing-category-fake-draft-lp-00'\n          | `landing-pages-testing-category-${IndexToken}`\n          | 'landing-pages-testing-category-fake-lp-00';\n      };\n      'dummy-category': {\n        en: 'dummy-category-en-exclusivity' | 'dummy-category-lp-00';\n      } & {\n        [_ in DefaultLanguageToken]: 'dummy-category-lp-00';\n      };\n    }>;\n\n    expectAssignable<typeof fake>({ slug: 'dummy-category-lp-00', lang: DEFAULT_LANGUAGE_VALUE } as const);\n\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-default-language-exclusivity', lang: DEFAULT_LANGUAGE_VALUE } as const);\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-draft-lp-00', lang: DEFAULT_LANGUAGE_VALUE } as const);\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-lp-00', lang: DEFAULT_LANGUAGE_VALUE } as const);\n    expectAssignable<typeof fake>({ slug: `landing-pages-testing-category-${INDEX_TOKEN}`, lang: DEFAULT_LANGUAGE_VALUE } as const);\n\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-draft-lp-00', lang: 'en' } as const);\n    expectAssignable<typeof fake>({ slug: 'landing-pages-testing-category-fake-lp-00', lang: 'en' } as const);\n    expectAssignable<typeof fake>({ slug: `landing-pages-testing-category-${INDEX_TOKEN}`, lang: 'en' } as const);\n\n    expectAssignable<typeof fake>({ slug: 'dummy-category-en-exclusivity', lang: 'en' } as const);\n    expectAssignable<typeof fake>({ slug: 'dummy-category-lp-00', lang: 'en' } as const);\n  });\n});\n\n// Stryker restore all\n"
    },
    "src/types/adapters/postbuild.PageAdapter.test-d.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4530",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 17
            },
            "start": {
              "column": 74,
              "line": 17
            }
          }
        },
        {
          "id": "4531",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 20
            },
            "start": {
              "column": 10,
              "line": 20
            }
          }
        },
        {
          "id": "4532",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 92
            },
            "start": {
              "column": 60,
              "line": 20
            }
          }
        },
        {
          "id": "4533",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 21
            },
            "start": {
              "column": 6,
              "line": 21
            }
          }
        },
        {
          "id": "4534",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 66,
              "line": 21
            }
          }
        },
        {
          "id": "4535",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 39
            },
            "start": {
              "column": 6,
              "line": 39
            }
          }
        },
        {
          "id": "4536",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 55
            },
            "start": {
              "column": 77,
              "line": 39
            }
          }
        },
        {
          "id": "4537",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 57
            },
            "start": {
              "column": 6,
              "line": 57
            }
          }
        },
        {
          "id": "4538",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 73
            },
            "start": {
              "column": 87,
              "line": 57
            }
          }
        },
        {
          "id": "4539",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 75
            },
            "start": {
              "column": 6,
              "line": 75
            }
          }
        },
        {
          "id": "4540",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 91
            },
            "start": {
              "column": 82,
              "line": 75
            }
          }
        },
        {
          "id": "4541",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 94
            },
            "start": {
              "column": 10,
              "line": 94
            }
          }
        },
        {
          "id": "4542",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 166
            },
            "start": {
              "column": 60,
              "line": 94
            }
          }
        },
        {
          "id": "4543",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 95
            },
            "start": {
              "column": 6,
              "line": 95
            }
          }
        },
        {
          "id": "4544",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 111
            },
            "start": {
              "column": 56,
              "line": 95
            }
          }
        },
        {
          "id": "4545",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 113
            },
            "start": {
              "column": 6,
              "line": 113
            }
          }
        },
        {
          "id": "4546",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 129
            },
            "start": {
              "column": 67,
              "line": 113
            }
          }
        },
        {
          "id": "4547",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 131
            },
            "start": {
              "column": 6,
              "line": 131
            }
          }
        },
        {
          "id": "4548",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 147
            },
            "start": {
              "column": 77,
              "line": 131
            }
          }
        },
        {
          "id": "4549",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 149
            },
            "start": {
              "column": 6,
              "line": 149
            }
          }
        },
        {
          "id": "4550",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 165
            },
            "start": {
              "column": 72,
              "line": 149
            }
          }
        },
        {
          "id": "4551",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 168
            },
            "start": {
              "column": 10,
              "line": 168
            }
          }
        },
        {
          "id": "4552",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 240
            },
            "start": {
              "column": 59,
              "line": 168
            }
          }
        },
        {
          "id": "4553",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 169
            },
            "start": {
              "column": 6,
              "line": 169
            }
          }
        },
        {
          "id": "4554",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 185
            },
            "start": {
              "column": 65,
              "line": 169
            }
          }
        },
        {
          "id": "4555",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 187
            },
            "start": {
              "column": 6,
              "line": 187
            }
          }
        },
        {
          "id": "4556",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 203
            },
            "start": {
              "column": 76,
              "line": 187
            }
          }
        },
        {
          "id": "4557",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 205
            },
            "start": {
              "column": 6,
              "line": 205
            }
          }
        },
        {
          "id": "4558",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 221
            },
            "start": {
              "column": 86,
              "line": 205
            }
          }
        },
        {
          "id": "4559",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 223
            },
            "start": {
              "column": 6,
              "line": 223
            }
          }
        },
        {
          "id": "4560",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 239
            },
            "start": {
              "column": 81,
              "line": 223
            }
          }
        },
        {
          "id": "4561",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 242
            },
            "start": {
              "column": 10,
              "line": 242
            }
          }
        },
        {
          "id": "4562",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 260
            },
            "start": {
              "column": 91,
              "line": 242
            }
          }
        },
        {
          "id": "4563",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 243
            },
            "start": {
              "column": 6,
              "line": 243
            }
          }
        },
        {
          "id": "4564",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 259
            },
            "start": {
              "column": 87,
              "line": 243
            }
          }
        },
        {
          "id": "4565",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 262
            },
            "start": {
              "column": 10,
              "line": 262
            }
          }
        },
        {
          "id": "4566",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 280
            },
            "start": {
              "column": 90,
              "line": 262
            }
          }
        },
        {
          "id": "4567",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 263
            },
            "start": {
              "column": 6,
              "line": 263
            }
          }
        },
        {
          "id": "4568",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 279
            },
            "start": {
              "column": 96,
              "line": 263
            }
          }
        },
        {
          "id": "4569",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 282
            },
            "start": {
              "column": 10,
              "line": 282
            }
          }
        },
        {
          "id": "4570",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 300
            },
            "start": {
              "column": 91,
              "line": 282
            }
          }
        },
        {
          "id": "4571",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 283
            },
            "start": {
              "column": 6,
              "line": 283
            }
          }
        },
        {
          "id": "4572",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 299
            },
            "start": {
              "column": 97,
              "line": 283
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\n// Error will not be thrown in test ctx\nimport type { DefaultLanguage } from '##/config/i18n';\n\nimport { describe, it } from 'vitest';\nimport { expectType } from 'jest-tsd';\n\nimport type { TopLevelRoot } from './PageAdapter';\nimport type PageAdapter from './PageAdapter';\nimport type { IndexToken } from '../Page';\n\nconst _ = {};\n\n// Error will not be thrown in test ctx\nconst validAlternativeLanguage: Exclude<LanguageFlag, DefaultLanguage> = 'en';\ntype ValidAlternativeLanguage = typeof validAlternativeLanguage;\n\ndescribe('PageAdapter (Valid alternative language)', () => {\n  it('should pass (Valid alternative language narrowing)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${ValidAlternativeLanguage}/testing-pages-root/fake-draft-00`;\n      url: `/${ValidAlternativeLanguage}/testing-pages-root/fake-draft-00`;\n      pathWithoutHead: 'testing-pages-root/fake-draft-00';\n      nestingLevelTwo: 'testing-pages-root';\n      head: ValidAlternativeLanguage;\n      tail: 'fake-draft-00';\n    }>;\n\n    expectType<{\n      url: `/${ValidAlternativeLanguage}/testing-pages-root/fake-draft-00`;\n      path: 'testing-pages-root/fake-draft-00';\n      lang: ValidAlternativeLanguage;\n      root: 'testing-pages-root';\n    }>(fake);\n  });\n\n  it('should pass (Valid alternative language narrowing, deep path)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${ValidAlternativeLanguage}/nesting-1/nesting-2/page-00`;\n      url: `/${ValidAlternativeLanguage}/nesting-1/nesting-2/page-00`;\n      pathWithoutHead: 'nesting-1/nesting-2/page-00';\n      head: ValidAlternativeLanguage;\n      nestingLevelTwo: 'nesting-1';\n      tail: 'page-00';\n    }>;\n\n    expectType<{\n      url: `/${ValidAlternativeLanguage}/nesting-1/nesting-2/page-00`;\n      path: 'nesting-1/nesting-2/page-00';\n      lang: ValidAlternativeLanguage;\n      root: 'nesting-1';\n    }>(fake);\n  });\n\n  it('should pass (Valid alternative language narrowing, top root level path)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${ValidAlternativeLanguage}/page-00`;\n      url: `/${ValidAlternativeLanguage}/page-00`;\n      head: ValidAlternativeLanguage;\n      pathWithoutHead: 'page-00';\n      nestingLevelTwo: '';\n      tail: 'page-00';\n    }>;\n\n    expectType<{\n      url: `/${ValidAlternativeLanguage}/page-00`;\n      lang: ValidAlternativeLanguage;\n      root: TopLevelRoot;\n      path: 'page-00';\n    }>(fake);\n  });\n\n  it('should pass (Valid alternative language narrowing, index notation)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${ValidAlternativeLanguage}/testing-pages-root/fake-nesting/${IndexToken}`;\n      url: `/${ValidAlternativeLanguage}/testing-pages-root/fake-nesting/${IndexToken}`;\n      pathWithoutHead: `testing-pages-root/fake-nesting/${IndexToken}`;\n      nestingLevelTwo: 'testing-pages-root';\n      head: ValidAlternativeLanguage;\n      tail: IndexToken;\n    }>;\n\n    expectType<{\n      url: `/${ValidAlternativeLanguage}/testing-pages-root/fake-nesting`;\n      path: 'testing-pages-root/fake-nesting';\n      lang: ValidAlternativeLanguage;\n      root: 'testing-pages-root';\n    }>(fake);\n  });\n});\n\ndescribe('PageAdapter (Default Language inference)', () => {\n  it('should pass (default language narrowing)', () => {\n    const fake = _ as PageAdapter<{\n      path: 'testing-pages-root/fake-draft-00';\n      url: '/testing-pages-root/fake-draft-00';\n      pathWithoutHead: 'fake-draft-00';\n      head: 'testing-pages-root';\n      tail: 'fake-draft-00';\n      nestingLevelTwo: '';\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/testing-pages-root/fake-draft-00`;\n      path: 'testing-pages-root/fake-draft-00';\n      root: 'testing-pages-root';\n      lang: DefaultLanguage;\n    }>(fake);\n  });\n\n  it('should pass (default language narrowing, deep path)', () => {\n    const fake = _ as PageAdapter<{\n      pathWithoutHead: 'nesting-2/page-00';\n      path: 'nesting-1/nesting-2/page-00';\n      url: '/nesting-1/nesting-2/page-00';\n      nestingLevelTwo: 'nesting-2';\n      head: 'nesting-1';\n      tail: 'page-00';\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/nesting-1/nesting-2/page-00`;\n      path: 'nesting-1/nesting-2/page-00';\n      lang: DefaultLanguage;\n      root: 'nesting-1';\n    }>(fake);\n  });\n\n  it('should pass (default language narrowing, top root level path)', () => {\n    const fake = _ as PageAdapter<{\n      pathWithoutHead: 'page-00';\n      nestingLevelTwo: '';\n      head: TopLevelRoot;\n      path: 'page-00';\n      url: '/page-00';\n      tail: 'page-00';\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/page-00`;\n      lang: DefaultLanguage;\n      root: TopLevelRoot;\n      path: 'page-00';\n    }>(fake);\n  });\n\n  it('should pass (default language narrowing, index notation)', () => {\n    const fake = _ as PageAdapter<{\n      path: `testing-pages-root/fake-nesting/${IndexToken}`;\n      url: `/testing-pages-root/fake-nesting/${IndexToken}`;\n      pathWithoutHead: `fake-nesting/${IndexToken}`;\n      nestingLevelTwo: 'fake-nesting';\n      head: 'testing-pages-root';\n      tail: IndexToken;\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/testing-pages-root/fake-nesting`;\n      path: 'testing-pages-root/fake-nesting';\n      root: 'testing-pages-root';\n      lang: DefaultLanguage;\n    }>(fake);\n  });\n});\n\ndescribe('PageAdapter (explicit Default Language)', () => {\n  it('should pass (explicit default language narrowing)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${DefaultLanguage}/testing-pages-root/fake-draft-00`;\n      url: `/${DefaultLanguage}/testing-pages-root/fake-draft-00`;\n      pathWithoutHead: 'testing-pages-root/fake-draft-00';\n      nestingLevelTwo: 'testing-pages-root';\n      head: DefaultLanguage;\n      tail: 'fake-draft-00';\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/testing-pages-root/fake-draft-00`;\n      path: 'testing-pages-root/fake-draft-00';\n      root: 'testing-pages-root';\n      lang: DefaultLanguage;\n    }>(fake);\n  });\n\n  it('should pass (explicit default language narrowing, deep path)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${DefaultLanguage}/nesting-1/nesting-2/page-00`;\n      url: `/${DefaultLanguage}/nesting-1/nesting-2/page-00`;\n      pathWithoutHead: 'nesting-1/nesting-2/page-00';\n      nestingLevelTwo: 'nesting-1';\n      head: DefaultLanguage;\n      tail: 'page-00';\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/nesting-1/nesting-2/page-00`;\n      path: 'nesting-1/nesting-2/page-00';\n      lang: DefaultLanguage;\n      root: 'nesting-1';\n    }>(fake);\n  });\n\n  it('should pass (explicit default language narrowing, top root level path)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${DefaultLanguage}/page-00`;\n      url: `/${DefaultLanguage}/page-00`;\n      pathWithoutHead: 'page-00';\n      head: DefaultLanguage;\n      nestingLevelTwo: '';\n      tail: 'page-00';\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/page-00`;\n      lang: DefaultLanguage;\n      root: TopLevelRoot;\n      path: 'page-00';\n    }>(fake);\n  });\n\n  it('should pass (explicit default language narrowing, index notation)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${DefaultLanguage}/testing-pages-root/fake-nesting/${IndexToken}`;\n      url: `/${DefaultLanguage}/testing-pages-root/fake-nesting/${IndexToken}`;\n      pathWithoutHead: `testing-pages-root/fake-nesting/${IndexToken}`;\n      nestingLevelTwo: 'testing-pages-root';\n      head: DefaultLanguage;\n      tail: IndexToken;\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}/testing-pages-root/fake-nesting`;\n      path: 'testing-pages-root/fake-nesting';\n      root: 'testing-pages-root';\n      lang: DefaultLanguage;\n    }>(fake);\n  });\n});\n\ndescribe('PageAdapter (Default Language inference, top root level index notation)', () => {\n  it('should pass (default language narrowing, top root level index notation)', () => {\n    const fake = _ as PageAdapter<{\n      pathWithoutHead: IndexToken;\n      url: `/${IndexToken}`;\n      nestingLevelTwo: '';\n      head: TopLevelRoot;\n      path: IndexToken;\n      tail: IndexToken;\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}`;\n      lang: DefaultLanguage;\n      root: TopLevelRoot;\n      path: IndexToken;\n    }>(fake);\n  });\n});\n\ndescribe('PageAdapter (explicit Default Language, top root level index notation)', () => {\n  it('should pass (explicit default language narrowing, top root level index notation)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${DefaultLanguage}/${IndexToken}`;\n      url: `/${DefaultLanguage}/${IndexToken}`;\n      pathWithoutHead: IndexToken;\n      head: DefaultLanguage;\n      nestingLevelTwo: '';\n      tail: IndexToken;\n    }>;\n\n    expectType<{\n      url: `/${DefaultLanguage}`;\n      lang: DefaultLanguage;\n      root: TopLevelRoot;\n      path: IndexToken;\n    }>(fake);\n  });\n});\n\ndescribe('PageAdapter (Valid alternative language, top root level index notation)', () => {\n  it('should pass (valid alternative language narrowing, top root level index notation)', () => {\n    const fake = _ as PageAdapter<{\n      path: `${ValidAlternativeLanguage}/${IndexToken}`;\n      url: `/${ValidAlternativeLanguage}/${IndexToken}`;\n      head: ValidAlternativeLanguage;\n      pathWithoutHead: IndexToken;\n      nestingLevelTwo: '';\n      tail: IndexToken;\n    }>;\n\n    expectType<{\n      url: `/${ValidAlternativeLanguage}`;\n      lang: ValidAlternativeLanguage;\n      root: TopLevelRoot;\n      path: IndexToken;\n    }>(fake);\n  });\n});\n\n// Stryker restore all\n"
    },
    "src/types/adapters/postbuild.StrictBlog.test-d.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4573",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 15
            },
            "start": {
              "column": 10,
              "line": 15
            }
          }
        },
        {
          "id": "4574",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 137
            },
            "start": {
              "column": 48,
              "line": 15
            }
          }
        },
        {
          "id": "4575",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 16
            },
            "start": {
              "column": 6,
              "line": 16
            }
          }
        },
        {
          "id": "4576",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 45,
              "line": 16
            }
          }
        },
        {
          "id": "4577",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 22
            },
            "start": {
              "column": 6,
              "line": 22
            }
          }
        },
        {
          "id": "4578",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 59,
              "line": 22
            }
          }
        },
        {
          "id": "4579",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 28
            },
            "start": {
              "column": 6,
              "line": 28
            }
          }
        },
        {
          "id": "4580",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 47
            },
            "start": {
              "column": 70,
              "line": 28
            }
          }
        },
        {
          "id": "4581",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 49
            },
            "start": {
              "column": 6,
              "line": 49
            }
          }
        },
        {
          "id": "4582",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 68
            },
            "start": {
              "column": 65,
              "line": 49
            }
          }
        },
        {
          "id": "4583",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 70
            },
            "start": {
              "column": 6,
              "line": 70
            }
          }
        },
        {
          "id": "4584",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 102
            },
            "start": {
              "column": 62,
              "line": 70
            }
          }
        },
        {
          "id": "4585",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 104
            },
            "start": {
              "column": 6,
              "line": 104
            }
          }
        },
        {
          "id": "4586",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 136
            },
            "start": {
              "column": 66,
              "line": 104
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\n// Error will not be thrown in test ctx\nimport type { DefaultLanguageToken } from '@rtm/generated';\n\nimport { expectAssignable, expectType } from 'jest-tsd';\n// Error will not be thrown in test ctx\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, it } from 'vitest';\n\nimport type StrictBlog from './StrictBlog';\n\nconst _ = {};\n\ndescribe('StrictBlog (Valid structure)', () => {\n  it('should pass (empty structure)', () => {\n    const fake = _ as StrictBlog<{}>;\n\n    expectType<{}>(fake);\n  });\n\n  it('should pass (mono-empty-category structure)', () => {\n    const fake = _ as StrictBlog<{ 'dummy-category': {} }>;\n\n    expectType<{ 'dummy-category': {} }>(fake);\n  });\n\n  it('should pass (mono-category structure, different slugs)', () => {\n    const fake = _ as StrictBlog<{\n      'patch-notes': {\n        dashboard: {\n          [_ in DefaultLanguageToken]: 'post-01';\n        } & {\n          en: 'post-02';\n        };\n      };\n    }>;\n\n    expectAssignable<typeof fake>({\n      'patch-notes': {\n        dashboard: {\n          [DEFAULT_LANGUAGE]: 'post-01',\n          en: 'post-02'\n        }\n      }\n    } as const);\n  });\n\n  it('should pass (mono-category structure, same slugs)', () => {\n    const fake = _ as StrictBlog<{\n      'patch-notes': {\n        dashboard: {\n          [_ in DefaultLanguageToken]: 'post-01';\n        } & {\n          en: 'post-01';\n        };\n      };\n    }>;\n\n    expectAssignable<typeof fake>({\n      'patch-notes': {\n        dashboard: {\n          [DEFAULT_LANGUAGE]: 'post-01',\n          en: 'post-01'\n        }\n      }\n    } as const);\n  });\n\n  it('should pass (mixed structure, different slugs)', () => {\n    const fake = _ as StrictBlog<{\n      'patch-notes-bis': {\n        'dashboard-bis': {\n          [_ in DefaultLanguageToken]: 'post-01';\n        } & {\n          en: 'post-02';\n        };\n      };\n      'patch-notes': {\n        dashboard: {\n          [_ in DefaultLanguageToken]: 'post-01';\n        } & {\n          en: 'post-02';\n        };\n      };\n    }>;\n\n    expectAssignable<typeof fake>({\n      'patch-notes-bis': {\n        'dashboard-bis': {\n          [DEFAULT_LANGUAGE]: 'post-01',\n          en: 'post-02'\n        }\n      },\n      'patch-notes': {\n        dashboard: {\n          [DEFAULT_LANGUAGE]: 'post-01',\n          en: 'post-02'\n        }\n      }\n    } as const);\n  });\n\n  it('should pass (mixed category structure, same slugs)', () => {\n    const fake = _ as StrictBlog<{\n      'patch-notes-bis': {\n        'dashboard-bis': {\n          [_ in DefaultLanguageToken]: 'post-01';\n        } & {\n          en: 'post-01';\n        };\n      };\n      'patch-notes': {\n        dashboard: {\n          [_ in DefaultLanguageToken]: 'post-01';\n        } & {\n          en: 'post-01';\n        };\n      };\n    }>;\n\n    expectAssignable<typeof fake>({\n      'patch-notes-bis': {\n        'dashboard-bis': {\n          [DEFAULT_LANGUAGE]: 'post-01',\n          en: 'post-01'\n        }\n      },\n      'patch-notes': {\n        dashboard: {\n          [DEFAULT_LANGUAGE]: 'post-01',\n          en: 'post-01'\n        }\n      }\n    } as const);\n  });\n});\n\n// Stryker restore all\n"
    },
    "src/types/postbuild.Page.test-d.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "4587",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 10
            },
            "start": {
              "column": 10,
              "line": 10
            }
          }
        },
        {
          "id": "4588",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 45,
              "line": 10
            }
          }
        },
        {
          "id": "4589",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 11
            },
            "start": {
              "column": 6,
              "line": 11
            }
          }
        },
        {
          "id": "4590",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 15
            },
            "start": {
              "column": 60,
              "line": 11
            }
          }
        },
        {
          "id": "4591",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 17
            },
            "start": {
              "column": 6,
              "line": 17
            }
          }
        },
        {
          "id": "4592",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 53,
              "line": 17
            }
          }
        },
        {
          "id": "4593",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 23
            },
            "start": {
              "column": 6,
              "line": 23
            }
          }
        },
        {
          "id": "4594",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 59,
              "line": 23
            }
          }
        },
        {
          "id": "4595",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 29
            },
            "start": {
              "column": 6,
              "line": 29
            }
          }
        },
        {
          "id": "4596",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 59,
              "line": 29
            }
          }
        },
        {
          "id": "4597",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 35
            },
            "start": {
              "column": 6,
              "line": 35
            }
          }
        },
        {
          "id": "4598",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 39
            },
            "start": {
              "column": 52,
              "line": 35
            }
          }
        },
        {
          "id": "4599",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 41
            },
            "start": {
              "column": 6,
              "line": 41
            }
          }
        },
        {
          "id": "4600",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 58,
              "line": 41
            }
          }
        },
        {
          "id": "4601",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 48
            },
            "start": {
              "column": 10,
              "line": 48
            }
          }
        },
        {
          "id": "4602",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 66
            },
            "start": {
              "column": 62,
              "line": 48
            }
          }
        },
        {
          "id": "4603",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 49
            },
            "start": {
              "column": 6,
              "line": 49
            }
          }
        },
        {
          "id": "4604",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 53
            },
            "start": {
              "column": 47,
              "line": 49
            }
          }
        },
        {
          "id": "4605",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 55
            },
            "start": {
              "column": 6,
              "line": 55
            }
          }
        },
        {
          "id": "4606",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 59
            },
            "start": {
              "column": 40,
              "line": 55
            }
          }
        },
        {
          "id": "4607",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 61
            },
            "start": {
              "column": 6,
              "line": 61
            }
          }
        },
        {
          "id": "4608",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 65
            },
            "start": {
              "column": 46,
              "line": 61
            }
          }
        }
      ],
      "source": "// Stryker disable all\n\nimport { expectType } from 'jest-tsd';\nimport { describe, it } from 'vitest';\n\nimport type { MakePagesLangAndPathPairs, IndexToken } from './Page';\n\nconst _ = {};\n\ndescribe('MakePagesLangAndPathPairs', () => {\n  it('should pass, given a single URL (short path)', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/fr/foo'>;\n\n    expectType<{ path: 'foo'; lang: 'fr' }>(fake);\n  });\n\n  it('should pass, given twins (short path)', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/fr/foo' | '/en/foo'>;\n\n    expectType<{ path: 'foo'; lang: 'fr' } | { path: 'foo'; lang: 'en' }>(fake);\n  });\n\n  it('should pass, given disjonction (short path)', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/fr/foo' | '/en/bar'>;\n\n    expectType<{ path: 'foo'; lang: 'fr' } | { path: 'bar'; lang: 'en' }>(fake);\n  });\n\n  it('should pass, given a single URL (long path)', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/fr/foo/bar/baz'>;\n\n    expectType<{ path: 'foo/bar/baz'; lang: 'fr' }>(fake);\n  });\n\n  it('should pass, given twins (long path)', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/fr/foo/bar/baz' | '/en/foo/bar/baz'>;\n\n    expectType<{ path: 'foo/bar/baz'; lang: 'fr' } | { path: 'foo/bar/baz'; lang: 'en' }>(fake);\n  });\n\n  it('should pass, given disjonction (long path)', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/en/foo/bar/baz/1' | '/fr/foo/bar/baz'>;\n\n    expectType<{ path: 'foo/bar/baz/1'; lang: 'en' } | { path: 'foo/bar/baz'; lang: 'fr' }>(fake);\n  });\n});\n\ndescribe('MakePagesLangAndPathPairs (index notation)', () => {\n  it('should pass, given a single URL', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/fr'>;\n\n    expectType<{ path: IndexToken; lang: 'fr' }>(fake);\n  });\n\n  it('should pass, given twins', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/fr' | '/en'>;\n\n    expectType<{ path: IndexToken; lang: 'fr' } | { path: IndexToken; lang: 'en' }>(fake);\n  });\n\n  it('should pass, given disjonction', () => {\n    const fake = _ as MakePagesLangAndPathPairs<'/en/bar' | '/fr'>;\n\n    expectType<{ path: IndexToken; lang: 'fr' } | { path: 'bar'; lang: 'en' }>(fake);\n  });\n});\n\n// Stryker restore all\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 80,
    "low": 60,
    "break": null
  },
  "testFiles": {
    "packages/prebuilder/src/validators/__tests__/prebuild.arguments.test.ts": {
      "tests": [
        {
          "id": "0",
          "name": "parseArguments unhappy paths (sys) should throw, given unknown args"
        },
        {
          "id": "1",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid schema path (not a file)"
        },
        {
          "id": "2",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid pages folder path (not a directory)"
        },
        {
          "id": "3",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid posts folder path (not a directory)"
        },
        {
          "id": "4",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid lp folder path (not a directory)"
        },
        {
          "id": "5",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid schema path (can't open)"
        },
        {
          "id": "6",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid pages folder path (can't open)"
        },
        {
          "id": "7",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid posts folder path (can't open)"
        },
        {
          "id": "8",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid lp folder path (can't open)"
        },
        {
          "id": "9",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but full invalid paths (not a directory, not a file)"
        },
        {
          "id": "10",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but full invalid paths (can't open)"
        },
        {
          "id": "11",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any i18n option & no i18n option)"
        },
        {
          "id": "12",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any pages option & no pages option)"
        },
        {
          "id": "13",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any blog option & no blog option)"
        },
        {
          "id": "14",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any lp option & no lp option)"
        },
        {
          "id": "15",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting i18n locales schema filepath option without no i18n option)"
        },
        {
          "id": "16",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting pages folder option without no pages option)"
        },
        {
          "id": "17",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting blog folder option without no blog option)"
        },
        {
          "id": "18",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting lp folder option without no lp option)"
        },
        {
          "id": "19",
          "name": "parseArguments unhappy paths (invalid args combinators: breaking dependencies) should throw, given conflicting args (both any pages option & no i18n option)"
        },
        {
          "id": "20",
          "name": "parseArguments unhappy paths (invalid args combinators: breaking dependencies) should throw, given conflicting args (both any blog option & no i18n option)"
        },
        {
          "id": "21",
          "name": "parseArguments unhappy paths (invalid args combinators: breaking dependencies) should throw, given conflicting args (both any lp option & no i18n option)"
        },
        {
          "id": "22",
          "name": "parseArguments vacuous path (disabling all tools) should pass, disabling all tools"
        },
        {
          "id": "23",
          "name": "parseArguments language support should fallback on default language, given unknown locale"
        },
        {
          "id": "24",
          "name": "parseArguments language support should set the language to default locale, given defaut locale"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { NOT_A_DIRECTORY_NEEDLE, BREAKING_DEP_NEEDLE, NOT_A_FILE_NEEDLE, CANT_OPEN_NEEDLE, CANT_OMIT_NEEDLE, CANT_USE_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterEach, describe, expect, it, vi } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport ArgumentsValidatorError from '../../errors/ArgumentsValidatorError';\nimport { getCurrentLocale } from '../../config/formatMessage';\nimport { DEFAULT_LOCALE } from '../../config/translations';\nimport parseArguments from '../arguments';\nimport { FLAGS } from '../../config';\n\nconst VALID_I18N_LOCALES_SCHEMA_FILEPATH = './packages/prebuilder/src/validators/__tests__/fake_locales/valid_fake_locales/schema.ts';\n\nconst VALID_PAGES_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_pages_folders/phony_valid_fake_pages_folder';\n\nconst VALID_LP_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/phony_valid_fake_lp_folder';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/phony_valid_fake_posts_folder';\n\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_NOT_A_FILE =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_schema_dir/schema.ts';\n\nconst INVALID_PAGES_FOLDER_NOT_A_DIR = './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder.FAKE_EXT';\n\nconst INVALID_BLOG_POSTS_FOLDER_NOT_A_DIR = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder.FAKE_EXT';\n\nconst INVALID_LP_FOLDER_NOT_A_DIR = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder.FAKE_EXT';\n\ndescribe('parseArguments unhappy paths (sys)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given unknown args', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    argvSpy.mockReturnValue(['_', '_', '--__unknown_arg1', 'foo', '--_unknown_arg2', 'bar']);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n  });\n\n  it('should throw, given valid args schema, but invalid schema path (not a file)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_NOT_A_FILE,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_FILE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but invalid pages folder path (not a directory)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.PAGES_FOLDER, INVALID_PAGES_FOLDER_NOT_A_DIR,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_BLOG\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_DIRECTORY_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but invalid posts folder path (not a directory)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_BLOG_POSTS_FOLDER_NOT_A_DIR,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_DIRECTORY_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but invalid lp folder path (not a directory)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_LP_FOLDER_NOT_A_DIR,\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_DIRECTORY_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid schema path (can't open)\", async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_PATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid pages folder path (can't open)\", async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.PAGES_FOLDER, INVALID_PATH,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_BLOG\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid posts folder path (can't open)\", async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_PATH,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid lp folder path (can't open)\", async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_PATH\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but full invalid paths (not a directory, not a file)', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_BLOG_POSTS_FOLDER_NOT_A_DIR,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_NOT_A_FILE,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_LP_FOLDER_NOT_A_DIR,\n      FLAGS.PAGES_FOLDER, INVALID_PAGES_FOLDER_NOT_A_DIR,\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n  });\n\n  it(\"should throw, given valid args schema, but full invalid paths (can't open)\", async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_PATH,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_PATH,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_PATH,\n      FLAGS.PAGES_FOLDER, INVALID_PATH,\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n  });\n});\n\ndescribe('parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given conflicting args (both any i18n option & no i18n option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any pages option & no pages option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.NO_PAGES, FLAGS.NO_BLOG, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any blog option & no blog option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.NO_BLOG, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any lp option & no lp option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.LANDING_PAGES_FOLDER, VALID_LP_FOLDER,\n      FLAGS.NO_LP, FLAGS.NO_BLOG, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n});\n\ndescribe('parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given invalid args (omitting i18n locales schema filepath option without no i18n option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.NO_BLOG, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given invalid args (omitting pages folder option without no pages option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_BLOG, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given invalid args (omitting blog folder option without no blog option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_PAGES, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given invalid args (omitting lp folder option without no lp option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_PAGES, FLAGS.NO_BLOG\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n});\n\ndescribe('parseArguments unhappy paths (invalid args combinators: breaking dependencies)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given conflicting args (both any pages option & no i18n option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_BLOG, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(BREAKING_DEP_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any blog option & no i18n option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_PAGES, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(BREAKING_DEP_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any lp option & no i18n option)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.LANDING_PAGES_FOLDER, VALID_LP_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_BLOG, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(BREAKING_DEP_NEEDLE)).toBe(true);\n    }\n  });\n});\n\ndescribe('parseArguments vacuous path (disabling all tools)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should pass, disabling all tools', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.NO_BLOG, FLAGS.NO_I18N, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).resolves.not.toThrowError(ArgumentsValidatorError);\n  });\n});\n\ndescribe('parseArguments language support', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should fallback on default language, given unknown locale', async () => {\n    vi.spyOn(console, 'warn').mockImplementationOnce(vi.fn(() => {}));\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES,\n      FLAGS.LANG, '__UNKNOWN_LANG__'\n    ]);\n\n    await parseArguments();\n    expect(getCurrentLocale()).toBe(DEFAULT_LOCALE);\n  });\n\n  it('should set the language to default locale, given defaut locale', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES,\n      FLAGS.LANG, DEFAULT_LOCALE\n    ]);\n\n    await parseArguments();\n    expect(getCurrentLocale()).toBe(DEFAULT_LOCALE);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.testing_ctx.test.ts": {
      "tests": [
        {
          "id": "25",
          "name": "getPostStrict (happy paths) should return a valid post"
        },
        {
          "id": "26",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict (happy paths) should return 5 posts, given the fake language 'posts'"
        },
        {
          "id": "27",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict (happy paths) should return 4 posts, with the default language"
        },
        {
          "id": "28",
          "name": "isValidBlogCategoryAndSubcategoryPair should be true for valid combinations"
        },
        {
          "id": "29",
          "name": "isValidBlogCategoryAndSubcategoryPair should be false for invalid combinations, given invalid category"
        },
        {
          "id": "30",
          "name": "isValidBlogCategoryAndSubcategoryPair should be false for invalid combinations, given invalid subcategory"
        },
        {
          "id": "31",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths) should return empty list, given invalid combination"
        },
        {
          "id": "32",
          "name": "getBlogPostPathWithoutI18nPart (happy paths) should return the path without its language part"
        },
        {
          "id": "33",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return true, given a valid combination"
        },
        {
          "id": "34",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return false, given an invalid category"
        },
        {
          "id": "35",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return false, given an invalid subcategory"
        },
        {
          "id": "36",
          "name": "getSlicedBlogPostDescription should slice description, given a too long description"
        },
        {
          "id": "37",
          "name": "getSlicedBlogPostDescription should not slice description, given a description that doesn't exceed the limit"
        },
        {
          "id": "38",
          "name": "getAllBlogPostsByCategoryAndLanguage (happy paths) should pass"
        },
        {
          "id": "39",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (happy paths) should pass"
        }
      ],
      "source": "import type { BlogFakeLanguageType } from '𝕍/testingContentCategoryDatas';\nimport type { BlogPostType } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { INDEX_TOKEN } from '##/lib/misc/contentlayerCornerCases';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport {\n  getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict,\n  getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict,\n  isValidBlogCategoryAndSubcategoryPairInAnyLanguage,\n  isValidBlogCategoryAndSubcategoryPair,\n  getAllBlogPostsByCategoryAndLanguage,\n  getBlogPostPathWithoutI18nPart,\n  getSlicedBlogPostDescription,\n  getBlogPostStrict\n} from '../api';\n\ndescribe('getPostStrict (happy paths)', () => {\n  it('should return a valid post', async () => {\n    const [category, subcategory, slug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const lang = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict({ subcategory, category, lang, slug })) as BlogPostType;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(slug);\n    expect(post.language).toBe(lang);\n    expect(post.url).toBe('/' + lang + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${slug}`);\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict (happy paths)', () => {\n  it(\"should return 5 posts, given the fake language 'posts'\", async () => {\n    const postsCollection = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'posts' satisfies BlogFakeLanguageType\n    );\n    // eslint-disable-next-line no-magic-numbers\n    expect(postsCollection.length).toBe(5);\n  });\n\n  it('should return 4 posts, with the default language', async () => {\n    const postsCollection = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      DEFAULT_LANGUAGE\n    );\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(postsCollection.length).toBe(4);\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPair', () => {\n  it('should be true for valid combinations', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' satisfies BlogFakeLanguageType as any\n    );\n    expect(isValid).toBe(true);\n  });\n\n  it('should be false for invalid combinations, given invalid category', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      // @ts-expect-error\n      '__INVALID_CATEGORY__',\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' satisfies BlogFakeLanguageType\n    );\n    expect(isValid).toBe(false);\n  });\n\n  it('should be false for invalid combinations, given invalid subcategory', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      BlogConfig.TESTING_CATEGORY,\n      // @ts-expect-error\n      '__INVALID_SUBCATEGORY__',\n      'drafts' satisfies BlogFakeLanguageType\n    );\n    expect(isValid).toBe(false);\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths)', () => {\n  it('should return empty list, given invalid combination', async () => {\n    const posts = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n      BlogConfig.TESTING_CATEGORY,\n      // @ts-expect-error\n      '__INVALID_SUBCATEGORY__',\n      DEFAULT_LANGUAGE\n    );\n    expect(posts).toStrictEqual([]);\n  });\n});\n\ndescribe('getBlogPostPathWithoutI18nPart (happy paths)', () => {\n  it('should return the path without its language part', async () => {\n    const [category, subcategory, lang, slug] = [\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'posts' as const satisfies BlogFakeLanguageType,\n      'fake-post-03' as const\n    ];\n\n    const post = (await getBlogPostStrict({ subcategory, category, lang, slug })) as BlogPostType;\n    const blogPostWithoutI18nPart = getBlogPostPathWithoutI18nPart(post.language, post.url);\n\n    expect(blogPostWithoutI18nPart).toBe(ROUTES_ROOTS.BLOG + [category, subcategory, slug].join('/'));\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPairInAnyLanguage', () => {\n  it('should return true, given a valid combination', async () => {\n    const [category, subcategory] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY];\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n\n    expect(isValid).toBe(true);\n  });\n\n  it('should return false, given an invalid category', async () => {\n    // @ts-expect-error\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage('__INVALID_CATEGORY__', TESTING_BLOG_FAKE_SUBCATEGORY);\n\n    expect(isValid).toBe(false);\n  });\n\n  it('should return false, given an invalid subcategory', async () => {\n    // @ts-expect-error\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(BlogConfig.TESTING_CATEGORY, '__INVALID_SUBCATEGORY__');\n\n    expect(isValid).toBe(false);\n  });\n});\n\ndescribe('getSlicedBlogPostDescription', () => {\n  it('should slice description, given a too long description', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const description = '$'.repeat(BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT + 1);\n    const slicedDescription = getSlicedBlogPostDescription(description);\n    expect(slicedDescription.length).toBe(BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT);\n  });\n\n  it(\"should not slice description, given a description that doesn't exceed the limit\", () => {\n    // eslint-disable-next-line no-magic-numbers\n    const description = '$'.repeat(BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT - 1);\n    const slicedDescription = getSlicedBlogPostDescription(description);\n    expect(description).toStrictEqual(slicedDescription);\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndLanguage (happy paths)', () => {\n  it('should pass', async () => {\n    const posts = (await getAllBlogPostsByCategoryAndLanguage(\n      BlogConfig.TESTING_CATEGORY,\n      'drafts' as const satisfies BlogFakeLanguageType as any\n    )) as BlogPostType[];\n\n    /* eslint-disable no-magic-numbers */\n    expect(posts.length).toBe(3);\n\n    expect(posts[0].draft).toBe(true);\n    expect(posts[0].metadescription).toBe('FAKE');\n    expect(posts[0].description).toBe('FAKE');\n    expect(posts[0].title).toBe('FAKE');\n    expect(posts[0]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-01.mdx`);\n    expect(posts[0]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-01.mdx`);\n    expect(posts[0]._raw.sourceFileName).toBe('fake-draft-01.mdx');\n    expect(posts[0]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts`);\n    expect(posts[0]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-01`);\n    expect(posts[0].subcategory).toBe('fake-subcategory');\n    expect(posts[0].language).toBe('drafts');\n    expect(posts[0].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[0].slug).toBe('fake-draft-01');\n    expect(posts[0].url).toBe('/drafts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-draft-01`);\n\n    expect(posts[1].draft).toBe(true);\n    expect(posts[1].metadescription).toBe('FAKE');\n    expect(posts[1].description).toBe('FAKE');\n    expect(posts[1].title).toBe('FAKE');\n    expect(posts[1]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-02.mdx`);\n    expect(posts[1]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-02.mdx`);\n    expect(posts[1]._raw.sourceFileName).toBe('fake-draft-02.mdx');\n    expect(posts[1]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts`);\n    expect(posts[1]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-02`);\n    expect(posts[1].subcategory).toBe('fake-subcategory');\n    expect(posts[1].language).toBe('drafts');\n    expect(posts[1].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[1].slug).toBe('fake-draft-02');\n    expect(posts[1].url).toBe('/drafts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-draft-02`);\n\n    expect(posts[2].draft).toBe(true);\n    expect(posts[2].metadescription).toBe('FAKE');\n    expect(posts[2].description).toBe('FAKE');\n    expect(posts[2].title).toBe('FAKE');\n    expect(posts[2]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-03.mdx`);\n    expect(posts[2]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-03.mdx`);\n    expect(posts[2]._raw.sourceFileName).toBe('fake-draft-03.mdx');\n    expect(posts[2]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts`);\n    expect(posts[2]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-03`);\n    expect(posts[2].subcategory).toBe('fake-subcategory');\n    expect(posts[2].language).toBe('drafts');\n    expect(posts[2].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[2].slug).toBe('fake-draft-03');\n    expect(posts[2].url).toBe('/drafts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-draft-03`);\n    /* eslint-enable no-magic-numbers */\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (happy paths)', () => {\n  it('should pass', async () => {\n    const posts = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'posts' as const satisfies BlogFakeLanguageType as any\n    );\n\n    /* eslint-disable no-magic-numbers */\n    expect(posts.length).toBe(5);\n\n    expect(posts[0].draft).toBe(false);\n    expect(posts[0].metadescription).toBe('FAKE');\n    expect(posts[0].description).toBe('FAKE');\n    expect(posts[0].title).toBe('FAKE');\n    expect(posts[0]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-01.mdx`);\n    expect(posts[0]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-01.mdx`);\n    expect(posts[0]._raw.sourceFileName).toBe('fake-post-01.mdx');\n    expect(posts[0]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[0]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-01`);\n    expect(posts[0].subcategory).toBe('fake-subcategory');\n    expect(posts[0].language).toBe('posts');\n    expect(posts[0].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[0].slug).toBe('fake-post-01');\n    expect(posts[0].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-01`);\n\n    expect(posts[1].draft).toBe(false);\n    expect(posts[1].metadescription).toBe('FAKE');\n    expect(posts[1].description).toBe('FAKE');\n    expect(posts[1].title).toBe('FAKE');\n    expect(posts[1]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-02.mdx`);\n    expect(posts[1]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-02.mdx`);\n    expect(posts[1]._raw.sourceFileName).toBe('fake-post-02.mdx');\n    expect(posts[1]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[1]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-02`);\n    expect(posts[1].subcategory).toBe('fake-subcategory');\n    expect(posts[1].language).toBe('posts');\n    expect(posts[1].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[1].slug).toBe('fake-post-02');\n    expect(posts[1].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-02`);\n\n    expect(posts[2].draft).toBe(false);\n    expect(posts[2].metadescription).toBe('FAKE');\n    expect(posts[2].description).toBe('FAKE');\n    expect(posts[2].title).toBe('FAKE');\n    expect(posts[2]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-03.mdx`);\n    expect(posts[2]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-03.mdx`);\n    expect(posts[2]._raw.sourceFileName).toBe('fake-post-03.mdx');\n    expect(posts[2]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[2]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-03`);\n    expect(posts[2].subcategory).toBe('fake-subcategory');\n    expect(posts[2].language).toBe('posts');\n    expect(posts[2].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[2].slug).toBe('fake-post-03');\n    expect(posts[2].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-03`);\n\n    expect(posts[3].draft).toBe(false);\n    expect(posts[3].metadescription).toBe('FAKE');\n    expect(posts[3].description).toBe('FAKE');\n    expect(posts[3].title).toBe('FAKE');\n    expect(posts[3]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-04.mdx`);\n    expect(posts[3]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-04.mdx`);\n    expect(posts[3]._raw.sourceFileName).toBe('fake-post-04.mdx');\n    expect(posts[3]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[3]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-04`);\n    expect(posts[3].subcategory).toBe('fake-subcategory');\n    expect(posts[3].language).toBe('posts');\n    expect(posts[3].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[3].slug).toBe('fake-post-04');\n    expect(posts[3].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-04`);\n\n    expect(posts[4].draft).toBe(false);\n    expect(posts[4].metadescription).toBe('FAKE');\n    expect(posts[4].description).toBe('FAKE');\n    expect(posts[4].title).toBe('FAKE');\n    expect(posts[4]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/${INDEX_TOKEN}.mdx`);\n    expect(posts[4]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/${INDEX_TOKEN}.mdx`);\n    expect(posts[4]._raw.sourceFileName).toBe(`${INDEX_TOKEN}.mdx`);\n    expect(posts[4]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[4]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[4].subcategory).toBe('fake-subcategory');\n    expect(posts[4].language).toBe('posts');\n    expect(posts[4].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[4].slug).toBe(`${INDEX_TOKEN}`);\n    expect(posts[4].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/${INDEX_TOKEN}`);\n    /* eslint-enable no-magic-numbers */\n  });\n});\n"
    },
    "src/lib/pages/static/__tests__/postbuild.getPagesStaticParams.index_notation.test.ts": {
      "tests": [
        {
          "id": "40",
          "name": "getPageStaticParams (index notation) should return static params according to the allPages mock"
        }
      ],
      "source": "import type { PagesConfigType } from '@/config/pages';\nimport type { Page } from 'contentlayer/generated';\n\nimport { TESTING_PAGES_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getPageStaticParams from '../getPageStaticParams';\n\nvi.mock('../../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_PAGES_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('@/config/pages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/pages')>();\n  const data = [\n    {\n      _raw: { sourceFilePath: 'pages/index.mdx', sourceFileName: 'index.mdx', sourceFileDir: 'pages', flattenedPath: 'pages', contentType: 'mdx' },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/index.mdx',\n      title: 'Test Page',\n      url: '/fr/index',\n      language: 'fr',\n      path: 'index',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-00.mdx',\n        flattenedPath: 'pages/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-00.mdx',\n      title: 'Test Page',\n      url: '/fr/page-00',\n      path: 'page-00',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-01.mdx',\n        flattenedPath: 'pages/page-01',\n        sourceFileName: 'page-01.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-01.mdx',\n      title: 'Test Page',\n      url: '/fr/page-01',\n      path: 'page-01',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/index.mdx',\n        sourceFileName: 'index.mdx',\n        sourceFileDir: 'pages/en',\n        flattenedPath: 'pages/en',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/en/index.mdx',\n      title: 'Test Page',\n      url: '/en/index',\n      language: 'en',\n      path: 'index',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/page-00.mdx',\n        flattenedPath: 'pages/en/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages/en',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/page-00.mdx',\n      title: 'Test Page (EN)',\n      url: '/en/page-00',\n      path: 'page-00',\n      language: 'en',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/index.mdx',\n        sourceFileDir: 'pages/nesting-1',\n        flattenedPath: 'pages/nesting-1',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/nesting-1/index.mdx',\n      url: '/fr/nesting-1',\n      title: 'Test Page',\n      path: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/page-00',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-00.mdx',\n      url: '/fr/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/page-01',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-01.mdx',\n      url: '/fr/nesting-1/page-01',\n      path: 'nesting-1/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-draft-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-draft-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-draft-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-draft-00.mdx',\n      url: '/fr/testing-pages-root/fake-draft-00',\n      path: 'testing-pages-root/fake-draft-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      type: 'Page',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-page-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-page-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-page-00.mdx',\n      url: '/fr/testing-pages-root/fake-page-00',\n      path: 'testing-pages-root/fake-page-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/index.mdx',\n        sourceFileDir: 'pages/testing-pages-root',\n        flattenedPath: 'pages/testing-pages-root',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/testing-pages-root/index.mdx',\n      url: '/fr/testing-pages-root',\n      path: 'testing-pages-root',\n      title: 'Test Page',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/index.mdx',\n        sourceFileDir: 'pages/en/nesting-1',\n        flattenedPath: 'pages/en/nesting-1',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/en/nesting-1/index.mdx',\n      url: '/en/nesting-1',\n      title: 'Test Page',\n      path: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/page-00',\n        sourceFileDir: 'pages/en/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/nesting-1/page-00.mdx',\n      title: 'Test Page - Nesting 1 (EN)',\n      url: '/en/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/index.mdx',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        flattenedPath: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/nesting-1/nesting-2/index.mdx',\n      url: '/fr/nesting-1/nesting-2',\n      path: 'nesting-1/nesting-2',\n      title: 'Test Page',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-00.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-00',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-01',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-01.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-01',\n      path: 'nesting-1/nesting-2/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-nesting/index.mdx',\n        sourceFileDir: 'pages/testing-pages-root/fake-nesting',\n        flattenedPath: 'pages/testing-pages-root/fake-nesting',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-nesting/index.mdx',\n      url: '/fr/testing-pages-root/fake-nesting',\n      path: 'testing-pages-root/fake-nesting',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/nesting-2/index.mdx',\n        sourceFileDir: 'pages/en/nesting-1/nesting-2',\n        flattenedPath: 'pages/en/nesting-1/nesting-2',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/en/nesting-1/nesting-2/index.mdx',\n      url: '/en/nesting-1/nesting-2',\n      path: 'nesting-1/nesting-2',\n      title: 'Test Page',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/en/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n      metadescription: 'Test page metadescription',\n      url: '/en/nesting-1/nesting-2/page-00',\n      title: 'Test Page - Nesting 2 (EN)',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    }\n  ] satisfies Omit<Page, 'body'>[];\n\n  return {\n    default: {\n      ...mod.default,\n      SKIP_AUTOMOUNT: { prefixes: [], paths: [] },\n      allPages: () => data as unknown as Page[],\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies PagesConfigType\n  };\n});\n\ndescribe('getPageStaticParams (index notation)', () => {\n  it('should return static params according to the allPages mock', () => {\n    const staticParams = getPageStaticParams();\n\n    expect(staticParams).toStrictEqual([\n      { [PageTaxonomy.PATH]: ['index'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['index'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-nesting'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' }\n    ]);\n  });\n});\n\nvi.doUnmock('../../../../../interop/config/i18n');\nvi.doUnmock('@/config/pages');\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysPages.test.ts": {
      "tests": [
        {
          "id": "41",
          "name": "sysPagesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "42",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with an invalid page slug"
        },
        {
          "id": "43",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with several invalid page slugs"
        },
        {
          "id": "44",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with an invalid page nesting"
        },
        {
          "id": "45",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with several invalid page nestings"
        },
        {
          "id": "46",
          "name": "sysPagesValidator should not produce any feedback, given a path to a valid lp posts folder"
        },
        {
          "id": "47",
          "name": "sysPagesValidator (ugly index strategy tests, top-level root) should not produce any feedback, but two calls to console.warn"
        },
        {
          "id": "48",
          "name": "sysPagesValidator (ugly index strategy tests, top-level root) should not produce any feedback, but two calls to console.warn (merged warnings)"
        },
        {
          "id": "49",
          "name": "sysPagesValidator (ugly index strategy tests, melting pot from hell) should not produce any feedback, but two calls to console.warn (merged warnings)"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_NESTINGS_NEEDLE, INVALID_NESTING_NEEDLE, INVALID_SLUGS_NEEDLE, INVALID_SLUG_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it, vi } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport type { VocabKey } from '../../config/translations';\n\nimport formatMessage from '../../config/formatMessage';\nimport sysPagesValidator from '../sysPages';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst path = require('path');\n\nconst VALID_PAGES_FOLDER = path.normalize('./packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder');\n\nconst VALID_PAGES_FOLDER_WITH_ONE_UGLY_INDEX_STRATEGY = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy'\n);\n\nconst VALID_PAGES_FOLDER_WITH_ONE_UGLY_INDEX_STRATEGY_JUST_MOVE = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move'\n);\n\nconst VALID_PAGES_FOLDER_WITH_ONE_UGLY_INDEX_STRATEGY_JUST_MOVE_AND_ONE_UGLY_INDEX_STRATEGY = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move_and_one_ugly_index_strategy'\n);\n\nconst VALID_PAGES_FOLDER_WITH_SEVERAL_UGLY_INDEX_STRATEGIES = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies'\n);\n\nconst INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_SLUG = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_invalid_slug'\n);\n\nconst INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_SLUGS = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_several_invalid_slugs'\n);\n\nconst INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_NESTING = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_invalid_nesting'\n);\n\nconst INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_NESTINGS = path.normalize(\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_several_invalid_nestings'\n);\n\nconst EMPTY_FEEDBACK: EmptyString = '';\n\ndescribe('sysPagesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await sysPagesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid page slug', async () => {\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_SLUG);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid page slugs', async () => {\n    const LIMIT = 36;\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_SLUGS, LIMIT);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n    expect(feedback.toLowerCase().includes(INVALID_SLUGS_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid page nesting', async () => {\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_NESTING);\n    expect(feedback.toLowerCase().includes(INVALID_NESTING_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid page nestings', async () => {\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_NESTINGS);\n    expect(feedback.toLowerCase().includes(INVALID_NESTINGS_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid lp posts folder', async () => {\n    const { feedback } = await sysPagesValidator(VALID_PAGES_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n\ndescribe('sysPagesValidator (ugly index strategy tests, top-level root)', () => {\n  it('should not produce any feedback, but two calls to console.warn', async () => {\n    const warnSpy = vi.spyOn(console, 'warn');\n    warnSpy.mockImplementation(vi.fn(() => {}));\n\n    const { feedback } = await sysPagesValidator(VALID_PAGES_FOLDER_WITH_ONE_UGLY_INDEX_STRATEGY);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(warnSpy).toHaveBeenCalledTimes(2);\n\n    expect(warnSpy).toHaveBeenCalledWith(formatMessage('uglyIndexStrategyWarning' satisfies VocabKey, { count: 1 }));\n\n    expect(warnSpy).toHaveBeenCalledWith(\n      formatMessage('uglyIndexStrategyWarningMsg' satisfies VocabKey, {\n        file: path.normalize(\n          'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy/hello.mdx'\n        ),\n        folder: path.normalize(\n          'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy/hello'\n        )\n      }) + '\\n'\n    );\n\n    warnSpy.mockRestore();\n  });\n\n  it('should not produce any feedback, but two calls to console.warn', async () => {\n    const warnSpy = vi.spyOn(console, 'warn');\n    warnSpy.mockImplementation(vi.fn(() => {}));\n\n    const { feedback } = await sysPagesValidator(VALID_PAGES_FOLDER_WITH_ONE_UGLY_INDEX_STRATEGY_JUST_MOVE);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(warnSpy).toHaveBeenCalledTimes(2);\n\n    expect(warnSpy).toHaveBeenCalledWith(formatMessage('uglyIndexStrategyWarning' satisfies VocabKey, { count: 1 }));\n\n    expect(warnSpy).toHaveBeenCalledWith(\n      formatMessage('uglyIndexStrategyWarningJustMoveMsg' satisfies VocabKey, {\n        file: path.normalize(\n          'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move/index.mdx'\n        ),\n        folder: path.normalize(\n          'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move/index'\n        )\n      }) + '\\n'\n    );\n\n    warnSpy.mockRestore();\n  });\n\n  it('should not produce any feedback, but two calls to console.warn (merged warnings)', async () => {\n    const warnings =\n      [\n        formatMessage('uglyIndexStrategyWarningMsg' satisfies VocabKey, {\n          file: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move_and_one_ugly_index_strategy/hello.mdx'\n          ),\n          folder: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move_and_one_ugly_index_strategy/hello'\n          )\n        }),\n\n        formatMessage('uglyIndexStrategyWarningJustMoveMsg' satisfies VocabKey, {\n          file: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move_and_one_ugly_index_strategy/index.mdx'\n          ),\n          folder: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_one_ugly_index_strategy_just_move_and_one_ugly_index_strategy/index'\n          )\n        })\n      ].join('\\n') + '\\n';\n\n    const warnSpy = vi.spyOn(console, 'warn');\n    warnSpy.mockImplementation(vi.fn(() => {}));\n\n    const { feedback } = await sysPagesValidator(VALID_PAGES_FOLDER_WITH_ONE_UGLY_INDEX_STRATEGY_JUST_MOVE_AND_ONE_UGLY_INDEX_STRATEGY);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(warnSpy).toHaveBeenCalledTimes(2);\n\n    expect(warnSpy).toHaveBeenCalledWith(formatMessage('uglyIndexStrategyWarning' satisfies VocabKey, { count: 2 }));\n\n    expect(warnSpy).toHaveBeenCalledWith(warnings);\n\n    warnSpy.mockRestore();\n  });\n});\n\ndescribe('sysPagesValidator (ugly index strategy tests, melting pot from hell)', () => {\n  it('should not produce any feedback, but two calls to console.warn (merged warnings)', async () => {\n    const warnings =\n      [\n        formatMessage('uglyIndexStrategyWarningMsg' satisfies VocabKey, {\n          file: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/comment/ca/va/benoit.mdx'\n          ),\n          folder: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/comment/ca/va/benoit'\n          )\n        }),\n\n        formatMessage('uglyIndexStrategyWarningMsg' satisfies VocabKey, {\n          file: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/comment/ca.mdx'\n          ),\n          folder: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/comment/ca'\n          )\n        }),\n\n        formatMessage('uglyIndexStrategyWarningMsg' satisfies VocabKey, {\n          file: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/hello.mdx'\n          ),\n          folder: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/hello'\n          )\n        }),\n\n        formatMessage('uglyIndexStrategyWarningJustMoveMsg' satisfies VocabKey, {\n          file: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/index.mdx'\n          ),\n          folder: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/index'\n          )\n        }),\n\n        formatMessage('uglyIndexStrategyWarningMsg' satisfies VocabKey, {\n          file: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/non/je.mdx'\n          ),\n          folder: path.normalize(\n            'packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder_with_several_ugly_index_strategies/non/je'\n          )\n        })\n      ].join('\\n') + '\\n';\n\n    const warnSpy = vi.spyOn(console, 'warn');\n    warnSpy.mockImplementation(vi.fn(() => {}));\n\n    const { feedback } = await sysPagesValidator(VALID_PAGES_FOLDER_WITH_SEVERAL_UGLY_INDEX_STRATEGIES);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n\n    expect(warnSpy).toHaveBeenCalledWith(formatMessage('uglyIndexStrategyWarning' satisfies VocabKey, { count: 5 }));\n\n    expect(warnSpy).toHaveBeenCalledWith(warnings);\n\n    warnSpy.mockRestore();\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/blog/__tests__/prebuild.i18nBlogCategories.test.ts": {
      "tests": [
        {
          "id": "50",
          "name": "generateI18nBlogCategories (formatted) should match snapshot"
        },
        {
          "id": "51",
          "name": "generateI18nBlogCategories (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FAKE_BLOG_METADATAS_A, FAKE_BLOG_METADATAS_B } from '𝕍/commons';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport generateI18nBlogCategories from '../i18nBlogCategories';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/blog/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'I18N_BLOG_CATEGORIES';\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN: string[] = ['_title', '_meta-description'];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN: string[] = ['title', 'meta-description'];\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE: string[] = ['_fake'];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE: string[] = ['fake'];\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE: string[] = ['_title', '_meta-description', '_fake'];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE: string[] = ['title', 'meta-description', 'fake'];\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY: string[] = [];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY: string[] = [];\n\nconst EMPTY_METADATAS = {};\n\ndescribe('generateI18nBlogCategories (formatted)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_CATEGORIES_MIN';\n\n    await generateI18nBlogCategories(\n      EMPTY_METADATAS,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONE_EXTRA_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONE_EXTRA_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREE_EXTRAS_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREE_EXTRAS_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateI18nBlogCategories (ugly)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_CATEGORIES_MIN';\n\n    await generateI18nBlogCategories(\n      EMPTY_METADATAS,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONE_EXTRA_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONE_EXTRA_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREE_EXTRAS_FAKE_BLOG_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREE_EXTRAS_FAKE_BLOG_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_BLOG_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "src/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.client.test.ts": {
      "tests": [
        {
          "id": "52",
          "name": "shouldShowTopToolbar should return false or true depending on postsCollection length"
        },
        {
          "id": "53",
          "name": "shouldShowBottomToolbar should return false or true depending on pagesAmount"
        },
        {
          "id": "54",
          "name": "doGetMaybeFilteredPostsCollection should return the same list as its input, given no selected tags"
        },
        {
          "id": "55",
          "name": "doGetMaybeFilteredPostsCollection should return a filtered list, given selected tags"
        },
        {
          "id": "56",
          "name": "doGetMaybeFilteredPostsCollection should return an empty list, given invalid selected tags"
        },
        {
          "id": "57",
          "name": "getSortedPostsCollection should return original list, unchanged"
        },
        {
          "id": "58",
          "name": "getSortedPostsCollection should return a new list, sorted"
        },
        {
          "id": "59",
          "name": "doComputePaginatedElements should translate list into fragments, unchanged"
        },
        {
          "id": "60",
          "name": "doComputePaginatedElements should translate list into fragments, sorted"
        },
        {
          "id": "61",
          "name": "computeReconciliatedPageIndex should return the last page index, given the last page indexes in the old slice ids"
        },
        {
          "id": "62",
          "name": "computeReconciliatedPageIndex should return the first page index, given the first page indexes in the old slice ids"
        },
        {
          "id": "63",
          "name": "computeReconciliatedPageIndex should return the 2nd page index, given the 2nd page indexes in the old slice ids"
        },
        {
          "id": "64",
          "name": "computeReconciliatedPageIndex should return FIRST_PAGE_PARAM, given unknown page index in the old slice ids"
        }
      ],
      "source": "import type { BlogPostPreviewComponentWithMetadatas } from '@/types/Blog';\nimport type { FiltersAssoc } from '@/config/Blog/client';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { compareDesc } from 'date-fns/compareDesc';\nimport { describe, expect, it } from 'vitest';\nimport * as React from 'react';\n\nimport {\n  doGetMaybeFilteredPostsCollection,\n  doComputePaginatedElements,\n  getSortedPostsCollection,\n  shouldShowBottomToolbar,\n  shouldShowTopToolbar\n} from '../client';\nimport { computeReconciliatedPageIndex } from '../pagination';\nimport { FIRST_PAGE_PARAM } from '../../constants';\n\nconst emptyPostsCollection: BlogPostPreviewComponentWithMetadatas[] = [];\n\nconst fakeTags = ['tag1', 'tag2', 'tag3', 'tag4'];\n// eslint-disable-next-line no-magic-numbers\nconst fakeTagsIndexes = [0, 1, 2, 3];\n\nconst __filtersAssoc: FiltersAssoc = [\n  {\n    // eslint-disable-next-line no-magic-numbers, @typescript-eslint/no-unused-vars\n    score: (post1: BlogPostPreviewComponentWithMetadatas, post2: BlogPostPreviewComponentWithMetadatas) => 0,\n    // @ts-ignore\n    i18nTitle: ''\n  },\n  {\n    // eslint-disable-next-line no-magic-numbers, @typescript-eslint/no-unused-vars\n    score: (post1: BlogPostPreviewComponentWithMetadatas, post2: BlogPostPreviewComponentWithMetadatas) =>\n      compareDesc(new Date(post1.date), new Date(post2.date)),\n    // @ts-ignore\n    i18nTitle: ''\n  }\n];\n\nconst onlyOnePostPostsCollection: BlogPostPreviewComponentWithMetadatas[] = [\n  {\n    blogPostPreviewComp: React.createElement('div', {}, 'The only one'),\n    date: '2021-01-01',\n    tagsIndexes: [],\n    title: 'Title',\n    language: 'en',\n    _id: '1',\n    tags: []\n  }\n];\n\nconst twoPostsPostsCollection: BlogPostPreviewComponentWithMetadatas[] = [\n  {\n    // eslint-disable-next-line no-magic-numbers\n    tagsIndexes: [fakeTagsIndexes[0], fakeTagsIndexes[1], fakeTagsIndexes[3]],\n    blogPostPreviewComp: React.createElement('div', {}, 'The first'),\n    // @ts-ignore\n    // eslint-disable-next-line no-magic-numbers\n    tags: [fakeTags[0], fakeTags[1], fakeTags[3]],\n    date: '2021-01-01',\n    title: 'Title',\n    language: 'en',\n    _id: '1'\n  },\n  {\n    blogPostPreviewComp: React.createElement('div', {}, 'The second'),\n    date: '2022-01-01',\n    tagsIndexes: [],\n    title: 'Title',\n    language: 'en',\n    _id: '2',\n    tags: []\n  }\n];\n\nconst fivePostsPostsCollection: BlogPostPreviewComponentWithMetadatas[] = [\n  {\n    // eslint-disable-next-line no-magic-numbers\n    tagsIndexes: [fakeTagsIndexes[0], fakeTagsIndexes[1], fakeTagsIndexes[3]],\n    blogPostPreviewComp: React.createElement('div', {}, 'The first'),\n    // @ts-ignore\n    // eslint-disable-next-line no-magic-numbers\n    tags: [fakeTags[0], fakeTags[1], fakeTags[3]],\n    date: '2021-01-01',\n    title: 'Title',\n    language: 'en',\n    _id: '1'\n  },\n  {\n    blogPostPreviewComp: React.createElement('div', {}, 'The second'),\n    date: '2022-01-01',\n    tagsIndexes: [],\n    title: 'Title',\n    language: 'en',\n    _id: '2',\n    tags: []\n  },\n  {\n    // eslint-disable-next-line no-magic-numbers\n    tagsIndexes: [fakeTagsIndexes[0], fakeTagsIndexes[1], fakeTagsIndexes[3]],\n    blogPostPreviewComp: React.createElement('div', {}, 'The third'),\n    // @ts-ignore\n    // eslint-disable-next-line no-magic-numbers\n    tags: [fakeTags[0], fakeTags[1], fakeTags[3]],\n    date: '2021-01-01',\n    title: 'Title',\n    language: 'en',\n    _id: '3'\n  },\n  {\n    // eslint-disable-next-line no-magic-numbers\n    tagsIndexes: [fakeTagsIndexes[0], fakeTagsIndexes[1], fakeTagsIndexes[3]],\n    blogPostPreviewComp: React.createElement('div', {}, 'The fourth'),\n    // @ts-ignore\n    // eslint-disable-next-line no-magic-numbers\n    tags: [fakeTags[0], fakeTags[1], fakeTags[3]],\n    date: '2021-01-01',\n    title: 'Title',\n    language: 'en',\n    _id: '4'\n  },\n  {\n    // eslint-disable-next-line no-magic-numbers\n    tagsIndexes: [fakeTagsIndexes[0], fakeTagsIndexes[1], fakeTagsIndexes[3]],\n    blogPostPreviewComp: React.createElement('div', {}, 'The fifth'),\n    // @ts-ignore\n    // eslint-disable-next-line no-magic-numbers\n    tags: [fakeTags[0], fakeTags[1], fakeTags[3]],\n    date: '2021-01-01',\n    title: 'Title',\n    language: 'en',\n    _id: '5'\n  }\n];\n\ndescribe('shouldShowTopToolbar', () => {\n  it('should return false or true depending on postsCollection length', () => {\n    expect(shouldShowTopToolbar(emptyPostsCollection)).toBe(false);\n    expect(shouldShowTopToolbar(onlyOnePostPostsCollection)).toBe(false);\n    expect(shouldShowTopToolbar(twoPostsPostsCollection)).toBe(true);\n  });\n});\n\ndescribe('shouldShowBottomToolbar', () => {\n  it('should return false or true depending on pagesAmount', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowBottomToolbar(0)).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowBottomToolbar(1)).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowBottomToolbar(2)).toBe(true);\n  });\n});\n\ndescribe('doGetMaybeFilteredPostsCollection', () => {\n  it('should return the same list as its input, given no selected tags', () => {\n    const maybeFilteredPostsCollection = doGetMaybeFilteredPostsCollection([], twoPostsPostsCollection);\n    expect(maybeFilteredPostsCollection).toStrictEqual(twoPostsPostsCollection);\n  });\n\n  it('should return a filtered list, given selected tags', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const maybeFilteredPostsCollection = doGetMaybeFilteredPostsCollection([fakeTagsIndexes[0]], twoPostsPostsCollection);\n    // eslint-disable-next-line no-magic-numbers\n    expect(maybeFilteredPostsCollection).toStrictEqual([twoPostsPostsCollection[0]]);\n  });\n\n  it('should return an empty list, given invalid selected tags', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const invalidTagIndex = Math.max(...fakeTagsIndexes) + 1;\n    const maybeFilteredPostsCollection = doGetMaybeFilteredPostsCollection([invalidTagIndex], twoPostsPostsCollection);\n    expect(maybeFilteredPostsCollection).toStrictEqual([]);\n  });\n});\n\ndescribe('getSortedPostsCollection', () => {\n  it('should return original list, unchanged', () => {\n    const filterFunIndex = 0;\n    const maybeFilteredPostsCollection = twoPostsPostsCollection;\n\n    const toSorted = getSortedPostsCollection(filterFunIndex, maybeFilteredPostsCollection, __filtersAssoc);\n\n    expect(toSorted).toStrictEqual(twoPostsPostsCollection);\n  });\n\n  it('should return a new list, sorted', () => {\n    const filterFunIndex = 1;\n    const maybeFilteredPostsCollection = twoPostsPostsCollection;\n\n    const toSorted = getSortedPostsCollection(filterFunIndex, maybeFilteredPostsCollection, __filtersAssoc);\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(toSorted).toStrictEqual([twoPostsPostsCollection[1], twoPostsPostsCollection[0]]);\n  });\n});\n\ndescribe('doComputePaginatedElements', () => {\n  it('should translate list into fragments, unchanged', () => {\n    const filterFunIndex = 0;\n    const maybeFilteredPostsCollection = twoPostsPostsCollection;\n\n    const paginatedElements = doComputePaginatedElements(filterFunIndex, maybeFilteredPostsCollection, __filtersAssoc);\n\n    expect(paginatedElements).toStrictEqual([\n      // eslint-disable-next-line no-magic-numbers\n      React.createElement(React.Fragment, { key: twoPostsPostsCollection[0]._id }, twoPostsPostsCollection[0].blogPostPreviewComp),\n      // eslint-disable-next-line no-magic-numbers\n      React.createElement(React.Fragment, { key: twoPostsPostsCollection[1]._id }, twoPostsPostsCollection[1].blogPostPreviewComp)\n    ]);\n  });\n\n  it('should translate list into fragments, sorted', () => {\n    const filterFunIndex = 1;\n    const maybeFilteredPostsCollection = twoPostsPostsCollection;\n\n    const paginatedElements = doComputePaginatedElements(filterFunIndex, maybeFilteredPostsCollection, __filtersAssoc);\n\n    expect(paginatedElements).toStrictEqual([\n      // eslint-disable-next-line no-magic-numbers\n      React.createElement(React.Fragment, { key: twoPostsPostsCollection[1]._id }, twoPostsPostsCollection[1].blogPostPreviewComp),\n      // eslint-disable-next-line no-magic-numbers\n      React.createElement(React.Fragment, { key: twoPostsPostsCollection[0]._id }, twoPostsPostsCollection[0].blogPostPreviewComp)\n    ]);\n  });\n});\n\ndescribe('computeReconciliatedPageIndex', () => {\n  it('should return the last page index, given the last page indexes in the old slice ids', () => {\n    const elementsPerPage = 2;\n    const maybeFilteredPostsCollection = fivePostsPostsCollection;\n    const expected = 3;\n\n    const reconciliatedPageIndex = computeReconciliatedPageIndex(['5'], maybeFilteredPostsCollection, elementsPerPage);\n\n    expect(reconciliatedPageIndex).toBe(expected);\n  });\n\n  it('should return the first page index, given the first page indexes in the old slice ids', () => {\n    const elementsPerPage = 2;\n    const maybeFilteredPostsCollection = fivePostsPostsCollection;\n    const expected = 1;\n\n    const reconciliatedPageIndex = computeReconciliatedPageIndex(['1', '2'], maybeFilteredPostsCollection, elementsPerPage);\n\n    expect(reconciliatedPageIndex).toBe(expected);\n  });\n\n  it('should return the 2nd page index, given the 2nd page indexes in the old slice ids', () => {\n    const elementsPerPage = 2;\n    const maybeFilteredPostsCollection = fivePostsPostsCollection;\n    const expected = 2;\n\n    const reconciliatedPageIndex = computeReconciliatedPageIndex(['3', '4'], maybeFilteredPostsCollection, elementsPerPage);\n\n    expect(reconciliatedPageIndex).toBe(expected);\n  });\n\n  it('should return FIRST_PAGE_PARAM, given unknown page index in the old slice ids', () => {\n    const elementsPerPage = 2;\n    const maybeFilteredPostsCollection = fivePostsPostsCollection;\n    const expected = FIRST_PAGE_PARAM;\n\n    const reconciliatedPageIndex = computeReconciliatedPageIndex(['__UNKNOWN__'], maybeFilteredPostsCollection, elementsPerPage);\n\n    expect(reconciliatedPageIndex).toBe(expected);\n  });\n});\n"
    },
    "src/lib/pages/static/__tests__/postbuild.getPagesStaticParams.unknown_language.test.ts": {
      "tests": [
        {
          "id": "65",
          "name": "getPageStaticParams should return static params according to the allPages mock, ignoring __UNKNOWN_LANGUAGE__"
        }
      ],
      "source": "import type { PagesConfigType } from '@/config/pages';\nimport type { Page } from 'contentlayer/generated';\n\nimport { TESTING_PAGES_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getPageStaticParams from '../getPageStaticParams';\n\nvi.mock('../../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_PAGES_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('@/config/pages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/pages')>();\n  const data = [\n    {\n      _raw: {\n        sourceFilePath: 'pages/__UNKNOWN_LANGUAGE__/page-00.mdx',\n        flattenedPath: 'pages/__UNKNOWN_LANGUAGE__/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/__UNKNOWN_LANGUAGE__/page-00.mdx',\n      url: '/__UNKNOWN_LANGUAGE__/page-00',\n      language: '__UNKNOWN_LANGUAGE__',\n      title: 'Test Page',\n      path: 'page-00',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-00.mdx',\n        flattenedPath: 'pages/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-00.mdx',\n      title: 'Test Page',\n      url: '/fr/page-00',\n      path: 'page-00',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-01.mdx',\n        flattenedPath: 'pages/page-01',\n        sourceFileName: 'page-01.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-01.mdx',\n      title: 'Test Page',\n      url: '/fr/page-01',\n      path: 'page-01',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/page-00.mdx',\n        flattenedPath: 'pages/en/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages/en',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/page-00.mdx',\n      title: 'Test Page (EN)',\n      url: '/en/page-00',\n      path: 'page-00',\n      language: 'en',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/page-00',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-00.mdx',\n      url: '/fr/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/page-01',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-01.mdx',\n      url: '/fr/nesting-1/page-01',\n      path: 'nesting-1/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-draft-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-draft-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-draft-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-draft-00.mdx',\n      url: '/fr/testing-pages-root/fake-draft-00',\n      path: 'testing-pages-root/fake-draft-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      type: 'Page',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-page-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-page-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-page-00.mdx',\n      url: '/fr/testing-pages-root/fake-page-00',\n      path: 'testing-pages-root/fake-page-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/page-00',\n        sourceFileDir: 'pages/en/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/nesting-1/page-00.mdx',\n      title: 'Test Page - Nesting 1 (EN)',\n      url: '/en/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-00.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-00',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-01',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-01.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-01',\n      path: 'nesting-1/nesting-2/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-nesting/index.mdx',\n        sourceFileDir: 'pages/testing-pages-root/fake-nesting',\n        flattenedPath: 'pages/testing-pages-root/fake-nesting',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-nesting/index.mdx',\n      url: '/fr/testing-pages-root/fake-nesting',\n      path: 'testing-pages-root/fake-nesting',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/en/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n      metadescription: 'Test page metadescription',\n      url: '/en/nesting-1/nesting-2/page-00',\n      title: 'Test Page - Nesting 2 (EN)',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    }\n  ] satisfies Omit<Page, 'body'>[];\n\n  return {\n    default: {\n      ...mod.default,\n      SKIP_AUTOMOUNT: { prefixes: [], paths: [] },\n      allPages: () => data as unknown as Page[],\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies PagesConfigType\n  };\n});\n\ndescribe('getPageStaticParams', () => {\n  it('should return static params according to the allPages mock, ignoring __UNKNOWN_LANGUAGE__', () => {\n    const staticParams = getPageStaticParams();\n\n    expect(staticParams).toStrictEqual([\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-nesting'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' }\n    ]);\n  });\n});\n\nvi.doUnmock('../../../../../interop/config/i18n');\nvi.doUnmock('@/config/pages');\n"
    },
    "src/lib/pages/static/__tests__/postbuild.getPagesStaticParams.enabled_drafts_prod.test.ts": {
      "tests": [
        {
          "id": "66",
          "name": "getPageStaticParams should return static params according to the allPages mock"
        }
      ],
      "source": "import type { PagesConfigType } from '@/config/pages';\nimport type { Page } from 'contentlayer/generated';\n\nimport { TESTING_PAGES_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getPageStaticParams from '../getPageStaticParams';\n\nvi.mock('../../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_PAGES_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('@/config/pages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/pages')>();\n  const data = [\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-00.mdx',\n        flattenedPath: 'pages/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-00.mdx',\n      title: 'Test Page',\n      url: '/fr/page-00',\n      path: 'page-00',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-01.mdx',\n        flattenedPath: 'pages/page-01',\n        sourceFileName: 'page-01.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-01.mdx',\n      title: 'Test Page',\n      url: '/fr/page-01',\n      path: 'page-01',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/page-00.mdx',\n        flattenedPath: 'pages/en/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages/en',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/page-00.mdx',\n      title: 'Test Page (EN)',\n      url: '/en/page-00',\n      path: 'page-00',\n      language: 'en',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/page-00',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-00.mdx',\n      url: '/fr/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/page-01',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-01.mdx',\n      url: '/fr/nesting-1/page-01',\n      path: 'nesting-1/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-draft-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-draft-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-draft-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-draft-00.mdx',\n      url: '/fr/testing-pages-root/fake-draft-00',\n      path: 'testing-pages-root/fake-draft-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      type: 'Page',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-page-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-page-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-page-00.mdx',\n      url: '/fr/testing-pages-root/fake-page-00',\n      path: 'testing-pages-root/fake-page-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/page-00',\n        sourceFileDir: 'pages/en/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/nesting-1/page-00.mdx',\n      title: 'Test Page - Nesting 1 (EN)',\n      url: '/en/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-00.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-00',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-01',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-01.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-01',\n      path: 'nesting-1/nesting-2/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-nesting/index.mdx',\n        sourceFileDir: 'pages/testing-pages-root/fake-nesting',\n        flattenedPath: 'pages/testing-pages-root/fake-nesting',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-nesting/index.mdx',\n      url: '/fr/testing-pages-root/fake-nesting',\n      path: 'testing-pages-root/fake-nesting',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/en/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n      metadescription: 'Test page metadescription',\n      url: '/en/nesting-1/nesting-2/page-00',\n      title: 'Test Page - Nesting 2 (EN)',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    }\n  ] satisfies Omit<Page, 'body'>[];\n\n  return {\n    default: {\n      ...mod.default,\n      SKIP_AUTOMOUNT: { prefixes: [], paths: [] },\n      allPages: () => data as unknown as Page[],\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies PagesConfigType\n  };\n});\n\ndescribe('getPageStaticParams', () => {\n  it('should return static params according to the allPages mock', () => {\n    const staticParams = getPageStaticParams();\n\n    expect(staticParams).toStrictEqual([\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-draft-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-nesting'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' }\n    ]);\n  });\n});\n\nvi.doUnmock('../../../../../interop/config/i18n');\nvi.doUnmock('@/config/pages');\n"
    },
    "src/lib/pages/static/__tests__/postbuild.getPagesStaticParams.disabled_drafts_prod.test.ts": {
      "tests": [
        {
          "id": "67",
          "name": "getPageStaticParams should return static params according to the allPages mock"
        }
      ],
      "source": "import type { PagesConfigType } from '@/config/pages';\nimport type { Page } from 'contentlayer/generated';\n\nimport { TESTING_PAGES_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getPageStaticParams from '../getPageStaticParams';\n\nvi.mock('../../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_PAGES_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('@/config/pages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/pages')>();\n\n  const data = [\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-00.mdx',\n        flattenedPath: 'pages/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-00.mdx',\n      title: 'Test Page',\n      url: '/fr/page-00',\n      path: 'page-00',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-01.mdx',\n        flattenedPath: 'pages/page-01',\n        sourceFileName: 'page-01.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-01.mdx',\n      title: 'Test Page',\n      url: '/fr/page-01',\n      path: 'page-01',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/page-00.mdx',\n        flattenedPath: 'pages/en/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages/en',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/page-00.mdx',\n      title: 'Test Page (EN)',\n      url: '/en/page-00',\n      path: 'page-00',\n      language: 'en',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/page-00',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-00.mdx',\n      url: '/fr/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/page-01',\n        sourceFileDir: 'pages/nesting-1',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 1 (FR)',\n      title: 'Page de test - Nesting 1 (FR)',\n      _id: 'pages/nesting-1/page-01.mdx',\n      url: '/fr/nesting-1/page-01',\n      path: 'nesting-1/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-draft-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-draft-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-draft-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-draft-00.mdx',\n      url: '/fr/testing-pages-root/fake-draft-00',\n      path: 'testing-pages-root/fake-draft-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      type: 'Page',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-page-00.mdx',\n        flattenedPath: 'pages/testing-pages-root/fake-page-00',\n        sourceFileDir: 'pages/testing-pages-root',\n        sourceFileName: 'fake-page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-page-00.mdx',\n      url: '/fr/testing-pages-root/fake-page-00',\n      path: 'testing-pages-root/fake-page-00',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/page-00',\n        sourceFileDir: 'pages/en/nesting-1',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Test page metadescription',\n      _id: 'pages/en/nesting-1/page-00.mdx',\n      title: 'Test Page - Nesting 1 (EN)',\n      url: '/en/nesting-1/page-00',\n      path: 'nesting-1/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-00.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-00',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/nesting-1/nesting-2/page-01.mdx',\n        flattenedPath: 'pages/nesting-1/nesting-2/page-01',\n        sourceFileDir: 'pages/nesting-1/nesting-2',\n        sourceFileName: 'page-01.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test - Nesting 2 (FR)',\n      _id: 'pages/nesting-1/nesting-2/page-01.mdx',\n      title: 'Page de test - Nesting 2 (FR)',\n      url: '/fr/nesting-1/nesting-2/page-01',\n      path: 'nesting-1/nesting-2/page-01',\n      root: 'nesting-1',\n      language: 'fr',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/testing-pages-root/fake-nesting/index.mdx',\n        sourceFileDir: 'pages/testing-pages-root/fake-nesting',\n        flattenedPath: 'pages/testing-pages-root/fake-nesting',\n        sourceFileName: 'index.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/testing-pages-root/fake-nesting/index.mdx',\n      url: '/fr/testing-pages-root/fake-nesting',\n      path: 'testing-pages-root/fake-nesting',\n      root: 'testing-pages-root',\n      metadescription: 'FAKE',\n      language: 'fr',\n      title: 'FAKE',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/en/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n      metadescription: 'Test page metadescription',\n      url: '/en/nesting-1/nesting-2/page-00',\n      title: 'Test Page - Nesting 2 (EN)',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    }\n  ] satisfies Omit<Page, 'body'>[];\n\n  return {\n    default: {\n      ...mod.default,\n      SKIP_AUTOMOUNT: { prefixes: [], paths: [] },\n      allPages: () => data as unknown as Page[],\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies PagesConfigType\n  };\n});\n\ndescribe('getPageStaticParams', () => {\n  it('should return static params according to the allPages mock', () => {\n    const staticParams = getPageStaticParams();\n\n    expect(staticParams).toStrictEqual([\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-01'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['testing-pages-root', 'fake-nesting'], [I18nTaxonomy.LANGUAGE]: 'fr' },\n      { [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' }\n    ]);\n  });\n});\n\nvi.doUnmock('../../../../../interop/config/i18n');\nvi.doUnmock('@/config/pages');\n"
    },
    "src/components/pages/blog/helpers/functions/__tests__/prebuild.paginationWidget.test.ts": {
      "tests": [
        {
          "id": "68",
          "name": "buildNextBtn should build an active nextBtn, given a pagesAmount bigger than currentPage"
        },
        {
          "id": "69",
          "name": "buildNextBtn should build a disabled nextBtn, given a currentPage bigger than pagesAmount"
        },
        {
          "id": "70",
          "name": "buildNextBtn should build a disabled nextBtn, given a currentPage equal to pagesAmount"
        },
        {
          "id": "71",
          "name": "buildPreviousBtn should build an active previousBtn with cleaned page param, given a currentPage just bigger than FIRST_PAGE_PARAM"
        },
        {
          "id": "72",
          "name": "buildPreviousBtn should build an active previousBtn, given a currentPage 2 steps after FIRST_PAGE_PARAM"
        },
        {
          "id": "73",
          "name": "buildPreviousBtn should build a disabled previousBtn, given a currentPage equal to FIRST_PAGE_PARAM"
        },
        {
          "id": "74",
          "name": "buildPreviousBtn should build a disabled previousBtn, given FIRST_PAGE_PARAM is bigger than currentPage"
        },
        {
          "id": "75",
          "name": "doBuildPaginationItems should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown)"
        },
        {
          "id": "76",
          "name": "doBuildPaginationItems should match snapshot (desktop, trivial pagesAmount === 3 case, i.e: 3 parts UI without dropdown)"
        },
        {
          "id": "77",
          "name": "doBuildPaginationItems should match snapshot (desktop, 3 parts UI with dropdown)"
        },
        {
          "id": "78",
          "name": "doBuildPaginationItems should match snapshot (desktop, 3 parts UI with dropdown, current page being last page)"
        },
        {
          "id": "79",
          "name": "doBuildPaginationItems should match snapshot (mobile)"
        },
        {
          "id": "80",
          "name": "doBuildPaginationItems should match snapshot (desktop)"
        },
        {
          "id": "81",
          "name": "doBuildPaginationItems should return null (mobile)"
        },
        {
          "id": "82",
          "name": "buildDropdown should match snapshot (bottom widget)"
        },
        {
          "id": "83",
          "name": "buildDropdown should match snapshot (NOT bottom widget)"
        },
        {
          "id": "84",
          "name": "buildDropdown should return null, given pagesAmount is equal to 1"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport type { ReactElement } from 'react';\n\nimport * as dispatchClickOnLinkOrButtonFirstChild from '@rtm/shared-lib/portable/html/dispatchClickOnLinkOrButtonFirstChild';\nimport { FIRST_PAGE_PARAM } from '@/components/ui/helpers/PaginatedElements/constants';\nimport { POINTER_EVENTS_NONE_NEEDLE } from '𝕍/needles';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport { doBuildPaginationItems, buildPreviousBtn, buildDropdown, buildNextBtn } from '../paginationWidget';\n\nconst pathname = 'pathname';\nconst searchParams = new URLSearchParams('?foo=bar&bar=bar&baz=baz');\nconst pageKey = 'page';\n\ndescribe('buildNextBtn', () => {\n  it('should build an active nextBtn, given a pagesAmount bigger than currentPage', () => {\n    const currentPage = 1;\n    // eslint-disable-next-line no-magic-numbers\n    const [nextBtnPageId, pagesAmount] = [currentPage + 1, currentPage + 1];\n\n    const nextBtn = buildNextBtn(nextBtnPageId, pathname, searchParams, currentPage, pagesAmount, pageKey);\n    expect(nextBtn.props.href).toBe(`${pathname}?foo=bar&bar=bar&baz=baz&page=2`);\n  });\n\n  it('should build a disabled nextBtn, given a currentPage bigger than pagesAmount', () => {\n    const pagesAmount = 1;\n    // eslint-disable-next-line no-magic-numbers\n    const [nextBtnPageId, currentPage] = [pagesAmount + 1, pagesAmount + 1];\n\n    const nextBtn = buildNextBtn(nextBtnPageId, pathname, searchParams, currentPage, pagesAmount, pageKey);\n    expect(nextBtn.props.className).includes(POINTER_EVENTS_NONE_NEEDLE);\n    expect(nextBtn.props['aria-disabled']).toBe(true);\n  });\n\n  it('should build a disabled nextBtn, given a currentPage equal to pagesAmount', () => {\n    const pagesAmount = 1;\n    // eslint-disable-next-line no-magic-numbers\n    const [nextBtnPageId, currentPage] = [pagesAmount + 1, pagesAmount];\n\n    const nextBtn = buildNextBtn(nextBtnPageId, pathname, searchParams, currentPage, pagesAmount, pageKey);\n    expect(nextBtn.props.className).includes(POINTER_EVENTS_NONE_NEEDLE);\n    expect(nextBtn.props['aria-disabled']).toBe(true);\n  });\n});\n\ndescribe('buildPreviousBtn', () => {\n  it('should build an active previousBtn with cleaned page param, given a currentPage just bigger than FIRST_PAGE_PARAM', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const currentPage = FIRST_PAGE_PARAM + 1;\n    // eslint-disable-next-line no-magic-numbers\n    const prevBtnPageId = currentPage - 1;\n\n    const previousBtn = buildPreviousBtn(prevBtnPageId, pathname, searchParams, currentPage, pageKey);\n    expect(previousBtn.props.href).toBe(`${pathname}?foo=bar&bar=bar&baz=baz`);\n  });\n\n  it('should build an active previousBtn, given a currentPage 2 steps after FIRST_PAGE_PARAM', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const currentPage = FIRST_PAGE_PARAM + 2;\n    // eslint-disable-next-line no-magic-numbers\n    const prevBtnPageId = currentPage - 1;\n\n    const previousBtn = buildPreviousBtn(prevBtnPageId, pathname, searchParams, currentPage, pageKey);\n    expect(previousBtn.props.href).toBe(`${pathname}?foo=bar&bar=bar&baz=baz&page=2`);\n  });\n\n  it('should build a disabled previousBtn, given a currentPage equal to FIRST_PAGE_PARAM', () => {\n    const currentPage = FIRST_PAGE_PARAM;\n    // eslint-disable-next-line no-magic-numbers\n    const prevBtnPageId = currentPage - 1;\n\n    const previousBtn = buildPreviousBtn(prevBtnPageId, pathname, searchParams, currentPage, pageKey);\n    expect(previousBtn.props.className).includes(POINTER_EVENTS_NONE_NEEDLE);\n    expect(previousBtn.props['aria-disabled']).toBe(true);\n  });\n\n  it('should build a disabled previousBtn, given FIRST_PAGE_PARAM is bigger than currentPage', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const currentPage = FIRST_PAGE_PARAM - 1;\n    // eslint-disable-next-line no-magic-numbers\n    const prevBtnPageId = currentPage - 1;\n\n    const previousBtn = buildPreviousBtn(prevBtnPageId, pathname, searchParams, currentPage, pageKey);\n    expect(previousBtn.props.className).includes(POINTER_EVENTS_NONE_NEEDLE);\n    expect(previousBtn.props['aria-disabled']).toBe(true);\n  });\n});\n\ndescribe('doBuildPaginationItems', () => {\n  it('should match snapshot (desktop, trivial pagesAmount === 2 case, i.e: 2 parts UI without dropdown)', () => {\n    const currentPage = 1;\n    const pagesAmount = 2;\n    const isLargeScreen = true;\n    const paginationItems = doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, pageKey);\n\n    expect(paginationItems).toMatchSnapshot();\n  });\n\n  it('should match snapshot (desktop, trivial pagesAmount === 3 case, i.e: 3 parts UI without dropdown)', () => {\n    const currentPage = 1;\n    const pagesAmount = 3;\n    const isLargeScreen = true;\n    const paginationItems = doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, pageKey);\n\n    expect(paginationItems).toMatchSnapshot();\n  });\n\n  it('should match snapshot (desktop, 3 parts UI with dropdown)', () => {\n    const currentPage = 1;\n    const pagesAmount = 4;\n    const isLargeScreen = true;\n    const paginationItems = doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, pageKey);\n\n    expect(paginationItems).toMatchSnapshot();\n  });\n\n  it('should match snapshot (desktop, 3 parts UI with dropdown, current page being last page)', () => {\n    const pagesAmount = 4;\n    const currentPage = pagesAmount;\n    const isLargeScreen = true;\n    const paginationItems = doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, pageKey);\n\n    expect(paginationItems).toMatchSnapshot();\n\n    const dispatchClickOnLinkOrButtonFirstChildSpy = vi.spyOn(dispatchClickOnLinkOrButtonFirstChild, 'default');\n\n    const dummyEventTarget = new EventTarget();\n    // eslint-disable-next-line no-magic-numbers\n    (paginationItems as ReactElement[])[1].props.children.props.dropdownItems[0].props.onClick(dummyEventTarget);\n    // eslint-disable-next-line no-magic-numbers\n    expect(dispatchClickOnLinkOrButtonFirstChildSpy).toHaveBeenCalledTimes(1);\n  });\n\n  it('should match snapshot (mobile)', () => {\n    const currentPage = 1;\n    const pagesAmount = 3;\n    const isLargeScreen = false;\n    const paginationItems = doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, pageKey);\n\n    expect(paginationItems).toMatchSnapshot();\n\n    const dispatchClickOnLinkOrButtonFirstChildSpy = vi.spyOn(dispatchClickOnLinkOrButtonFirstChild, 'default');\n\n    const dummyEventTarget = new EventTarget();\n    // eslint-disable-next-line no-magic-numbers\n    (paginationItems as ReactElement).props.children.props.dropdownItems[0].props.onClick(dummyEventTarget);\n    // eslint-disable-next-line no-magic-numbers\n    expect(dispatchClickOnLinkOrButtonFirstChildSpy).toHaveBeenCalledTimes(1);\n  });\n\n  it('should match snapshot (desktop)', () => {\n    const currentPage = 1;\n    const pagesAmount = 2;\n    const pathname = 'pathname';\n    const searchParams = new URLSearchParams();\n    const isLargeScreen = true;\n    const pageKey = 'page';\n\n    const paginationItemsWithoutDropdown = doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, pageKey);\n    expect(paginationItemsWithoutDropdown).toMatchSnapshot();\n  });\n\n  it('should return null (mobile)', () => {\n    const currentPage = 1;\n    const pagesAmount = 1;\n    const pathname = 'pathname';\n    const searchParams = new URLSearchParams();\n    const isLargeScreen = false;\n    const pageKey = 'page';\n\n    const expected = null;\n\n    const emptyPaginationItems = doBuildPaginationItems(currentPage, pagesAmount, pathname, searchParams, isLargeScreen, pageKey);\n    expect(emptyPaginationItems).toBe(expected);\n  });\n});\n\ndescribe('buildDropdown', () => {\n  it('should match snapshot (bottom widget)', () => {\n    const currentPage = 1;\n    const pagesAmount = 4;\n    const isBottomWidget = true;\n\n    const dropdown = buildDropdown(pagesAmount, currentPage, pathname, searchParams, pageKey, { isBottomWidget });\n\n    expect(dropdown).toMatchSnapshot();\n  });\n\n  it('should match snapshot (NOT bottom widget)', () => {\n    const currentPage = 1;\n    const pagesAmount = 4;\n    const isBottomWidget = false;\n\n    const dropdown = buildDropdown(pagesAmount, currentPage, pathname, searchParams, pageKey, { isBottomWidget });\n\n    expect(dropdown).toMatchSnapshot();\n  });\n\n  it('should return null, given pagesAmount is equal to 1', () => {\n    const currentPage = 1;\n    const pagesAmount = 1;\n    const isBottomWidget = false;\n\n    const dropdown = buildDropdown(pagesAmount, currentPage, pathname, searchParams, pageKey, { isBottomWidget });\n\n    expect(dropdown).toBe(null);\n  });\n});\n"
    },
    "src/config/Auth/__tests__/prebuild.authOptions.test.ts": {
      "tests": [
        {
          "id": "85",
          "name": "getDiscordProfilePicture (rate limited) should cache a fallback ImageURL, given unhappy path (all is valid, but we got rate limited and empty cache)"
        },
        {
          "id": "86",
          "name": "getDiscordProfilePicture (rate limited) should return the cached ImageURL as fallback, given unhappy path (all is valid, but we got rate limited)"
        },
        {
          "id": "87",
          "name": "getDiscordProfilePicture should return a PNG Discord avatar URL, given a plain avatar/id couple"
        },
        {
          "id": "88",
          "name": "getDiscordProfilePicture should return a GIF Discord avatar URL, given an avatar field starting with \"a_\""
        },
        {
          "id": "89",
          "name": "getDiscordProfilePicture should return null, given empty avatar field"
        },
        {
          "id": "90",
          "name": "getDiscordProfilePicture should return null, given empty id field"
        },
        {
          "id": "91",
          "name": "getDiscordProfilePicture should return null, given both empty id and avatar fields"
        },
        {
          "id": "92",
          "name": "Caching test should cache the ImageURL, given happy path"
        },
        {
          "id": "93",
          "name": "Caching test should return session as is, given unhappy path (undefined DISCORD_BOT_TOKEN)"
        },
        {
          "id": "94",
          "name": "Caching test should return session as is, given unhappy path (undefined sub)"
        },
        {
          "id": "95",
          "name": "Caching test should return session as is, given unhappy path (failed to get imageURL)"
        }
      ],
      "source": "import type { IDiscordApi } from '@/meta/discordapi';\n\nimport { beforeEach, afterEach, describe, expect, it, vi } from 'vitest';\nimport { keysFactory, clearAll, get, set } from '@/cache/generic';\nimport discordApi from '@/meta/discordapi';\n\nimport { getDiscordProfilePicture, getSession } from '../authOptions';\n\ndescribe('getDiscordProfilePicture (rate limited)', () => {\n  beforeEach(() => {\n    global.fetch = vi.fn().mockImplementation(() => {\n      throw new Error('Rate limit');\n    });\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n    clearAll();\n  });\n\n  it('should cache a fallback ImageURL, given unhappy path (all is valid, but we got rate limited and empty cache)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = discordApi;\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = get(keysFactory.discordProfilePicture(FAKE_ID));\n    const fallbackAvatarRegex = /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/;\n\n    expect(cachedURL).toMatch(fallbackAvatarRegex);\n    expect(gotSession).toStrictEqual({\n      user: { ...session.user, image: gotSession?.user?.image },\n      expires: session.expires\n    });\n  });\n\n  it('should return the cached ImageURL as fallback, given unhappy path (all is valid, but we got rate limited)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n    set(keysFactory.discordProfilePicture('FAKE_ID'), 'FAKE_URL');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = discordApi;\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = get(keysFactory.discordProfilePicture(FAKE_ID));\n\n    expect(cachedURL).toBe('FAKE_URL');\n    expect(gotSession).toStrictEqual({\n      user: { ...session.user, image: gotSession?.user?.image },\n      expires: session.expires\n    });\n  });\n});\n\ndescribe('getDiscordProfilePicture', () => {\n  it('should return a PNG Discord avatar URL, given a plain avatar/id couple', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: 'FAKE_AVATAR',\n          id: 'FAKE_ID'\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe('https://cdn.discordapp.com/avatars/FAKE_ID/FAKE_AVATAR.png');\n  });\n\n  it('should return a GIF Discord avatar URL, given an avatar field starting with \"a_\"', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: 'FAKE_ID'\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe('https://cdn.discordapp.com/avatars/FAKE_ID/a_FAKE_AVATAR.gif');\n  });\n\n  it('should return null, given empty avatar field', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          id: 'FAKE_ID',\n          avatar: ''\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe(null);\n  });\n\n  it('should return null, given empty id field', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: 'FAKE_AVATAR',\n          id: ''\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe(null);\n  });\n\n  it('should return null, given both empty id and avatar fields', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: '',\n          id: ''\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe(null);\n  });\n});\n\ndescribe('Caching test', () => {\n  beforeEach(() => {\n    vi.unstubAllEnvs();\n    clearAll();\n    vi.resetModules();\n  });\n\n  it('should cache the ImageURL, given happy path', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: FAKE_ID\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe('https://cdn.discordapp.com/avatars/FAKE_ID/a_FAKE_AVATAR.gif');\n    expect(gotSession).toStrictEqual({\n      user: { ...session.user, image: gotSession?.user?.image },\n      expires: session.expires\n    });\n  });\n\n  it('should return session as is, given unhappy path (undefined DISCORD_BOT_TOKEN)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', '');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: FAKE_ID\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe(undefined);\n    expect(gotSession).toStrictEqual(session);\n  });\n\n  it('should return session as is, given unhappy path (undefined sub)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: FAKE_ID\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        name: 'foo',\n        sub: ''\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe(undefined);\n    expect(gotSession).toStrictEqual(session);\n  });\n\n  it('should return session as is, given unhappy path (failed to get imageURL)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      // eslint-disable-next-line require-await\n      getFreshProfile: async () => {\n        return {\n          avatar: '',\n          id: ''\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        name: 'foo',\n        sub: 'FAKE'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe(undefined);\n    expect(gotSession).toStrictEqual(session);\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/pages/__tests__/prebuild.pagesType.test.ts": {
      "tests": [
        {
          "id": "96",
          "name": "Hard-coded values safety check should not be stale"
        },
        {
          "id": "97",
          "name": "generatePagesType (formatted) should match snapshot"
        },
        {
          "id": "98",
          "name": "generatePagesType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport type { Page } from '../../../types/Metadatas';\n\nimport generatePagesType, { HARDCODED_FALLBACK_TYPE_FIELDS } from '../pagesType';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/pages/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'PAGES_TYPE';\n\ndescribe('Hard-coded values safety check', () => {\n  it('should not be stale', () => {\n    function isStale(fields: (keyof Page)[]) {\n      for (const field of fields) {\n        if (!HARDCODED_FALLBACK_TYPE_FIELDS.has(field)) {\n          const expectedFields = fields.sort().join(', ');\n          const gotFields = Array.from(HARDCODED_FALLBACK_TYPE_FIELDS).sort().join(', ');\n          console.warn('stale:', { expectedFields, gotFields });\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // NOTE: Typechecked via tsc --noEmit --skipLibCheck\n    // Check the package.json script: `before-build:tricky-typechecks`\n    const fakePage: Page = {\n      nestingLevelTwo: 'FAKE',\n      pathWithoutHead: 'FAKE',\n      path: 'FAKE',\n      head: 'FAKE',\n      tail: 'FAKE',\n      url: 'FAKE'\n    };\n    const fields = Object.keys(fakePage) as (keyof Page)[];\n\n    expect(isStale(fields)).toBe(false);\n  });\n});\n\ndescribe('generatePagesType (formatted)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_PAGES_TYPE';\n    await generatePagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TYPE';\n    await generatePagesType(\n      {\n        'nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-2/page-00',\n            path: 'nesting-1/nesting-2/page-00',\n            url: '/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'nesting-2/page-01',\n            path: 'nesting-1/nesting-2/page-01',\n            url: '/nesting-1/nesting-2/page-01',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        'nesting-1': [\n          {\n            pathWithoutHead: 'page-00',\n            path: 'nesting-1/page-00',\n            url: '/nesting-1/page-00',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            path: 'nesting-1/page-01',\n            url: '/nesting-1/page-01',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        '/': [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'page-00',\n            url: '/page-00',\n            tail: 'page-00',\n            head: '/'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            nestingLevelTwo: '',\n            path: 'page-01',\n            url: '/page-01',\n            tail: 'page-01',\n            head: '/'\n          }\n        ],\n        'en/nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-1/nesting-2/page-00',\n            path: 'en/nesting-1/nesting-2/page-00',\n            url: '/en/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        'en/nesting-1': [\n          {\n            pathWithoutHead: 'nesting-1/page-00',\n            path: 'en/nesting-1/page-00',\n            url: '/en/nesting-1/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        en: [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'en/page-00',\n            url: '/en/page-00',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ]\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generatePagesType (ugly)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_PAGES_TYPE';\n    await generatePagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TYPE';\n    await generatePagesType(\n      {\n        'nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-2/page-00',\n            path: 'nesting-1/nesting-2/page-00',\n            url: '/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'nesting-2/page-01',\n            path: 'nesting-1/nesting-2/page-01',\n            url: '/nesting-1/nesting-2/page-01',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        'nesting-1': [\n          {\n            pathWithoutHead: 'page-00',\n            path: 'nesting-1/page-00',\n            url: '/nesting-1/page-00',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            path: 'nesting-1/page-01',\n            url: '/nesting-1/page-01',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        '/': [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'page-00',\n            url: '/page-00',\n            tail: 'page-00',\n            head: '/'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            nestingLevelTwo: '',\n            path: 'page-01',\n            url: '/page-01',\n            tail: 'page-01',\n            head: '/'\n          }\n        ],\n        'en/nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-1/nesting-2/page-00',\n            path: 'en/nesting-1/nesting-2/page-00',\n            url: '/en/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        'en/nesting-1': [\n          {\n            pathWithoutHead: 'nesting-1/page-00',\n            path: 'en/nesting-1/page-00',\n            url: '/en/nesting-1/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        en: [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'en/page-00',\n            url: '/en/page-00',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ]\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.tagsIndexes.test.ts": {
      "tests": [
        {
          "id": "99",
          "name": "buildBlogTagsIndexes (happy path) should return a valid tag indexes array, given valid tagsArray"
        },
        {
          "id": "100",
          "name": "buildBlogTagsIndexes (unhappy path, duplicate tags) should throw an error message, given one duplicate tag"
        },
        {
          "id": "101",
          "name": "buildBlogTagsIndexes (unhappy path, duplicate tags) should throw an error message, given many duplicate tags"
        },
        {
          "id": "102",
          "name": "buildBlogTagsIndexes (unhappy path, unknown tags without suggestion) should throw an error message, given one unknown tag"
        },
        {
          "id": "103",
          "name": "buildBlogTagsIndexes (unhappy path, unknown tags without suggestion) should throw an error message, given many unknown tags"
        },
        {
          "id": "104",
          "name": "buildBlogTagsIndexes (unhappy path, unknown tags with suggestions) should throw an error message, given one unknown tag, StartsWith"
        },
        {
          "id": "105",
          "name": "buildBlogTagsIndexes (unhappy path, unknown tags with suggestions) should throw an error message, given one unknown tag, Damerau"
        },
        {
          "id": "106",
          "name": "buildBlogTagsIndexes (unhappy path, error combinations) should throw an error message, given many duplicate tags"
        }
      ],
      "source": "import type { DocumentToCompute } from '@rtm/shared-types/ContentlayerConfig';\nimport type { Index, Id } from '@rtm/shared-types/Numbers';\n\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogTagsIndexes from '../tagsIndexes';\n\nconst fakeBlogTags = ['fake_tag_one', 'fake_tag_two', 'fake_tag_three', 'uniq_fake_tag_startswith_suggest'] as const;\n\nconst damerauThreshold = 3;\n\nconst fakeIndexedBlogTagOptions = fakeBlogTags.reduce(\n  (acc, tag, index) => {\n    acc[tag] = index;\n    return acc;\n  },\n  {} as Record<string, Id>\n) as Record<FakeBlogTag, Id>;\n\ndescribe('buildBlogTagsIndexes (happy path)', () => {\n  it('should return a valid tag indexes array, given valid tagsArray', () => {\n    const tagsArray: FakeBlogTag[] = ['fake_tag_two', 'fake_tag_one'];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    const tagsIndexes = buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(tagsIndexes).toStrictEqual([1, 0]);\n  });\n});\n\ndescribe('buildBlogTagsIndexes (unhappy path, duplicate tags)', () => {\n  it('should throw an error message, given one duplicate tag', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    const tagsArray: FakeBlogTag[] = ['fake_tag_one', 'fake_tag_one', 'fake_tag_two'];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n    } catch (e) {\n      expect(e).toBe('BlogTagDuplicatesError: “fake_tag_one” is defined several times.');\n    }\n  });\n\n  it('should throw an error message, given many duplicate tags', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    const tagsArray: FakeBlogTag[] = ['fake_tag_one', 'fake_tag_one', 'fake_tag_two', 'fake_tag_two', 'fake_tag_three'];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n    } catch (e) {\n      expect(e).toBe('BlogTagDuplicatesError: [“fake_tag_one”, “fake_tag_two”] are defined several times.');\n    }\n  });\n});\n\ndescribe('buildBlogTagsIndexes (unhappy path, unknown tags without suggestion)', () => {\n  it('should throw an error message, given one unknown tag', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    // @ts-expect-error\n    const tagsArray: FakeBlogTag[] = ['tag_one'];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogTagError: Invalid blog tag detected!\n◦ “tag_one” doesn't exist. No suggestion found.`);\n    }\n  });\n\n  it('should throw an error message, given many unknown tags', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    // @ts-expect-error\n    const tagsArray: FakeBlogTag[] = ['tag_one', 'tag_two', 'tag_three'];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogTagError: Invalid blog tags detected!\n◦ [“tag_one”, “tag_two”, “tag_three”] don't exist. No suggestion found.`);\n    }\n  });\n});\n\ndescribe('buildBlogTagsIndexes (unhappy path, unknown tags with suggestions)', () => {\n  it('should throw an error message, given one unknown tag, StartsWith', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    // @ts-expect-error\n    const tagsArray: FakeBlogTag[] = ['uniq_fake_tag_startswith'];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogTagError: Invalid blog tag detected!\n◦ “uniq_fake_tag_startswith” doesn't exist, did you mean: “uniq_fake_tag_startswith_suggest”?`);\n    }\n  });\n\n  it('should throw an error message, given one unknown tag, Damerau', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    // @ts-expect-error\n    const tagsArray: FakeBlogTag[] = ['fake_tag_oen'];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogTagError: Invalid blog tag detected!\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?`);\n    }\n  });\n});\n\ndescribe('buildBlogTagsIndexes (unhappy path, error combinations)', () => {\n  it('should throw an error message, given many duplicate tags', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    const tagsArray: FakeBlogTag[] = [\n      // @ts-expect-error\n      'fake_tag',\n      // @ts-expect-error\n      'fake_tag_oen',\n      // @ts-expect-error\n      'fake_tag_oen',\n      'fake_tag_one',\n      'fake_tag_one',\n      'fake_tag_two',\n      'fake_tag_two',\n      'fake_tag_three'\n    ];\n\n    const partialFakePost = {\n      tags: {\n        _array: tagsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'tags'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogTagsIndexes(partialFakePost, fakeIndexedBlogTagOptions, fakeBlogTags, damerauThreshold);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogTagError: Invalid blog tags detected!\n◦ “fake_tag” doesn't exist, did you mean: “fake_tag_one”, or “fake_tag_two”, or “fake_tag_three”?\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?\n• BlogTagDuplicatesError: [“fake_tag_oen”, “fake_tag_one”, “fake_tag_two”] are defined several times.`);\n    }\n  });\n});\n\ntype FakeBlogTag = (typeof fakeBlogTags)[Index];\n"
    },
    "src/lib/landingPages/static/__tests__/postbuild.getLandingPagesStaticParams.enabled_drafts_prod.test.ts": {
      "tests": [
        {
          "id": "107",
          "name": "getLandingPagesStaticParams should return static params, including the mocked drafts"
        }
      ],
      "source": "import type { LpFakeLanguageType } from '𝕍/testingContentCategoryDatas';\nimport type { LandingPagesConfigType } from '@/config/landingPages';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport { TESTING_LP_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getLandingPagesStaticParams from '../getLandingPagesStaticParams';\n\nvi.mock('##/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/i18n')>();\n\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_LP_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('@/config/landingPages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/landingPages')>();\n  const data = [\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/dummy-category/lp-00.mdx',\n        flattenedPath: 'landing-pages/dummy-category/lp-00',\n        sourceFileDir: 'landing-pages/dummy-category',\n        sourceFileName: 'lp-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Meta description LP test (default language)',\n      language: 'default_language' satisfies LpFakeLanguageType,\n      url: '/default_language/lp/dummy-category-lp-00',\n      _id: 'landing-pages/dummy-category/lp-00.mdx',\n      title: 'LP test (default language)',\n      slug: 'dummy-category-lp-00',\n      category: 'dummy-category',\n      type: 'LandingPage',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/fake-draft-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/fake-draft-lp-00',\n        sourceFileName: 'fake-draft-lp-00.mdx',\n        sourceFileDir: 'landing-pages/testing',\n        contentType: 'mdx'\n      },\n      language: 'default_language' satisfies LpFakeLanguageType,\n      url: '/default_language/lp/testing-fake-draft-lp-00',\n      _id: 'landing-pages/testing/fake-draft-lp-00.mdx',\n      slug: 'testing-fake-draft-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/fake-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/fake-lp-00',\n        sourceFileDir: 'landing-pages/testing',\n        sourceFileName: 'fake-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      language: 'default_language' satisfies LpFakeLanguageType,\n      url: '/default_language/lp/testing-fake-lp-00',\n      _id: 'landing-pages/testing/fake-lp-00.mdx',\n      slug: 'testing-fake-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: false\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/dummy-category/en/lp-00.mdx',\n        flattenedPath: 'landing-pages/dummy-category/en/lp-00',\n        sourceFileDir: 'landing-pages/dummy-category/en',\n        sourceFileName: 'lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/dummy-category/en/lp-00.mdx',\n      metadescription: 'Meta description LP test EN',\n      language: 'en' satisfies LpFakeLanguageType,\n      url: '/en/lp/dummy-category-lp-00',\n      slug: 'dummy-category-lp-00',\n      category: 'dummy-category',\n      title: 'LP test EN',\n      type: 'LandingPage',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/en/fake-draft-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/en/fake-draft-lp-00',\n        sourceFileDir: 'landing-pages/testing/en',\n        sourceFileName: 'fake-draft-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/testing/en/fake-draft-lp-00.mdx',\n      language: 'en' satisfies LpFakeLanguageType,\n      url: '/en/lp/testing-fake-draft-lp-00',\n      slug: 'testing-fake-draft-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/en/fake-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/en/fake-lp-00',\n        sourceFileDir: 'landing-pages/testing/en',\n        sourceFileName: 'fake-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/testing/en/fake-lp-00.mdx',\n      language: 'en' satisfies LpFakeLanguageType,\n      url: '/en/lp/testing-fake-lp-00',\n      slug: 'testing-fake-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: false\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00',\n        sourceFileDir: 'landing-pages/testing/__INVALID_LOCALE__',\n        sourceFileName: 'fake-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00.mdx',\n      url: '/__INVALID_LOCALE__/lp/testing-fake-lp-00',\n      language: '__INVALID_LOCALE__',\n      slug: 'testing-fake-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: false\n    }\n  ] satisfies Omit<LandingPage, 'doNotExcludeFromLocalSearch' | 'body'>[];\n\n  return {\n    default: {\n      ...mod.default,\n      allLandingPages: () => data as unknown as LandingPage[],\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies LandingPagesConfigType\n  };\n});\n\ndescribe('getLandingPagesStaticParams', () => {\n  it('should return static params, including the mocked drafts', async () => {\n    const staticParams = await getLandingPagesStaticParams();\n    expect(staticParams).toStrictEqual([\n      { [LandingPageTaxonomy.SLUG]: 'dummy-category-lp-00', [I18nTaxonomy.LANGUAGE]: 'default_language' },\n      { [LandingPageTaxonomy.SLUG]: 'testing-fake-draft-lp-00', [I18nTaxonomy.LANGUAGE]: 'default_language' },\n      { [LandingPageTaxonomy.SLUG]: 'testing-fake-lp-00', [I18nTaxonomy.LANGUAGE]: 'default_language' },\n      { [LandingPageTaxonomy.SLUG]: 'dummy-category-lp-00', [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [LandingPageTaxonomy.SLUG]: 'testing-fake-draft-lp-00', [I18nTaxonomy.LANGUAGE]: 'en' },\n      { [LandingPageTaxonomy.SLUG]: 'testing-fake-lp-00', [I18nTaxonomy.LANGUAGE]: 'en' }\n    ]);\n  });\n});\n\nvi.doUnmock('##/config/i18n');\nvi.doUnmock('@/config/landingPages');\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.authorsIndexes.test.ts": {
      "tests": [
        {
          "id": "108",
          "name": "buildBlogAuthorsIndexes (happy path) should return a valid tag indexes array, given valid tagsArray"
        },
        {
          "id": "109",
          "name": "buildBlogAuthorsIndexes (unhappy path, duplicate authors) should throw an error message, given one duplicate author"
        },
        {
          "id": "110",
          "name": "buildBlogAuthorsIndexes (unhappy path, duplicate authors) should throw an error message, given many duplicate authors"
        },
        {
          "id": "111",
          "name": "buildBlogAuthorsIndexes (unhappy path, unknown authors) should throw an error message, given an unknown author"
        },
        {
          "id": "112",
          "name": "buildBlogAuthorsIndexes (unhappy path, unknown authors) should throw an error message, given unknown authors"
        },
        {
          "id": "113",
          "name": "buildBlogAuthorsIndexes (unhappy path, unknown authors and duplicate authors) should throw an error message, given an unknown author and one duplicate"
        },
        {
          "id": "114",
          "name": "buildBlogAuthorsIndexes (unhappy path, unknown authors and duplicate authors) should throw an error message, given unknown authors and several duplicates"
        }
      ],
      "source": "import type { DocumentToCompute } from '@rtm/shared-types/ContentlayerConfig';\nimport type { Index, Id } from '@rtm/shared-types/Numbers';\n\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogAuthorsIndexes from '../authorsIndexes';\n\nconst fakeAuthorNames = ['fake_author_one', 'fake_author_two', 'fake_author_three'] as const;\n\nconst fakeIndexedAuthorNames = fakeAuthorNames.reduce(\n  (acc, tag, index) => {\n    acc[tag] = index;\n    return acc;\n  },\n  {} as Record<string, Id>\n) as Record<FakeBlogAuthor, Id>;\n\ndescribe('buildBlogAuthorsIndexes (happy path)', () => {\n  it('should return a valid tag indexes array, given valid tagsArray', () => {\n    const authorsArray: FakeBlogAuthor[] = ['fake_author_two', 'fake_author_one'];\n\n    const partialFakePost = {\n      authors: {\n        _array: authorsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'authors'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    const authorsIndexes = buildBlogAuthorsIndexes(partialFakePost, fakeIndexedAuthorNames, fakeAuthorNames);\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(authorsIndexes).toStrictEqual([1, 0]);\n  });\n});\n\ndescribe('buildBlogAuthorsIndexes (unhappy path, duplicate authors)', () => {\n  it('should throw an error message, given one duplicate author', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    const authorsArray: FakeBlogAuthor[] = ['fake_author_two', 'fake_author_one', 'fake_author_two'];\n\n    const partialFakePost = {\n      authors: {\n        _array: authorsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'authors'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogAuthorsIndexes(partialFakePost, fakeIndexedAuthorNames, fakeAuthorNames);\n    } catch (e) {\n      expect(e).toBe('BlogAuthorDuplicatesError: “fake_author_two” is defined several times.');\n    }\n  });\n\n  it('should throw an error message, given many duplicate authors', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    const authorsArray: FakeBlogAuthor[] = ['fake_author_one', 'fake_author_one', 'fake_author_two', 'fake_author_two', 'fake_author_three'];\n\n    const partialFakePost = {\n      authors: {\n        _array: authorsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'authors'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogAuthorsIndexes(partialFakePost, fakeIndexedAuthorNames, fakeAuthorNames);\n    } catch (e) {\n      expect(e).toBe('BlogAuthorDuplicatesError: [“fake_author_one”, “fake_author_two”] are defined several times.');\n    }\n  });\n});\n\ndescribe('buildBlogAuthorsIndexes (unhappy path, unknown authors)', () => {\n  it('should throw an error message, given an unknown author', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    // @ts-expect-error\n    const authorsArray: FakeBlogAuthor[] = ['fake_author_one', 'fake_author_two', 'fake_author_three', '__UNKNOWN__'];\n\n    const partialFakePost = {\n      authors: {\n        _array: authorsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'authors'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogAuthorsIndexes(partialFakePost, fakeIndexedAuthorNames, fakeAuthorNames);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogAuthorError: Invalid author: “__UNKNOWN__”\n  Valid authors are: [“fake_author_one”, “fake_author_two”, “fake_author_three”]`);\n    }\n  });\n\n  it('should throw an error message, given unknown authors', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    // @ts-expect-error\n    const authorsArray: FakeBlogAuthor[] = ['fake_author_one', 'fake_author_two', 'fake_author_three', '__UNKNOWN__', '__UNKNOWN_2__'];\n\n    const partialFakePost = {\n      authors: {\n        _array: authorsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'authors'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogAuthorsIndexes(partialFakePost, fakeIndexedAuthorNames, fakeAuthorNames);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogAuthorError: Invalid authors: [“__UNKNOWN__”, “__UNKNOWN_2__”]\n  Valid authors are: [“fake_author_one”, “fake_author_two”, “fake_author_three”]`);\n    }\n  });\n});\n\ndescribe('buildBlogAuthorsIndexes (unhappy path, unknown authors and duplicate authors)', () => {\n  it('should throw an error message, given an unknown author and one duplicate', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    // @ts-expect-error\n    const authorsArray: FakeBlogAuthor[] = ['fake_author_one', 'fake_author_two', 'fake_author_two', 'fake_author_three', '__UNKNOWN__'];\n\n    const partialFakePost = {\n      authors: {\n        _array: authorsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'authors'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogAuthorsIndexes(partialFakePost, fakeIndexedAuthorNames, fakeAuthorNames);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogAuthorError: Invalid author: “__UNKNOWN__”\n  Valid authors are: [“fake_author_one”, “fake_author_two”, “fake_author_three”]\n• BlogAuthorDuplicatesError: “fake_author_two” is defined several times.`);\n    }\n  });\n\n  it('should throw an error message, given unknown authors and several duplicates', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    const authorsArray: FakeBlogAuthor[] = [\n      'fake_author_one',\n      'fake_author_two',\n      'fake_author_two',\n      'fake_author_three',\n      // @ts-expect-error\n      '__UNKNOWN__',\n      // @ts-expect-error\n      '__UNKNOWN_2__'\n    ];\n\n    const partialFakePost = {\n      authors: {\n        _array: authorsArray\n      }\n    } satisfies Pick<DocumentToCompute, 'authors'> as Partial<DocumentToCompute> as DocumentToCompute;\n\n    try {\n      buildBlogAuthorsIndexes(partialFakePost, fakeIndexedAuthorNames, fakeAuthorNames);\n    } catch (e) {\n      expect(e).toBe(`InvalidBlogAuthorError: Invalid authors: [“__UNKNOWN__”, “__UNKNOWN_2__”]\n  Valid authors are: [“fake_author_one”, “fake_author_two”, “fake_author_three”]\n• BlogAuthorDuplicatesError: “fake_author_two” is defined several times.`);\n    }\n  });\n});\n\ntype FakeBlogAuthor = (typeof fakeAuthorNames)[Index];\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.toolbarInner.test.ts": {
      "tests": [
        {
          "id": "115",
          "name": "buildBottomRightWidgets should return an empty list, given no reason to generate a pagination dropdown"
        },
        {
          "id": "116",
          "name": "buildBottomRightWidgets should match snapshot"
        },
        {
          "id": "117",
          "name": "buildTopLeftWidgets should return empty list, given there is only one tag"
        },
        {
          "id": "118",
          "name": "buildTopLeftWidgets should return crafted top left widgets, given there is enough tags"
        },
        {
          "id": "119",
          "name": "buildTopRightWidgets should return empty list, given there is only one page and only one post"
        },
        {
          "id": "120",
          "name": "buildTopRightWidgets should return a list containing only the FiltersSelectWidget, given only one page but several posts"
        },
        {
          "id": "121",
          "name": "buildTopRightWidgets should return a list containing both the FiltersSelectWidget and the PaginationWidget, given several pages and several posts"
        }
      ],
      "source": "import type { BlogPostPreviewComponentWithMetadatas } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { FiltersAssoc } from '@/config/Blog/client';\nimport type { Id } from '@rtm/shared-types/Numbers';\n\nimport FiltersSelectWidget from '@/components/pages/blog/FiltersSelectWidget';\nimport TagsCommandWidget from '@/components/pages/blog/TagsCommandWidget';\nimport PaginationWidget from '@/components/pages/blog/PaginationWidget';\nimport { createElement, createRef } from 'react';\nimport { describe, expect, it } from 'vitest';\n\nimport { buildBottomRightWidgets, buildTopRightWidgets, buildTopLeftWidgets } from '../toolbarInner';\n\ndescribe('buildBottomRightWidgets', () => {\n  it('should return an empty list, given no reason to generate a pagination dropdown', () => {\n    const pathname = 'pathname';\n    const searchParams = new URLSearchParams();\n\n    const pagesAmount = 1;\n    const currentPage = 1;\n\n    const bottomRightWidgets = buildBottomRightWidgets(pathname, searchParams, { pagesAmount, currentPage });\n    expect(bottomRightWidgets).toStrictEqual([]);\n  });\n\n  it('should match snapshot', () => {\n    const pathname = 'pathname';\n    const searchParams = new URLSearchParams();\n\n    const pagesAmount = 4;\n    const currentPage = 1;\n\n    const bottomRightWidgets = buildBottomRightWidgets(pathname, searchParams, { pagesAmount, currentPage });\n    expect(bottomRightWidgets).toMatchSnapshot();\n  });\n});\n\ndescribe('buildTopLeftWidgets', () => {\n  it('should return empty list, given there is only one tag', () => {\n    const tagsCommandWidgetProps = {\n      memorizedPageBeforeFiltering: createRef<MaybeNull<Id>>(),\n      newSelectedTagsIds: createRef<MaybeNull<Id[]>>(),\n      setSelectedTagSwitch: () => {},\n      tags: ['tag'] as any,\n      selectedTagsIds: []\n    };\n\n    const topLeftWidgets = buildTopLeftWidgets(tagsCommandWidgetProps);\n    expect(topLeftWidgets).toStrictEqual([]);\n  });\n\n  it('should return crafted top left widgets, given there is enough tags', () => {\n    const tagsCommandWidgetProps = {\n      memorizedPageBeforeFiltering: createRef<MaybeNull<Id>>(),\n      newSelectedTagsIds: createRef<MaybeNull<Id[]>>(),\n      tags: ['tag_one', 'tag_two', 'tag_three'] as any,\n      setSelectedTagSwitch: () => {},\n      selectedTagsIds: []\n    };\n\n    const topLeftWidgets = buildTopLeftWidgets(tagsCommandWidgetProps);\n\n    const tagsCommandWidgetElement = createElement(TagsCommandWidget, {\n      memorizedPageBeforeFiltering: tagsCommandWidgetProps.memorizedPageBeforeFiltering,\n\n      setSelectedTagSwitch: tagsCommandWidgetProps.setSelectedTagSwitch,\n      newSelectedTagsIds: tagsCommandWidgetProps.newSelectedTagsIds,\n      selectedTagsIds: tagsCommandWidgetProps.selectedTagsIds,\n      tags: tagsCommandWidgetProps.tags,\n      key: 'tags-filter-widget'\n    });\n\n    const expected = [tagsCommandWidgetElement];\n\n    expect(topLeftWidgets).toStrictEqual(expected);\n  });\n});\n\ndescribe('buildTopRightWidgets', () => {\n  const __filtersAssoc: FiltersAssoc = [\n    {\n      // eslint-disable-next-line no-magic-numbers, @typescript-eslint/no-unused-vars\n      score: (post1: BlogPostPreviewComponentWithMetadatas, post2: BlogPostPreviewComponentWithMetadatas) => 0,\n      // @ts-ignore\n      i18nTitle: ''\n    }\n  ];\n\n  it('should return empty list, given there is only one page and only one post', () => {\n    const paginationWidgetProps = {\n      pagesAmount: 1,\n      postsAmount: 1,\n      currentPage: 1\n    };\n\n    const filtersWidgetProps = {\n      newSelectedFilter: createRef<MaybeNull<Id>>(),\n      setSelectedFilterSwitch: () => {},\n      filtersAssoc: __filtersAssoc,\n      selectedFilter: 0\n    };\n\n    const topRightWidgets = buildTopRightWidgets(paginationWidgetProps, filtersWidgetProps);\n    expect(topRightWidgets).toStrictEqual([]);\n  });\n\n  it('should return a list containing only the FiltersSelectWidget, given only one page but several posts', () => {\n    const paginationWidgetProps = {\n      pagesAmount: 1,\n      postsAmount: 2,\n      currentPage: 1\n    };\n\n    const filtersWidgetProps = {\n      newSelectedFilter: createRef<MaybeNull<Id>>(),\n      setSelectedFilterSwitch: () => {},\n      filtersAssoc: __filtersAssoc,\n      selectedFilter: 0\n    };\n\n    const filtersSelectWidgetElement = createElement(FiltersSelectWidget, {\n      setSelectedFilterSwitch: filtersWidgetProps.setSelectedFilterSwitch,\n      newSelectedFilter: filtersWidgetProps.newSelectedFilter,\n      selectedFilter: filtersWidgetProps.selectedFilter,\n      filtersAssoc: filtersWidgetProps.filtersAssoc,\n      triggerClassName: 'z-20 mb-1 self-end',\n      selectContentClassName: 'z-20',\n      key: 'filters-widget'\n    });\n\n    const expected = [filtersSelectWidgetElement];\n\n    const topRightWidgets = buildTopRightWidgets(paginationWidgetProps, filtersWidgetProps);\n    expect(topRightWidgets).toStrictEqual(expected);\n  });\n\n  it('should return a list containing both the FiltersSelectWidget and the PaginationWidget, given several pages and several posts', () => {\n    const paginationWidgetProps = {\n      postsAmount: 10,\n      pagesAmount: 2,\n      currentPage: 1\n    };\n\n    const filtersWidgetProps = {\n      newSelectedFilter: createRef<MaybeNull<Id>>(),\n      setSelectedFilterSwitch: () => {},\n      filtersAssoc: __filtersAssoc,\n      selectedFilter: 0\n    };\n\n    const filtersSelectWidgetElement = createElement(FiltersSelectWidget, {\n      setSelectedFilterSwitch: filtersWidgetProps.setSelectedFilterSwitch,\n      newSelectedFilter: filtersWidgetProps.newSelectedFilter,\n      selectedFilter: filtersWidgetProps.selectedFilter,\n      filtersAssoc: filtersWidgetProps.filtersAssoc,\n      triggerClassName: 'z-20 mb-1 self-end',\n      selectContentClassName: 'z-20',\n      key: 'filters-widget'\n    });\n\n    const paginationWidgetElement = createElement(PaginationWidget, {\n      pagesAmount: paginationWidgetProps.pagesAmount,\n      currentPage: paginationWidgetProps.currentPage,\n      className: 'w-full justify-end',\n      key: 'pagination-widget'\n    });\n\n    const expected = [filtersSelectWidgetElement, paginationWidgetElement];\n\n    const topRightWidgets = buildTopRightWidgets(paginationWidgetProps, filtersWidgetProps);\n    expect(topRightWidgets).toStrictEqual(expected);\n  });\n});\n"
    },
    "src/lib/landingPages/static/__tests__/postbuild.getLandingPagesStaticParams.disabled_drafts_prod.test.ts": {
      "tests": [
        {
          "id": "122",
          "name": "getLandingPagesStaticParams should return static params, including the mocked drafts"
        }
      ],
      "source": "import type { LpFakeLanguageType } from '𝕍/testingContentCategoryDatas';\nimport type { LandingPagesConfigType } from '@/config/landingPages';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport { TESTING_LP_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getLandingPagesStaticParams from '../getLandingPagesStaticParams';\n\nvi.mock('##/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/i18n')>();\n\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_LP_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('@/config/landingPages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/landingPages')>();\n  const data = [\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/dummy-category/lp-00.mdx',\n        flattenedPath: 'landing-pages/dummy-category/lp-00',\n        sourceFileDir: 'landing-pages/dummy-category',\n        sourceFileName: 'lp-00.mdx',\n        contentType: 'mdx'\n      },\n      metadescription: 'Meta description LP test (default language)',\n      language: 'default_language' satisfies LpFakeLanguageType,\n      url: '/default_language/lp/dummy-category-lp-00',\n      _id: 'landing-pages/dummy-category/lp-00.mdx',\n      title: 'LP test (default language)',\n      slug: 'dummy-category-lp-00',\n      category: 'dummy-category',\n      type: 'LandingPage',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/fake-draft-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/fake-draft-lp-00',\n        sourceFileName: 'fake-draft-lp-00.mdx',\n        sourceFileDir: 'landing-pages/testing',\n        contentType: 'mdx'\n      },\n      language: 'default_language' satisfies LpFakeLanguageType,\n      url: '/default_language/lp/testing-fake-draft-lp-00',\n      _id: 'landing-pages/testing/fake-draft-lp-00.mdx',\n      slug: 'testing-fake-draft-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/fake-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/fake-lp-00',\n        sourceFileDir: 'landing-pages/testing',\n        sourceFileName: 'fake-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      language: 'default_language' satisfies LpFakeLanguageType,\n      url: '/default_language/lp/testing-fake-lp-00',\n      _id: 'landing-pages/testing/fake-lp-00.mdx',\n      slug: 'testing-fake-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: false\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/dummy-category/en/lp-00.mdx',\n        flattenedPath: 'landing-pages/dummy-category/en/lp-00',\n        sourceFileDir: 'landing-pages/dummy-category/en',\n        sourceFileName: 'lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/dummy-category/en/lp-00.mdx',\n      metadescription: 'Meta description LP test EN',\n      language: 'en' satisfies LpFakeLanguageType,\n      url: '/en/lp/dummy-category-lp-00',\n      slug: 'dummy-category-lp-00',\n      category: 'dummy-category',\n      title: 'LP test EN',\n      type: 'LandingPage',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/en/fake-draft-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/en/fake-draft-lp-00',\n        sourceFileDir: 'landing-pages/testing/en',\n        sourceFileName: 'fake-draft-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/testing/en/fake-draft-lp-00.mdx',\n      language: 'en' satisfies LpFakeLanguageType,\n      url: '/en/lp/testing-fake-draft-lp-00',\n      slug: 'testing-fake-draft-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: true\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/en/fake-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/en/fake-lp-00',\n        sourceFileDir: 'landing-pages/testing/en',\n        sourceFileName: 'fake-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/testing/en/fake-lp-00.mdx',\n      language: 'en' satisfies LpFakeLanguageType,\n      url: '/en/lp/testing-fake-lp-00',\n      slug: 'testing-fake-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: false\n    },\n    {\n      _raw: {\n        sourceFilePath: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00.mdx',\n        flattenedPath: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00',\n        sourceFileDir: 'landing-pages/testing/__INVALID_LOCALE__',\n        sourceFileName: 'fake-lp-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00.mdx',\n      url: '/__INVALID_LOCALE__/lp/testing-fake-lp-00',\n      language: '__INVALID_LOCALE__',\n      slug: 'testing-fake-lp-00',\n      metadescription: 'FAKE',\n      type: 'LandingPage',\n      category: 'testing',\n      title: 'FAKE',\n      draft: false\n    }\n  ] satisfies Omit<LandingPage, 'doNotExcludeFromLocalSearch' | 'body'>[];\n\n  return {\n    default: {\n      ...mod.default,\n      allLandingPages: () => data as unknown as LandingPage[],\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies LandingPagesConfigType\n  };\n});\n\ndescribe('getLandingPagesStaticParams', () => {\n  it('should return static params, including the mocked drafts', async () => {\n    const staticParams = await getLandingPagesStaticParams();\n    expect(staticParams).toStrictEqual([\n      { [LandingPageTaxonomy.SLUG]: 'testing-fake-lp-00', [I18nTaxonomy.LANGUAGE]: 'default_language' },\n      { [LandingPageTaxonomy.SLUG]: 'testing-fake-lp-00', [I18nTaxonomy.LANGUAGE]: 'en' }\n    ]);\n  });\n});\n\nvi.doUnmock('##/config/i18n');\nvi.doUnmock('@/config/landingPages');\n"
    },
    "interop/errors/__tests__/prebuild.InvalidBlogTag.test.ts": {
      "tests": [
        {
          "id": "123",
          "name": "InvalidBlogTag (unknown tags) should generate an error message with hint (1 unknown tag)"
        },
        {
          "id": "124",
          "name": "InvalidBlogTag (unknown tags) should generate an error message with hint (many unknown tags)"
        },
        {
          "id": "125",
          "name": "InvalidBlogTag (suggestions) should generate an error message with hint (1 unknown tag, Damerau)"
        },
        {
          "id": "126",
          "name": "InvalidBlogTag (suggestions) should generate an error message with hint (many unknown tags, Damerau)"
        },
        {
          "id": "127",
          "name": "InvalidBlogTag (suggestions) should generate an error message with hint (1 unknown tag, StartsWith)"
        },
        {
          "id": "128",
          "name": "InvalidBlogTag (suggestions) should generate an error message with hint (many unknown tags, StartsWith)"
        },
        {
          "id": "129",
          "name": "InvalidBlogTag (both suggestions and unknown tags) should generate an error message with hint (1 unknown tag, 1 tag with suggestions)"
        },
        {
          "id": "130",
          "name": "InvalidBlogTag (both suggestions and unknown tags) should generate an error message with hint (many unknown tags, 1 tag with suggestions)"
        },
        {
          "id": "131",
          "name": "InvalidBlogTag (both suggestions and unknown tags) should generate an error message with hint (1 unknown tag, many tags with suggestions)"
        },
        {
          "id": "132",
          "name": "InvalidBlogTag (both suggestions and unknown tags) should generate an error message with hint (many unknown tags, many tags with suggestions)"
        },
        {
          "id": "133",
          "name": "InvalidBlogTag (both suggestions and unknown tags) should generate an error message with hint (overlap, Damerau Levenshtein and StartsWith combination)"
        },
        {
          "id": "134",
          "name": "InvalidBlogTag (empty string) should generate an error message with full hint"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport { describe, expect, it } from 'vitest';\n\nimport InvalidBlogTag from '../InvalidBlogTag';\n\nconst fakeBlogTags = [\n  'fake_tag_one',\n  'fake_tag_two',\n  'overlap_tset_',\n  'overlap_test_one',\n  'overlap_test_one_long',\n  'overlap_test_one_long_long',\n  'overlap_test_one_long_long_long'\n] as const;\n\ndescribe('InvalidBlogTag (unknown tags)', () => {\n  it('should generate an error message with hint (1 unknown tag)', () => {\n    const unknownTag = 'sqdjqkdjqskdjqskdjqkdjq';\n    const FAKE_ERROR = new InvalidBlogTag([unknownTag], fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tag detected!\n◦ “sqdjqkdjqskdjqskdjqkdjq” doesn't exist. No suggestion found.`);\n  });\n\n  it('should generate an error message with hint (many unknown tags)', () => {\n    const unknownTags = ['sqdjqkdjqskdjqskdjqkdjq', 'sdkqldkqldkqldkqldkqqskdlqkdql'];\n    const FAKE_ERROR = new InvalidBlogTag(unknownTags, fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tags detected!\n◦ [“sqdjqkdjqskdjqskdjqkdjq”, “sdkqldkqldkqldkqldkqqskdlqkdql”] don't exist. No suggestion found.`);\n  });\n});\n\ndescribe('InvalidBlogTag (suggestions)', () => {\n  it('should generate an error message with hint (1 unknown tag, Damerau)', () => {\n    const unknownTag = 'fake_tag_oen';\n    const FAKE_ERROR = new InvalidBlogTag([unknownTag], fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tag detected!\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?`);\n  });\n\n  it('should generate an error message with hint (many unknown tags, Damerau)', () => {\n    const unknownTags = ['fake_tag_oen', 'fake_tag_tow'];\n    const FAKE_ERROR = new InvalidBlogTag(unknownTags, fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tags detected!\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?\n◦ “fake_tag_tow” doesn't exist, did you mean: “fake_tag_two”?`);\n  });\n\n  it('should generate an error message with hint (1 unknown tag, StartsWith)', () => {\n    const unknownTag = 'fake';\n    const FAKE_ERROR = new InvalidBlogTag([unknownTag], fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tag detected!\n◦ “fake” doesn't exist, did you mean: “fake_tag_one”, or “fake_tag_two”?`);\n  });\n\n  it('should generate an error message with hint (many unknown tags, StartsWith)', () => {\n    const unknownTags = ['fake', 'fake_'];\n    const FAKE_ERROR = new InvalidBlogTag(unknownTags, fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tags detected!\n◦ “fake” doesn't exist, did you mean: “fake_tag_one”, or “fake_tag_two”?\n◦ “fake_” doesn't exist, did you mean: “fake_tag_one”, or “fake_tag_two”?`);\n  });\n});\n\ndescribe('InvalidBlogTag (both suggestions and unknown tags)', () => {\n  it('should generate an error message with hint (1 unknown tag, 1 tag with suggestions)', () => {\n    const unknownTags = ['fake_tag_oen', 'dsqkdkqsldsqkdjsqkdjsqkdjq'];\n    const FAKE_ERROR = new InvalidBlogTag(unknownTags, fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tags detected!\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?\n◦ “dsqkdkqsldsqkdjsqkdjsqkdjq” doesn't exist. No suggestion found.`);\n  });\n\n  it('should generate an error message with hint (many unknown tags, 1 tag with suggestions)', () => {\n    const unknownTags = ['fake_tag_oen', 'dsqkdkqsldsqkdjsqkdjsqkdjq', 'dsqldsqldksqdlqskdlqsksdq'];\n    const FAKE_ERROR = new InvalidBlogTag(unknownTags, fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tags detected!\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?\n◦ [“dsqkdkqsldsqkdjsqkdjsqkdjq”, “dsqldsqldksqdlqskdlqsksdq”] don't exist. No suggestion found.`);\n  });\n\n  it('should generate an error message with hint (1 unknown tag, many tags with suggestions)', () => {\n    const unknownTags = ['fake_tag_oen', 'fake_tag_tow', 'dsqkdkqsldsqkdjsqkdjsqkdjq'];\n    const FAKE_ERROR = new InvalidBlogTag(unknownTags, fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tags detected!\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?\n◦ “fake_tag_tow” doesn't exist, did you mean: “fake_tag_two”?\n◦ “dsqkdkqsldsqkdjsqkdjsqkdjq” doesn't exist. No suggestion found.`);\n  });\n\n  it('should generate an error message with hint (many unknown tags, many tags with suggestions)', () => {\n    const unknownTags = ['fake_tag_oen', 'fake_tag_tow', 'dsqkdkqsldsqkdjsqkdjsqkdjq', 'sdlksqldksqldkqsldkqqssl'];\n    const FAKE_ERROR = new InvalidBlogTag(unknownTags, fakeBlogTags);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tags detected!\n◦ “fake_tag_oen” doesn't exist, did you mean: “fake_tag_one”?\n◦ “fake_tag_tow” doesn't exist, did you mean: “fake_tag_two”?\n◦ [“dsqkdkqsldsqkdjsqkdjsqkdjq”, “sdlksqldksqldkqsldkqqssl”] don't exist. No suggestion found.`);\n  });\n\n  it('should generate an error message with hint (overlap, Damerau Levenshtein and StartsWith combination)', () => {\n    const unknownTag = 'overlap_test_';\n    const damerauThreshold = 3;\n    const FAKE_ERROR = new InvalidBlogTag([unknownTag], fakeBlogTags, damerauThreshold);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tag detected!\n◦ “overlap_test_” doesn't exist, did you mean: “overlap_tset_”, or “overlap_test_one”, or “overlap_test_one_long”, or “overlap_test_one_long_long”, or “overlap_test_one_long_long_long”?`);\n  });\n});\n\ndescribe('InvalidBlogTag (empty string)', () => {\n  it('should generate an error message with full hint', () => {\n    const unknownTag: EmptyString = '';\n    const damerauThreshold = 3;\n    const FAKE_ERROR = new InvalidBlogTag([unknownTag], fakeBlogTags, damerauThreshold);\n\n    expect(FAKE_ERROR.message).toBe(`Invalid blog tag detected!\n◦ “” doesn't exist, did you mean: “fake_tag_one”, or “fake_tag_two”, or “overlap_tset_”, or “overlap_test_one”, or “overlap_test_one_long”, or “overlap_test_one_long_long”, or “overlap_test_one_long_long_long”?`);\n  });\n});\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogCategoryGuard.mocked_blog_route_root.test.ts": {
      "tests": [
        {
          "id": "135",
          "name": "blogPostGuard should not throw, given valid input"
        },
        {
          "id": "136",
          "name": "blogPostGuard should throw redirect error, given invalid slug"
        },
        {
          "id": "137",
          "name": "blogPostGuard should throw redirect error, given invalid subcategory"
        },
        {
          "id": "138",
          "name": "blogPostGuard should throw redirect error, given invalid category"
        },
        {
          "id": "139",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid subcategory"
        },
        {
          "id": "140",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid category"
        },
        {
          "id": "141",
          "name": "blogPostGuard should throw redirect error, given invalid slug, invalid category, and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport blogPostGuard from '../blogPostGuard';\n\n// eslint-disable-next-line no-magic-numbers\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\nvi.mock('##/config/routes', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/routes')>();\n\n  return {\n    default: {\n      ...mod.default,\n      BLOG: '/blog/'\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('blogPostGuard', () => {\n  it('should not throw, given valid input', async () => {\n    await expect(\n      blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid slug', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY + '/' + TESTING_BLOG_FAKE_SUBCATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid category', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid category', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug, invalid category, and invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n});\n\nvi.doUnmock('##/config/routes');\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogPostGuard.test.ts": {
      "tests": [
        {
          "id": "142",
          "name": "blogPostGuard should not throw, given valid input"
        },
        {
          "id": "143",
          "name": "blogPostGuard should throw redirect error, given invalid slug"
        },
        {
          "id": "144",
          "name": "blogPostGuard should throw redirect error, given invalid subcategory"
        },
        {
          "id": "145",
          "name": "blogPostGuard should throw redirect error, given invalid category"
        },
        {
          "id": "146",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid subcategory"
        },
        {
          "id": "147",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid category"
        },
        {
          "id": "148",
          "name": "blogPostGuard should throw redirect error, given invalid slug, invalid category, and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport { describe, expect, it } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport blogPostGuard from '../blogPostGuard';\n\n// eslint-disable-next-line no-magic-numbers\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\ndescribe('blogPostGuard', () => {\n  it('should not throw, given valid input', async () => {\n    await expect(\n      blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid slug', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY + '/' + TESTING_BLOG_FAKE_SUBCATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid category', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid category', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug, invalid category, and invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/blog/__tests__/prebuild.blogType.test.ts": {
      "tests": [
        {
          "id": "149",
          "name": "generateBlogType (formatted) should match snapshot"
        },
        {
          "id": "150",
          "name": "generateBlogType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INDEX_TOKEN } from '##/lib/builders/unifiedImport';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport generateBlogType from '../blogType';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/blog/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'BLOG_TYPE';\n\ndescribe('generateBlogType (formatted)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_TYPE';\n    await generateBlogType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_TYPE';\n    await generateBlogType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            en: ['fake-post-01', 'fake-post-03'],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            es: ['fake-post-01', INDEX_TOKEN],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n          'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          'fake-subcategory-seven': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] },\n          'fake-empty-subcategory': {}\n        },\n        'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateBlogType (ugly)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_TYPE';\n    await generateBlogType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_TYPE';\n    await generateBlogType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            en: ['fake-post-01', 'fake-post-03', INDEX_TOKEN],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            es: ['fake-post-01'],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            en: ['fake-post-03'],\n            it: ['fake-post-03']\n          },\n          'fake-subcategory-four': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            es: ['fake-post-04', INDEX_TOKEN]\n          }\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          'fake-subcategory-seven': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            zh: ['fake-post-10', INDEX_TOKEN]\n          },\n          'fake-empty-subcategory': {}\n        },\n        'fake-category-two': {\n          'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN], zh: ['fake-post-10'] }\n        },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.getBlogStaticParams.enabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "151",
          "name": "getBlogStaticParams should return static params, including the 'drafts' fake language"
        }
      ],
      "source": "import type { BlogConfigType } from '@/config/Blog/server';\n\nimport { TESTING_BLOG_CATEGORY_FAKE_LANGUAGES, TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { INDEX_TOKEN } from '##/lib/misc/contentlayerCornerCases';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport BlogConfig from '@/config/Blog/server';\n\nimport getBlogStaticParams from '../static/getBlogStaticParams';\n\nvi.mock('##/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/i18n')>();\n\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_BLOG_CATEGORY_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('../api', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../api')>();\n\n  return {\n    ...mod,\n    getAllBlogCategories: () => [BlogConfig.TESTING_CATEGORY]\n  };\n});\n\nvi.mock('@/config/Blog/server', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/Blog/server')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies BlogConfigType\n  };\n});\n\ndescribe('getBlogStaticParams', () => {\n  it(\"should return static params, including the 'drafts' fake language\", async () => {\n    const staticParams = await getBlogStaticParams();\n    expect(staticParams).toStrictEqual([\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-01'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-02'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-03'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-draft-01',\n        [I18nTaxonomy.LANGUAGE]: 'drafts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-draft-02',\n        [I18nTaxonomy.LANGUAGE]: 'drafts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-draft-03',\n        [I18nTaxonomy.LANGUAGE]: 'drafts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-01',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-02',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-03',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-04',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN,\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      }\n    ]);\n  });\n});\n\nvi.doUnmock('##/config/i18n');\nvi.doUnmock('../api');\nvi.doUnmock('@/config/Blog/server');\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.localesInfos.test.ts": {
      "tests": [
        {
          "id": "152",
          "name": "localesInfosValidator should not produce error feedback, given valid inputs"
        },
        {
          "id": "153",
          "name": "localesInfosValidator should throw ENOENT, given invalid localesFolder"
        },
        {
          "id": "154",
          "name": "localesInfosValidator should throw BuilderError, given invalid i18nSchemaFilePath"
        },
        {
          "id": "155",
          "name": "localesInfosValidator should throw, given invalid locales folder (missing locale infos in it.ts)"
        },
        {
          "id": "156",
          "name": "localesInfosValidator should produce an error feedback, given invalid locales folder (invalid locale code)"
        },
        {
          "id": "157",
          "name": "localesInfosValidator should produce an error feedback, given invalid locales folder with several issues (invalid locale code in both invalid_it.ts and invalid_fr.ts)"
        },
        {
          "id": "158",
          "name": "localesInfosValidator should produce error feedback, given one _infos obj has an empty lng field"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// @ts-expect-error\nimport BuilderError from '@rtm/prebuilder/errors/BuilderError';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport localesInfosValidator from '../localesInfos';\n\nconst VALID_LOCALES_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_locales/valid_fake_locales';\nconst VALID_I18N_LOCALES_SCHEMA_FILEPATH = './packages/prebuilder/src/validators/__tests__/fake_locales/valid_fake_locales/schema.ts';\n\nconst INVALID_LOCALES_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH = './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales/schema.ts';\n\nconst INVALID_LOCALES_FOLDER_SEVERAL_LNG_FIELD_MISMATCH =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_several_lng_field_mismatch';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_SEVERAL_LNG_FIELD_MISMATCH =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_several_lng_field_mismatch/schema.ts';\n\nconst INVALID_LOCALES_FOLDER_MISSING_LOCALE_CODE =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_missing_locale_infos';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_MISSING_LOCALE_CODE =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_missing_locale_infos/schema.ts';\n\nconst INVALID_LOCALES_FOLDER_EMPTY_LNG_FIELD = './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_empty_lng_field';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_EMPTY_LNG_FIELD =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_empty_lng_field/schema.ts';\n\nconst EMPTY_FEEDBACK: EmptyString = '';\n\ndescribe('localesInfosValidator', () => {\n  it('should not produce error feedback, given valid inputs', async () => {\n    const feedback = await localesInfosValidator(VALID_LOCALES_FOLDER, VALID_I18N_LOCALES_SCHEMA_FILEPATH);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n\n  it('should throw ENOENT, given invalid localesFolder', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await localesInfosValidator(INVALID_PATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n\n    try {\n      await localesInfosValidator(INVALID_PATH, INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should throw BuilderError, given invalid i18nSchemaFilePath', async () => {\n    await expect(localesInfosValidator(VALID_LOCALES_FOLDER, INVALID_PATH)).rejects.toThrowError(BuilderError);\n  });\n\n  it('should throw, given invalid locales folder (missing locale infos in it.ts)', async () => {\n    await expect(\n      localesInfosValidator(INVALID_LOCALES_FOLDER_MISSING_LOCALE_CODE, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_MISSING_LOCALE_CODE)\n    ).rejects.toThrowError(BuilderError);\n  });\n\n  it('should produce an error feedback, given invalid locales folder (invalid locale code)', async () => {\n    const feedback = await localesInfosValidator(INVALID_LOCALES_FOLDER, INVALID_I18N_LOCALES_SCHEMA_FILEPATH);\n    expect(feedback).not.toBe(EMPTY_FEEDBACK);\n  });\n\n  it('should produce an error feedback, given invalid locales folder with several issues (invalid locale code in both invalid_it.ts and invalid_fr.ts)', async () => {\n    const feedback = await localesInfosValidator(\n      INVALID_LOCALES_FOLDER_SEVERAL_LNG_FIELD_MISMATCH,\n      INVALID_I18N_LOCALES_SCHEMA_FILEPATH_SEVERAL_LNG_FIELD_MISMATCH\n    );\n    expect(feedback).not.toBe(EMPTY_FEEDBACK);\n  });\n\n  it('should produce error feedback, given one _infos obj has an empty lng field', async () => {\n    const feedback = await localesInfosValidator(INVALID_LOCALES_FOLDER_EMPTY_LNG_FIELD, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_EMPTY_LNG_FIELD);\n    expect(feedback).not.toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/blog/__tests__/prebuild.blogArchitectureType.test.ts": {
      "tests": [
        {
          "id": "159",
          "name": "generateBlogArchitectureType (formatted) should match snapshot"
        },
        {
          "id": "160",
          "name": "generateBlogArchitectureType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport generateBlogArchitectureType from '../blogArchitectureType';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/blog/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'BLOG_ARCHITECTURE_TYPE';\n\ndescribe('generateBlogArchitectureType (formatted)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            en: ['fake-post-01', 'fake-post-03'],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            es: ['fake-post-01'],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n          'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n        },\n        'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } }\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\nfs.rm;\ndescribe('generateBlogArchitectureType (ugly)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            en: ['fake-post-01', 'fake-post-03'],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            es: ['fake-post-01'],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n          'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n        },\n        'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } }\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.url.test.ts": {
      "tests": [
        {
          "id": "161",
          "name": "blog url (happy paths) should return the correct default language URL, given a valid default language flattened path"
        },
        {
          "id": "162",
          "name": "blog url (happy paths) should return the correct language URL, given a valid flattened path including a language"
        },
        {
          "id": "163",
          "name": "blog url (happy paths, with index notation) should return the correct language URL, given a valid flattened path including a language"
        },
        {
          "id": "164",
          "name": "blog url (unhappy paths) should throw, given invalid flattened paths"
        }
      ],
      "source": "import {\n  ForbiddenToUseIndexError,\n  InvalidArgumentsError,\n  BLOG_POSTS_FOLDER,\n  DEFAULT_LANGUAGE,\n  ROUTES_ROOTS,\n  INDEX_TOKEN\n} from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostUrl from '../url';\n\nconst EXT = '.FAKE_EXT';\n\nconst root = ROUTES_ROOTS.BLOG;\n\ndescribe('blog url (happy paths)', () => {\n  it('should return the correct default language URL, given a valid default language flattened path', () => {\n    const url = '/' + DEFAULT_LANGUAGE + root + 'category/subcategory/slug';\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n  });\n\n  it('should return the correct language URL, given a valid flattened path including a language', () => {\n    const url = '/' + 'fr' + root + 'category/subcategory/slug';\n    const url2 = '/' + 'en' + root + 'category/subcategory/slug';\n    const url3 = '/' + 'it' + root + 'category/subcategory/slug';\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/fr/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/fr/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/en/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/en/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url2);\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url3);\n  });\n});\n\ndescribe('blog url (happy paths, with index notation)', () => {\n  it('should return the correct language URL, given a valid flattened path including a language', () => {\n    const url = '/' + 'it' + root + 'category/subcategory/index';\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n  });\n});\n\ndescribe('blog url (unhappy paths)', () => {\n  it('should throw, given invalid flattened paths', () => {\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo/bar' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo/bar'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.url.test.ts": {
      "tests": [
        {
          "id": "165",
          "name": "lp url (happy paths) should return the correct default language URL, given a valid default language flattened path"
        },
        {
          "id": "166",
          "name": "lp url (happy paths) should return the correct language URL, given a valid flattened path including a language"
        },
        {
          "id": "167",
          "name": "lp url (unhappy paths) should throw, given invalid flattened paths"
        }
      ],
      "source": "import {\n  ForbiddenToUseIndexError,\n  InvalidArgumentsError,\n  LANDING_PAGES_FOLDER,\n  DEFAULT_LANGUAGE,\n  ROUTES_ROOTS,\n  INDEX_TOKEN\n} from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildLandingPageUrl from '../url';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('lp url (happy paths)', () => {\n  const root = ROUTES_ROOTS.LANDING_PAGES;\n  it('should return the correct default language URL, given a valid default language flattened path', () => {\n    const url = '/' + DEFAULT_LANGUAGE + root + 'category-slug';\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n  });\n\n  it('should return the correct language URL, given a valid flattened path including a language', () => {\n    const url = '/' + 'fr' + root + 'category-slug';\n    const url2 = '/' + 'en' + root + 'category-slug';\n    const url3 = '/' + 'it' + root + 'category-slug';\n    const url4 = '/' + 'it' + root + 'index-slug';\n    const url5 = '/' + 'it' + root + 'category-index';\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/fr/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/fr/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/en/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/en/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url2);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/it/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url3);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/it/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/it/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(url4);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/it/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it'\n        },\n        _id: '_'\n      })\n    ).toBe(url5);\n  });\n});\n\ndescribe('lp url (unhappy paths)', () => {\n  it('should throw, given invalid flattened paths', () => {\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/it/slug/foo' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it/slug/foo'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/it/slug/foo/bar' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it/slug/foo/bar'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.language.test.ts": {
      "tests": [
        {
          "id": "168",
          "name": "lp language (happy paths) should be fault tolerant, given an invalid language in the flattenedPath"
        },
        {
          "id": "169",
          "name": "lp language (happy paths) should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "170",
          "name": "lp language (happy paths) should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "171",
          "name": "lp language (happy paths, with index notation) should be fault tolerant, given an invalid language in the flattenedPath"
        },
        {
          "id": "172",
          "name": "lp language (happy paths, with index notation) should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "173",
          "name": "lp language (happy paths, with index notation) should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "174",
          "name": "lp language (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, LANDING_PAGES_FOLDER, DEFAULT_LANGUAGE, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport buildLandingPageLanguageFlag from '../language';\n\nconst EXT = '.FAKE_EXT';\n\nconst PREFIX = '$';\nlet prefixAcc = PREFIX;\nwhile (LANGUAGES.includes((prefixAcc + DEFAULT_LANGUAGE) as any)) prefixAcc += PREFIX;\nconst invalidLanguage = prefixAcc + DEFAULT_LANGUAGE;\n\ndescribe('lp language (happy paths)', () => {\n  it('should be fault tolerant, given an invalid language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('lp language (happy paths, with index notation)', () => {\n  it('should be fault tolerant, given an invalid language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/{INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('lp language (unhappy paths)', () => {\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + '/category/lang/slug' + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + '/category/lang/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + '/category/slug' + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/__tests__/prebuild.next.test.ts": {
      "tests": [
        {
          "id": "175",
          "name": "stackMiddlewares should return an instanceof function"
        },
        {
          "id": "176",
          "name": "stackMiddlewares calls each middleware with the correct arguments"
        },
        {
          "id": "177",
          "name": "stackMiddlewares calls middlewares in the correct order"
        },
        {
          "id": "178",
          "name": "stackMiddlewares properly propagates request and event through middlewares"
        },
        {
          "id": "179",
          "name": "stackMiddlewares returns the final response correctly"
        },
        {
          "id": "180",
          "name": "stackMiddlewares handles slow async middleware correctly"
        }
      ],
      "source": "import type { NextFetchEvent, NextMiddleware, NextRequest } from 'next/server';\nimport type { MiddlewareFactory } from '@rtm/shared-types/Next';\nimport type { Index } from '@rtm/shared-types/Numbers';\n\nimport { describe, expect, it, vi } from 'vitest';\nimport { NextResponse } from 'next/server';\n\nimport { stackMiddlewares } from '../next';\n\nconst fakeMiddleware: MiddlewareFactory = (next: NextMiddleware) => {\n  return async (request: NextRequest, _next: NextFetchEvent) => {\n    const res = await next(request, _next);\n    return res;\n  };\n};\n\nconst fakeSlowAsyncMiddleware: MiddlewareFactory = (next: NextMiddleware) => {\n  return async (request: NextRequest, _next: NextFetchEvent) => {\n    const res = await next(request, _next);\n    // eslint-disable-next-line no-magic-numbers\n    await new Promise((resolve) => setTimeout(resolve, 10));\n    return res;\n  };\n};\n\nconst fakeRequest = {} as NextRequest;\nconst fakeEvent = {} as NextFetchEvent;\n\ndescribe('stackMiddlewares', () => {\n  it('should return an instanceof function', () => {\n    const foo = stackMiddlewares();\n    expect(foo).toBeInstanceOf(Function);\n    const bar = stackMiddlewares([]);\n    expect(bar).toBeInstanceOf(Function);\n    const foo2 = stackMiddlewares([fakeMiddleware]);\n    expect(foo2).toBeInstanceOf(Function);\n    const bar2 = stackMiddlewares([fakeMiddleware, fakeMiddleware]);\n    expect(bar2).toBeInstanceOf(Function);\n  });\n\n  // * ... [ChatGPT] AUTOGENERATED\n\n  it('calls each middleware with the correct arguments', () => {\n    const mockMiddleware1 = vi.fn((next) => next);\n    const mockMiddleware2 = vi.fn((next) => next);\n    const stackedMiddleware = stackMiddlewares([mockMiddleware1, mockMiddleware2]);\n\n    stackedMiddleware(fakeRequest, fakeEvent);\n\n    expect(mockMiddleware1).toHaveBeenCalled();\n    expect(mockMiddleware2).toHaveBeenCalled();\n  });\n\n  it('calls middlewares in the correct order', () => {\n    const order: Index[] = [];\n    const middleware1: MiddlewareFactory = (next) => (req, evt) => {\n      // eslint-disable-next-line no-magic-numbers\n      order.push(1);\n      next(req, evt);\n    };\n    const middleware2: MiddlewareFactory = (next) => (req, evt) => {\n      // eslint-disable-next-line no-magic-numbers\n      order.push(2);\n      next(req, evt);\n    };\n\n    const stackedMiddleware = stackMiddlewares([middleware1, middleware2]);\n    stackedMiddleware(fakeRequest, fakeEvent);\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(order).toStrictEqual([1, 2]);\n  });\n\n  it('properly propagates request and event through middlewares', async () => {\n    const middleware1 = vi.fn((next) => (req: any, evt: any) => next(req, evt));\n    const middleware2 = vi.fn((next) => (req: any, evt: any) => next(req, evt));\n\n    const stackedMiddleware = stackMiddlewares([middleware1, middleware2]);\n    await stackedMiddleware(fakeRequest, fakeEvent);\n\n    expect(middleware1).toHaveBeenCalledWith(expect.any(Function));\n    expect(middleware2).toHaveBeenCalledWith(expect.any(Function));\n  });\n\n  it('returns the final response correctly', async () => {\n    const middleware: MiddlewareFactory = (next) => (req, evt) => next(req, evt);\n    const stackedMiddleware = stackMiddlewares([middleware]);\n    const response = await stackedMiddleware(fakeRequest, fakeEvent);\n\n    expect(response).toBeInstanceOf(NextResponse);\n  });\n\n  it('handles slow async middleware correctly', async () => {\n    const stackedMiddleware = stackMiddlewares([fakeSlowAsyncMiddleware]);\n    const stackedMiddleware2 = stackMiddlewares([fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware]);\n    const stackedMiddleware3 = stackMiddlewares([fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware]);\n\n    await Promise.all([\n      expect(stackedMiddleware(fakeRequest, fakeEvent)).resolves.not.toThrow(),\n      expect(stackedMiddleware2(fakeRequest, fakeEvent)).resolves.not.toThrow(),\n      expect(stackedMiddleware3(fakeRequest, fakeEvent)).resolves.not.toThrow()\n    ]);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.getBlogStaticParams.disabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "181",
          "name": "getBlogStaticParams should return static params, excluding the 'drafts' fake language"
        }
      ],
      "source": "import type { BlogConfigType } from '@/config/Blog/server';\n\nimport { TESTING_BLOG_CATEGORY_FAKE_LANGUAGES, TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { INDEX_TOKEN } from '##/lib/misc/contentlayerCornerCases';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport BlogConfig from '@/config/Blog/server';\n\nimport getBlogStaticParams from '../static/getBlogStaticParams';\n\nvi.mock('##/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/i18n')>();\n\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_BLOG_CATEGORY_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('../api', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../api')>();\n\n  return {\n    ...mod,\n    getAllBlogCategories: () => [BlogConfig.TESTING_CATEGORY]\n  };\n});\n\nvi.mock('@/config/Blog/server', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/Blog/server')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies BlogConfigType\n  };\n});\n\ndescribe('getBlogStaticParams', () => {\n  it(\"should return static params, excluding the 'drafts' fake language\", async () => {\n    const staticParams = await getBlogStaticParams();\n    expect(staticParams).toStrictEqual([\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-01'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-02'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-03'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-01',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-02',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-03',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-04',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN,\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      }\n    ]);\n  });\n});\n\nvi.doUnmock('##/config/i18n');\nvi.doUnmock('../api');\nvi.doUnmock('@/config/Blog/server');\n"
    },
    "packages/prebuilder/src/generators/lp/__tests__/prebuild.lpType.test.ts": {
      "tests": [
        {
          "id": "182",
          "name": "generateLandingPagesType (formatted) should match snapshot"
        },
        {
          "id": "183",
          "name": "generateLandingPagesType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INDEX_TOKEN } from '##/lib/builders/unifiedImport';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport generateLandingPagesType from '../lpType';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/lp/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'LP_TYPE';\n\ndescribe('generateLandingPagesType (formatted)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = true;\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_LP_TYPE';\n    await generateLandingPagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_LP_TYPE';\n    await generateLandingPagesType(\n      {\n        'fake-category-one': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'],\n          en: ['fake-lp-01', 'fake-lp-03'],\n          it: ['fake-lp-01', 'fake-lp-02'],\n          fr: ['fake-lp-01']\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'],\n          zh: ['fake-lp-10']\n        },\n        'fake-category-three': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], en: ['fake-lp-03'], it: ['fake-lp-03'] },\n        'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], es: ['fake-lp-04'] },\n        'fake-category-two': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], zh: ['fake-lp-10'] },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateLandingPagesType (ugly)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = false;\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_LP_TYPE';\n    await generateLandingPagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_LP_TYPE';\n    await generateLandingPagesType(\n      {\n        'fake-category-one': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03', INDEX_TOKEN],\n          it: ['fake-lp-01', 'fake-lp-02', INDEX_TOKEN],\n          en: ['fake-lp-01', 'fake-lp-03'],\n          fr: ['fake-lp-01']\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'],\n          zh: ['fake-lp-10']\n        },\n        'fake-category-three': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], en: ['fake-lp-03'], it: ['fake-lp-03'] },\n        'fake-category-two': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], zh: ['fake-lp-10', INDEX_TOKEN] },\n        'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], es: ['fake-lp-04'] },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.language.test.ts": {
      "tests": [
        {
          "id": "184",
          "name": "blog language (happy paths) should be fault tolerant, given an invalid language in the flattenedPath"
        },
        {
          "id": "185",
          "name": "blog language (happy paths) should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "186",
          "name": "blog language (happy paths) should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "187",
          "name": "blog language (happy paths, with index notation) should handle index corner cases, given a valid default language path using index notation"
        },
        {
          "id": "188",
          "name": "blog language (happy paths, with index notation) should handle index corner cases, given a valid custom language path using index notation"
        },
        {
          "id": "189",
          "name": "blog language (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, BLOG_POSTS_FOLDER, DEFAULT_LANGUAGE, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport buildBlogPostLanguageFlag from '../language';\n\nconst EXT = '.FAKE_EXT';\n\nconst PREFIX = '$';\nlet prefixAcc = PREFIX;\nwhile (LANGUAGES.includes((prefixAcc + DEFAULT_LANGUAGE) as any)) prefixAcc += PREFIX;\nconst invalidLanguage = prefixAcc + DEFAULT_LANGUAGE;\n\ndescribe('blog language (happy paths)', () => {\n  it('should be fault tolerant, given an invalid language in the flattenedPath', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('blog language (happy paths, with index notation)', () => {\n  it('should handle index corner cases, given a valid default language path using index notation', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${INDEX_TOKEN}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should handle index corner cases, given a valid custom language path using index notation', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}/${INDEX_TOKEN}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n});\n\ndescribe('blog language (unhappy paths)', () => {\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/lang/slug' + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/lang/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/slug' + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogSubcategoryGuard.mocked_blog_route_root.test.ts": {
      "tests": [
        {
          "id": "190",
          "name": "blogSubcategoryGuard should not throw redirect error, given valid category and subcategory"
        },
        {
          "id": "191",
          "name": "blogSubcategoryGuard should throw redirect error, given invalid category and valid subcategory"
        },
        {
          "id": "192",
          "name": "blogSubcategoryGuard should throw redirect error, given invalid category and subcategory"
        },
        {
          "id": "193",
          "name": "blogSubcategoryGuard should throw redirect error, given valid category and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport blogSubcategoryGuard from '../blogSubcategoryGuard';\n\n// eslint-disable-next-line no-magic-numbers\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\nvi.mock('##/config/routes', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/routes')>();\n\n  return {\n    default: {\n      ...mod.default,\n      BLOG: '/blog/'\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('blogSubcategoryGuard', () => {\n  it('should not throw redirect error, given valid category and subcategory', async () => {\n    await expect(\n      blogSubcategoryGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid category and valid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid category and subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given valid category and invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n});\n\nvi.doUnmock('##/config/routes');\n"
    },
    "src/lib/pages/static/__tests__/postbuild.getPagesStaticParams.skip_ssg.test.ts": {
      "tests": [
        {
          "id": "194",
          "name": "getPageStaticParams should return static params according to the allPages mock"
        }
      ],
      "source": "import type { PagesConfigType } from '@/config/pages';\nimport type { Page } from 'contentlayer/generated';\nimport type { PagePath } from '@/types/Page';\n\nimport { TESTING_PAGES_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getPageStaticParams from '../getPageStaticParams';\n\nvi.mock('../../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...TESTING_PAGES_FAKE_LANGUAGES]))\n  };\n});\n\nvi.mock('@/config/pages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/pages')>();\n\n  const data = [\n    {\n      _raw: {\n        sourceFilePath: 'pages/page-00.mdx',\n        flattenedPath: 'pages/page-00',\n        sourceFileName: 'page-00.mdx',\n        sourceFileDir: 'pages',\n        contentType: 'mdx'\n      },\n      metadescription: 'Metadescription de la page de test',\n      _id: 'pages/page-00.mdx',\n      title: 'Test Page',\n      url: '/fr/page-00',\n      path: 'page-00',\n      language: 'fr',\n      draft: false,\n      type: 'Page',\n      root: '/'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/en/nesting-1/nesting-2/page-00',\n        sourceFileDir: 'pages/en/nesting-1/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/en/nesting-1/nesting-2/page-00.mdx',\n      metadescription: 'Test page metadescription',\n      url: '/en/nesting-1/nesting-2/page-00',\n      title: 'Test Page - Nesting 2 (EN)',\n      path: 'nesting-1/nesting-2/page-00',\n      root: 'nesting-1',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    },\n    {\n      _raw: {\n        sourceFilePath: 'pages/en/skipped/nesting-2/page-00.mdx',\n        flattenedPath: 'pages/en/skipped/nesting-2/page-00',\n        sourceFileDir: 'pages/en/skipped/nesting-2',\n        sourceFileName: 'page-00.mdx',\n        contentType: 'mdx'\n      },\n      _id: 'pages/en/skipped/nesting-2/page-00.mdx',\n      metadescription: 'Test page metadescription',\n      url: '/en/skipped/nesting-2/page-00',\n      title: 'Test Page - Nesting 2 (EN)',\n      path: 'skipped/nesting-2/page-00',\n      root: 'skipped',\n      language: 'en',\n      draft: false,\n      type: 'Page'\n    }\n  ] satisfies Omit<Page, 'body'>[];\n\n  return {\n    default: {\n      ...mod.default,\n      SKIP_AUTOMOUNT: { paths: ['page-00'] as unknown as PagePath[], prefixes: ['skipped'] },\n      allPages: () => data as unknown as Page[],\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies PagesConfigType\n  };\n});\n\ndescribe('getPageStaticParams', () => {\n  it('should return static params according to the allPages mock', () => {\n    const staticParams = getPageStaticParams();\n\n    expect(staticParams).toStrictEqual([{ [PageTaxonomy.PATH]: ['nesting-1', 'nesting-2', 'page-00'], [I18nTaxonomy.LANGUAGE]: 'en' }]);\n  });\n});\n\nvi.doUnmock('../../../../../interop/config/i18n');\nvi.doUnmock('@/config/pages');\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.headings.test.ts": {
      "tests": [
        {
          "id": "195",
          "name": "buildBlogPostHeadings should match snapshot (empty string)"
        },
        {
          "id": "196",
          "name": "buildBlogPostHeadings should match snapshot (one title)"
        },
        {
          "id": "197",
          "name": "buildBlogPostHeadings should match snapshot (one title, no heading linefeed)"
        },
        {
          "id": "198",
          "name": "buildBlogPostHeadings should match snapshot (not a title)"
        },
        {
          "id": "199",
          "name": "buildBlogPostHeadings should match snapshot (not a title, no heading linefeed)"
        },
        {
          "id": "200",
          "name": "buildBlogPostHeadings should match snapshot (melting pot from hell)"
        },
        {
          "id": "201",
          "name": "buildBlogPostHeadings should match snapshot (melting pot from hell, no heading linefeed)"
        }
      ],
      "source": "import type { DocumentToCompute } from '@rtm/shared-types/ContentlayerConfig';\n\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostHeadings from '../headings';\n\ndescribe('buildBlogPostHeadings', () => {\n  it('should match snapshot (empty string)', () => {\n    expect(\n      buildBlogPostHeadings({\n        body: {\n          raw: ''\n        }\n      } as Partial<DocumentToCompute> as DocumentToCompute)\n    ).toMatchSnapshot();\n  });\n\n  it('should match snapshot (one title)', () => {\n    expect(\n      buildBlogPostHeadings({\n        body: {\n          raw: '\\n# BAR !'\n        }\n      } as Partial<DocumentToCompute> as DocumentToCompute)\n    ).toMatchSnapshot();\n  });\n\n  it('should match snapshot (one title, no heading linefeed)', () => {\n    expect(\n      buildBlogPostHeadings({\n        body: {\n          raw: '# BAR !'\n        }\n      } as Partial<DocumentToCompute> as DocumentToCompute)\n    ).toMatchSnapshot();\n  });\n\n  it('should match snapshot (not a title)', () => {\n    expect(\n      buildBlogPostHeadings({\n        body: {\n          raw: '\\n####### BAR !'\n        }\n      } as Partial<DocumentToCompute> as DocumentToCompute)\n    ).toMatchSnapshot();\n  });\n\n  it('should match snapshot (not a title, no heading linefeed)', () => {\n    expect(\n      buildBlogPostHeadings({\n        body: {\n          raw: '####### BAR !'\n        }\n      } as Partial<DocumentToCompute> as DocumentToCompute)\n    ).toMatchSnapshot();\n  });\n\n  it('should match snapshot (melting pot from hell)', () => {\n    expect(\n      buildBlogPostHeadings({\n        body: {\n          raw: '\\n# BAR !\\n\\nFOO  \\nBAR !\\n\\n```ts\\nfunction foo() {\\n  konsole.log(\\'BAR\\');\\n}\\n```\\n\\n## FOO !\\n\\nFOO !\\n\\n<Image src=\"/foo/bar.svg\" width=\"42\" height=\"69\" alt=\"FOO\" priority />\\n\\n### BAR\\n\\n&nbsp;  \\n&nbsp;  \\n&nbsp;\\n\\n#### HAHAHAHA\\n\\n##### HHHHAAAAAAAAAAAAAAAAAAAA\\n\\n###### HHHHHHHAAAAAAAAAAAAAAAAA\\n\\n#### HAHAHAHA\\n\\n###### HHHHHHHAAAAAAAAAAAAAAAAA\\n\\n##### HHHHAAAAAAAAAAAAAAAAAAAA\\n\\n###### HHHHHHHAAAAAAAAAAAAAAAAA\\n\\n### FOO !\\n\\n# BAR ### ! ##\\n\\n## FOO !\\n\\n####### LOL\\n\\n# LOL\\n\\n## LOL\\n\\n###\\n\\n## #### LOL\\n\\n### LOL\\n\\n#### LOL\\n\\n##### LOL\\n\\n###### LOL\\n\\n####### LOL ##\\n\\n<InviteTheBotButton />\\n'\n        }\n      } as Partial<DocumentToCompute> as DocumentToCompute)\n    ).toMatchSnapshot();\n  });\n\n  it('should match snapshot (melting pot from hell, no heading linefeed)', () => {\n    expect(\n      buildBlogPostHeadings({\n        body: {\n          raw: '# BAR !\\n\\nFOO  \\nBAR !\\n\\n```ts\\nfunction foo() {\\n  konsole.log(\\'BAR\\');\\n}\\n```\\n\\n## FOO !\\n\\nFOO !\\n\\n<Image src=\"/foo/bar.svg\" width=\"42\" height=\"69\" alt=\"FOO\" priority />\\n\\n### BAR\\n\\n&nbsp;  \\n&nbsp;  \\n&nbsp;\\n\\n#### HAHAHAHA\\n\\n##### HHHHAAAAAAAAAAAAAAAAAAAA\\n\\n###### HHHHHHHAAAAAAAAAAAAAAAAA\\n\\n#### HAHAHAHA\\n\\n###### HHHHHHHAAAAAAAAAAAAAAAAA\\n\\n##### HHHHAAAAAAAAAAAAAAAAAAAA\\n\\n###### HHHHHHHAAAAAAAAAAAAAAAAA\\n\\n### FOO !\\n\\n# BAR ### ! ##\\n\\n## FOO !\\n\\n####### LOL\\n\\n# LOL\\n\\n## LOL\\n\\n###\\n\\n## #### LOL\\n\\n### LOL\\n\\n#### LOL\\n\\n##### LOL\\n\\n###### LOL\\n\\n####### LOL ##\\n\\n<InviteTheBotButton />\\n'\n        }\n      } as Partial<DocumentToCompute> as DocumentToCompute)\n    ).toMatchSnapshot();\n  });\n});\n"
    },
    "src/components/pages/blog/helpers/functions/__tests__/prebuild.filtersSelectWidget.test.ts": {
      "tests": [
        {
          "id": "202",
          "name": "getSanitizedCurrentFilterIndex should return FIRST_FILTER_INDEX, given valid inputs and expecting FIRST_FILTER_INDEX"
        },
        {
          "id": "203",
          "name": "getSanitizedCurrentFilterIndex should return FIRST_FILTER_INDEX, given empty SearchParams"
        },
        {
          "id": "204",
          "name": "getSanitizedCurrentFilterIndex should return FIRST_FILTER_INDEX, given FIRST_FILTER_INDEX is bigger than filter"
        },
        {
          "id": "205",
          "name": "getSanitizedCurrentFilterIndex should return FIRST_FILTER_INDEX, given filter is not a number"
        },
        {
          "id": "206",
          "name": "getSanitizedCurrentFilterIndex should return maxFilter, given filter is bigger than maxFilter"
        },
        {
          "id": "207",
          "name": "getSanitizedCurrentFilterIndex should return 3, given filter is equal to 3 and maxFilter is bigger than 3"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport { getSanitizedCurrentFilterIndex } from '../filtersSelectWidget';\nimport { FIRST_FILTER_INDEX } from '../../constants';\n\ndescribe('getSanitizedCurrentFilterIndex', () => {\n  it('should return FIRST_FILTER_INDEX, given valid inputs and expecting FIRST_FILTER_INDEX', () => {\n    const maxFilter = 1;\n    const filtersKeys = 'filter';\n    const searchParams = new URLSearchParams('?' + filtersKeys + '=' + FIRST_FILTER_INDEX);\n    const expected = FIRST_FILTER_INDEX;\n\n    const sanitizedCurrentFilterIndex = getSanitizedCurrentFilterIndex(searchParams, maxFilter, filtersKeys);\n    expect(sanitizedCurrentFilterIndex).toBe(expected);\n  });\n\n  it('should return FIRST_FILTER_INDEX, given empty SearchParams', () => {\n    const maxFilter = 1;\n    const filtersKeys = 'filter';\n    const searchParams = new URLSearchParams();\n    const expected = FIRST_FILTER_INDEX;\n\n    const sanitizedCurrentFilterIndex = getSanitizedCurrentFilterIndex(searchParams, maxFilter, filtersKeys);\n    expect(sanitizedCurrentFilterIndex).toBe(expected);\n  });\n\n  it('should return FIRST_FILTER_INDEX, given FIRST_FILTER_INDEX is bigger than filter', () => {\n    const maxFilter = 1;\n    const filtersKeys = 'filter';\n    // eslint-disable-next-line no-magic-numbers\n    const searchParams = new URLSearchParams('?' + filtersKeys + '=' + String(FIRST_FILTER_INDEX - 1));\n    const expected = FIRST_FILTER_INDEX;\n\n    const sanitizedCurrentFilterIndex = getSanitizedCurrentFilterIndex(searchParams, maxFilter, filtersKeys);\n    expect(sanitizedCurrentFilterIndex).toBe(expected);\n  });\n\n  it('should return FIRST_FILTER_INDEX, given filter is not a number', () => {\n    const maxFilter = 1;\n    const filtersKeys = 'filter';\n    // eslint-disable-next-line no-magic-numbers\n    const searchParams = new URLSearchParams('?' + filtersKeys + '=' + 'aabcdef');\n    const expected = FIRST_FILTER_INDEX;\n\n    const sanitizedCurrentFilterIndex = getSanitizedCurrentFilterIndex(searchParams, maxFilter, filtersKeys);\n    expect(sanitizedCurrentFilterIndex).toBe(expected);\n  });\n\n  it('should return maxFilter, given filter is bigger than maxFilter', () => {\n    const maxFilter = 1;\n    const filtersKeys = 'filter';\n    // eslint-disable-next-line no-magic-numbers\n    const searchParams = new URLSearchParams('?' + filtersKeys + '=' + String(maxFilter + 1));\n    const expected = maxFilter;\n\n    const sanitizedCurrentFilterIndex = getSanitizedCurrentFilterIndex(searchParams, maxFilter, filtersKeys);\n    expect(sanitizedCurrentFilterIndex).toBe(expected);\n  });\n\n  it('should return 3, given filter is equal to 3 and maxFilter is bigger than 3', () => {\n    const expected = 3;\n    // eslint-disable-next-line no-magic-numbers\n    const maxFilter = expected + 1;\n    const filtersKeys = 'filter';\n    // eslint-disable-next-line no-magic-numbers\n    const searchParams = new URLSearchParams('?' + filtersKeys + '=' + expected);\n\n    const sanitizedCurrentFilterIndex = getSanitizedCurrentFilterIndex(searchParams, maxFilter, filtersKeys);\n    expect(sanitizedCurrentFilterIndex).toBe(expected);\n  });\n});\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts": {
      "tests": [
        {
          "id": "208",
          "name": "getLandingPageByLanguageAndSlugStrict (happy paths) should return a valid lp"
        },
        {
          "id": "209",
          "name": "getLandingPageByLanguageAndSlugStrict (happy paths) should return a valid lp (index notation)"
        },
        {
          "id": "210",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should return null, given invalid slug"
        },
        {
          "id": "211",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should return null, given invalid language"
        }
      ],
      "source": "import type { LpFakeLanguageType } from '𝕍/testingContentCategoryDatas';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport { TESTING_LP_FAKE_LANGUAGES } from '𝕍/testingContentCategoryDatas';\nimport LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, vi, it } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: TESTING_LP_FAKE_LANGUAGES\n  };\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (happy paths)', () => {\n  it('should return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: targettedSlug, lang: language }) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n\n  it('should return a valid lp (index notation)', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-index` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: targettedSlug, lang: language }) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n\n  it('should return a valid lp (index notation)', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-index` as const;\n    const language = 'en' satisfies LpFakeLanguageType;\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: targettedSlug, lang: language }) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (unhappy paths)', () => {\n  it('should return null, given invalid slug', () => {\n    const targettedSlug = '__INVALID__TARGETTED_SLUG__' as const;\n    // @ts-expect-error\n    const lp = getLandingPageByLanguageAndSlugStrict({ lang: DEFAULT_LANGUAGE, slug: targettedSlug });\n\n    expect(lp).toBe(null);\n  });\n\n  it('should return null, given invalid language', () => {\n    const targettedSlug = 'testing-fake-lp-00' as const;\n    // @ts-expect-error\n    const lp = getLandingPageByLanguageAndSlugStrict({ lang: '__INVALID_LANGUAGE__', slug: targettedSlug });\n\n    expect(lp).toBe(null);\n  });\n});\n\nvi.doUnmock('../../../../interop/config/i18n');\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.etc.test.ts": {
      "tests": [
        {
          "id": "212",
          "name": "localesInfosInnerToObj should return an obj when parsing succeeds"
        },
        {
          "id": "213",
          "name": "localesInfosInnerToObj should return an obj, given a valid obj inner"
        },
        {
          "id": "214",
          "name": "localesInfosInnerToObj should return an obj, given a valid obj inner (nested)"
        },
        {
          "id": "215",
          "name": "localesInfosInnerToObj should return an obj, given a valid obj inner (literals)"
        },
        {
          "id": "216",
          "name": "localesInfosInnerToObj should return an obj, given a valid obj inner (string literals)"
        },
        {
          "id": "217",
          "name": "localesInfosInnerToObj should throw when Babel parsing fails"
        },
        {
          "id": "218",
          "name": "localesInfosInnerToObj should throw, given an invalid obj inner (numeric literals)"
        },
        {
          "id": "219",
          "name": "localesInfosInnerToObj should throw, given an invalid obj inner (int values)"
        },
        {
          "id": "220",
          "name": "localesInfosInnerToObj should throw when encountering unsupported value type"
        },
        {
          "id": "221",
          "name": "localesInfosInnerToObj should throw, given stupid input (random number)"
        },
        {
          "id": "222",
          "name": "localesInfosInnerToObj should return empty object, given empty string input"
        },
        {
          "id": "223",
          "name": "localesInfosInnerToObj should throw when JSON parsing fails"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport getRawDataFromBracesDeclaration from '../getRawDataFromBracesDeclaration';\nimport { localesInfosInnerToObj } from '../etc';\n\ndescribe('localesInfosInnerToObj', () => {\n  it('should return an obj when parsing succeeds', () => {\n    const objInner = '\"foo\": \"bar\"';\n    expect(localesInfosInnerToObj(objInner)).toStrictEqual({ foo: 'bar' });\n  });\n\n  it('should return an obj, given a valid obj inner', () => {\n    const initialObj = { foo: 'bar', bar: 'foo' };\n    // eslint-disable-next-line no-magic-numbers\n    const objInner = getRawDataFromBracesDeclaration(JSON.stringify(initialObj), 0);\n    expect(objInner).not.toBe(null);\n    expect(localesInfosInnerToObj(objInner as string)).toStrictEqual(initialObj);\n  });\n\n  it('should return an obj, given a valid obj inner (nested)', () => {\n    const initialObj = {\n      baz: {\n        baz: {\n          bar: 'foo'\n        },\n        foo: 'bar',\n        bar: 'foo'\n      },\n      foo: 'bar',\n      bar: 'foo'\n    };\n\n    const objInner = getRawDataFromBracesDeclaration(\n      JSON.stringify(initialObj),\n      // eslint-disable-next-line no-magic-numbers\n      0\n    );\n    expect(objInner).not.toBe(null);\n    expect(localesInfosInnerToObj(objInner as string)).toStrictEqual(initialObj);\n  });\n\n  it('should return an obj, given a valid obj inner (literals)', () => {\n    const objInner = \"foo: 'bar', bar: 'foo'\";\n    expect(localesInfosInnerToObj(objInner)).toStrictEqual({ foo: 'bar', bar: 'foo' });\n  });\n\n  it('should return an obj, given a valid obj inner (string literals)', () => {\n    const objInner = \"'foo': 'bar', 'bar': 'foo'\";\n    expect(localesInfosInnerToObj(objInner)).toStrictEqual({ foo: 'bar', bar: 'foo' });\n  });\n\n  it('should throw when Babel parsing fails', () => {\n    const objInner = 'foo: bar';\n    expect(() => localesInfosInnerToObj(objInner)).toThrow();\n  });\n\n  it('should throw, given an invalid obj inner (numeric literals)', () => {\n    const objInner = \"2172183: 'bar', 211838173: 'foo'\";\n    expect(() => localesInfosInnerToObj(objInner)).toThrow();\n  });\n\n  it('should throw, given an invalid obj inner (int values)', () => {\n    const objInner = 'foo: 45, bar: 12';\n    expect(() => localesInfosInnerToObj(objInner)).toThrow();\n  });\n\n  it('should throw when encountering unsupported value type', () => {\n    const objInner = 'foo: /regex/';\n    expect(() => localesInfosInnerToObj(objInner)).toThrow();\n  });\n\n  it('should throw, given stupid input (random number)', () => {\n    const objInner = '88909988799';\n    expect(() => localesInfosInnerToObj(objInner)).toThrow();\n  });\n\n  it('should return empty object, given empty string input', () => {\n    const objInner: EmptyString = '';\n    expect(localesInfosInnerToObj(objInner)).toStrictEqual({});\n  });\n\n  it('should throw when JSON parsing fails', () => {\n    const objInner = 'invalid json';\n    expect(() => localesInfosInnerToObj(objInner)).toThrow();\n  });\n});\n"
    },
    "src/components/hooks/__tests__/prebuild.useResetScroll.test.ts": {
      "tests": [
        {
          "id": "224",
          "name": "useResetScroll should call resetScroll with disabled extra effects flags"
        },
        {
          "id": "225",
          "name": "useResetScroll should call resetScroll with disabled also reset scroll flag by default"
        },
        {
          "id": "226",
          "name": "useResetScroll should call resetScroll with disabled also reset scroll flag if specified"
        },
        {
          "id": "227",
          "name": "useResetScroll should call resetScroll on initial render and NOT on re-render if no additional dep is specified, nor changing"
        },
        {
          "id": "228",
          "name": "useResetScroll should call resetScroll on initial render and additional dep state change"
        }
      ],
      "source": "import * as resetScrollModule from '@rtm/shared-lib/portable/html/resetScroll';\nimport { renderHook } from '@testing-library/react';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport useResetScroll from '../useResetScroll';\n\ndescribe('useResetScroll', () => {\n  it('should call resetScroll with disabled extra effects flags', () => {\n    const resetScrollMock = vi.spyOn(resetScrollModule, 'default');\n\n    renderHook(() => useResetScroll());\n\n    expect(resetScrollMock).toHaveBeenCalledWith(undefined, false);\n  });\n\n  it('should call resetScroll with disabled also reset scroll flag by default', () => {\n    const resetScrollMock = vi.spyOn(resetScrollModule, 'default');\n\n    const scrollableElementToResetRef = { current: document.createElement('div') };\n\n    renderHook(() => useResetScroll(scrollableElementToResetRef));\n\n    expect(resetScrollMock).toHaveBeenCalledWith(scrollableElementToResetRef, false);\n  });\n\n  it('should call resetScroll with disabled also reset scroll flag if specified', () => {\n    const resetScrollMock = vi.spyOn(resetScrollModule, 'default');\n\n    const alsoResetWindowScroll = false;\n    const scrollableElementToResetRef = { current: document.createElement('div') };\n\n    renderHook(() => useResetScroll(scrollableElementToResetRef, { alsoResetWindowScroll }));\n\n    expect(resetScrollMock).toHaveBeenCalledWith(scrollableElementToResetRef, false);\n  });\n\n  it('should call resetScroll on initial render and NOT on re-render if no additional dep is specified, nor changing', () => {\n    const resetScrollMock = vi.spyOn(resetScrollModule, 'default');\n\n    const scrollableElementToResetRef = { current: document.createElement('div') };\n    const alsoResetWindowScroll = true;\n\n    const { rerender } = renderHook(() => useResetScroll(scrollableElementToResetRef, { alsoResetWindowScroll }));\n\n    expect(resetScrollMock).toHaveBeenCalledWith(scrollableElementToResetRef, alsoResetWindowScroll);\n\n    resetScrollMock.mockClear();\n\n    rerender();\n\n    expect(resetScrollMock).not.toHaveBeenCalled();\n  });\n\n  it('should call resetScroll on initial render and additional dep state change', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const [firstState, secondState] = [1, 2];\n    const resetScrollMock = vi.spyOn(resetScrollModule, 'default');\n\n    const scrollableElementToResetRef = { current: document.createElement('div') };\n    const alsoResetWindowScroll = true;\n\n    const { rerender } = renderHook(({ additionalDep }) => useResetScroll(scrollableElementToResetRef, { alsoResetWindowScroll, additionalDep }), {\n      initialProps: { additionalDep: firstState }\n    });\n\n    expect(resetScrollMock).toHaveBeenCalledWith(scrollableElementToResetRef, alsoResetWindowScroll);\n\n    resetScrollMock.mockClear();\n\n    rerender({ additionalDep: secondState });\n\n    expect(resetScrollMock).toHaveBeenCalledWith(scrollableElementToResetRef, alsoResetWindowScroll);\n  });\n});\n"
    },
    "src/lib/__tests__/prebuild.str.test.ts": {
      "tests": [
        {
          "id": "229",
          "name": "hrefMatchesPathname should return true"
        },
        {
          "id": "230",
          "name": "hrefMatchesPathname should return false"
        },
        {
          "id": "231",
          "name": "hrefAndPathnameExactMatch should return true"
        },
        {
          "id": "232",
          "name": "hrefAndPathnameExactMatch should return false"
        }
      ],
      "source": "import { FAKE_LOCALES } from '𝕍/commons';\n// eslint-disable-next-line perfectionist/sort-imports\nimport { DEFAULT_LANGUAGE, LANGUAGES } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport { hrefAndPathnameExactMatch, hrefMatchesPathname } from '../str';\n\nvi.mock('##/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/i18n')>();\n\n  return {\n    ...mod,\n    LANGUAGES: Array.from(new Set<string>([mod.DEFAULT_LANGUAGE, ...FAKE_LOCALES]))\n  };\n});\n\nconst NOT_DEFAULT_LANGUAGE = LANGUAGES.find((lang) => lang !== DEFAULT_LANGUAGE);\n\ndescribe('hrefMatchesPathname', () => {\n  it('should return true', () => {\n    expect(hrefMatchesPathname('/foo/bar', '/foo/bar/1', '/')).toBe(true);\n    expect(hrefMatchesPathname('/foo', '/foo/bar/1', '/')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard/foo', '/dashboard/foo/1', '/dashboard')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard', '/dashboard/bar', '/')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard', `/${DEFAULT_LANGUAGE}/dashboard/bar`, '/')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard', `/${DEFAULT_LANGUAGE}/dashboard`, '/')).toBe(true);\n  });\n\n  it('should return false', () => {\n    expect(hrefMatchesPathname('/dashboard', '/dashboard/bar', '/dashboard')).toBe(false);\n  });\n});\n\ndescribe('hrefAndPathnameExactMatch', () => {\n  it('should return true', () => {\n    expect(hrefAndPathnameExactMatch('foo', 'foo')).toBe(true);\n    expect(hrefAndPathnameExactMatch('/foo', '/foo/')).toBe(true);\n    expect(hrefAndPathnameExactMatch('/foo/', '/foo')).toBe(true);\n    expect(hrefAndPathnameExactMatch('/foo', '/foo////')).toBe(true);\n    expect(hrefAndPathnameExactMatch('/foo////', '/foo')).toBe(true);\n    expect(hrefAndPathnameExactMatch('/foo', '/foo')).toBe(true);\n    expect(hrefAndPathnameExactMatch('/foo', `/${DEFAULT_LANGUAGE}/foo`)).toBe(true);\n    expect(hrefAndPathnameExactMatch(`/${DEFAULT_LANGUAGE}/foo`, '/foo')).toBe(true);\n    expect(hrefAndPathnameExactMatch(`/${DEFAULT_LANGUAGE}/dashboard`, `/${DEFAULT_LANGUAGE}/dashboard`)).toBe(true);\n    expect(hrefAndPathnameExactMatch(`/${NOT_DEFAULT_LANGUAGE}/foo`, `/${NOT_DEFAULT_LANGUAGE}/foo`)).toBe(true);\n    expect(hrefAndPathnameExactMatch('/foo', `/${NOT_DEFAULT_LANGUAGE}/foo`)).toBe(true);\n    expect(hrefAndPathnameExactMatch('/', `/${NOT_DEFAULT_LANGUAGE}`)).toBe(true);\n  });\n\n  it('should return false', () => {\n    expect(hrefAndPathnameExactMatch(`/${NOT_DEFAULT_LANGUAGE}/dashboard`, '/dashboard')).toBe(false);\n    expect(hrefAndPathnameExactMatch('/dashboard', '/dashboard/bar')).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(hrefAndPathnameExactMatch(`/${LANGUAGES[0]}/dashboard`, `/${LANGUAGES[1]}/dashboard/bar`)).toBe(false);\n  });\n});\n\nvi.doUnmock('##/config/i18n');\n"
    },
    "packages/prebuilder/src/generators/blog/__tests__/prebuild.i18nPagesTitles.test.ts": {
      "tests": [
        {
          "id": "233",
          "name": "generateI18nPagesTitles (formatted) should match snapshot"
        },
        {
          "id": "234",
          "name": "generateI18nPagesTitles (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FAKE_BLOG_METADATAS_A, FAKE_BLOG_METADATAS_B } from '𝕍/commons';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport generateI18nPagesTitles from '../i18nPagesTitles';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/blog/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'I18N_PAGES_TITLES';\n\ndescribe('generateI18nPagesTitles (formatted)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = true;\n\n  it('should match snapshot', async () => {\n    const targetFile = 'EMPTY_FAKE_PAGES_TITLES';\n\n    await generateI18nPagesTitles({}, pretty, targetFile, __TARGET_FOLDER);\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TITLES_FAKE_METADATAS_A';\n\n    await generateI18nPagesTitles(FAKE_BLOG_METADATAS_A, pretty, targetFile, __TARGET_FOLDER);\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TITLES_FAKE_METADATAS_B';\n\n    await generateI18nPagesTitles(FAKE_BLOG_METADATAS_B, pretty, targetFile, __TARGET_FOLDER);\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateI18nPagesTitles (ugly)', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  const pretty = false;\n\n  it('should match snapshot', async () => {\n    const targetFile = 'EMPTY_FAKE_PAGES_TITLES';\n\n    await generateI18nPagesTitles({}, pretty, targetFile, __TARGET_FOLDER);\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TITLES_FAKE_METADATAS_A';\n\n    await generateI18nPagesTitles(FAKE_BLOG_METADATAS_A, pretty, targetFile, __TARGET_FOLDER);\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TITLES_FAKE_METADATAS_B';\n\n    await generateI18nPagesTitles(FAKE_BLOG_METADATAS_B, pretty, targetFile, __TARGET_FOLDER);\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.url.test.ts": {
      "tests": [
        {
          "id": "235",
          "name": "url should return a valid url, given a valid input"
        },
        {
          "id": "236",
          "name": "url should return a valid path, given a valid input (with default language root)"
        },
        {
          "id": "237",
          "name": "url should NOT be fault tolerant"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER, ROUTES_ROOTS, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildPageUrl from '../url';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('url', () => {\n  const leaf = 'leaf';\n  it('should return a valid url, given a valid input', () => {\n    expect(\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + DEFAULT_LANGUAGE);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/foo/bar/${leaf}/${INDEX_TOKEN}` + EXT,\n          flattenedPath: PAGES_FOLDER + `/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/${leaf}`);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/foo/bar/${leaf}` + EXT,\n          flattenedPath: PAGES_FOLDER + `/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/${leaf}`);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/foo/bar/baz/${leaf}` + EXT,\n          flattenedPath: PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input (with default language root)', () => {\n    expect(\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}` + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + DEFAULT_LANGUAGE);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/${leaf}` + EXT,\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/${leaf}`);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}` + EXT,\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`);\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildPageUrl({\n        _raw: {\n          sourceFilePath: '_' + PAGES_FOLDER + `/foo/bar/baz/${leaf}` + EXT,\n          flattenedPath: '_' + PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.taxonomyConvention.test.ts": {
      "tests": [
        {
          "id": "238",
          "name": "isValidPageTaxonomy should return false, given invalid taxonomies"
        },
        {
          "id": "239",
          "name": "isValidPageTaxonomy should return true, given valid taxonomies"
        },
        {
          "id": "240",
          "name": "isValidBlogTaxonomy should return false, given invalid taxonomies"
        },
        {
          "id": "241",
          "name": "isValidBlogTaxonomy should return true, given valid taxonomies"
        },
        {
          "id": "242",
          "name": "isValidLpTaxonomy should return false, given invalid taxonomies"
        },
        {
          "id": "243",
          "name": "isValidLpTaxonomy should return true, given valid taxonomies"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport { isValidBlogTaxonomy, isValidPageTaxonomy, isValidLpTaxonomy } from '../taxonomyConvention';\n\ndescribe('isValidPageTaxonomy', () => {\n  it('should return false, given invalid taxonomies', () => {\n    const TOO_LONG_SIZE = 3;\n    const tooLong = 'w'.repeat(TOO_LONG_SIZE);\n\n    expect(isValidPageTaxonomy('_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('0_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('_foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('_foo-bar')).toBe(false);\n    expect(isValidPageTaxonomy('$foo-bar')).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(isValidPageTaxonomy(tooLong, TOO_LONG_SIZE - 1)).toBe(false);\n  });\n\n  it('should return true, given valid taxonomies', () => {\n    expect(isValidPageTaxonomy('foo-bar')).toBe(true);\n    expect(isValidPageTaxonomy('0-foo-bar')).toBe(true);\n  });\n});\n\ndescribe('isValidBlogTaxonomy', () => {\n  it('should return false, given invalid taxonomies', () => {\n    const TOO_LONG_SIZE = 3;\n    const tooLong = 'w'.repeat(TOO_LONG_SIZE);\n\n    expect(isValidBlogTaxonomy('_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('0_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('_foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('_foo-bar')).toBe(false);\n    expect(isValidBlogTaxonomy('$foo-bar')).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(isValidBlogTaxonomy(tooLong, TOO_LONG_SIZE - 1)).toBe(false);\n  });\n\n  it('should return true, given valid taxonomies', () => {\n    expect(isValidBlogTaxonomy('foo-bar')).toBe(true);\n    expect(isValidBlogTaxonomy('0-foo-bar')).toBe(true);\n  });\n});\n\ndescribe('isValidLpTaxonomy', () => {\n  it('should return false, given invalid taxonomies', () => {\n    const TOO_LONG_SIZE = 3;\n    const tooLong = 'w'.repeat(TOO_LONG_SIZE);\n\n    expect(isValidLpTaxonomy('_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('0_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('_foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('_foo-bar')).toBe(false);\n    expect(isValidLpTaxonomy('$foo-bar')).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(isValidLpTaxonomy(tooLong, TOO_LONG_SIZE - 1)).toBe(false);\n  });\n\n  it('should return true, given valid taxonomies', () => {\n    expect(isValidLpTaxonomy('foo-bar')).toBe(true);\n    expect(isValidLpTaxonomy('0-foo-bar')).toBe(true);\n  });\n});\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.path.test.ts": {
      "tests": [
        {
          "id": "244",
          "name": "path should return a valid path, given a valid input"
        },
        {
          "id": "245",
          "name": "path should return a valid path, given a valid input (with default language root)"
        },
        {
          "id": "246",
          "name": "path should return a valid path, given a valid input with index notation"
        },
        {
          "id": "247",
          "name": "path should return a valid path, given a valid input (with default language root and index notation)"
        },
        {
          "id": "248",
          "name": "path should NOT be fault tolerant"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildPagePath from '../path';\n\ndescribe('path', () => {\n  const leaf = 'leaf';\n  it('should return a valid path, given a valid input', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe(INDEX_TOKEN);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input (with default language root)', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input with index notation', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input (with default language root and index notation)', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}`\n        },\n        _id: '_'\n      })\n    ).toBe(INDEX_TOKEN);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildPagePath({\n        _raw: {\n          flattenedPath: '_' + PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.slug.test.ts": {
      "tests": [
        {
          "id": "249",
          "name": "lp slug (happy paths) should return a valid slug, given a valid flattenedPath"
        },
        {
          "id": "250",
          "name": "lp slug (happy paths, index notation) should return a valid slug, given a valid flattenedPath"
        },
        {
          "id": "251",
          "name": "lp slug (unhappy paths) should throw, given an invalid flattenedPath"
        },
        {
          "id": "252",
          "name": "lp slug (unhappy paths) should NOT be fault tolerant"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, LANDING_PAGES_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildLandingPageSlug, { buildLandingPageSlugFromLpObj } from '../slug';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('lp slug (happy paths)', () => {\n  const name = 'slug';\n  const category = 'category';\n  const slug = category + '-' + name;\n\n  it('should return a valid slug, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/subcategory/${name}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/subcategory/${name}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n  });\n});\n\ndescribe('lp slug (happy paths, index notation)', () => {\n  it('should return a valid slug, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/subcategory/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/subcategory/slug`\n        },\n        _id: '_'\n      })\n    ).toBe('index-slug');\n\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/subcategory/lang/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/subcategory/lang'\n        },\n        _id: '_'\n      })\n    ).toBe('category-index');\n  });\n});\n\ndescribe('lp slug (unhappy paths)', () => {\n  const name = 'slug';\n  const category = 'category';\n\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildLandingPageSlugFromLpObj({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}` + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogSubcategoryGuard.test.ts": {
      "tests": [
        {
          "id": "253",
          "name": "blogSubcategoryGuard should not throw redirect error, given valid category and subcategory"
        },
        {
          "id": "254",
          "name": "blogSubcategoryGuard should throw redirect error, given invalid category and subcategory"
        },
        {
          "id": "255",
          "name": "blogSubcategoryGuard should throw redirect error, given valid category and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport { describe, expect, it } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport blogSubcategoryGuard from '../blogSubcategoryGuard';\n\n// eslint-disable-next-line no-magic-numbers\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\ndescribe('blogSubcategoryGuard', () => {\n  it('should not throw redirect error, given valid category and subcategory', async () => {\n    await expect(\n      blogSubcategoryGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid category and subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given valid category and invalid subcategory', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(2);\n\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "256",
          "name": "getPostStrict (happy paths) should return a valid post when picking a non-draft post in an authorized drafts CTX"
        },
        {
          "id": "257",
          "name": "getPostStrict (happy paths) should return a valid post when picking a draft post in an authorized drafts CTX"
        },
        {
          "id": "258",
          "name": "getBlogPostUnstrict (unhappy paths) should return null, given invalid slug"
        }
      ],
      "source": "import type { BlogFakeLanguageType } from '𝕍/testingContentCategoryDatas';\nimport type { BlogConfigType } from '@/config/Blog/server';\nimport type { BlogPostType } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getBlogPostUnstrict, getBlogPostStrict } from '../api';\n\nvi.mock('@/config/Blog/server', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/Blog/server')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies BlogConfigType\n  };\n});\n\ndescribe('getPostStrict (happy paths)', () => {\n  it('should return a valid post when picking a non-draft post in an authorized drafts CTX', async () => {\n    const [category, subcategory, slug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const lang = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict({ subcategory, category, lang, slug })) as BlogPostType;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(slug);\n    expect(post.language).toBe(lang);\n    expect(post.url).toBe('/' + lang + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${slug}`);\n  });\n\n  it('should return a valid post when picking a draft post in an authorized drafts CTX', async () => {\n    const [category, subcategory, lang, slug] = [\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' as const satisfies BlogFakeLanguageType,\n      'fake-draft-01' as const\n    ];\n    const post = (await getBlogPostStrict({ subcategory, category, lang, slug })) as BlogPostType;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(slug);\n    expect(post.language).toBe(lang);\n    expect(post.url).toBe('/' + lang + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${slug}`);\n  });\n});\n\ndescribe('getBlogPostUnstrict (unhappy paths)', () => {\n  it('should return null, given invalid slug', async () => {\n    const posts = await getBlogPostUnstrict(BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, '__INVALID_SLUG__', DEFAULT_LANGUAGE);\n    expect(posts).toBe(null);\n  });\n});\n\nvi.doUnmock('@/config/Blog/server');\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysBlogSubcategories.test.ts": {
      "tests": [
        {
          "id": "259",
          "name": "sysBlogSubcategoriesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "260",
          "name": "sysBlogSubcategoriesValidator should produce an error feedback, given a path to a folder with an invalid blog subcategory"
        },
        {
          "id": "261",
          "name": "sysBlogSubcategoriesValidator should produce an error feedback, given a path to a folder with several invalid blog subcategories"
        },
        {
          "id": "262",
          "name": "sysBlogSubcategoriesValidator should not produce any feedback, given a path to a valid blog posts folder"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_SUBCATEGORIES_NEEDLE, INVALID_SUBCATEGORY_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysBlogSubcategoriesValidator from '../sysBlogSubcategories';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/valid_fake_posts_folder';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SUBCATEGORY =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_invalid_subcategory';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SUBCATEGORIES =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_several_invalid_subcategories';\n\nconst EMPTY_FEEDBACK: EmptyString = '';\n\ndescribe('sysBlogSubcategoriesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await sysBlogSubcategoriesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid blog subcategory', async () => {\n    const feedback = await sysBlogSubcategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SUBCATEGORY);\n    expect(feedback.toLowerCase().includes(INVALID_SUBCATEGORY_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid blog subcategories', async () => {\n    const feedback = await sysBlogSubcategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SUBCATEGORIES);\n    expect(feedback.toLowerCase().includes(INVALID_SUBCATEGORIES_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid blog posts folder', async () => {\n    const feedback = await sysBlogSubcategoriesValidator(VALID_BLOG_POSTS_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysBlogSlugs.test.ts": {
      "tests": [
        {
          "id": "263",
          "name": "sysBlogSlugsValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "264",
          "name": "sysBlogSlugsValidator should produce an error feedback, given a path to a folder with an invalid blog slug"
        },
        {
          "id": "265",
          "name": "sysBlogSlugsValidator should produce an error feedback, given a path to a folder with several invalid blog slugs"
        },
        {
          "id": "266",
          "name": "sysBlogSlugsValidator should not produce any feedback, given a path to a valid blog posts folder"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_SLUGS_NEEDLE, INVALID_SLUG_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysBlogSlugsValidator from '../sysBlogSlugs';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/valid_fake_posts_folder';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SLUG =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_invalid_blog_slug';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SLUGS =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_several_invalid_blog_slugs';\n\nconst EMPTY_FEEDBACK: EmptyString = '';\n\ndescribe('sysBlogSlugsValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await sysBlogSlugsValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid blog slug', async () => {\n    const feedback = await sysBlogSlugsValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SLUG);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid blog slugs', async () => {\n    const LIMIT = 36;\n    const feedback = await sysBlogSlugsValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SLUGS, LIMIT);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n    expect(feedback.toLowerCase().includes(INVALID_SLUGS_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid blog posts folder', async () => {\n    const feedback = await sysBlogSlugsValidator(VALID_BLOG_POSTS_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.category.test.ts": {
      "tests": [
        {
          "id": "267",
          "name": "lp category (happy paths) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "268",
          "name": "lp category (happy paths, with index notation) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "269",
          "name": "lp category (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, LANDING_PAGES_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildLandingPageCategory from '../category';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('lp category (happy paths)', () => {\n  const category = 'category';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/lang/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n  });\n});\n\ndescribe('lp category (happy paths, with index notation)', () => {\n  const category = 'category';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/lang/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/lang`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n  });\n});\n\ndescribe('lp category (unhappy paths)', () => {\n  const category = 'category';\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + `/${category}/lang/slug` + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + `/${category}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.subcategory.test.ts": {
      "tests": [
        {
          "id": "270",
          "name": "blog subcategory (happy paths) should return the subcategory string part, given a valid flattenedPath"
        },
        {
          "id": "271",
          "name": "blog subcategory (happy paths) should be fault tolerant"
        },
        {
          "id": "272",
          "name": "blog subcategory (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, BLOG_POSTS_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostSubcategory from '../subcategory';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('blog subcategory (happy paths)', () => {\n  const subcategory = 'subcategory';\n  it('should return the subcategory string part, given a valid flattenedPath', () => {\n    expect(\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(subcategory);\n\n    expect(\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(subcategory);\n  });\n\n  it('should be fault tolerant', () => {\n    expect(\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}`\n        },\n        _id: '_'\n      })\n    ).toBe(subcategory);\n  });\n});\n\ndescribe('blog subcategory (unhappy paths)', () => {\n  const subcategory = 'subcategory';\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysBlogCategories.test.ts": {
      "tests": [
        {
          "id": "273",
          "name": "sysBlogCategoriesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "274",
          "name": "sysBlogCategoriesValidator should produce an error feedback, given a path to a folder with an invalid blog category"
        },
        {
          "id": "275",
          "name": "sysBlogCategoriesValidator should produce an error feedback, given a path to a folder with several invalid blog categories"
        },
        {
          "id": "276",
          "name": "sysBlogCategoriesValidator should not produce any feedback, given a path to a valid blog posts folder"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_CATEGORIES_NEEDLE, INVALID_CATEGORY_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysBlogCategoriesValidator from '../sysBlogCategories';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/valid_fake_posts_folder';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_CATEGORY =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_invalid_category';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_CATEGORIES =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_several_invalid_categories';\n\nconst EMPTY_FEEDBACK: EmptyString = '';\n\ndescribe('sysBlogCategoriesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await sysBlogCategoriesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid blog category', async () => {\n    const feedback = await sysBlogCategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_CATEGORY);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORY_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid blog categories', async () => {\n    const feedback = await sysBlogCategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_CATEGORIES);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORIES_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid blog posts folder', async () => {\n    const feedback = await sysBlogCategoriesValidator(VALID_BLOG_POSTS_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysLpSlugs.test.ts": {
      "tests": [
        {
          "id": "277",
          "name": "sysLpSlugsValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "278",
          "name": "sysLpSlugsValidator should produce an error feedback, given a path to a folder with an invalid lp slug"
        },
        {
          "id": "279",
          "name": "sysLpSlugsValidator should produce an error feedback, given a path to a folder with several invalid lp slugs"
        },
        {
          "id": "280",
          "name": "sysLpSlugsValidator should not produce any feedback, given a path to a valid lp posts folder"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_SLUGS_NEEDLE, INVALID_SLUG_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysLpSlugsValidator from '../sysLpSlugs';\n\nconst VALID_LP_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/valid_fake_lp_folder';\n\nconst INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_SLUG =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_invalid_slug';\n\nconst INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_SLUGS =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_several_invalid_slugs';\n\nconst EMPTY_FEEDBACK: EmptyString = '';\n\ndescribe('sysLpSlugsValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await sysLpSlugsValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid lp slug', async () => {\n    const feedback = await sysLpSlugsValidator(INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_SLUG);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid lp slugs', async () => {\n    const LIMIT = 36;\n    const feedback = await sysLpSlugsValidator(INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_SLUGS, LIMIT);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n    expect(feedback.toLowerCase().includes(INVALID_SLUGS_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid lp posts folder', async () => {\n    const feedback = await sysLpSlugsValidator(VALID_LP_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.getRawDataFromBracesDeclaration.test.ts": {
      "tests": [
        {
          "id": "281",
          "name": "getRawDataFromBracesDeclaration should pass, given any string, with default startIndex which is equal to 0"
        },
        {
          "id": "282",
          "name": "getRawDataFromBracesDeclaration should pass, given any string, with startIndex"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport getRawDataFromBracesDeclaration from '../getRawDataFromBracesDeclaration';\n\nconst OBJ_A = { foo: 'bar' };\nconst OBJ_B = {\n  baz: {\n    foo: 'bar',\n    bar: 'foo'\n  },\n  foo: 'bar',\n  bar: 'foo'\n};\n\nconst OBJ_C = {\n  baz: {\n    foo: 'bar',\n    bar: 'foo'\n  },\n  bar: {\n    foo: 'foo',\n    bar: 'bar'\n  },\n  foo: 'bar'\n};\n\ndescribe('getRawDataFromBracesDeclaration', () => {\n  it('should pass, given any string, with default startIndex which is equal to 0', () => {\n    expect(getRawDataFromBracesDeclaration('test')).toBe(null);\n    expect(getRawDataFromBracesDeclaration('{}')).toBe('');\n    expect(getRawDataFromBracesDeclaration('{{}}')).toBe('{}');\n    expect(getRawDataFromBracesDeclaration(JSON.stringify(OBJ_A))).toBe('\"foo\":\"bar\"');\n    expect(getRawDataFromBracesDeclaration(JSON.stringify(OBJ_B))).toBe('\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"foo\":\"bar\",\"bar\":\"foo\"');\n    expect(getRawDataFromBracesDeclaration(JSON.stringify(OBJ_C))).toBe(\n      '\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"bar\":{\"foo\":\"foo\",\"bar\":\"bar\"},\"foo\":\"bar\"'\n    );\n  });\n\n  it('should pass, given any string, with startIndex', () => {\n    const padding_1 = ' ';\n    // eslint-disable-next-line no-magic-numbers\n    const padding_2 = ' '.repeat(2);\n    // eslint-disable-next-line no-magic-numbers\n    const padding_3 = ' '.repeat(3);\n    // eslint-disable-next-line no-magic-numbers\n    const padding_4 = ' '.repeat(4);\n\n    expect(getRawDataFromBracesDeclaration(padding_1 + '{}', padding_1.length)).toBe('');\n    expect(getRawDataFromBracesDeclaration(padding_2 + '{{}}', padding_2.length)).toBe('{}');\n    expect(getRawDataFromBracesDeclaration(padding_3 + JSON.stringify(OBJ_A), padding_3.length)).toBe('\"foo\":\"bar\"');\n    expect(getRawDataFromBracesDeclaration(padding_4 + JSON.stringify(OBJ_B), padding_4.length)).toBe(\n      '\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"foo\":\"bar\",\"bar\":\"foo\"'\n    );\n    expect(getRawDataFromBracesDeclaration(padding_1 + JSON.stringify(OBJ_C), padding_1.length)).toBe(\n      '\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"bar\":{\"foo\":\"foo\",\"bar\":\"bar\"},\"foo\":\"bar\"'\n    );\n    // eslint-disable-next-line no-magic-numbers\n    expect(getRawDataFromBracesDeclaration(`{foo:{bar: 'baz';}}`, 1)).toBe(\"bar: 'baz';\");\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysLpCategories.test.ts": {
      "tests": [
        {
          "id": "283",
          "name": "sysLpCategoriesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "284",
          "name": "sysLpCategoriesValidator should produce an error feedback, given a path to a folder with an invalid lp category"
        },
        {
          "id": "285",
          "name": "sysLpCategoriesValidator should produce an error feedback, given a path to a folder with several invalid lp categories"
        },
        {
          "id": "286",
          "name": "sysLpCategoriesValidator should not produce any feedback, given a path to a valid lp folder"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_CATEGORIES_NEEDLE, INVALID_CATEGORY_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysLpCategoriesValidator from '../sysLpCategories';\n\nconst VALID_LP_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/valid_fake_lp_folder';\n\nconst INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_CATEGORY =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_invalid_category';\n\nconst INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_CATEGORIES =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_several_invalid_categories';\n\nconst EMPTY_FEEDBACK: EmptyString = '';\n\ndescribe('sysLpCategoriesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await sysLpCategoriesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid lp category', async () => {\n    const feedback = await sysLpCategoriesValidator(INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_CATEGORY);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORY_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid lp categories', async () => {\n    const feedback = await sysLpCategoriesValidator(INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_CATEGORIES);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORIES_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid lp folder', async () => {\n    const feedback = await sysLpCategoriesValidator(VALID_LP_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "src/components/hooks/__tests__/prebuild.useScrollDirection.test.ts": {
      "tests": [
        {
          "id": "287",
          "name": "useScrollDirection should return initial scroll direction as down, and test the dispatcher"
        },
        {
          "id": "288",
          "name": "useScrollDirection should update scroll direction when window scrolls"
        },
        {
          "id": "289",
          "name": "useScrollDirection (not mocking window.requestAnimationFrame) should NOT update scroll direction when (blocking is true)"
        }
      ],
      "source": "import type { MockInstance } from 'vitest';\n\nimport { beforeAll, afterAll, describe, expect, it, vi } from 'vitest';\nimport { renderHook, waitFor, act } from '@testing-library/react';\n\nimport useScrollDirection from '../useScrollDirection';\n\nconst LEFT_PART = 0;\nconst RIGHT_PART = 1;\n\ndescribe('useScrollDirection', () => {\n  let windowRequestAnimationFrameMock: MockInstance<[callback: FrameRequestCallback]>;\n\n  beforeAll(() => {\n    windowRequestAnimationFrameMock = vi.spyOn(window, 'requestAnimationFrame').mockImplementation(\n      vi.fn((cb) => {\n        // eslint-disable-next-line no-magic-numbers\n        cb(0);\n        // eslint-disable-next-line no-magic-numbers\n        return 0;\n      })\n    );\n  });\n\n  it('should return initial scroll direction as down, and test the dispatcher', () => {\n    const { result } = renderHook(() => useScrollDirection());\n    expect(result.current[LEFT_PART]).toBe('down');\n\n    expect(typeof result.current[RIGHT_PART]).toBe('function');\n\n    act(() => {\n      result.current[RIGHT_PART]('up');\n    });\n\n    expect(result.current[LEFT_PART]).toBe('up');\n  });\n\n  it('should update scroll direction when window scrolls', async () => {\n    const { result } = renderHook(() => useScrollDirection());\n\n    act(() => {\n      window.scrollY = 100;\n      window.dispatchEvent(new Event('scroll'));\n\n      window.scrollY = 0;\n      window.dispatchEvent(new Event('scroll'));\n    });\n\n    await waitFor(() => expect(result.current[LEFT_PART]).toBe('up'));\n\n    act(() => {\n      window.scrollY = 100;\n      window.dispatchEvent(new Event('scroll'));\n    });\n\n    await waitFor(() => expect(result.current[LEFT_PART]).toBe('down'));\n  });\n\n  afterAll(() => {\n    windowRequestAnimationFrameMock.mockReset();\n  });\n});\n\ndescribe('useScrollDirection (not mocking window.requestAnimationFrame)', () => {\n  it('should NOT update scroll direction when (blocking is true)', () => {\n    const { result } = renderHook(() => useScrollDirection());\n\n    act(() => {\n      window.scrollY = 0;\n      window.dispatchEvent(new Event('scroll'));\n    });\n\n    expect(result.current[LEFT_PART]).toBe('down');\n\n    act(() => {\n      window.scrollY = 100;\n      window.dispatchEvent(new Event('scroll'));\n    });\n\n    expect(result.current[LEFT_PART]).toBe('down');\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/html/__tests__/prebuild.createURLSearchParams.test.ts": {
      "tests": [
        {
          "id": "290",
          "name": "createURLSearchParams should create URLSearchParams, given searchParams object"
        },
        {
          "id": "291",
          "name": "createURLSearchParams should create URLSearchParams, given searchParams and currentSearchParams objects"
        },
        {
          "id": "292",
          "name": "createURLSearchParams should create URLSearchParams, overriding"
        },
        {
          "id": "293",
          "name": "createURLSearchParams should create URLSearchParams, cleanup (empty new searchParams obj)"
        },
        {
          "id": "294",
          "name": "createURLSearchParams should create URLSearchParams, cleanup (not empty searchParams obj)"
        },
        {
          "id": "295",
          "name": "createURLSearchParams should return an empty query string, given empty searchParams object"
        },
        {
          "id": "296",
          "name": "createURLSearchParams should return an empty query string, given both empty searchParams and currentSearchParams objects"
        },
        {
          "id": "297",
          "name": "createURLSearchParams should return an empty query string, given stupid args"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport createURLSearchParams from '../createURLSearchParams';\n\ndescribe('createURLSearchParams', () => {\n  it('should create URLSearchParams, given searchParams object', () => {\n    const _URLSearchParams = createURLSearchParams({ foo: '1', bar: '2' });\n    expect(_URLSearchParams).toBe('?foo=1&bar=2');\n  });\n\n  it('should create URLSearchParams, given searchParams and currentSearchParams objects', () => {\n    const oldURLSearchParams = new URLSearchParams('bar=2');\n    const _URLSearchParams = createURLSearchParams({ foo: '1' }, oldURLSearchParams);\n    expect(_URLSearchParams).toBe('?bar=2&foo=1');\n  });\n\n  it('should create URLSearchParams, overriding', () => {\n    const oldURLSearchParams = new URLSearchParams('bar=3');\n    const _URLSearchParams = createURLSearchParams({ bar: '1' }, oldURLSearchParams);\n    expect(_URLSearchParams).toBe('?bar=1');\n  });\n\n  it('should create URLSearchParams, cleanup (empty new searchParams obj)', () => {\n    const oldURLSearchParams = new URLSearchParams('bar=3&foo=');\n    const _URLSearchParams = createURLSearchParams({}, oldURLSearchParams);\n    expect(_URLSearchParams).toBe('?bar=3');\n  });\n\n  it('should create URLSearchParams, cleanup (not empty searchParams obj)', () => {\n    const oldURLSearchParams = new URLSearchParams('bar=3&foo=');\n    const _URLSearchParams = createURLSearchParams({ baz: '' }, oldURLSearchParams);\n    expect(_URLSearchParams).toBe('?bar=3');\n  });\n\n  it('should return an empty query string, given empty searchParams object', () => {\n    const _URLSearchParams = createURLSearchParams({});\n    expect(_URLSearchParams).toBe('?');\n  });\n\n  it('should return an empty query string, given both empty searchParams and currentSearchParams objects', () => {\n    const emptyURLSearchParams = new URLSearchParams();\n    const _URLSearchParams = createURLSearchParams({}, emptyURLSearchParams);\n    expect(_URLSearchParams).toBe('?');\n  });\n\n  it('should return an empty query string, given stupid args', () => {\n    const stupidURLSearchParams = new URLSearchParams('whatever=');\n    const _URLSearchParams = createURLSearchParams({ foo: null, bar: null, baz: '' }, stupidURLSearchParams);\n    expect(_URLSearchParams).toBe('?');\n  });\n});\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.language.test.ts": {
      "tests": [
        {
          "id": "298",
          "name": "language should be fault tolerant, given an invalid language in the flattenedPath (fallback on default language)"
        },
        {
          "id": "299",
          "name": "language should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "300",
          "name": "language should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "301",
          "name": "language should return the default language, given an incomplete flattenedPath"
        },
        {
          "id": "302",
          "name": "language should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport buildPageLanguageFlag from '../language';\n\nconst EXT = '.FAKE_EXT';\n\nconst PREFIX = '$';\nlet prefixAcc = PREFIX;\nwhile (LANGUAGES.includes((prefixAcc + DEFAULT_LANGUAGE) as any)) prefixAcc += PREFIX;\nconst invalidLanguage = prefixAcc + DEFAULT_LANGUAGE;\n\ndescribe('language', () => {\n  it('should be fault tolerant, given an invalid language in the flattenedPath (fallback on default language)', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/${invalidLanguage}/slug` + EXT,\n          flattenedPath: PAGES_FOLDER + `/${invalidLanguage}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + '/slug' + EXT,\n          flattenedPath: PAGES_FOLDER + '/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given an incomplete flattenedPath', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          sourceFilePath: PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildPageLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + PAGES_FOLDER + '/slug' + EXT,\n          flattenedPath: '_' + PAGES_FOLDER + '/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/cache/__tests__/prebuild.cache.test.ts": {
      "tests": [
        {
          "id": "303",
          "name": "get and set should set the value with a clock, then destroy it (TTL invalidation)"
        },
        {
          "id": "304",
          "name": "get and set should set the value with a clock, then destroy the value (timed out)"
        },
        {
          "id": "305",
          "name": "get or set should set the value with a clock, then destroy the value (timed out)"
        }
      ],
      "source": "import { beforeEach, afterEach, describe, expect, it, vi } from 'vitest';\n\nimport { clearAll, getClock, getOrSet, get, set } from '../generic';\n\ndescribe('get and set', () => {\n  afterEach(() => {\n    clearAll();\n    vi.useRealTimers();\n  });\n\n  beforeEach(() => {\n    vi.useFakeTimers();\n  });\n\n  it('should set the value with a clock, then destroy it (TTL invalidation)', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const [key, data, ttl] = ['key', '__VALUE__', 1e4];\n    set(key, data, ttl);\n\n    const [value, clock] = [get(key), getClock(key)];\n\n    // eslint-disable-next-line no-magic-numbers\n    set(key, data, -1);\n    const destroyedClock = getClock(key);\n\n    expect(value).toBe(data);\n    expect(clock).toEqual({ cachedAt: expect.any(Number), ttl });\n    expect(destroyedClock).toBe(undefined);\n  });\n\n  it('should set the value with a clock, then destroy the value (timed out)', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const [key, data, ttl] = ['key', '__VALUE__', 1];\n    set(key, data, ttl);\n\n    // eslint-disable-next-line no-magic-numbers\n    vi.advanceTimersByTime(ttl * 2);\n\n    const value = get(key);\n    expect(value).toBe(undefined);\n  });\n});\n\ndescribe('get or set', () => {\n  afterEach(() => {\n    clearAll();\n    vi.useRealTimers();\n  });\n\n  beforeEach(() => {\n    vi.useFakeTimers();\n  });\n\n  it('should set the value with a clock, then destroy the value (timed out)', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    const [key, data, data2, ttl] = ['key', '__VALUE__', '__VALUE_2__', 1];\n    // eslint-disable-next-line require-await\n    await getOrSet(key, async () => data, ttl);\n    const firstValue = get(key);\n\n    // eslint-disable-next-line require-await\n    await getOrSet(key, async () => data2, ttl);\n    const stillFirstValue = get(key);\n\n    // eslint-disable-next-line no-magic-numbers\n    vi.advanceTimersByTime(ttl * 2);\n\n    const invalidatedFirstValue = get(key);\n\n    // eslint-disable-next-line require-await\n    const lastValue = await getOrSet(key, async () => data2, ttl);\n\n    expect(firstValue).toBe(data);\n    expect(stillFirstValue).toBe(firstValue);\n    expect(invalidatedFirstValue).toBe(undefined);\n    expect(lastValue).toBe(data2);\n  });\n});\n"
    },
    "src/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.paginatedElements.test.ts": {
      "tests": [
        {
          "id": "306",
          "name": "getPaginatedElementsCurrentSlice should return the correct slice for the first page"
        },
        {
          "id": "307",
          "name": "getPaginatedElementsCurrentSlice should return the correct slice for the 5th page"
        },
        {
          "id": "308",
          "name": "getPaginatedElementsCurrentSlice should return elements, given bigger pageSize than elements length"
        },
        {
          "id": "309",
          "name": "getPaginatedElementsCurrentSlice should return an empty array for a page that does not exist"
        },
        {
          "id": "310",
          "name": "getPaginatedElementsCurrentSlice should handle page 0 as the first page"
        },
        {
          "id": "311",
          "name": "getPaginatedElementsCurrentSlice should handle negative page as the first page"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\nimport { createElement } from 'react';\n\nimport { getPaginatedElementsCurrentSlice } from '../paginatedElements';\n\ndescribe('getPaginatedElementsCurrentSlice', () => {\n  const pageSize = 10;\n  const pagesAmount = 10;\n  const totalPages = pageSize * pagesAmount;\n\n  // eslint-disable-next-line no-magic-numbers, @typescript-eslint/no-unused-vars\n  const elements = Array.from({ length: totalPages }, (_, i) => createElement('div', { key: i }, `ReactElement ${i + 1}`));\n\n  it('should return the correct slice for the first page', () => {\n    const page = 1;\n    const slice = getPaginatedElementsCurrentSlice(page, pageSize, elements);\n    // eslint-disable-next-line no-magic-numbers\n    expect(slice).toStrictEqual(elements.slice(0, 10));\n  });\n\n  it('should return the correct slice for the 5th page', () => {\n    const page = 5;\n    const slice = getPaginatedElementsCurrentSlice(page, pageSize, elements);\n    // eslint-disable-next-line no-magic-numbers\n    expect(slice).toStrictEqual(elements.slice(40, 50));\n  });\n\n  it('should return elements, given bigger pageSize than elements length', () => {\n    const page = 1;\n    // eslint-disable-next-line no-magic-numbers\n    const slice = getPaginatedElementsCurrentSlice(page, totalPages + 1, elements);\n    expect(slice).toStrictEqual(elements);\n  });\n\n  it('should return an empty array for a page that does not exist', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const page = pagesAmount + 1;\n    const slice = getPaginatedElementsCurrentSlice(page, pageSize, elements);\n    expect(slice).toStrictEqual([]);\n  });\n\n  it('should handle page 0 as the first page', () => {\n    const page = 0;\n    const slice = getPaginatedElementsCurrentSlice(page, pageSize, elements);\n    // eslint-disable-next-line no-magic-numbers\n    expect(slice).toStrictEqual(elements.slice(0, 10));\n  });\n\n  it('should handle negative page as the first page', () => {\n    const page = -1;\n    const slice = getPaginatedElementsCurrentSlice(page, pageSize, elements);\n    // eslint-disable-next-line no-magic-numbers\n    expect(slice).toStrictEqual(elements.slice(0, 10));\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.retrieveLocaleFileInfosMetadatas.test.ts": {
      "tests": [
        {
          "id": "312",
          "name": "retrieveLocaleFileInfosMetadatas should throw ENOENT, given invalid locale filepath"
        },
        {
          "id": "313",
          "name": "retrieveLocaleFileInfosMetadatas should throw, given an invalid locale filepath (not evaluable)"
        },
        {
          "id": "314",
          "name": "retrieveLocaleFileInfosMetadatas should throw, given an invalid locale filepath (empty infos)"
        },
        {
          "id": "315",
          "name": "retrieveLocaleFileInfosMetadatas should return a valid object, given a valid locale filepath"
        }
      ],
      "source": "// @ts-expect-error\nimport BuilderError from '@rtm/prebuilder/errors/BuilderError';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport retrieveLocaleFileInfosMetadatas from '../retrieveLocaleFileInfosMetadatas';\n\nconst VALID_I18N_LOCALE_FILEPATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_locales/foo_valid_locale.ts';\nconst INVALID_I18N_LOCALE_FILEPATH_NOT_EVALUABLE =\n  './packages/prebuilder/src/metadatas-builders/__tests__/fake_locales/bar_invalid_locales_not_evaluable_infos.ts';\nconst INVALID_I18N_LOCALE_FILEPATH_EMPTY_INFOS =\n  './packages/prebuilder/src/metadatas-builders/__tests__/fake_locales/baz_invalid_locales_empty_infos.ts';\n\ndescribe('retrieveLocaleFileInfosMetadatas', () => {\n  it('should throw ENOENT, given invalid locale filepath', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await retrieveLocaleFileInfosMetadatas(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should throw, given an invalid locale filepath (not evaluable)', async () => {\n    await expect(retrieveLocaleFileInfosMetadatas(INVALID_I18N_LOCALE_FILEPATH_NOT_EVALUABLE)).rejects.toThrowError(BuilderError);\n  });\n\n  it('should throw, given an invalid locale filepath (empty infos)', async () => {\n    await expect(retrieveLocaleFileInfosMetadatas(INVALID_I18N_LOCALE_FILEPATH_EMPTY_INFOS)).rejects.toThrowError(BuilderError);\n  });\n\n  it('should return a valid object, given a valid locale filepath', async () => {\n    const retrievedData = await retrieveLocaleFileInfosMetadatas(VALID_I18N_LOCALE_FILEPATH);\n    expect(retrievedData).toStrictEqual({ lng: 'NOT testing localesInfosValidator here! Only testing retrieveLocaleFilesInfosMetadatas!' });\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.slug.test.ts": {
      "tests": [
        {
          "id": "316",
          "name": "blog slug (happy paths) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "317",
          "name": "blog slug (happy paths) should be fault tolerant"
        },
        {
          "id": "318",
          "name": "blog slug (happy paths, with index notation) should return the correct slug, with index notation"
        },
        {
          "id": "319",
          "name": "blog slug (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, BLOG_POSTS_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostSlug from '../slug';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('blog slug (happy paths)', () => {\n  const slug = 'slug';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${slug}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${slug}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n  });\n\n  it('should be fault tolerant', () => {\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n  });\n});\n\ndescribe('blog slug (happy paths, with index notation)', () => {\n  it('should return the correct slug, with index notation', () => {\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang/${INDEX_TOKEN}` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang`\n        },\n        _id: '_'\n      })\n    ).toBe(INDEX_TOKEN);\n  });\n});\n\ndescribe('blog slug (unhappy paths)', () => {\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n  });\n});\n"
    },
    "src/lib/misc/__tests__/prebuild.getComputedNavData.test.ts": {
      "tests": [
        {
          "id": "320",
          "name": "getComputedNavData should return a simple computed navData, given simple valid input"
        },
        {
          "id": "321",
          "name": "getComputedNavData should return a multi-entries computed navData, given a multi-entries valid input"
        },
        {
          "id": "322",
          "name": "getComputedNavData should return a multi-entries computed navData with embedded entities, given a multi-entries with embedded entities valid input"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getComputedNavData from '../getComputedNavData';\n\ndescribe('getComputedNavData', () => {\n  it('should return a simple computed navData, given simple valid input', () => {\n    const computedNavData = getComputedNavData(\n      {\n        // @ts-expect-error\n        ___FOO_PAGE___: 'foo'\n      },\n      { ___FOO_PAGE___: 'testing.foo.foo' }\n    );\n\n    expect(computedNavData).toStrictEqual([{ i18nTitle: 'testing.foo.foo', path: 'foo' }]);\n  });\n\n  it('should return a multi-entries computed navData, given a multi-entries valid input', () => {\n    const computedNavData = getComputedNavData(\n      {\n        // @ts-expect-error\n        ___FOO_PAGE___: 'foo',\n        ___BAR_PAGE___: 'bar'\n      },\n      {\n        ___FOO_PAGE___: 'testing.foo.foo',\n        ___BAR_PAGE___: 'testing.foo.bar'\n      }\n    );\n\n    expect(computedNavData).toStrictEqual([\n      { i18nTitle: 'testing.foo.foo', path: 'foo' },\n      { i18nTitle: 'testing.foo.bar', path: 'bar' }\n    ]);\n  });\n\n  it('should return a multi-entries computed navData with embedded entities, given a multi-entries with embedded entities valid input', () => {\n    const computedNavData = getComputedNavData(\n      {\n        // @ts-expect-error\n        ___FOOA_PAGE___: 'fooa',\n        ___FOO_PAGE___: 'foo',\n        ___BAR_PAGE___: 'bar'\n      },\n      {\n        ___FOOA_PAGE___: 'testing.foo.fooa',\n        ___FOO_PAGE___: 'testing.foo.foo',\n        ___BAR_PAGE___: 'testing.foo.bar'\n      },\n      {\n        ___FOOA_PAGE___: [\n          { i18nTitle: 'testing.foo.fooa.bar', path: 'fooa/bar' },\n          { i18nTitle: 'testing.foo.foob.bar', path: 'foob/bar' }\n        ]\n      }\n    );\n\n    expect(computedNavData).toStrictEqual([\n      {\n        embeddedEntities: [\n          { i18nTitle: 'testing.foo.fooa.bar', path: 'fooa/bar' },\n          { i18nTitle: 'testing.foo.foob.bar', path: 'foob/bar' }\n        ],\n        i18nTitle: 'testing.foo.fooa',\n        path: 'fooa'\n      },\n      { i18nTitle: 'testing.foo.foo', path: 'foo' },\n      { i18nTitle: 'testing.foo.bar', path: 'bar' }\n    ]);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "323",
          "name": "getPostStrict (happy paths) should return a valid post when picking a non-draft post in an unauthorized drafts CTX"
        },
        {
          "id": "324",
          "name": "getPostStrict (unhappy paths) should return NULL when picking a draft post in an unauthorized drafts CTX"
        }
      ],
      "source": "import type { BlogFakeLanguageType } from '𝕍/testingContentCategoryDatas';\nimport type { BlogConfigType } from '@/config/Blog/server';\nimport type { BlogPostType } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getBlogPostStrict } from '../api';\n\nvi.mock('@/config/Blog/server', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/Blog/server')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies BlogConfigType\n  };\n});\n\ndescribe('getPostStrict (happy paths)', () => {\n  it('should return a valid post when picking a non-draft post in an unauthorized drafts CTX', async () => {\n    const [category, subcategory, slug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const lang = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict({ subcategory, category, lang, slug })) as BlogPostType;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(slug);\n    expect(post.language).toBe(lang);\n    expect(post.url).toBe('/' + lang + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${slug}`);\n  });\n});\n\ndescribe('getPostStrict (unhappy paths)', () => {\n  it('should return NULL when picking a draft post in an unauthorized drafts CTX', async () => {\n    const [category, subcategory, lang, slug] = [\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' as const satisfies BlogFakeLanguageType,\n      'fake-draft-01' as const\n    ];\n    const post = await getBlogPostStrict({ subcategory, category, lang, slug });\n\n    expect(post).toBe(null);\n  });\n});\n\nvi.doUnmock('@/config/Blog/server');\n"
    },
    "packages/shared-lib/src/portable/misc/__tests__/prebuild.urlsPackAndUnpack.test.ts": {
      "tests": [
        {
          "id": "325",
          "name": "packIds should pack correctly, given empty list"
        },
        {
          "id": "326",
          "name": "packIds should pack correctly"
        },
        {
          "id": "327",
          "name": "unpackIds should unpack correctly, given empty string"
        },
        {
          "id": "328",
          "name": "unpackIds should unpack correctly"
        },
        {
          "id": "329",
          "name": "pack/unpackIds (unhappy paths) should NOT pack/unpack correctly (unhappy paths)"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_ENCODED_STRING_GLITCHED_BITSTREAM, INVALID_ENCODED_STRING_GLITCHED_BASE64 } from '𝕍/commons';\nimport { describe, expect, it } from 'vitest';\n\nimport { unpackIds, packIds, MIN_ID } from '../urlsPackAndUnpack';\n\nconst BIG_LENGTH = 1e6;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst RIDICULOUSLY_LARGE_ID_RANGE = Array.from({ length: BIG_LENGTH }, (_, n) => n);\n\nconst VALID_IDS = {\n  // eslint-disable-next-line no-magic-numbers\n  B: [10, 200, 3000, 4, 5, 0xfffffff, 60, 700, 80, 9, 0xffffff, 0xf, 0xff, 0xfff, 0xffff, 0xfffff, 11],\n  // eslint-disable-next-line no-magic-numbers\n  A: [1, MIN_ID, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  C: RIDICULOUSLY_LARGE_ID_RANGE\n};\n\n// eslint-disable-next-line no-magic-numbers\nconst INVALID_IDS = [MIN_ID, MIN_ID - 1];\n\nconst packedA = packIds(VALID_IDS.A);\nconst packedB = packIds(VALID_IDS.B);\nconst packedC = packIds(VALID_IDS.C);\n\ndescribe('packIds', () => {\n  it('should pack correctly, given empty list', () => {\n    expect(packIds([])).toBe('');\n  });\n\n  it('should pack correctly', () => {\n    expect(packedA).toMatchSnapshot();\n    expect(packedB).toMatchSnapshot();\n    expect(packedC).toMatchSnapshot();\n  });\n});\n\ndescribe('unpackIds', () => {\n  it('should unpack correctly, given empty string', () => {\n    expect(unpackIds('')).toStrictEqual([]);\n  });\n\n  it('should unpack correctly', () => {\n    expect(unpackIds(packedA)).toStrictEqual(VALID_IDS.A);\n    expect(unpackIds(packedB)).toStrictEqual(VALID_IDS.B);\n    expect(unpackIds(packedC)).toStrictEqual(VALID_IDS.C);\n  });\n});\n\ndescribe('pack/unpackIds (unhappy paths)', () => {\n  it('should NOT pack/unpack correctly (unhappy paths)', () => {\n    expect(() => packIds(INVALID_IDS)).toThrow(RangeError);\n    expect(() => unpackIds(INVALID_ENCODED_STRING_GLITCHED_BITSTREAM)).toThrow(RangeError);\n    expect(() => unpackIds(INVALID_ENCODED_STRING_GLITCHED_BASE64)).toThrow('The string to be decoded is not correctly encoded.');\n  });\n});\n"
    },
    "interop/validators/__tests__/prebuild.contentlayer.test.ts": {
      "tests": [
        {
          "id": "330",
          "name": "validateContentlayerConfig (happy paths) should not throw, given valid config, not containing duplicates"
        },
        {
          "id": "331",
          "name": "validateContentlayerConfig (unhappy paths) should throw, given invalid config, containing document types duplicates"
        },
        {
          "id": "332",
          "name": "validateContentlayerConfig (unhappy paths) should throw, given invalid config, containing blog tags duplicates"
        },
        {
          "id": "333",
          "name": "validateContentlayerConfig (unhappy paths) should throw, given invalid config, containing both document types and blog tags duplicates"
        }
      ],
      "source": "import { describe, expect, it, vi } from 'vitest';\n\nimport validateContentlayerConfig from '../contentlayer';\n\ndescribe('validateContentlayerConfig (happy paths)', () => {\n  it('should not throw, given valid config, not containing duplicates', () => {\n    expect(() =>\n      validateContentlayerConfig(\n        [\n          { def: () => ({ name: 'a' }), type: 'document' },\n          { def: () => ({ name: 'b' }), type: 'document' },\n          { def: () => ({ name: 'c' }), type: 'document' }\n        ],\n        ['a', 'b']\n      )\n    ).not.toThrowError();\n  });\n});\n\ndescribe('validateContentlayerConfig (unhappy paths)', () => {\n  const errorSpy = vi.spyOn(console, 'error');\n  errorSpy.mockImplementation(vi.fn(() => {}));\n\n  it('should throw, given invalid config, containing document types duplicates', () => {\n    expect(() =>\n      validateContentlayerConfig(\n        [\n          { def: () => ({ name: 'duplicate' }), type: 'document' },\n          { def: () => ({ name: 'duplicate' }), type: 'document' },\n          { def: () => ({ name: 'notDuplicate' }), type: 'document' }\n        ],\n        ['tag_one', 'tag_two']\n      )\n    ).toThrowError();\n  });\n\n  it('should throw, given invalid config, containing blog tags duplicates', () => {\n    expect(() =>\n      validateContentlayerConfig(\n        [\n          { def: () => ({ name: 'a' }), type: 'document' },\n          { def: () => ({ name: 'b' }), type: 'document' },\n          { def: () => ({ name: 'c' }), type: 'document' }\n        ],\n        ['duplicate', 'duplicate']\n      )\n    ).toThrowError();\n  });\n\n  it('should throw, given invalid config, containing both document types and blog tags duplicates', () => {\n    expect(() =>\n      validateContentlayerConfig(\n        [\n          { def: () => ({ name: 'duplicate' }), type: 'document' },\n          { def: () => ({ name: 'duplicate' }), type: 'document' },\n          { def: () => ({ name: 'notDuplicate' }), type: 'document' }\n        ],\n        ['duplicate', 'duplicate']\n      )\n    ).toThrowError();\n  });\n});\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.root.test.ts": {
      "tests": [
        {
          "id": "334",
          "name": "root should return the top-level root, given a valid input"
        },
        {
          "id": "335",
          "name": "root should return the top-level root, given a valid input (with default language root)"
        },
        {
          "id": "336",
          "name": "root should return the top-level root, given a flattenedPath corresponding to index notation"
        },
        {
          "id": "337",
          "name": "root should NOT be fault tolerant"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildPageRoot from '../root';\n\ndescribe('root', () => {\n  const root = 'root';\n  it('should return the top-level root, given a valid input', () => {\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${root}`\n        },\n        _id: '_'\n      })\n    ).toBe('/');\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${root}/foo/bar`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n  });\n\n  it('should return the top-level root, given a valid input (with default language root)', () => {\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/`\n        },\n        _id: '_'\n      })\n    ).toBe('/');\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n  });\n\n  it('should return the top-level root, given a flattenedPath corresponding to index notation', () => {\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe('/');\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildPageRoot({\n        _raw: {\n          flattenedPath: '_' + PAGES_FOLDER + `/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "interop/lib/misc/__tests__/prebuild.damerauLevenshtein.test.ts": {
      "tests": [
        {
          "id": "338",
          "name": "damerauLevenshtein should pass, empty strings"
        },
        {
          "id": "339",
          "name": "damerauLevenshtein should pass, distance 0"
        },
        {
          "id": "340",
          "name": "damerauLevenshtein should pass, 100% distance"
        },
        {
          "id": "341",
          "name": "damerauLevenshtein should pass, cat and dog"
        },
        {
          "id": "342",
          "name": "damerauLevenshtein should pass, deletion"
        },
        {
          "id": "343",
          "name": "damerauLevenshtein should pass, insertion"
        },
        {
          "id": "344",
          "name": "damerauLevenshtein should pass, substitution"
        },
        {
          "id": "345",
          "name": "damerauLevenshtein should pass, transposition"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport { describe, expect, it } from 'vitest';\n\nimport damerauLevenshtein from '../damerauLevenshtein';\n\n// https://github.com/aldebaran/libport/blob/master/tests/libport/damerau-levenshtein-distance.cc\n\ndescribe('damerauLevenshtein', () => {\n  const emptyString: EmptyString = '';\n\n  it('should pass, empty strings', () => {\n    const distance = damerauLevenshtein(emptyString, emptyString);\n    // eslint-disable-next-line no-magic-numbers\n    expect(distance).toBe(0);\n  });\n\n  it('should pass, distance 0', () => {\n    const s = 'cat';\n    const distance = damerauLevenshtein(s, s);\n    // eslint-disable-next-line no-magic-numbers\n    expect(distance).toBe(0);\n  });\n\n  it('should pass, 100% distance', () => {\n    const s2 = 'test';\n    const expectedDistance = s2.length;\n    const distance = damerauLevenshtein(emptyString, s2);\n    expect(distance).toBe(expectedDistance);\n  });\n\n  it('should pass, cat and dog', () => {\n    const distance = damerauLevenshtein('cat', 'dog');\n    // eslint-disable-next-line no-magic-numbers\n    expect(distance).toBe(3);\n  });\n\n  it('should pass, deletion', () => {\n    const distance = damerauLevenshtein('azertyuiop', 'aeryuop');\n    // eslint-disable-next-line no-magic-numbers\n    expect(distance).toBe(3);\n  });\n\n  it('should pass, insertion', () => {\n    const distance = damerauLevenshtein('aeryuop', 'azertyuiop');\n    // eslint-disable-next-line no-magic-numbers\n    expect(distance).toBe(3);\n  });\n\n  it('should pass, substitution', () => {\n    const distance = damerauLevenshtein('azertyuiopqsdfghjklmwxcvbn,', 'qwertyuiopasdfghjkl;zxcvbnm');\n    // eslint-disable-next-line no-magic-numbers\n    expect(distance).toBe(6);\n  });\n\n  it('should pass, transposition', () => {\n    const distance = damerauLevenshtein('1234567890', '1324576809');\n    // eslint-disable-next-line no-magic-numbers\n    expect(distance).toBe(3);\n  });\n});\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "346",
          "name": "getLandingPageByLanguageAndSlugStrict should return a valid lp"
        },
        {
          "id": "347",
          "name": "getLandingPageByLanguageAndSlugStrict should return a valid lp in an authorized drafts CTX"
        }
      ],
      "source": "import type { LandingPagesConfigType } from '@/config/landingPages';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('@/config/landingPages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/landingPages')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies LandingPagesConfigType\n  };\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict', () => {\n  it('should return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: targettedSlug, lang: language }) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n\n  it('should return a valid lp in an authorized drafts CTX', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-draft-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: targettedSlug, lang: language }) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n});\n\nvi.doUnmock('@/config/landingPages');\n"
    },
    "src/lib/pages/__tests__/postbuild.api.testing_ctx.test.ts": {
      "tests": [
        {
          "id": "348",
          "name": "getPageByLanguageAndPathStrict (happy paths) should return a valid page"
        },
        {
          "id": "349",
          "name": "getPageByLanguageAndPathStrict (happy paths) should return a valid page (index notation)"
        },
        {
          "id": "350",
          "name": "getPageByLanguageAndPathStrict (unhappy paths) should return null, given invalid path"
        },
        {
          "id": "351",
          "name": "getPageByLanguageAndPathStrict (unhappy paths) should return null, given invalid language"
        }
      ],
      "source": "import type { Page } from 'contentlayer/generated';\n\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\nimport PagesConfig from '@/config/pages';\n\nimport { getPageByLanguageAndPathStrict } from '../api';\n\ndescribe('getPageByLanguageAndPathStrict (happy paths)', () => {\n  it('should return a valid page', () => {\n    const root = PagesConfig.TESTING_ROOT;\n    const targettedPath = `${root}/fake-page-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const page = getPageByLanguageAndPathStrict({ path: targettedPath, lang: language }) as Page;\n\n    expect(page.path).toBe(targettedPath);\n    expect(page.root).toBe(root);\n    expect(page.url).toBe('/' + language + ROUTES_ROOTS.WEBSITE + targettedPath);\n  });\n\n  it('should return a valid page (index notation)', () => {\n    const root = PagesConfig.TESTING_ROOT;\n    const targettedPath = `${root}/fake-nesting` as const;\n    const language = DEFAULT_LANGUAGE;\n    const page = getPageByLanguageAndPathStrict({ path: targettedPath, lang: language }) as Page;\n\n    expect(page.path).toBe(targettedPath);\n    expect(page.root).toBe(root);\n    expect(page.url).toBe('/' + language + ROUTES_ROOTS.WEBSITE + targettedPath);\n  });\n});\n\ndescribe('getPageByLanguageAndPathStrict (unhappy paths)', () => {\n  it('should return null, given invalid path', () => {\n    const targettedPath = '__INVALID__TARGETTED_SLUG__' as const;\n    // @ts-expect-error\n    const page = getPageByLanguageAndPathStrict({ lang: DEFAULT_LANGUAGE, path: targettedPath });\n\n    expect(page).toBe(null);\n  });\n\n  it('should return null, given invalid language', () => {\n    const targettedPath = `${PagesConfig.TESTING_ROOT}/fake-page-00` as const;\n    // @ts-expect-error\n    const page = getPageByLanguageAndPathStrict({ lang: '__INVALID_LANGUAGE__', path: targettedPath });\n\n    expect(page).toBe(null);\n  });\n});\n"
    },
    "src/components/ui/helpers/PaginatedElements/functions/__tests__/prebuild.pagination.test.ts": {
      "tests": [
        {
          "id": "352",
          "name": "getSanitizedCurrentPage should return the same page, given a valid page number"
        },
        {
          "id": "353",
          "name": "getSanitizedCurrentPage should return FIRST_PAGE_PARAM, given a negative page number"
        },
        {
          "id": "354",
          "name": "getSanitizedCurrentPage should return FIRST_PAGE_PARAM, given an empty URLSearchParams"
        },
        {
          "id": "355",
          "name": "getSanitizedCurrentPage should return FIRST_PAGE_PARAM, given an invalid page number"
        },
        {
          "id": "356",
          "name": "getSanitizedCurrentPage should return maxPage, given a too big page number"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport { getSanitizedCurrentPage } from '../pagination';\nimport { FIRST_PAGE_PARAM } from '../../constants';\n\ndescribe('getSanitizedCurrentPage', () => {\n  const __PAGE_KEY = 'page';\n  const maxPage = 10;\n\n  it('should return the same page, given a valid page number', () => {\n    const params = new URLSearchParams();\n    const page = 8;\n    params.append(__PAGE_KEY, String(page));\n\n    const sanitizedPage = getSanitizedCurrentPage(params, maxPage, __PAGE_KEY);\n    expect(sanitizedPage).toBe(page);\n  });\n\n  it('should return FIRST_PAGE_PARAM, given a negative page number', () => {\n    const params = new URLSearchParams();\n    const page = -4;\n    params.append(__PAGE_KEY, String(page));\n\n    const sanitizedPage = getSanitizedCurrentPage(params, maxPage, __PAGE_KEY);\n    expect(sanitizedPage).toBe(FIRST_PAGE_PARAM);\n  });\n\n  it('should return FIRST_PAGE_PARAM, given an empty URLSearchParams', () => {\n    const params = new URLSearchParams();\n\n    const sanitizedPage = getSanitizedCurrentPage(params, maxPage, __PAGE_KEY);\n    expect(sanitizedPage).toBe(FIRST_PAGE_PARAM);\n  });\n\n  it('should return FIRST_PAGE_PARAM, given an invalid page number', () => {\n    const params = new URLSearchParams();\n    const page = 'qsjkqsdq';\n    params.append(__PAGE_KEY, page);\n\n    const sanitizedPage = getSanitizedCurrentPage(params, maxPage, __PAGE_KEY);\n    expect(sanitizedPage).toBe(FIRST_PAGE_PARAM);\n  });\n\n  it('should return maxPage, given a too big page number', () => {\n    const params = new URLSearchParams();\n    // eslint-disable-next-line no-magic-numbers\n    const page = maxPage + 1;\n    params.append(__PAGE_KEY, String(page));\n\n    const sanitizedPage = getSanitizedCurrentPage(params, maxPage, __PAGE_KEY);\n    expect(sanitizedPage).toBe(maxPage);\n  });\n});\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "357",
          "name": "getLandingPageByLanguageAndSlugStrict (happy paths) should return a valid lp"
        },
        {
          "id": "358",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should return NULL when picking a draft lp in an unauthorized drafts CTX"
        }
      ],
      "source": "import type { LandingPagesConfigType } from '@/config/landingPages';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('@/config/landingPages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/landingPages')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies LandingPagesConfigType\n  };\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (happy paths)', () => {\n  it('should return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: targettedSlug, lang: language }) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (unhappy paths)', () => {\n  it('should return NULL when picking a draft lp in an unauthorized drafts CTX', () => {\n    const targettedSlug = `${LandingPagesConfig.TESTING_CATEGORY}-fake-draft-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: targettedSlug, lang: language });\n\n    expect(lp).toBe(null);\n  });\n});\n\nvi.doUnmock('@/config/landingPages');\n"
    },
    "interop/errors/__tests__/prebuild.InvalidArguments.test.ts": {
      "tests": [
        {
          "id": "359",
          "name": "InvalidArgumentsError should generate an error message with hint"
        },
        {
          "id": "360",
          "name": "InvalidArgumentsError should generate an error message with trimmed hint"
        },
        {
          "id": "361",
          "name": "InvalidArgumentsError should generate an error message with hint, without additional punctuation"
        },
        {
          "id": "362",
          "name": "InvalidArgumentsError should generate an error message without hint"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport InvalidArgumentsError, { PUNCTUATION } from '../InvalidArguments';\n\nconst FAKE_FUNCTION_NAME = 'FAKE_FUNCTION';\nconst FAKE_ARG = 'FAKE';\nconst FAKE_ARG_KEY = 'fakeArg';\n\ndescribe('InvalidArgumentsError', () => {\n  it('should generate an error message with hint', () => {\n    const FAKE_HINT = 'FAKE HINT';\n    const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG }, FAKE_HINT);\n\n    expect(FAKE_ERROR.message).toBe(`Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}\n${FAKE_HINT}.`);\n  });\n\n  it('should generate an error message with trimmed hint', () => {\n    const FAKE_HINT = '                   FAKE HINT              ';\n    const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG }, FAKE_HINT);\n\n    expect(FAKE_ERROR.message).toBe(`Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}\n${FAKE_HINT.trim()}.`);\n  });\n\n  it('should generate an error message with hint, without additional punctuation', () => {\n    for (const currentPunctuation of PUNCTUATION) {\n      const FAKE_HINT = 'FAKE HINT' + currentPunctuation;\n      const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG }, FAKE_HINT);\n\n      expect(FAKE_ERROR.message).toBe(\n        `Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}\n${FAKE_HINT}`\n      );\n    }\n  });\n\n  it('should generate an error message without hint', () => {\n    const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG });\n\n    expect(FAKE_ERROR.message).toBe(`Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}`);\n  });\n});\n"
    },
    "src/lib/pages/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "363",
          "name": "getPageByLanguageAndPathStrict should return a valid page"
        },
        {
          "id": "364",
          "name": "getPageByLanguageAndPathStrict should return a valid page when picking a draft page in an authorized drafts CTX"
        }
      ],
      "source": "import type { PagesConfigType } from '@/config/pages';\nimport type { Page } from 'contentlayer/generated';\n\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\nimport PagesConfig from '@/config/pages';\n\nimport { getPageByLanguageAndPathStrict } from '../api';\n\nvi.mock('@/config/pages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/pages')>();\n\n  return {\n    default: {\n      ...mod.default,\n      SKIP_AUTOMOUNT: { prefixes: [], paths: [] },\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies PagesConfigType\n  };\n});\n\ndescribe('getPageByLanguageAndPathStrict', () => {\n  it('should return a valid page', () => {\n    const root = PagesConfig.TESTING_ROOT;\n    const targettedPath = `${root}/fake-page-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const page = getPageByLanguageAndPathStrict({ path: targettedPath, lang: language }) as Page;\n\n    expect(page.path).toBe(targettedPath);\n    expect(page.root).toBe(root);\n    expect(page.url).toBe('/' + language + ROUTES_ROOTS.WEBSITE + targettedPath);\n  });\n\n  it('should return a valid page when picking a draft page in an authorized drafts CTX', () => {\n    const root = PagesConfig.TESTING_ROOT;\n    const targettedPath = `${root}/fake-draft-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const page = getPageByLanguageAndPathStrict({ path: targettedPath, lang: language }) as Page;\n\n    expect(page.path).toBe(targettedPath);\n    expect(page.root).toBe(root);\n    expect(page.url).toBe('/' + language + ROUTES_ROOTS.WEBSITE + targettedPath);\n  });\n});\n\nvi.doUnmock('@/config/pages');\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.category.test.ts": {
      "tests": [
        {
          "id": "365",
          "name": "blog category (happy paths) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "366",
          "name": "blog category (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, BLOG_POSTS_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostCategory from '../category';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('blog category (happy paths)', () => {\n  const category = 'category';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/${category}/subcategory/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/${category}/subcategory/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n\n    expect(\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n  });\n});\n\ndescribe('blog category (unhappy paths)', () => {\n  const category = 'category';\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/pages/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "367",
          "name": "getPageByLanguageAndPathStrict (happy paths) should return a valid page"
        },
        {
          "id": "368",
          "name": "getPageByLanguageAndPathStrict (unhappy paths) should return NULL when picking a draft page in an unauthorized drafts CTX"
        }
      ],
      "source": "import type { PagesConfigType } from '@/config/pages';\nimport type { Page } from 'contentlayer/generated';\n\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\nimport PagesConfig from '@/config/pages';\n\nimport { getPageByLanguageAndPathStrict } from '../api';\n\nvi.mock('@/config/pages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/pages')>();\n\n  return {\n    default: {\n      ...mod.default,\n      SKIP_AUTOMOUNT: { prefixes: [], paths: [] },\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies PagesConfigType\n  };\n});\n\ndescribe('getPageByLanguageAndPathStrict (happy paths)', () => {\n  it('should return a valid page', () => {\n    const root = PagesConfig.TESTING_ROOT;\n    const targettedPath = `${root}/fake-page-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const page = getPageByLanguageAndPathStrict({ path: targettedPath, lang: language }) as Page;\n\n    expect(page.path).toBe(targettedPath);\n    expect(page.root).toBe(root);\n    expect(page.url).toBe('/' + language + ROUTES_ROOTS.WEBSITE + targettedPath);\n  });\n});\n\ndescribe('getPageByLanguageAndPathStrict (unhappy paths)', () => {\n  it('should return NULL when picking a draft page in an unauthorized drafts CTX', () => {\n    const root = PagesConfig.TESTING_ROOT;\n    const targettedPath = `${root}/fake-draft-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const page = getPageByLanguageAndPathStrict({ path: targettedPath, lang: language });\n\n    expect(page).toBe(null);\n  });\n});\n\nvi.doUnmock('@/config/pages');\n"
    },
    "packages/shared-lib/src/portable/html/__tests__/prebuild.dispatchClickOnLinkOrButtonFirstChild.test.ts": {
      "tests": [
        {
          "id": "369",
          "name": "dispatchClickOnLinkOrButtonFirstChild should click on the link element if it exists"
        },
        {
          "id": "370",
          "name": "dispatchClickOnLinkOrButtonFirstChild should click on the button element if it exists"
        },
        {
          "id": "371",
          "name": "dispatchClickOnLinkOrButtonFirstChild should not throw, given an Event Target which does not extend HTMLElement"
        }
      ],
      "source": "import type { Element } from 'happy-dom';\n\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Window } from 'happy-dom';\n\nimport dispatchClickOnLinkOrButtonFirstChild from '../dispatchClickOnLinkOrButtonFirstChild';\n\ndescribe('dispatchClickOnLinkOrButtonFirstChild', () => {\n  it('should click on the link element if it exists', () => {\n    const window = new Window();\n    window.document.body.innerHTML = `\n      <div id=\"element\">\n        <a href=\"#\"></a>\n      </div>\n    `;\n\n    const element = window.document.body.querySelector('#element') as Element;\n    const linkElement = element.querySelector('a') as Element;\n\n    let clicked = false;\n    linkElement.onclick = () => {\n      clicked = true;\n    };\n\n    dispatchClickOnLinkOrButtonFirstChild(element as any);\n    expect(clicked).toBe(true);\n  });\n\n  it('should click on the button element if it exists', () => {\n    const window = new Window();\n    window.document.body.innerHTML = `\n      <div id=\"element\">\n        <button>Click me!</button>\n      </div>\n    `;\n\n    const element = window.document.body.querySelector('#element') as Element;\n    const buttonElement = element.querySelector('button') as Element;\n\n    let clicked = false;\n    buttonElement.onclick = () => {\n      clicked = true;\n    };\n\n    dispatchClickOnLinkOrButtonFirstChild(element as any);\n    expect(clicked).toBe(true);\n  });\n\n  it('should not throw, given an Event Target which does not extend HTMLElement', () => {\n    const myEventTarget = new EventTarget();\n    expect(() => dispatchClickOnLinkOrButtonFirstChild(myEventTarget)).not.toThrow();\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.not_testing_ctx.test.ts": {
      "tests": [
        {
          "id": "372",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths) should return an empty list, given testing category in not testing ctx"
        },
        {
          "id": "373",
          "name": "getBlogPostUnstrict (unhappy paths) should return null, given testing category in not testing ctx"
        },
        {
          "id": "374",
          "name": "isValidBlogCategory should return false, given testing category in not testing ctx"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, vi, it } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\n\nimport { getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict, getBlogPostUnstrict, isValidBlogCategory } from '../api';\n\nvi.mock('../ctx', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../ctx')>();\n\n  return {\n    default: {\n      ...mod.default,\n      TESTING: false\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths)', () => {\n  it('should return an empty list, given testing category in not testing ctx', async () => {\n    const posts = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      DEFAULT_LANGUAGE\n    );\n    expect(posts).toStrictEqual([]);\n  });\n});\n\ndescribe('getBlogPostUnstrict (unhappy paths)', () => {\n  it('should return null, given testing category in not testing ctx', async () => {\n    const posts = await getBlogPostUnstrict(BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01', DEFAULT_LANGUAGE);\n    expect(posts).toBe(null);\n  });\n});\n\ndescribe('isValidBlogCategory', () => {\n  it('should return false, given testing category in not testing ctx', () => {\n    const posts = isValidBlogCategory(BlogConfig.TESTING_CATEGORY);\n    expect(posts).toBe(false);\n  });\n});\n\nvi.doUnmock('../ctx');\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.traverseAndMapFilepaths.test.ts": {
      "tests": [
        {
          "id": "375",
          "name": "traverseAndMapFilepaths should return an arborescence, given a valid RootFolder (full)"
        },
        {
          "id": "376",
          "name": "traverseAndMapFilepaths should return an arborescence, given a valid RootFolder (partial)"
        },
        {
          "id": "377",
          "name": "traverseAndMapFilepaths should return an arborescence, given a valid RootFolder (partial 2)"
        },
        {
          "id": "378",
          "name": "traverseAndMapFilepaths should throw ENOENT, given invalid path"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport traverseAndMapFilepaths from '../traverseAndMapFilepaths';\n\ndescribe('traverseAndMapFilepaths', () => {\n  it('should return an arborescence, given a valid RootFolder (full)', async () => {\n    const architecture = await traverseAndMapFilepaths('./packages/prebuilder/src/lib/__tests__/fakeDirectory');\n\n    expect(architecture).toMatchSnapshot();\n  });\n\n  it('should return an arborescence, given a valid RootFolder (partial)', async () => {\n    const architecture = await traverseAndMapFilepaths('./packages/prebuilder/src/lib/__tests__/fakeDirectory/bar');\n\n    expect(architecture).toMatchSnapshot();\n  });\n\n  it('should return an arborescence, given a valid RootFolder (partial 2)', async () => {\n    const architecture = await traverseAndMapFilepaths('./packages/prebuilder/src/lib/__tests__/fakeDirectory/bar/baz/foo');\n\n    expect(architecture).toMatchSnapshot();\n  });\n\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await traverseAndMapFilepaths(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n});\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.feedbacksMerge.test.ts": {
      "tests": [
        {
          "id": "379",
          "name": "prefixFeedback should return empty string, given empty feedback"
        },
        {
          "id": "380",
          "name": "prefixFeedback should return prefixed feedback string, given feedback and prefix"
        },
        {
          "id": "381",
          "name": "foldFeedbacks should return an empty string, given no feedback"
        },
        {
          "id": "382",
          "name": "foldFeedbacks should return an empty string, given an empty feedback"
        },
        {
          "id": "383",
          "name": "foldFeedbacks should return the same string, given only one feedback"
        },
        {
          "id": "384",
          "name": "foldFeedbacks should return the merged feedbacks, given two feedbacks"
        },
        {
          "id": "385",
          "name": "foldFeedbacks should return the folded feedbacks, given three feedbacks"
        },
        {
          "id": "386",
          "name": "foldFeedbacks should return the first feedback, given a first valid feedback and a second empty feedback"
        },
        {
          "id": "387",
          "name": "foldFeedbacks should return the second feedback, given a first empty feedback and a second valid feedback"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport { prefixFeedback, foldFeedbacks } from '../feedbacksMerge';\n\ndescribe('prefixFeedback', () => {\n  it('should return empty string, given empty feedback', () => {\n    expect(prefixFeedback('', 'prefix')).toBe('');\n  });\n\n  it('should return prefixed feedback string, given feedback and prefix', () => {\n    expect(prefixFeedback('feedback', 'prefix: ')).toBe('prefix: feedback');\n  });\n});\n\ndescribe('foldFeedbacks', () => {\n  it('should return an empty string, given no feedback', () => {\n    expect(foldFeedbacks()).toBe('');\n  });\n\n  it('should return an empty string, given an empty feedback', () => {\n    expect(foldFeedbacks('')).toBe('');\n  });\n\n  it('should return the same string, given only one feedback', () => {\n    expect(foldFeedbacks('foo')).toBe('foo');\n  });\n\n  it('should return the merged feedbacks, given two feedbacks', () => {\n    expect(foldFeedbacks('foo', 'bar')).toBe('foo\\nbar');\n  });\n\n  it('should return the folded feedbacks, given three feedbacks', () => {\n    expect(foldFeedbacks('foo', 'bar', 'baz')).toBe('foo\\nbar\\nbaz');\n  });\n\n  it('should return the first feedback, given a first valid feedback and a second empty feedback', () => {\n    expect(foldFeedbacks('foo', '')).toBe('foo');\n  });\n\n  it('should return the second feedback, given a first empty feedback and a second valid feedback', () => {\n    expect(foldFeedbacks('', 'bar')).toBe('bar');\n  });\n});\n"
    },
    "interop/lib/builders/__tests__/prebuild.blogTagsGenerators.test.ts": {
      "tests": [
        {
          "id": "388",
          "name": "generateBlogTagOptionsVocabSchema should return a valid vocab schema, given blog tags options"
        },
        {
          "id": "389",
          "name": "generateBlogTagOptionsVocabSchema should return an empty dictionnary, given empty blog tags options"
        },
        {
          "id": "390",
          "name": "generateIndexedBlogTagOptions should return a valid indexes dictionnary, given blog tags options"
        },
        {
          "id": "391",
          "name": "generateIndexedBlogTagOptions should return an empty dictionnary, given empty blog tags options"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport { describe, expect, it } from 'vitest';\n\nimport { generateBlogTagOptionsVocabSchema, generateIndexedBlogTagOptions } from '../blogTagsGenerators';\n\nconst emptyString: EmptyString = '';\nconst FAKE_BLOG_TAGS_OPTIONS = ['tag_one', 'tag_two', 'tag_three'] as const satisfies string[];\n\ndescribe('generateBlogTagOptionsVocabSchema', () => {\n  const blogTagOptionsVocabSchema = generateBlogTagOptionsVocabSchema(FAKE_BLOG_TAGS_OPTIONS);\n\n  it('should return a valid vocab schema, given blog tags options', () => {\n    expect(blogTagOptionsVocabSchema).toStrictEqual({\n      tag_three: emptyString,\n      tag_one: emptyString,\n      tag_two: emptyString\n    });\n  });\n\n  it('should return an empty dictionnary, given empty blog tags options', () => {\n    expect(generateBlogTagOptionsVocabSchema([])).toStrictEqual({});\n  });\n});\n\ndescribe('generateIndexedBlogTagOptions', () => {\n  it('should return a valid indexes dictionnary, given blog tags options', () => {\n    const indexedBlogTagOptions = generateIndexedBlogTagOptions(FAKE_BLOG_TAGS_OPTIONS);\n\n    expect(indexedBlogTagOptions).toStrictEqual({\n      tag_three: 2,\n      tag_one: 0,\n      tag_two: 1\n    });\n  });\n\n  it('should return an empty dictionnary, given empty blog tags options', () => {\n    expect(generateIndexedBlogTagOptions([])).toStrictEqual({});\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.disabled_notfound_trigger_ctx.test.ts": {
      "tests": [
        {
          "id": "392",
          "name": "blogSubcategoryShouldTriggerNotFound should return false only when the list is not empty"
        }
      ],
      "source": "import type { BlogConfigType } from '@/config/Blog/server';\nimport type { BlogPostType } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\n\nimport { blogSubcategoryShouldTriggerNotFound, getBlogPostStrict } from '../api';\n\nvi.mock('@/config/Blog/server', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/Blog/server')>();\n\n  return {\n    default: {\n      ...mod.default,\n      USE_BLOG_POSTS_NOTFOUND_WHEN_SUBCATEGORY_IS_EMPTY_INSTEAD_OF_NOT_FOUND: false\n    } satisfies BlogConfigType\n  };\n});\n\ndescribe('blogSubcategoryShouldTriggerNotFound', () => {\n  it('should return false only when the list is not empty', async () => {\n    const [category, subcategory, slug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const lang = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict({ subcategory, category, lang, slug })) as BlogPostType;\n\n    expect(blogSubcategoryShouldTriggerNotFound([])).toBe(true);\n    expect(blogSubcategoryShouldTriggerNotFound([post])).toBe(false);\n  });\n});\n\nvi.doUnmock('@/config/Blog/server');\n"
    },
    "src/lib/blog/__tests__/postbuild.api.enabled_notfound_trigger_ctx.test.ts": {
      "tests": [
        {
          "id": "393",
          "name": "blogSubcategoryShouldTriggerNotFound should return false"
        }
      ],
      "source": "import type { BlogConfigType } from '@/config/Blog/server';\nimport type { BlogPostType } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingContentCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\n\nimport { blogSubcategoryShouldTriggerNotFound, getBlogPostStrict } from '../api';\n\nvi.mock('@/config/Blog/server', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/Blog/server')>();\n\n  return {\n    default: {\n      ...mod.default,\n      USE_BLOG_POSTS_NOTFOUND_WHEN_SUBCATEGORY_IS_EMPTY_INSTEAD_OF_NOT_FOUND: true\n    } satisfies BlogConfigType\n  };\n});\n\ndescribe('blogSubcategoryShouldTriggerNotFound', () => {\n  it('should return false', async () => {\n    const [category, subcategory, slug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const lang = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict({ subcategory, category, lang, slug })) as BlogPostType;\n\n    expect(blogSubcategoryShouldTriggerNotFound([])).toBe(false);\n    expect(blogSubcategoryShouldTriggerNotFound([post])).toBe(false);\n  });\n});\n\nvi.doUnmock('@/config/Blog/server');\n"
    },
    "src/lib/portable/str/__tests__/prebuild.indexOfNthOccurence.test.ts": {
      "tests": [
        {
          "id": "394",
          "name": "indexOfNthOccurrence should return a positive value, given a string containing the needle"
        },
        {
          "id": "395",
          "name": "indexOfNthOccurrence should return -1, given a string not containing the needle"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport indexOfNthOccurrence from '../indexOfNthOccurrence';\n\ndescribe('indexOfNthOccurrence', () => {\n  it('should return a positive value, given a string containing the needle', () => {\n    const repetitions = 3;\n    const strBase = 'abc';\n    const strHaystack = strBase.repeat(repetitions);\n    const baseLen = strBase.length;\n\n    for (let n = 0; n < repetitions; n++) {\n      const expected = n * baseLen;\n      // eslint-disable-next-line no-magic-numbers\n      const result = indexOfNthOccurrence(strHaystack, 'a', n + 1);\n      expect(result).toBe(expected);\n    }\n  });\n\n  it('should return -1, given a string not containing the needle', () => {\n    const expected = -1;\n    const foo = 'foo';\n    const invalidNeedle = '$';\n    const validNeedle = 'f';\n\n    // eslint-disable-next-line no-magic-numbers\n    expect(indexOfNthOccurrence('', foo, 1)).toBe(expected);\n    // eslint-disable-next-line no-magic-numbers\n    expect(indexOfNthOccurrence(foo, invalidNeedle, 1)).toBe(expected);\n    // eslint-disable-next-line no-magic-numbers\n    expect(indexOfNthOccurrence(foo, invalidNeedle, 2)).toBe(expected);\n    // eslint-disable-next-line no-magic-numbers\n    expect(indexOfNthOccurrence(foo, validNeedle, 0)).toBe(expected);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.ctx_agnostic.test.ts": {
      "tests": [
        {
          "id": "396",
          "name": "getBlogPostFormattedDate should return date without time, given valid ISO Date String with null timestamp"
        },
        {
          "id": "397",
          "name": "isValidBlogCategoryAndSubcategoryPair should be false for invalid combinations, given invalid category and subcategory"
        },
        {
          "id": "398",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return false, given an invalid category and subcategory"
        }
      ],
      "source": "import type { BlogFakeLanguageType } from '𝕍/testingContentCategoryDatas';\n\nimport { describe, expect, it } from 'vitest';\n\nimport { isValidBlogCategoryAndSubcategoryPairInAnyLanguage, isValidBlogCategoryAndSubcategoryPair, getBlogPostFormattedDate } from '../api';\n\ndescribe('getBlogPostFormattedDate', () => {\n  it('should return date without time, given valid ISO Date String with null timestamp', () => {\n    expect(getBlogPostFormattedDate('fr' as any, '2021-12-24T00:00:00.000Z')).toBe('Vendredi 24 décembre 2021');\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPair', () => {\n  it('should be false for invalid combinations, given invalid category and subcategory', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      // @ts-expect-error\n      '__INVALID_CATEGORY__',\n      '__INVALID_SUBCATEGORY__',\n      'drafts' satisfies BlogFakeLanguageType\n    );\n    expect(isValid).toBe(false);\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPairInAnyLanguage', () => {\n  it('should return false, given an invalid category and subcategory', async () => {\n    // @ts-expect-error\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage('__INVALID_CATEGORY__', '__INVALID_SUBCATEGORY__');\n\n    expect(isValid).toBe(false);\n  });\n});\n"
    },
    "src/lib/__tests__/prebuild.i18n.test.ts": {
      "tests": [
        {
          "id": "399",
          "name": "getPathnameMaybeI18nFlag should return null or a flag, given a pathname without i18n flag and a pathname with an i18n flag"
        },
        {
          "id": "400",
          "name": "getPathnameWithoutI18nFlag should return the same path or the path without its i18n flag, given a pathname without i18n flag and a pathname with an i18n flag"
        }
      ],
      "source": "import { DEFAULT_LANGUAGE, LANGUAGES } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getPathnameWithoutI18nFlag, getPathnameMaybeI18nFlag } from '../i18n';\n\nconst PREFIX = 'a';\nlet prefixAcc = PREFIX;\nwhile (LANGUAGES.includes((prefixAcc + DEFAULT_LANGUAGE) as any)) prefixAcc += PREFIX;\nconst invalidLanguage = prefixAcc + DEFAULT_LANGUAGE;\n\ndescribe('getPathnameMaybeI18nFlag', () => {\n  it('should return null or a flag, given a pathname without i18n flag and a pathname with an i18n flag', () => {\n    expect(getPathnameMaybeI18nFlag(`/${invalidLanguage}`)).toBe(null);\n    expect(getPathnameMaybeI18nFlag(`/${DEFAULT_LANGUAGE}/foo`)).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('getPathnameWithoutI18nFlag', () => {\n  it('should return the same path or the path without its i18n flag, given a pathname without i18n flag and a pathname with an i18n flag', () => {\n    expect(getPathnameWithoutI18nFlag(`/${invalidLanguage}`)).toBe(`/${invalidLanguage}`);\n    expect(getPathnameWithoutI18nFlag(`/${DEFAULT_LANGUAGE}/foo`)).toBe('/foo');\n    expect(getPathnameWithoutI18nFlag(`${ROUTES_ROOTS.WEBSITE}${DEFAULT_LANGUAGE}`)).toBe(ROUTES_ROOTS.WEBSITE);\n  });\n});\n"
    },
    "src/lib/misc/__tests__/prebuild.isProtectedRoute.test.ts": {
      "tests": [
        {
          "id": "401",
          "name": "isProtectedRoute should return true, given simple valid input"
        },
        {
          "id": "402",
          "name": "isProtectedRoute should return true, given valid prefixed input"
        },
        {
          "id": "403",
          "name": "isProtectedRoute should return false, given simple invalid input"
        }
      ],
      "source": "import { APP_PROTECTED_PATHS } from '##/config/auth';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport isProtectedRoute from '../isProtectedRoute';\n\nvi.mock('##/config/auth', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/auth')>();\n\n  return {\n    ...mod,\n    APP_PROTECTED_PATHS: ['/protected']\n  };\n});\n\ndescribe('isProtectedRoute', () => {\n  // eslint-disable-next-line no-magic-numbers\n  const protectedPrefix = APP_PROTECTED_PATHS[0];\n  it('should return true, given simple valid input', () => expect(isProtectedRoute(protectedPrefix)).toBe(true));\n\n  it('should return true, given valid prefixed input', () => expect(isProtectedRoute(protectedPrefix + '/' + 'foo')).toBe(true));\n\n  it('should return false, given simple invalid input', () => {\n    const INVALID_INPUT_PREFIX = '$';\n    // eslint-disable-next-line no-magic-numbers\n    let invalidInput = APP_PROTECTED_PATHS[0];\n    while (APP_PROTECTED_PATHS.includes(invalidInput)) invalidInput = INVALID_INPUT_PREFIX + invalidInput;\n\n    expect(isProtectedRoute(invalidInput)).toBe(false);\n  });\n});\n\nvi.doUnmock('##/config/auth');\n"
    },
    "src/components/hooks/__tests__/prebuild.usePagination.test.ts": {
      "tests": [
        {
          "id": "404",
          "name": "usePagination should return 2, given a list of 10 elements and expecting 5 items per page"
        },
        {
          "id": "405",
          "name": "usePagination should recompute pages amount, given the items list's length changes"
        }
      ],
      "source": "import { renderHook } from '@testing-library/react';\nimport { describe, expect, it } from 'vitest';\n\nimport usePagination from '../usePagination';\n\ndescribe('usePagination', () => {\n  it('should return 2, given a list of 10 elements and expecting 5 items per page', () => {\n    // eslint-disable-next-line no-magic-numbers\n    const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const itemsPerPage = 5;\n    const expected = 2;\n\n    const { result } = renderHook(() => usePagination(items, itemsPerPage));\n    expect(result.current).toBe(expected);\n  });\n\n  it(\"should recompute pages amount, given the items list's length changes\", () => {\n    // eslint-disable-next-line no-magic-numbers\n    let items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const itemsPerPage = 5;\n    const expectedOnFirstRender = 2;\n    const expectedOnSecondRender = 3;\n    const { rerender, result } = renderHook(() => usePagination(items, itemsPerPage));\n\n    expect(result.current).toBe(expectedOnFirstRender);\n\n    // eslint-disable-next-line no-magic-numbers\n    items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    rerender();\n\n    expect(result.current).toBe(expectedOnSecondRender);\n  });\n});\n"
    },
    "interop/lib/misc/__tests__/prebuild.addClassname.test.ts": {
      "tests": [
        {
          "id": "406",
          "name": "addClassname should pass, given array input and expecting array output"
        },
        {
          "id": "407",
          "name": "addClassname should pass, given string input and expecting array output"
        },
        {
          "id": "408",
          "name": "addClassname should pass, given null input and expecting string output"
        }
      ],
      "source": "import type { Element as hASTElement } from 'hast';\n\nimport { describe, expect, it } from 'vitest';\n\nimport addClassname from '../addClassname';\n\ndescribe('addClassname', () => {\n  it('should pass, given array input and expecting array output', () => {\n    const node: hASTElement = {\n      properties: {\n        className: ['foo']\n      },\n      type: 'element',\n      tagName: 'div',\n      children: []\n    };\n    addClassname(node, 'bar');\n    expect(node.properties.className).toStrictEqual(['foo', 'bar']);\n  });\n\n  it('should pass, given string input and expecting array output', () => {\n    const node: hASTElement = {\n      properties: {\n        className: 'foo'\n      },\n      type: 'element',\n      tagName: 'div',\n      children: []\n    };\n    addClassname(node, 'bar');\n    expect(node.properties.className).toStrictEqual(['foo', 'bar']);\n  });\n\n  it('should pass, given null input and expecting string output', () => {\n    const node: hASTElement = {\n      properties: {\n        className: null\n      },\n      type: 'element',\n      tagName: 'div',\n      children: []\n    };\n    addClassname(node, 'foo');\n    expect(node.properties.className).toBe('foo');\n  });\n});\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogCategoryGuard.test.ts": {
      "tests": [
        {
          "id": "409",
          "name": "blogCategoryGuard should not throw not found error, given valid category"
        },
        {
          "id": "410",
          "name": "blogCategoryGuard should throw not found error, given invalid category"
        }
      ],
      "source": "import { isNotFoundError } from 'next/dist/client/components/not-found';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\nimport BlogConfig from '@/config/Blog/server';\n\nimport blogCategoryGuard from '../blogCategoryGuard';\n\ndescribe('blogCategoryGuard', () => {\n  it('should not throw not found error, given valid category', () => {\n    expect(() =>\n      blogCategoryGuard({\n        params: {\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      })\n    ).not.toThrow();\n  });\n\n  it('should throw not found error, given invalid category', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      blogCategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: '__INVALID_CATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      });\n    } catch (interceptedError) {\n      expect(isNotFoundError(interceptedError)).toBe(true);\n    }\n  });\n});\n"
    },
    "src/components/pages/blog/helpers/functions/__tests__/prebuild.filters.test.ts": {
      "tests": [
        {
          "id": "411",
          "name": "getUnpackedAndSanitizedFilters should return sanitized and sorted filter ids, given valid but ugly input"
        },
        {
          "id": "412",
          "name": "getUnpackedAndSanitizedFilters should return an empty array, given an empty URLSearchParams"
        }
      ],
      "source": "import { packIds } from '@rtm/shared-lib/misc';\nimport { describe, expect, it } from 'vitest';\n\nimport { getUnpackedAndSanitizedFilters } from '../filters';\n\ndescribe('getUnpackedAndSanitizedFilters', () => {\n  const __FILTERS_KEY = 'filters';\n  // eslint-disable-next-line no-magic-numbers\n  const expectedIds = new Set([0, 1]);\n\n  it('should return sanitized and sorted filter ids, given valid but ugly input', () => {\n    const params = new URLSearchParams();\n    // eslint-disable-next-line no-magic-numbers\n    const filters = packIds([2, 0, 1]);\n\n    params.append(__FILTERS_KEY, filters);\n\n    const unpackedAndSanitizedFilters = getUnpackedAndSanitizedFilters(params, expectedIds, __FILTERS_KEY);\n    // eslint-disable-next-line no-magic-numbers\n    expect(unpackedAndSanitizedFilters).toStrictEqual([0, 1]);\n  });\n\n  it('should return an empty array, given an empty URLSearchParams', () => {\n    const params = new URLSearchParams();\n\n    const unpackedAndSanitizedFilters = getUnpackedAndSanitizedFilters(params, expectedIds, __FILTERS_KEY);\n    expect(unpackedAndSanitizedFilters).toStrictEqual([]);\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.blogArchitectureMetadatas.test.ts": {
      "tests": [
        {
          "id": "413",
          "name": "getBlogArchitectureMetadatas should throw ENOENT, given invalid path"
        },
        {
          "id": "414",
          "name": "getBlogArchitectureMetadatas should return an exhaustive metadatas object, given a valid blog posts folder path"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport getBlogArchitectureMetadatas from '../blogArchitectureMetadatas';\n\nconst VALID_BLOG_POSTS_FOLDER_PATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_blog_posts_folder';\n\ndescribe('getBlogArchitectureMetadatas', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await getBlogArchitectureMetadatas(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should return an exhaustive metadatas object, given a valid blog posts folder path', async () => {\n    expect(await getBlogArchitectureMetadatas(VALID_BLOG_POSTS_FOLDER_PATH)).toMatchSnapshot();\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts": {
      "tests": [
        {
          "id": "415",
          "name": "endsWithChar should return true, given strings ending with endChars"
        },
        {
          "id": "416",
          "name": "endsWithChar should return false, given strings not ending with endChars"
        },
        {
          "id": "417",
          "name": "endsWithChar should return false, given endChars is empty"
        }
      ],
      "source": "import type { EmptyString } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport { describe, expect, it } from 'vitest';\n\nimport endsWithChars from '../endsWithChar';\n\ndescribe('endsWithChar', () => {\n  it('should return true, given strings ending with endChars', () => {\n    const endChars = 'abc';\n    expect(endsWithChars('foo bar abc', endChars)).toBe(true);\n    expect(endsWithChars('foo bar acb', endChars)).toBe(true);\n    expect(endsWithChars('foo bar cba', endChars)).toBe(true);\n  });\n\n  it('should return false, given strings not ending with endChars', () => {\n    const endChars = '$';\n    expect(endsWithChars('foo bar abc', endChars)).toBe(false);\n    expect(endsWithChars('foo bar acb', endChars)).toBe(false);\n    expect(endsWithChars('foo bar cba', endChars)).toBe(false);\n  });\n\n  it('should return false, given endChars is empty', () => {\n    const endChars: EmptyString = '';\n    expect(endsWithChars('foo bar abc', endChars)).toBe(false);\n    expect(endsWithChars('foo bar acb', endChars)).toBe(false);\n    expect(endsWithChars('foo bar cba', endChars)).toBe(false);\n  });\n});\n"
    },
    "interop/lib/builders/__tests__/prebuild.getFlattenedPathWithoutRootFolder.test.ts": {
      "tests": [
        {
          "id": "418",
          "name": "getFlattenedPathWithoutRootFolder should return the correct outputs, given valid inputs"
        },
        {
          "id": "419",
          "name": "getFlattenedPathWithoutRootFolder should throw, given invalid inputs"
        }
      ],
      "source": "import InvalidArgumentsError from '##/errors/InvalidArguments';\nimport { describe, expect, it } from 'vitest';\n\nimport getFlattenedPathWithoutRootFolder from '../getFlattenedPathWithoutRootFolder';\n\ndescribe('getFlattenedPathWithoutRootFolder', () => {\n  const POSTS_FOLDER = 'posts' as const;\n\n  it('should return the correct outputs, given valid inputs', () => {\n    expect(getFlattenedPathWithoutRootFolder('whatever/lang/category/subcategory/slug')).toBe('lang/category/subcategory/slug');\n\n    expect(getFlattenedPathWithoutRootFolder('posts/lang/category/subcategory/slug', POSTS_FOLDER)).toBe('lang/category/subcategory/slug');\n  });\n\n  it('should throw, given invalid inputs', () => {\n    expect(() => getFlattenedPathWithoutRootFolder('posts/lang/category/subcategory/slug', 'invalidNeedle')).toThrowError(InvalidArgumentsError);\n\n    expect(() => getFlattenedPathWithoutRootFolder(POSTS_FOLDER)).toThrowError(InvalidArgumentsError);\n\n    expect(() => getFlattenedPathWithoutRootFolder(POSTS_FOLDER + '/')).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/defaultLanguageToken/__tests__/prebuild.defaultLanguageTokenType.test.ts": {
      "tests": [
        {
          "id": "420",
          "name": "generateDefaultLanguageTokenType should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport generateDefaultLanguageTokenType from '../defaultLanguageTokenType';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/defaultLanguageToken/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'DEFAULT_LANGUAGE_TOKEN_TYPE';\nconst __TOKEN = 'FAKE_TOKEN';\n\ndescribe('generateDefaultLanguageTokenType', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_DEFAULT_LANGUAGE_TOKEN_TYPE';\n    await generateDefaultLanguageTokenType(__TOKEN, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.landingPagesMetadatas.test.ts": {
      "tests": [
        {
          "id": "421",
          "name": "getLpMetadatas should throw ENOENT, given invalid path"
        },
        {
          "id": "422",
          "name": "getLpMetadatas should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport getLpMetadatas from '../landingPagesMetadatas';\n\nconst VALID_LP_FOLDER_PATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_lp_folder';\n\ndescribe('getLpMetadatas', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect.assertions(1);\n\n    try {\n      await getLpMetadatas(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should match snapshot', async () => {\n    expect(await getLpMetadatas(VALID_LP_FOLDER_PATH)).toMatchSnapshot();\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.arborescence.test.ts": {
      "tests": [
        {
          "id": "423",
          "name": "buildArborescence should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport traverseAndMapFilepaths from '../../lib/traverseAndMapFilepaths';\nimport buildArborescence from '../arborescence';\n\nconst VALID_ARBORESCENCE_FOLDER_PATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_arborescence';\n\ndescribe('buildArborescence', () => {\n  it('should match snapshot', async () => {\n    const arborescenceMap = await traverseAndMapFilepaths(VALID_ARBORESCENCE_FOLDER_PATH);\n    const arborescence = buildArborescence(arborescenceMap, VALID_ARBORESCENCE_FOLDER_PATH);\n    expect(arborescence).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const arborescenceMap = await traverseAndMapFilepaths(VALID_ARBORESCENCE_FOLDER_PATH);\n    const arborescence = buildArborescence(arborescenceMap);\n    expect(arborescence).toMatchSnapshot();\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.buildAbsolutePathFromParts.test.ts": {
      "tests": [
        {
          "id": "424",
          "name": "buildAbsolutePathFromParts should return '/foo', given only one arg"
        },
        {
          "id": "425",
          "name": "buildAbsolutePathFromParts should return '/foo/bar/test', given clean and dirty args"
        },
        {
          "id": "426",
          "name": "buildAbsolutePathFromParts should return '/' or '//', given empty args"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport buildAbsolutePathFromParts from '../buildAbsolutePathFromParts';\n\ndescribe('buildAbsolutePathFromParts', () => {\n  it(\"should return '/foo', given only one arg\", () => {\n    expect(buildAbsolutePathFromParts('foo')).toBe('/foo');\n  });\n\n  it(\"should return '/foo/bar/test', given clean and dirty args\", () => {\n    const expected = '/foo/bar/test';\n\n    expect(buildAbsolutePathFromParts('foo', 'bar', 'test')).toBe(expected);\n    expect(buildAbsolutePathFromParts('///foo///', '///bar///', '///test///')).toBe(expected);\n    expect(buildAbsolutePathFromParts('foo///', '///bar', 'test///')).toBe(expected);\n  });\n\n  it(\"should return '/' or '//', given empty args\", () => {\n    expect(buildAbsolutePathFromParts('')).toBe('/');\n    expect(buildAbsolutePathFromParts('', '')).toBe('/');\n    expect(buildAbsolutePathFromParts('', '', '')).toBe('//');\n  });\n});\n"
    },
    "src/components/hooks/__tests__/prebuild.useLockScreenScrollY.test.ts": {
      "tests": [
        {
          "id": "427",
          "name": "useLockScreenScrollY should add and remove classes on mount and unmount"
        }
      ],
      "source": "import { renderHook } from '@testing-library/react';\nimport { describe, expect, it, vi } from 'vitest';\nimport * as LibHTML from '@/lib/html';\n\nimport useLockScreenScrollY, { EFFECT_CLASSES } from '../useLockScreenScrollY';\n\ndescribe('useLockScreenScrollY', () => {\n  it('should add and remove classes on mount and unmount', () => {\n    const getBodyContainerMock = vi.spyOn(LibHTML, 'getBodyContainer');\n\n    const bodyContainer = document.createElement('div');\n    getBodyContainerMock.mockReturnValue(bodyContainer);\n\n    const { unmount } = renderHook(() => useLockScreenScrollY());\n\n    for (const effectClass of EFFECT_CLASSES) {\n      expect(bodyContainer.classList.contains(effectClass)).toBe(true);\n    }\n\n    unmount();\n\n    for (const effectClass of EFFECT_CLASSES) {\n      expect(bodyContainer.classList.contains(effectClass)).toBe(false);\n    }\n  });\n});\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.not_testing_ctx.test.ts": {
      "tests": [
        {
          "id": "428",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should return null, given testing category in not testing ctx"
        }
      ],
      "source": "import LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, vi, it } from 'vitest';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('../ctx', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../ctx')>();\n\n  return {\n    default: {\n      ...mod.default,\n      TESTING: false\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (unhappy paths)', () => {\n  it('should return null, given testing category in not testing ctx', () => {\n    const lp = getLandingPageByLanguageAndSlugStrict({ slug: `${LandingPagesConfig.TESTING_CATEGORY}-fake-lp-00`, lang: DEFAULT_LANGUAGE });\n    expect(lp).toBe(null);\n  });\n});\n\nvi.doUnmock('../ctx');\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.buildPathFromParts.test.ts": {
      "tests": [
        {
          "id": "429",
          "name": "buildPathFromParts should return the same value as input, given only one argument"
        },
        {
          "id": "430",
          "name": "buildPathFromParts should return a path, given two arguments"
        },
        {
          "id": "431",
          "name": "buildPathFromParts should return a cleaned path, given dirty arguments"
        },
        {
          "id": "432",
          "name": "buildPathFromParts should return '/' or '//', given empty arguments"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport buildPathFromParts from '../buildPathFromParts';\n\ndescribe('buildPathFromParts', () => {\n  it('should return the same value as input, given only one argument', () => {\n    expect(buildPathFromParts('foo')).toBe('foo');\n    expect(buildPathFromParts('')).toBe('');\n  });\n\n  it('should return a path, given two arguments', () => {\n    expect(buildPathFromParts('foo', 'bar')).toBe('foo/bar');\n  });\n\n  it('should return a cleaned path, given dirty arguments', () => {\n    expect(buildPathFromParts('foo///', 'bar///')).toBe('foo/bar');\n    expect(buildPathFromParts('///foo///', '///bar///')).toBe('foo/bar');\n  });\n\n  it(\"should return '/' or '//', given empty arguments\", () => {\n    expect(buildPathFromParts('', '')).toBe('/');\n    expect(buildPathFromParts('', '', '')).toBe('//');\n  });\n});\n"
    },
    "src/lib/misc/__tests__/prebuild.getPathParts.test.ts": {
      "tests": [
        {
          "id": "433",
          "name": "getPathParts should return path parts, given path without i18n flag"
        },
        {
          "id": "434",
          "name": "getPathParts should return path parts, given path without i18n flag, not starting with '/'"
        },
        {
          "id": "435",
          "name": "getPathParts should return path parts, given path with an i18n flag"
        }
      ],
      "source": "import { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\n\nimport getPathParts from '../getPathParts';\n\ndescribe('getPathParts', () => {\n  it('should return path parts, given path without i18n flag', () => {\n    const pathParts = getPathParts('/_absolutely_not_lang/foo/bar');\n    expect(pathParts).toStrictEqual(['_absolutely_not_lang', 'foo', 'bar']);\n  });\n\n  it(\"should return path parts, given path without i18n flag, not starting with '/'\", () => {\n    const pathParts = getPathParts('_absolutely_not_lang/foo/bar');\n    expect(pathParts).toStrictEqual(['_absolutely_not_lang', 'foo', 'bar']);\n  });\n\n  it('should return path parts, given path with an i18n flag', () => {\n    const pathParts = getPathParts(`/${DEFAULT_LANGUAGE}/foo/bar`);\n    expect(pathParts).toStrictEqual(['foo', 'bar']);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/html/__tests__/prebuild.snapToTopLeft.test.ts": {
      "tests": [
        {
          "id": "436",
          "name": "snapToTopLeft should call window.scrollTo with { behavior: 'instant', left: 0, top: 0 }"
        },
        {
          "id": "437",
          "name": "snapToTopLeft should scroll to the top of the item, given an HTMLElement item"
        }
      ],
      "source": "import { afterAll, describe, expect, it, vi } from 'vitest';\n\nimport snapToTopLeft from '../snapToTopLeft';\n\nvi.spyOn(global, 'scrollTo');\n\ndescribe('snapToTopLeft', () => {\n  afterAll(() => {\n    vi.restoreAllMocks();\n  });\n\n  it(\"should call window.scrollTo with { behavior: 'instant', left: 0, top: 0 }\", () => {\n    snapToTopLeft();\n    // eslint-disable-next-line no-magic-numbers\n    expect(global.scrollTo).toHaveBeenCalledWith({ behavior: 'instant', left: 0, top: 0 });\n  });\n\n  it('should scroll to the top of the item, given an HTMLElement item', () => {\n    const fakeDiv = document.createElement('div');\n    const spy = vi.spyOn(fakeDiv, 'scrollTo');\n\n    snapToTopLeft(fakeDiv);\n    // eslint-disable-next-line no-magic-numbers\n    expect(spy).toHaveBeenCalledWith({ behavior: 'instant', left: 0, top: 0 });\n  });\n});\n"
    },
    "src/lib/pages/__tests__/postbuild.api.not_testing_ctx.test.ts": {
      "tests": [
        {
          "id": "438",
          "name": "getPageByLanguageAndPathStrict (unhappy paths) should return null, given testing path in not testing ctx"
        }
      ],
      "source": "import { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, vi, it } from 'vitest';\nimport PagesConfig from '@/config/pages';\n\nimport { getPageByLanguageAndPathStrict } from '../api';\n\nvi.mock('../ctx', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../ctx')>();\n\n  return {\n    default: {\n      ...mod.default,\n      TESTING: false\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('getPageByLanguageAndPathStrict (unhappy paths)', () => {\n  it('should return null, given testing path in not testing ctx', () => {\n    const page = getPageByLanguageAndPathStrict({ path: `${PagesConfig.TESTING_ROOT}/fake-page-00`, lang: DEFAULT_LANGUAGE });\n    expect(page).toBe(null);\n  });\n});\n\nvi.doUnmock('../ctx');\n"
    },
    "src/lib/portable/str/__tests__/prebuild.countCharacter.test.ts": {
      "tests": [
        {
          "id": "439",
          "name": "countCharacter should return a positive value, given strings containing the searched char"
        },
        {
          "id": "440",
          "name": "countCharacter should throw, given char is not a char but a string"
        }
      ],
      "source": "import InvalidArgumentsError from '##/errors/InvalidArguments';\nimport { describe, expect, it } from 'vitest';\n\nimport countCharacter from '../countCharacter';\n\ndescribe('countCharacter', () => {\n  it('should return a positive value, given strings containing the searched char', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect(countCharacter('aa    bbqsklqjdkqjdkqjd   aa   qlj,dqkdjqkdjkbb', 'a')).toBe(4);\n    // eslint-disable-next-line no-magic-numbers\n    expect(countCharacter('aa    bbqsklqjdkqjdkqjd   aa   qlj,dqkdjqkdjkbb', '$')).toBe(0);\n  });\n\n  it('should throw, given char is not a char but a string', () => {\n    expect(() => {\n      countCharacter('aa    bbqsklqjdkqjdkqjd   aa   qlj,dqkdjqkdjkbb', 'asqdqd');\n    }).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.buildPageTitle.test.ts": {
      "tests": [
        {
          "id": "441",
          "name": "buildPageTitle should return '{productTitle} | {pageTitle}'"
        },
        {
          "id": "442",
          "name": "buildPageTitle should return 'foo | {productTitle}'"
        },
        {
          "id": "443",
          "name": "buildPageTitle should return '{productTitle} | '"
        },
        {
          "id": "444",
          "name": "buildPageTitle should return ' | {productTitle}'"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport buildPageTitle from '../buildPageTitle';\n\nconst pageTitle = 'FOO';\nconst productTitle = 'PRODUCT';\nconst sep = ' | ';\n\ndescribe('buildPageTitle', () => {\n  it(\"should return '{productTitle} | {pageTitle}'\", () => {\n    expect(buildPageTitle(productTitle, pageTitle, true)).toBe(`${productTitle}${sep}${pageTitle}`);\n  });\n\n  it(\"should return 'foo | {productTitle}'\", () => {\n    expect(buildPageTitle(productTitle, 'foo')).toBe(`foo${sep}${productTitle}`);\n  });\n\n  it(\"should return '{productTitle} | '\", () => {\n    expect(buildPageTitle(productTitle, '', true)).toBe(`${productTitle}${sep}`);\n  });\n\n  it(\"should return ' | {productTitle}'\", () => {\n    expect(buildPageTitle(productTitle, '')).toBe(`${sep}${productTitle}`);\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.surroundString.test.ts": {
      "tests": [
        {
          "id": "445",
          "name": "surroundString should return envelope + foo + envelope"
        },
        {
          "id": "446",
          "name": "surroundString should return 'barbar', given '' as input and 'bar' as envelope"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport surroundString from '../surroundString';\n\ndescribe('surroundString', () => {\n  it('should return envelope + foo + envelope', () => {\n    const foo = 'foo';\n    const envelope = 'bar';\n    const expected = envelope + foo + envelope;\n\n    expect(surroundString(foo, envelope)).toBe(expected);\n    expect(surroundString(envelope + foo, envelope)).toBe(expected);\n    expect(surroundString(foo + envelope, envelope)).toBe(expected);\n    expect(surroundString(expected, envelope)).toBe(expected);\n  });\n\n  it(\"should return 'barbar', given '' as input and 'bar' as envelope\", () => {\n    const envelope = 'bar';\n    // eslint-disable-next-line no-magic-numbers\n    expect(surroundString('', envelope)).toBe(envelope.repeat(2));\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/index/__tests__/postbuild.indexFile.test.ts": {
      "tests": [
        {
          "id": "447",
          "name": "generateIndexFile should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterAll, describe, expect, it } from 'vitest';\n\nimport generateIndexFile from '../indexFile';\n\n// https://github.com/vitest-dev/vitest/discussions/2484\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/index/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'INDEX_FILE';\n\ndescribe('generateIndexFile', () => {\n  afterAll(async () => {\n    await fs.rm(__TARGET_FOLDER, { recursive: true });\n  });\n\n  it('should match snapshot', async () => {\n    await generateIndexFile(__TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/index.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.deleteTrailingSlashes.test.ts": {
      "tests": [
        {
          "id": "448",
          "name": "deleteTrailingSlashes should return '', given an empty string"
        },
        {
          "id": "449",
          "name": "deleteTrailingSlashes should return '$'"
        },
        {
          "id": "450",
          "name": "deleteTrailingSlashes should return 'foo'"
        },
        {
          "id": "451",
          "name": "deleteTrailingSlashes should return '', given string which only includes slashes"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport deleteTrailingSlashes from '../deleteTrailingSlashes';\n\ndescribe('deleteTrailingSlashes', () => {\n  it(\"should return '', given an empty string\", () => {\n    expect(deleteTrailingSlashes('')).toBe('');\n  });\n\n  it(\"should return '$'\", () => {\n    const expected = '$';\n    expect(deleteTrailingSlashes(expected + '/////////////')).toBe(expected);\n  });\n\n  it(\"should return 'foo'\", () => {\n    const expected = 'foo';\n    expect(deleteTrailingSlashes(expected + '/')).toBe(expected);\n    expect(deleteTrailingSlashes(expected + '//////')).toBe(expected);\n  });\n\n  it(\"should return '', given string which only includes slashes\", () => {\n    expect(deleteTrailingSlashes('/////////////')).toBe('');\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.deleteLeadingSlashes.test.ts": {
      "tests": [
        {
          "id": "452",
          "name": "deleteLeadingSlashes should return '', given an empty string"
        },
        {
          "id": "453",
          "name": "deleteLeadingSlashes should return '$'"
        },
        {
          "id": "454",
          "name": "deleteLeadingSlashes should return 'foo'"
        },
        {
          "id": "455",
          "name": "deleteLeadingSlashes should return '', given a string which includes only slashes"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport deleteLeadingSlashes from '../deleteLeadingSlashes';\n\ndescribe('deleteLeadingSlashes', () => {\n  it(\"should return '', given an empty string\", () => {\n    expect(deleteLeadingSlashes('')).toBe('');\n  });\n\n  it(\"should return '$'\", () => {\n    const expected = '$';\n    expect(deleteLeadingSlashes('/////////////' + expected)).toBe(expected);\n  });\n\n  it(\"should return 'foo'\", () => {\n    const expected = 'foo';\n    expect(deleteLeadingSlashes('/' + expected)).toBe(expected);\n    expect(deleteLeadingSlashes('//////' + expected)).toBe(expected);\n  });\n\n  it(\"should return '', given a string which includes only slashes\", () => {\n    expect(deleteLeadingSlashes('/////////////')).toBe('');\n  });\n});\n"
    },
    "src/lib/portable/tailwind/__tests__/prebuild.getBreakpoint.test.ts": {
      "tests": [
        {
          "id": "456",
          "name": "getBreakpoint should return the correct breakpoint value"
        },
        {
          "id": "457",
          "name": "getBreakpoint should return NaN for an invalid breakpoint"
        }
      ],
      "source": "import { describe, expect, it, vi } from 'vitest';\n\nimport { getBreakpoint } from '../../../tailwind';\n\nvi.mock('tailwind.config', () => {\n  return {\n    default: {\n      theme: {\n        screens: {\n          sm: '279px',\n          md: '729px'\n        }\n      }\n    }\n  };\n});\n\ndescribe('getBreakpoint', () => {\n  it('should return the correct breakpoint value', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect(getBreakpoint('sm')).toBe(279);\n    // eslint-disable-next-line no-magic-numbers\n    expect(getBreakpoint('md')).toBe(729);\n  });\n\n  it('should return NaN for an invalid breakpoint', () => {\n    // @ts-expect-error\n    expect(getBreakpoint('foo')).toBeNaN();\n  });\n});\n\nvi.doUnmock('tailwind.config');\n"
    },
    "src/lib/portable/i18n/__tests__/prebuild.isValidLanguageFlag.test.ts": {
      "tests": [
        {
          "id": "458",
          "name": "isValidLanguageFlag should return true for valid language flag"
        },
        {
          "id": "459",
          "name": "isValidLanguageFlag should return false for an invalid language flag"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport isValidLanguageFlag from '../isValidLanguageFlag';\n\n// eslint-disable-next-line no-magic-numbers\nconst FIRST_LANG = LANGUAGES[0];\n\nconst PREFIX = '$';\nlet prefixAcc = PREFIX;\nwhile (LANGUAGES.includes((prefixAcc + FIRST_LANG) as any)) prefixAcc += PREFIX;\nconst invalidLanguage = prefixAcc + FIRST_LANG;\n\ndescribe('isValidLanguageFlag', () => {\n  it('should return true for valid language flag', () => expect(isValidLanguageFlag(FIRST_LANG)).toBe(true));\n\n  it('should return false for an invalid language flag', () => {\n    expect(isValidLanguageFlag(invalidLanguage)).toBe(false);\n  });\n});\n"
    },
    "src/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts": {
      "tests": [
        {
          "id": "460",
          "name": "getEnumKeys should return an array of enum keys, given a fake enum"
        },
        {
          "id": "461",
          "name": "getEnumKeys should return an empty array, given an empty fake enum"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport { getEnumKeys } from '../../../typescript';\n\ndescribe('getEnumKeys', () => {\n  it('should return an array of enum keys, given a fake enum', () => {\n    enum Fake_E {\n      foo,\n      bar\n    }\n\n    const result = getEnumKeys(Fake_E);\n    const expected: typeof result = ['foo', 'bar'];\n    expect(result).toStrictEqual(expected);\n  });\n\n  it('should return an empty array, given an empty fake enum', () => {\n    enum Empty_E {}\n    const result: never[] = getEnumKeys(Empty_E);\n    expect(result).toStrictEqual([]);\n  });\n});\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowTagsCommandWidget.test.ts": {
      "tests": [
        {
          "id": "462",
          "name": "shouldShowTagsCommandWidget should return true or false depending on pagesAmount"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport shouldShowTagsCommandWidget from '../shouldShowTagsCommandWidget';\n\ndescribe('shouldShowTagsCommandWidget', () => {\n  it('should return true or false depending on pagesAmount', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowTagsCommandWidget(0)).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowTagsCommandWidget(1)).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowTagsCommandWidget(2)).toBe(true);\n  });\n});\n"
    },
    "src/components/hooks/helpers/functions/__tests__/prebuild.usePagination.test.ts": {
      "tests": [
        {
          "id": "463",
          "name": "computePagesAmount should return 2"
        },
        {
          "id": "464",
          "name": "computePagesAmount should return 4 (ceiled)"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport { computePagesAmount } from '../usePagination';\n\ndescribe('computePagesAmount', () => {\n  it('should return 2', () => {\n    const expected = 2;\n    // eslint-disable-next-line no-magic-numbers\n    const pagesAmount = computePagesAmount(10, 5);\n    expect(pagesAmount).toBe(expected);\n  });\n\n  it('should return 4 (ceiled)', () => {\n    const expected = 4;\n    // eslint-disable-next-line no-magic-numbers\n    const pagesAmount = computePagesAmount(10, 3);\n    expect(pagesAmount).toBe(expected);\n  });\n});\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts/helpers/functions/__tests__/prebuild.shouldShowPaginationWidget.test.ts": {
      "tests": [
        {
          "id": "465",
          "name": "shouldShowPaginationWidget should return true or false depending on pagesAmount"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport shouldShowPaginationWidget from '../shouldShowPaginationWidget';\n\ndescribe('shouldShowPaginationWidget', () => {\n  it('should return true or false depending on pagesAmount', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowPaginationWidget(0)).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowPaginationWidget(1)).toBe(false);\n    // eslint-disable-next-line no-magic-numbers\n    expect(shouldShowPaginationWidget(2)).toBe(true);\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.getFormattedDate.test.ts": {
      "tests": [
        {
          "id": "466",
          "name": "getFormattedDate should return the correct formatted date (basic test, since it relays on native functions)"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getFormattedDate from '../getFormattedDate';\n\ndescribe('getFormattedDate', () => {\n  it('should return the correct formatted date (basic test, since it relays on native functions)', () => {\n    const language = 'fr';\n    // eslint-disable-next-line no-magic-numbers\n    const date = new Date(1998, 1, 1, 7, 29, 0, 0);\n\n    expect(getFormattedDate(language, date, false)).toBe('Dimanche 1 février 1998');\n    expect(getFormattedDate(language, date, true)).toBe('1 févr. 1998, 07:29');\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts": {
      "tests": [
        {
          "id": "467",
          "name": "getSlashEnvelope should return /foo/"
        },
        {
          "id": "468",
          "name": "getSlashEnvelope should return '//', given empty string"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getSlashEnvelope from '../getSlashEnvelope';\n\ndescribe('getSlashEnvelope', () => {\n  it('should return /foo/', () => {\n    const expected = '/foo/';\n    expect(getSlashEnvelope('foo')).toBe(expected);\n    expect(getSlashEnvelope('/foo')).toBe(expected);\n    expect(getSlashEnvelope('foo/')).toBe(expected);\n    expect(getSlashEnvelope('/foo/')).toBe(expected);\n  });\n\n  it(\"should return '//', given empty string\", () => {\n    expect(getSlashEnvelope('')).toBe('//');\n  });\n});\n"
    },
    "src/cache/__tests__/postbuild.blog.test.ts": {
      "tests": [
        {
          "id": "469",
          "name": "getBlogSubcategoriesByCategory (unhappy paths) should return an empty array, given an invalid category"
        }
      ],
      "source": "import { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\n\nimport { getBlogSubcategoriesByCategory } from '../blog';\n\ndescribe('getBlogSubcategoriesByCategory (unhappy paths)', () => {\n  it('should return an empty array, given an invalid category', async () => {\n    // @ts-expect-error\n    const emptyList = await getBlogSubcategoriesByCategory('__INVALID_CATEGORY__', DEFAULT_LANGUAGE);\n    expect(emptyList).toStrictEqual([]);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/react/__tests__/prebuild.getLinkTarget.test.ts": {
      "tests": [
        {
          "id": "470",
          "name": "getLinkTarget should return target blank, given external link"
        },
        {
          "id": "471",
          "name": "getLinkTarget should return target undefined, given internal link"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getLinkTarget from '../getLinkTarget';\n\ndescribe('getLinkTarget', () => {\n  it('should return target blank, given external link', () => {\n    const target = getLinkTarget('https://example.com');\n    expect(target).toBe('_blank');\n  });\n\n  it('should return target undefined, given internal link', () => {\n    const target = getLinkTarget('foo/bar');\n    expect(target).toBe(undefined);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.getPathWithoutExtension.test.ts": {
      "tests": [
        {
          "id": "472",
          "name": "getPathWithoutExtension should return the correct paths"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getPathWithoutExtension from '../getPathWithoutExtension';\n\ndescribe('getPathWithoutExtension', () => {\n  const expected = 'path/to/something';\n\n  it('should return the correct paths', () => {\n    expect(getPathWithoutExtension('')).toBe('');\n    expect(getPathWithoutExtension(expected)).toBe(expected);\n    expect(getPathWithoutExtension(`${expected}.any_extension`)).toBe(expected);\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.capitalize.test.ts": {
      "tests": [
        {
          "id": "473",
          "name": "capitalize should return capitalized string, given any string"
        },
        {
          "id": "474",
          "name": "capitalize should return '', given an empty string"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport capitalize from '../capitalize';\n\ndescribe('capitalize', () => {\n  it('should return capitalized string, given any string', () => {\n    expect(capitalize('abc')).toBe('Abc');\n    expect(capitalize('ABC')).toBe('ABC');\n    expect(capitalize(' aBC')).toBe(' aBC');\n  });\n\n  it(\"should return '', given an empty string\", () => {\n    expect(capitalize('')).toBe('');\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/misc/__tests__/prebuild.isEmptyObject.test.ts": {
      "tests": [
        {
          "id": "475",
          "name": "isEmptyObject should return true, given an empty object"
        },
        {
          "id": "476",
          "name": "isEmptyObject should return false, given a not empty object"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport isEmptyObject from '../isEmptyObject';\n\ndescribe('isEmptyObject', () => {\n  it('should return true, given an empty object', () => expect(isEmptyObject({})).toBe(true));\n\n  it('should return false, given a not empty object', () => expect(isEmptyObject({ foo: 'bar' })).toBe(false));\n});\n"
    },
    "packages/shared-lib/src/portable/react/__tests__/prebuild.getRefCurrentPtr.test.ts": {
      "tests": [
        {
          "id": "477",
          "name": "getRefCurrentPtr should return current value, given a valid RefObject"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getRefCurrentPtr from '../getRefCurrentPtr';\n\ndescribe('getRefCurrentPtr', () => {\n  it('should return current value, given a valid RefObject', () => {\n    const ptr = getRefCurrentPtr({\n      current: 'foo'\n    });\n    expect(ptr).toBe('foo');\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/misc/__tests__/prebuild.sortNumbers.test.ts": {
      "tests": [
        {
          "id": "478",
          "name": "sortNumbers should sort correctly, given numbers list"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport sortNumbers from '../sortNumbers';\n\ndescribe('sortNumbers', () => {\n  it('should sort correctly, given numbers list', () => {\n    // eslint-disable-next-line no-magic-numbers\n    expect(sortNumbers([2, 1, 3])).toStrictEqual([1, 2, 3]);\n  });\n});\n"
    },
    "src/types/postbuild.Page.test.ts": {
      "tests": [
        {
          "id": "479",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    },
    "src/types/adapters/postbuild.LpLanguageAndSlugPair.test.ts": {
      "tests": [
        {
          "id": "480",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    },
    "src/types/adapters/postbuild.PageAdapter.test.ts": {
      "tests": [
        {
          "id": "481",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    },
    "src/types/adapters/postbuild.StrictBlog.test.ts": {
      "tests": [
        {
          "id": "482",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    },
    "packages/shared-types/src/__tests__/postbuild.ContentlayerConfig.test.ts": {
      "tests": [
        {
          "id": "483",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    },
    "packages/shared-types/src/__tests__/postbuild.I18n.test.ts": {
      "tests": [
        {
          "id": "484",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    }
  },
  "projectRoot": "/home/stan/Deliv/dashboard_rtm",
  "config": {
    "plugins": ["@stryker-mutator/vitest-runner", "@stryker-mutator/typescript-checker"],
    "typescriptChecker": {
      "prioritizePerformanceOverAccuracy": false
    },
    "vitest": {
      "configFile": "vitest.config.mts",
      "dir": "."
    },
    "ignorePatterns": ["prebuilder-dist"],
    "tsconfigFile": "tsconfig.json",
    "checkers": ["typescript"],
    "testRunner": "vitest",
    "timeoutMS": 300000,
    "incremental": true,
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "coverageAnalysis": "perTest",
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignoreStatic": false,
    "incrementalFile": "reports/stryker-incremental.json",
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutate": [
      "{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)",
      "!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"
    ],
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "reporters": ["clear-text", "progress", "html"],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "jsonReporter": {
      "fileName": "reports/mutation/mutation.json"
    },
    "disableTypeChecks": true,
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "thresholds": {
      "high": 80,
      "low": 60,
      "break": null
    },
    "timeoutFactor": 1.5,
    "dryRunTimeoutMinutes": 5,
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "ignorers": []
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.2.6",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "8.2.6",
      "typescript": "5.4.5"
    }
  }
}
