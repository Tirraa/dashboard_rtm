{
  "files": {
    "src/app/[locale]/(pages)/[...path]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 63,
              "line": 16
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(17,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(17,16): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(18,49): error TS2345: Argument of type 'undefined' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 17
            },
            "start": {
              "column": 28,
              "line": 17
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 17
            },
            "start": {
              "column": 60,
              "line": 17
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "BooleanLiteral",
          "replacement": "page",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(22,11): error TS2339: Property 'metadescription' does not exist on type 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(22,41): error TS2339: Property 'title' does not exist on type 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(22,11): error TS2339: Property 'metadescription' does not exist on type 'MaybeNull<Page>'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(22,41): error TS2339: Property 'title' does not exist on type 'MaybeNull<Page>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(22,11): error TS2339: Property 'metadescription' does not exist on type 'MaybeNull<Page>'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(22,41): error TS2339: Property 'title' does not exist on type 'MaybeNull<Page>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(25,40): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"_infos.lng\" | \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | ... 54 more ... | \"blog-categories.blog-testing-category._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"_infos.lng\" | \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | ... 54 more ... | \"blog-categories.blog-testing-category._meta-description\"'.\n  Overload 2 of 2, '(key: \"_infos.lng\" | \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | ... 54 more ... | \"blog-categories.blog-testing-category._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"_infos.lng\" | \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | ... 54 more ... | \"blog-categories.blog-testing-category._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 25
            },
            "start": {
              "column": 40,
              "line": 25
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 27
            },
            "start": {
              "column": 10,
              "line": 27
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 42
            },
            "start": {
              "column": 46,
              "line": 31
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(39,23): error TS2345: Argument of type '{ path: string[]; locale: string; }' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 32
            },
            "start": {
              "column": 24,
              "line": 32
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(32,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(35,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 40
            },
            "start": {
              "column": 46,
              "line": 34
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(32,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(37,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,46): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,93): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(41,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 35
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 35
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "13",
          "mutatorName": "EqualityOperator",
          "replacement": "path !== INDEX_TOKEN",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 35
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(language)",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(37,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 36
            },
            "start": {
              "column": 9,
              "line": 36
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(32,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(37,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,46): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,93): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(41,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 36
            },
            "start": {
              "column": 9,
              "line": 36
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(37,51): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 36
            },
            "start": {
              "column": 9,
              "line": 36
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "BooleanLiteral",
          "replacement": "page",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(39,46): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,93): error TS18047: 'page' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(32,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,46): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,93): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(41,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(39,46): error TS18047: 'page' is possibly 'null'.\nsrc/app/[locale]/(pages)/[...path]/page.tsx(39,93): error TS18047: 'page' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 108,
              "line": 39
            },
            "start": {
              "column": 23,
              "line": 39
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 39
            },
            "start": {
              "column": 62,
              "line": 39
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 57
            },
            "start": {
              "column": 53,
              "line": 44
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 48
            },
            "start": {
              "column": 47,
              "line": 48
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "BooleanLiteral",
          "replacement": "page",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(54,18): error TS18047: 'page' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 51
            },
            "start": {
              "column": 7,
              "line": 51
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(54,18): error TS18047: 'page' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 51
            },
            "start": {
              "column": 7,
              "line": 51
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/app/[locale]/(pages)/[...path]/page.tsx(54,18): error TS18047: 'page' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 51
            },
            "start": {
              "column": 7,
              "line": 51
            }
          }
        }
      ],
      "source": "import type { PageProps } from '@/types/Page';\n\nimport { isValidLanguageFlag, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { getPageByLanguageAndPathUnstrict } from '@/lib/pages/api';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport MDX from '@/components/layouts/blog/MdxComponent';\nimport PageTaxonomy from '##/config/taxonomies/pages';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { allPages } from 'contentlayer/generated';\nimport { notFound } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\n\n// {ToDo} Move this into its own API + test it\nexport async function generateMetadata({ params }: PageProps) {\n  const [path, language] = [params[PageTaxonomy.PATH].join('/'), params[I18nTaxonomy.LANGUAGE]];\n  const page = getPageByLanguageAndPathUnstrict(language, path);\n  if (!page) notFound();\n\n  const globalT = await getServerSideI18n();\n  const { metadescription: description, title: pageTitle } = page;\n\n  const { vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), pageTitle);\n\n  return { description, title };\n}\n\n// {ToDo} Move this into its own API + test it\nexport async function generateStaticParams() {\n  const staticParams = [];\n\n  for (const { language, path } of allPages) {\n    if (path === INDEX_TOKEN) continue;\n    if (!isValidLanguageFlag(language)) continue;\n    const page = getPageByLanguageAndPathUnstrict(language, path);\n    if (!page) continue;\n    staticParams.push({ [PageTaxonomy.PATH]: page.path.split('/'), [I18nTaxonomy.LANGUAGE]: page.language });\n  }\n  return staticParams;\n}\n\nexport default function Page({ params }: PageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const path = params[PageTaxonomy.PATH].join('/');\n  const page = getPageByLanguageAndPathUnstrict(language, path);\n\n  if (!page) notFound();\n  return (\n    <main className=\"max-w-full\">\n      <MDX code={page.body.code} />\n    </main>\n  );\n}\n"
    },
    "src/app/[locale]/(pages)/blog/[categ]/[subcateg]/[slug]/[...notfound]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "27",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 66,
              "line": 9
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 10
            },
            "start": {
              "column": 20,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { NotFoundCatchallParams } from '@/types/Next';\n\nimport NotFoundCatchall from '@/components/phantoms/NotFoundCatchall';\n\nexport default function Page({ params }: NotFoundCatchallParams) {\n  NotFoundCatchall({ params });\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/blog/[categ]/[subcateg]/[slug]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "29",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 71,
              "line": 18
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 19
            },
            "start": {
              "column": 23,
              "line": 19
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 20
            },
            "start": {
              "column": 56,
              "line": 20
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 46,
              "line": 24
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 59
            },
            "start": {
              "column": 67,
              "line": 29
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 133,
              "line": 33
            },
            "start": {
              "column": 41,
              "line": 33
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "ArithmeticOperator",
          "replacement": "countCharacter(ROUTES_ROOTS.BLOG, '/') - 1 - MIN_DEPTH",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 39
            },
            "start": {
              "column": 17,
              "line": 39
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "ArithmeticOperator",
          "replacement": "countCharacter(ROUTES_ROOTS.BLOG, '/') + 1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 39
            },
            "start": {
              "column": 17,
              "line": 39
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 39
            },
            "start": {
              "column": 51,
              "line": 39
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 50
            },
            "start": {
              "column": 25,
              "line": 45
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 49
            },
            "start": {
              "column": 13,
              "line": 46
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { BlogPostPageProps, TBlogPost } from '@/types/Blog';\n\nimport { getBlogPostMetadatas, getBlogStaticParams, blogPostGuard } from '@/lib/blog/staticGeneration';\nimport BlogPostCrumb from '@/components/ui/breadcrumbs/custom/BlogPostCrumb';\nimport Breadcrumbs from '@/components/ui/breadcrumbs/Breadcrumbs';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport BlogPost from '@/components/pages/blog/BlogPost';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getBlogPostUnstrict } from '@/lib/blog/api';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { countCharacter } from '@/lib/str';\nimport { notFound } from 'next/navigation';\n\nexport async function generateMetadata({ params }: BlogPostPageProps) {\n  await blogPostGuard({ params });\n  const blogPostMetadatas = await getBlogPostMetadatas({ params });\n  return blogPostMetadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getBlogStaticParams();\n  return staticParams;\n}\n\nexport default async function Page({ params }: BlogPostPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const [category, subcategory, slug] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[BlogTaxonomy.SLUG]];\n\n  const post: MaybeNull<TBlogPost> = await getBlogPostUnstrict(category, subcategory, slug, language);\n  if (!post) notFound();\n\n  const MIN_DEPTH = 3;\n  const depth = countCharacter(ROUTES_ROOTS.BLOG, '/') - 1 + MIN_DEPTH;\n\n  return (\n    <>\n      <div className=\"mx-8 flex flex-col items-center lg:mx-auto lg:max-w-[750px]\">\n        <Breadcrumbs\n          customCrumbs={[\n            {\n              jsx: <BlogPostCrumb label={post.title} url={post.url} />,\n              depth\n            }\n          ]}\n          className=\"w-fit self-start py-4\"\n        />\n      </div>\n      <div className=\"mx-4 flex flex-col items-center lg:mx-24\">\n        <BlogPost className=\"mx-4\" params={params} />\n      </div>\n    </>\n  );\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/blog/[categ]/[subcateg]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "43",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 78,
              "line": 11
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 12
            },
            "start": {
              "column": 30,
              "line": 12
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 13
            },
            "start": {
              "column": 70,
              "line": 13
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 46,
              "line": 17
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 68,
              "line": 22
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { BlogSubcategoryPageProps } from '@/types/Blog';\n\nimport { getBlogSubcategoryMetadatas, blogSubcategoryGuard, getBlogStaticParams } from '@/lib/blog/staticGeneration';\nimport SubcategoryRelatedBlogPosts from '@/components/pages/blog/SubcategoryRelatedBlogPosts';\nimport Breadcrumbs from '@/components/ui/breadcrumbs/Breadcrumbs';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\n\nexport async function generateMetadata({ params }: BlogSubcategoryPageProps) {\n  await blogSubcategoryGuard({ params });\n  const blogSubcategoryMetadatas = await getBlogSubcategoryMetadatas({ params });\n  return blogSubcategoryMetadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getBlogStaticParams();\n  return staticParams;\n}\n\nexport default function Page({ params }: BlogSubcategoryPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <div className=\"mx-8 flex flex-col items-center lg:mx-auto lg:max-w-[750px]\">\n      <Breadcrumbs className=\"w-fit self-start py-4\" />\n      <SubcategoryRelatedBlogPosts params={params} />\n    </div>\n  );\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/blog/[categ]/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "48",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 70,
              "line": 8
            }
          }
        },
        {
          "id": "49",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 30,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\n\nimport { MAIN_CLS } from '@/components/config/styles/main';\nimport { cn } from '@/lib/tailwind';\n\nexport default function BlogLayout({ children }: LayoutMinimalProps) {\n  return <main className={cn('w-full flex-1', MAIN_CLS)}>{children}</main>;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/blog/[categ]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "50",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 75,
              "line": 11
            }
          }
        },
        {
          "id": "51",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 12
            },
            "start": {
              "column": 27,
              "line": 12
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 13
            },
            "start": {
              "column": 64,
              "line": 13
            }
          }
        },
        {
          "id": "53",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 46,
              "line": 17
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 65,
              "line": 22
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { BlogCategoryPageProps } from '@/types/Blog';\n\nimport CategoryRelatedSubcategoriesAndBlogPosts from '@/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts';\nimport { getBlogCategoryMetadatas, getBlogStaticParams, blogCategoryGuard } from '@/lib/blog/staticGeneration';\nimport Breadcrumbs from '@/components/ui/breadcrumbs/Breadcrumbs';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\n\nexport async function generateMetadata({ params }: BlogCategoryPageProps) {\n  await blogCategoryGuard({ params });\n  const blogCategoryMetadatas = await getBlogCategoryMetadatas({ params });\n  return blogCategoryMetadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getBlogStaticParams();\n  return staticParams;\n}\n\nexport default function Page({ params }: BlogCategoryPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <div className=\"mx-8 flex flex-col items-center lg:mx-auto lg:max-w-[750px]\">\n      <Breadcrumbs className=\"w-fit self-start py-4\" />\n      <CategoryRelatedSubcategoriesAndBlogPosts params={params} />\n    </div>\n  );\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/blog/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "55",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 46,
              "line": 9
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 57,
              "line": 13
            }
          }
        },
        {
          "id": "57",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 17
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { I18nPageProps } from '@/types/Next';\n\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getStaticParams } from '@/i18n/server';\n\nexport async function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default function Page({ params }: I18nPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return <>{'{ToDo}'}</>;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/[...notfound]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "58",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 66,
              "line": 9
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 10
            },
            "start": {
              "column": 20,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { NotFoundCatchallParams } from '@/types/Next';\n\nimport NotFoundCatchall from '@/components/phantoms/NotFoundCatchall';\n\nexport default function Page({ params }: NotFoundCatchallParams) {\n  NotFoundCatchall({ params });\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/bar/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "60",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 13
            },
            "start": {
              "column": 42,
              "line": 8
            }
          }
        },
        {
          "id": "61",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 11
            },
            "start": {
              "column": 40,
              "line": 11
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 77,
              "line": 11
            }
          }
        },
        {
          "id": "63",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 12
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 12
            },
            "start": {
              "column": 25,
              "line": 12
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 32,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport DashboardBarPage from '@/components/pages/dashboard/bar';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { dashboardPagesTitles, pagesTitles } = i18ns;\n  const title = buildPageTitle(globalT(`${pagesTitles}.dashboard`), globalT(`${dashboardPagesTitles}.bar`));\n  return { description: '', title };\n}\n\nexport default function Page() {\n  return <DashboardBarPage />;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/foo/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "66",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 13
            },
            "start": {
              "column": 42,
              "line": 8
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 11
            },
            "start": {
              "column": 40,
              "line": 11
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 11
            },
            "start": {
              "column": 77,
              "line": 11
            }
          }
        },
        {
          "id": "69",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 12
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 12
            },
            "start": {
              "column": 25,
              "line": 12
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 32,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport DashboardFooPage from '@/components/pages/dashboard/foo';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { dashboardPagesTitles, pagesTitles } = i18ns;\n  const title = buildPageTitle(globalT(`${pagesTitles}.dashboard`), globalT(`${dashboardPagesTitles}.foo`));\n  return { description: '', title };\n}\n\nexport default function Page() {\n  return <DashboardFooPage />;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "72",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 46,
              "line": 12
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 91,
              "line": 16
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\n\nimport DashboardLayoutClient from '@/components/layouts/dashboard/DashboardLayoutClient';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getStaticParams } from '@/i18n/server';\n\ninterface DashboardLayoutProps extends LayoutBaseProps {}\n\nexport async function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default async function DashboardLayout({ children, params }: DashboardLayoutProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return <DashboardLayoutClient>{children}</DashboardLayoutClient>;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/dashboard/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "74",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 13
            },
            "start": {
              "column": 42,
              "line": 8
            }
          }
        },
        {
          "id": "75",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 11
            },
            "start": {
              "column": 40,
              "line": 11
            }
          }
        },
        {
          "id": "76",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 107,
              "line": 11
            },
            "start": {
              "column": 77,
              "line": 11
            }
          }
        },
        {
          "id": "77",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 12
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "78",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 12
            },
            "start": {
              "column": 25,
              "line": 12
            }
          }
        },
        {
          "id": "79",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 32,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport DashboardMainPage from '@/components/pages/dashboard/main';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { dashboardPagesTitles, pagesTitles } = i18ns;\n  const title = buildPageTitle(globalT(`${pagesTitles}.dashboard`), globalT(`${dashboardPagesTitles}.main`));\n  return { description: '', title };\n}\n\nexport default function Page() {\n  return <DashboardMainPage />;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "80",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 75,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\n\nimport PagesRootElement from '@/components/layouts/base/PagesRootElement';\n\nexport default function RootLayout({ children, params }: LayoutBaseProps) {\n  return <PagesRootElement params={params}>{children}</PagesRootElement>;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/(pages)/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "81",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 42,
              "line": 14
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 17
            },
            "start": {
              "column": 40,
              "line": 17
            }
          }
        },
        {
          "id": "83",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 17
            },
            "start": {
              "column": 73,
              "line": 17
            }
          }
        },
        {
          "id": "84",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 17
            },
            "start": {
              "column": 101,
              "line": 17
            }
          }
        },
        {
          "id": "85",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 18
            },
            "start": {
              "column": 31,
              "line": 18
            }
          }
        },
        {
          "id": "86",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 19
            },
            "start": {
              "column": 10,
              "line": 19
            }
          }
        },
        {
          "id": "87",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 46,
              "line": 22
            }
          }
        },
        {
          "id": "88",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 57,
              "line": 26
            }
          }
        },
        {
          "id": "89",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 31
            },
            "start": {
              "column": 25,
              "line": 31
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { I18nPageProps } from '@/types/Next';\n\nimport { getServerSideI18n, getStaticParams } from '@/i18n/server';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport { MAIN_CLS } from '@/components/config/styles/main';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport Homepage from '@/components/pages/Homepage';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { pagesTitles, manualSEO, vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), globalT(`${pagesTitles}.homepage`), true);\n  const description = globalT(`${manualSEO}.homepage.meta-description`);\n  return { description, title };\n}\n\nexport async function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default function Page({ params }: I18nPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  return (\n    <main className={cn('flex flex-1 flex-col justify-center', MAIN_CLS)}>\n      <Homepage />\n    </main>\n  );\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "90",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 75,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\n\nimport HtmlElement from '@/components/layouts/base/HtmlElement';\n\nexport default function RootLayout({ children, params }: LayoutBaseProps) {\n  return <HtmlElement params={params}>{children}</HtmlElement>;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/[lp-slug]/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "91",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 70,
              "line": 15
            }
          }
        },
        {
          "id": "92",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 16
            },
            "start": {
              "column": 51,
              "line": 16
            }
          }
        },
        {
          "id": "93",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 46,
              "line": 20
            }
          }
        },
        {
          "id": "94",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 60,
              "line": 25
            }
          }
        },
        {
          "id": "95",
          "mutatorName": "BooleanLiteral",
          "replacement": "lp",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "96",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "97",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LandingPageProps } from '@/types/LandingPage';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport { getLandingPagesStaticParams, getLandingPageMetadatas } from '@/lib/landingPages/staticGeneration';\nimport { getLandingPageByLanguageAndSlugUnstrict } from '@/lib/landingPages/api';\nimport LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport MDX from '@/components/layouts/blog/MdxComponent';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { notFound } from 'next/navigation';\n\nexport async function generateMetadata({ params }: LandingPageProps) {\n  const metadatas = await getLandingPageMetadatas({ params });\n  return metadatas;\n}\n\nexport async function generateStaticParams() {\n  const staticParams = await getLandingPagesStaticParams();\n  return staticParams;\n}\n\nexport default function Page({ params }: LandingPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const slug = params[LandingPageTaxonomy.SLUG];\n  const lp: MaybeNull<LandingPage> = getLandingPageByLanguageAndSlugUnstrict(language, slug);\n  if (!lp) notFound();\n\n  return (\n    <main className=\"max-w-full\">\n      <MDX code={lp.body.code} />\n    </main>\n  );\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "98",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 75,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\n\nimport LandingPagesRootElement from '@/components/layouts/base/LandingPagesRootElement';\n\nexport default function RootLayout({ children, params }: LayoutBaseProps) {\n  return <LandingPagesRootElement params={params}>{children}</LandingPagesRootElement>;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "99",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 13
            },
            "start": {
              "column": 46,
              "line": 11
            }
          }
        },
        {
          "id": "100",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 57,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { I18nPageProps } from '@/types/Next';\n\nimport { setStaticParamsLocale } from 'next-international/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getStaticParams } from '@/i18n/server';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\n\nexport async function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default function Page({ params }: I18nPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  redirect(ROUTES_ROOTS.WEBSITE);\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/sign-up/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "101",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 72,
              "line": 8
            }
          }
        },
        {
          "id": "102",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 9
            },
            "start": {
              "column": 30,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\n\nimport { MAIN_CLS } from '@/components/config/styles/main';\nimport { cn } from '@/lib/tailwind';\n\nexport default function SignUpLayout({ children }: LayoutMinimalProps) {\n  return <main className={cn('flex flex-1 items-center justify-center', MAIN_CLS)}>{children}</main>;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/lp/sign-up/page.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "103",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 42,
              "line": 15
            }
          }
        },
        {
          "id": "104",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 18
            },
            "start": {
              "column": 40,
              "line": 18
            }
          }
        },
        {
          "id": "105",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 18
            },
            "start": {
              "column": 73,
              "line": 18
            }
          }
        },
        {
          "id": "106",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 18
            },
            "start": {
              "column": 100,
              "line": 18
            }
          }
        },
        {
          "id": "107",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 19
            },
            "start": {
              "column": 31,
              "line": 19
            }
          }
        },
        {
          "id": "108",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 20
            },
            "start": {
              "column": 10,
              "line": 20
            }
          }
        },
        {
          "id": "109",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 46,
              "line": 23
            }
          }
        },
        {
          "id": "110",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 63,
              "line": 27
            }
          }
        },
        {
          "id": "111",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 32
            },
            "start": {
              "column": 7,
              "line": 32
            }
          }
        },
        {
          "id": "112",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 32
            },
            "start": {
              "column": 7,
              "line": 32
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { I18nPageProps } from '@/types/Next';\n\nimport { getServerSideI18n, getStaticParams } from '@/i18n/server';\nimport { setStaticParamsLocale } from 'next-international/server';\nimport SignupButton from '@/components/ui/cta/SignupButton';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport { getServerSession } from 'next-auth';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const globalT = await getServerSideI18n();\n  const { pagesTitles, manualSEO, vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), globalT(`${pagesTitles}.sign-up`), true);\n  const description = globalT(`${manualSEO}.signup.meta-description`);\n  return { description, title };\n}\n\nexport async function generateStaticParams() {\n  return getStaticParams();\n}\n\nexport default async function Page({ params }: I18nPageProps) {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  setStaticParamsLocale(language);\n\n  const session = await getServerSession();\n  if (session) redirect(ROUTES_ROOTS.DASHBOARD);\n\n  return <SignupButton />;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/[locale]/not-found.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "113",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 42,
              "line": 12
            }
          }
        },
        {
          "id": "114",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 15
            },
            "start": {
              "column": 40,
              "line": 15
            }
          }
        },
        {
          "id": "115",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 69,
              "line": 15
            },
            "start": {
              "column": 64,
              "line": 15
            }
          }
        },
        {
          "id": "116",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 16
            },
            "start": {
              "column": 23,
              "line": 16
            }
          }
        },
        {
          "id": "117",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 18
            },
            "start": {
              "column": 10,
              "line": 18
            }
          }
        },
        {
          "id": "118",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 46,
              "line": 21
            }
          }
        },
        {
          "id": "119",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 24
            },
            "start": {
              "column": 30,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { I18nParams } from '@/types/Next';\n\nimport PagesRootElement from '@/components/layouts/base/PagesRootElement';\nimport { getCurrentLocale, getScopedI18n } from '@/i18n/server';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport NotFound from '@/components/pages/Notfound';\nimport { i18ns } from '##/config/i18n';\n\nexport async function generateMetadata() {\n  const scopedT = await getScopedI18n(i18ns.vocab);\n\n  const title = buildPageTitle(scopedT('brand-short'), scopedT('404'));\n  const description = '';\n\n  return { description, title };\n}\n\nexport default async function NotFoundPage() {\n  const language = getCurrentLocale();\n\n  const params: I18nParams = { [I18nTaxonomy.LANGUAGE]: language };\n\n  return (\n    <PagesRootElement params={params}>\n      <NotFound />\n    </PagesRootElement>\n  );\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/error.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "120",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 11
            },
            "start": {
              "column": 86,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport default function Error({ error, reset }: { reset: () => void; error: Error }) {\n  redirect(ROUTES_ROOTS.WEBSITE);\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/layout.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "121",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 73,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\n\nimport '@/app/globals.css';\n\nexport default function PhantomLayout({ children }: LayoutMinimalProps) {\n  return children;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/app/not-found.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "122",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 5
            },
            "start": {
              "column": 40,
              "line": 3
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nexport default function NotFoundPage() {\n  return null;\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/cache/blog.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "123",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(15,87): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 136,
              "line": 15
            }
          }
        },
        {
          "id": "124",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/cache/blog.ts(23,3): error TS18047: 'relatedPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "125",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/cache/blog.ts(23,3): error TS18047: 'relatedPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "126",
          "mutatorName": "EqualityOperator",
          "replacement": "relatedPosts !== null",
          "statusReason": "src/cache/blog.ts(23,3): error TS18047: 'relatedPosts' is possibly 'null'.\nsrc/cache/blog.ts(23,27): error TS7031: Binding element 'subcategory' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "127",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(20,3): error TS18047: 'relatedPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["300"],
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 30,
              "line": 19
            }
          }
        },
        {
          "id": "128",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 116,
              "line": 23
            },
            "start": {
              "column": 24,
              "line": 23
            }
          }
        },
        {
          "id": "129",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'includes')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 30
            },
            "start": {
              "column": 101,
              "line": 27
            }
          }
        },
        {
          "id": "130",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(35,9): error TS2322: Type 'void' is not assignable to type 'BlogSubcategoryFromUnknownCategory[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "57",
            "58",
            "59",
            "61",
            "64",
            "65",
            "66",
            "68",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "151",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 94,
              "line": 32
            }
          }
        },
        {
          "id": "131",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "132",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "133",
          "mutatorName": "EqualityOperator",
          "replacement": "BlogCache.subcategoriesCollection[language] !== undefined",
          "statusReason": "Cannot read properties of undefined (reading 'blog-testing-category')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "57",
            "58",
            "59",
            "61",
            "64",
            "65",
            "66",
            "68",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "151",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "134",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'blog-testing-category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": ["26", "28", "150", "191"],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 66,
              "line": 35
            }
          }
        },
        {
          "id": "135",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "136",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "137",
          "mutatorName": "EqualityOperator",
          "replacement": "BlogCache.subcategoriesCollection[language][category] !== undefined",
          "statusReason": "promise rejected \"TypeError: Cannot read properties of unde…\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "57",
            "58",
            "59",
            "61",
            "64",
            "65",
            "66",
            "68",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "151",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 74,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "138",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/cache/blog.ts(45,103): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "57",
            "58",
            "59",
            "61",
            "64",
            "65",
            "66",
            "68",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "151",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 48
            },
            "start": {
              "column": 149,
              "line": 45
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryFromUnknownCategory, BlogCategory, TBlogPost } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport { getAllBlogPostsByCategoryAndLanguage } from '@/lib/blog/api';\nimport { LANGUAGES } from '##/config/i18n';\n\nnamespace BlogCache {\n  export const subcategoriesCollection = Object.fromEntries(LANGUAGES.map((language) => [language, {}])) as Record<\n    LanguageFlag,\n    Record<BlogCategory, BlogSubcategoryFromUnknownCategory[]>\n  >;\n}\n\nasync function buildSubcategoriesSet(category: BlogCategory, language: LanguageFlag): Promise<Set<BlogSubcategoryFromUnknownCategory>> {\n  const relatedPosts: MaybeNull<TBlogPost[]> = await getAllBlogPostsByCategoryAndLanguage(category, language);\n  const subcategoriesSet = new Set<BlogSubcategoryFromUnknownCategory>();\n\n  if (relatedPosts === null) {\n    const emptySet = new Set<BlogSubcategoryFromUnknownCategory>();\n    return emptySet;\n  }\n  relatedPosts.forEach(({ subcategory }) => subcategoriesSet.add(subcategory as BlogSubcategoryFromUnknownCategory));\n  return subcategoriesSet;\n}\n\nasync function populateSubcategoriesCollectionCache(category: BlogCategory, language: LanguageFlag) {\n  const subcategsSet: Set<BlogSubcategoryFromUnknownCategory> = await buildSubcategoriesSet(category, language);\n  BlogCache.subcategoriesCollection[language][category] = Array.from(subcategsSet);\n}\n\nasync function subcategoriesByCategoryGetter(category: BlogCategory, language: LanguageFlag) {\n  // Stryker Workaround 1. Mutant will be killed with `if (false)` as expected, but `if (true)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (BlogCache.subcategoriesCollection[language] === undefined) {\n    BlogCache.subcategoriesCollection[language] = {} as Record<BlogCategory, BlogSubcategoryFromUnknownCategory[]>;\n  }\n\n  // Idem (see Stryker Workaround 1).\n  // Stryker disable next-line ConditionalExpression\n  if (BlogCache.subcategoriesCollection[language][category] === undefined) await populateSubcategoriesCollectionCache(category, language);\n  return BlogCache.subcategoriesCollection[language][category];\n}\n\nexport async function getBlogSubcategoriesByCategory(category: BlogCategory, language: LanguageFlag): Promise<BlogSubcategoryFromUnknownCategory[]> {\n  const subcategories: BlogSubcategoryFromUnknownCategory[] = await subcategoriesByCategoryGetter(category, language);\n  return subcategories;\n}\n"
    },
    "src/components/config/blog/CTAs.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "139",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 7
            },
            "start": {
              "column": 68,
              "line": 5
            }
          }
        },
        {
          "id": "140",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 6
            },
            "start": {
              "column": 23,
              "line": 6
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport InviteTheBotButton from '@/components/ui/cta/InviteTheBotButton';\n\nconst CTAs: Record<PropertyKey, (...args: any[]) => JSX.Element> = {\n  InviteTheBotButton: ({ ...props }) => <InviteTheBotButton {...props} />\n};\n\nexport default CTAs;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/blog/NextComponents.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "141",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 8
            },
            "start": {
              "column": 78,
              "line": 5
            }
          }
        },
        {
          "id": "142",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 7
            },
            "start": {
              "column": 10,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport Image from 'next/image';\n\nconst NextComponents: Record<PropertyKey, (...args: any[]) => JSX.Element> = {\n  // eslint-disable-next-line jsx-a11y/alt-text\n  Image: ({ ...props }) => <Image {...props} />\n};\n\nexport default NextComponents;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/blog/PrimitiveComponents.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "143",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 69
            },
            "start": {
              "column": 83,
              "line": 8
            }
          }
        },
        {
          "id": "144",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 12
            },
            "start": {
              "column": 8,
              "line": 9
            }
          }
        },
        {
          "id": "145",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "146",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 13
            }
          }
        },
        {
          "id": "147",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 136,
              "line": 15
            },
            "start": {
              "column": 21,
              "line": 15
            }
          }
        },
        {
          "id": "148",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 24
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "149",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 126,
              "line": 21
            },
            "start": {
              "column": 21,
              "line": 21
            }
          }
        },
        {
          "id": "150",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 29
            },
            "start": {
              "column": 10,
              "line": 25
            }
          }
        },
        {
          "id": "151",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 27
            },
            "start": {
              "column": 28,
              "line": 27
            }
          }
        },
        {
          "id": "152",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 8,
              "line": 30
            }
          }
        },
        {
          "id": "153",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 32
            },
            "start": {
              "column": 26,
              "line": 32
            }
          }
        },
        {
          "id": "154",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 32
            },
            "start": {
              "column": 109,
              "line": 32
            }
          }
        },
        {
          "id": "155",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "156",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 37
            },
            "start": {
              "column": 23,
              "line": 37
            }
          }
        },
        {
          "id": "157",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 44
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "158",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 127,
              "line": 41
            },
            "start": {
              "column": 21,
              "line": 41
            }
          }
        },
        {
          "id": "159",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 47
            },
            "start": {
              "column": 7,
              "line": 45
            }
          }
        },
        {
          "id": "160",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 46
            },
            "start": {
              "column": 23,
              "line": 46
            }
          }
        },
        {
          "id": "161",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 48
            }
          }
        },
        {
          "id": "162",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 49
            },
            "start": {
              "column": 23,
              "line": 49
            }
          }
        },
        {
          "id": "163",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 53
            },
            "start": {
              "column": 7,
              "line": 51
            }
          }
        },
        {
          "id": "164",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 52
            },
            "start": {
              "column": 23,
              "line": 52
            }
          }
        },
        {
          "id": "165",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 56
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "166",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 55
            },
            "start": {
              "column": 23,
              "line": 55
            }
          }
        },
        {
          "id": "167",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 60
            },
            "start": {
              "column": 15,
              "line": 58
            }
          }
        },
        {
          "id": "168",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 59
            },
            "start": {
              "column": 31,
              "line": 59
            }
          }
        },
        {
          "id": "169",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 150,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 61
            }
          }
        },
        {
          "id": "170",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 123,
              "line": 61
            },
            "start": {
              "column": 91,
              "line": 61
            }
          }
        },
        {
          "id": "171",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 121,
              "line": 62
            },
            "start": {
              "column": 6,
              "line": 62
            }
          }
        },
        {
          "id": "172",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 94,
              "line": 62
            },
            "start": {
              "column": 52,
              "line": 62
            }
          }
        },
        {
          "id": "173",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 117,
              "line": 63
            },
            "start": {
              "column": 6,
              "line": 63
            }
          }
        },
        {
          "id": "174",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 63
            },
            "start": {
              "column": 52,
              "line": 63
            }
          }
        },
        {
          "id": "175",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 64
            },
            "start": {
              "column": 7,
              "line": 64
            }
          }
        },
        {
          "id": "176",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 64
            },
            "start": {
              "column": 54,
              "line": 64
            }
          }
        },
        {
          "id": "177",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 102,
              "line": 65
            },
            "start": {
              "column": 7,
              "line": 65
            }
          }
        },
        {
          "id": "178",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 65
            },
            "start": {
              "column": 54,
              "line": 65
            }
          }
        },
        {
          "id": "179",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "180",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 66
            },
            "start": {
              "column": 58,
              "line": 66
            }
          }
        },
        {
          "id": "181",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 67
            },
            "start": {
              "column": 7,
              "line": 67
            }
          }
        },
        {
          "id": "182",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 67
            },
            "start": {
              "column": 54,
              "line": 67
            }
          }
        },
        {
          "id": "183",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 68
            },
            "start": {
              "column": 7,
              "line": 68
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { ImgHTMLAttributes, HTMLAttributes } from 'react';\n\nimport CopyToClipboard from '@/components/ui/blog/CopyToClipboard';\nimport { cn } from '@/lib/tailwind';\n\nconst PrimitiveComponents: Record<PropertyKey, (...args: any[]) => JSX.Element> = {\n  img: ({ className, alt, ...props }: ImgHTMLAttributes<HTMLImageElement>) => (\n    // eslint-disable-next-line @next/next/no-img-element\n    <img className={cn('rounded-md border', className)} alt={alt} {...props} />\n  ),\n  th: ({ className, ...props }) => (\n    <th\n      className={cn('border px-4 py-2 font-bold ltr:text-left rtl:text-right [&[align=center]]:text-center [&[align=right]]:text-right', className)}\n      {...props}\n    />\n  ),\n  td: ({ className, ...props }) => (\n    <td\n      className={cn('border px-4 py-2 ltr:text-left rtl:text-right [&[align=center]]:text-center [&[align=right]]:text-right', className)}\n      {...props}\n    />\n  ),\n  table: ({ className, ...props }: HTMLAttributes<HTMLTableElement>) => (\n    <div className=\"my-6 w-full overflow-y-auto\">\n      <table className={cn('w-full', className)} {...props} />\n    </div>\n  ),\n  pre: ({ className, ...props }) => (\n    <CopyToClipboard>\n      <pre className={cn('mb-4 mt-6 overflow-x-auto rounded-lg px-4 py-4', className)} {...props} tabIndex={-1} />\n    </CopyToClipboard>\n  ),\n  /* eslint-disable perfectionist/sort-objects */\n  h1: ({ className, ...props }) => (\n    <h1 className={cn('mt-2 flex scroll-m-20 text-4xl font-bold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h2: ({ className, ...props }) => (\n    <h2\n      className={cn('mt-10 flex scroll-m-20 border-b pb-1 text-3xl font-semibold tracking-tight first:mt-0 [&>*]:no-underline', className)}\n      {...props}\n    />\n  ),\n  h3: ({ className, ...props }) => (\n    <h3 className={cn('mt-8 flex scroll-m-20 text-2xl font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h4: ({ className, ...props }) => (\n    <h4 className={cn('mt-8 flex scroll-m-20 text-xl font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h5: ({ className, ...props }) => (\n    <h5 className={cn('mt-8 flex scroll-m-20 text-lg font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  h6: ({ className, ...props }) => (\n    <h6 className={cn('mt-8 flex scroll-m-20 text-base font-semibold tracking-tight [&>*]:no-underline', className)} {...props} />\n  ),\n  /* eslint-enable perfectionist/sort-objects */\n  blockquote: ({ className, ...props }) => (\n    <blockquote className={cn('mt-6 border-l-2 pl-6 italic [&>*]:text-muted-foreground', className)} {...props} />\n  ),\n  tr: ({ className, ...props }: HTMLAttributes<HTMLTableRowElement>) => <tr className={cn('m-0 border-t p-0 even:bg-muted', className)} {...props} />,\n  a: ({ className, ...props }) => <a className={cn('font-medium underline underline-offset-4', className)} {...props} />,\n  p: ({ className, ...props }) => <p className={cn('leading-7 [&:not(:first-child)]:mt-6', className)} {...props} />,\n  ol: ({ className, ...props }) => <ol className={cn('my-6 ml-6 list-decimal', className)} {...props} />,\n  ul: ({ className, ...props }) => <ul className={cn('my-6 ml-6 list-disc', className)} {...props} />,\n  code: ({ className, ...props }) => <code className={cn('bg-inherit', className)} {...props} />,\n  li: ({ className, ...props }) => <li className={cn('mt-2', className)} {...props} />,\n  hr: ({ ...props }) => <hr className=\"my-4 md:my-8\" {...props} />\n};\n\nexport default PrimitiveComponents;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/body.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "184",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 3
            },
            "start": {
              "column": 18,
              "line": 3
            }
          }
        },
        {
          "id": "185",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 108,
              "line": 4
            },
            "start": {
              "column": 35,
              "line": 4
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nconst BODY_CLS = 'overflow-x-hidden bg-background font-sans antialiased';\nexport const BODY_CONTAINER_CLS = 'min-h-screen min-w-screen w-screen max-w-screen flex flex-col rtl-magic';\nexport default BODY_CLS;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/html.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "186",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 42,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { CSSProperties } from 'react';\n\nimport { DEFAULT_VARIANT_COLOR_SCHEME } from '@/config/themes';\n\nexport const HTML_STYLE: CSSProperties = {\n  colorScheme: DEFAULT_VARIANT_COLOR_SCHEME\n};\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/loader/colors.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "187",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 8
            },
            "start": {
              "column": 15,
              "line": 8
            }
          }
        },
        {
          "id": "188",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 9
            },
            "start": {
              "column": 26,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\ntype TLoaderConfig = {\n  BACKGROUND_COLOR: string;\n  COLOR: string;\n};\n\nconst COLOR = '#42546E';\nconst BACKGROUND_COLOR = '#000';\n\nconst LOADER_CONFIG: TLoaderConfig = {\n  BACKGROUND_COLOR,\n  COLOR\n} as const;\n\nexport default LOADER_CONFIG;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/main.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "189",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 3
            },
            "start": {
              "column": 25,
              "line": 3
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nexport const MAIN_CLS = 'overflow-x-auto text-foreground';\nexport default MAIN_CLS;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/navbar/NavbarButtonStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "190",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 118,
              "line": 8
            },
            "start": {
              "column": 24,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { cn } from '@/lib/tailwind';\n\nexport const COMMONS = 'transition-colors duration-200 flex flex-1 justify-center rounded-md px-3 py-2 font-semibold';\n\nconst { NOT_ACTIVE_CLASSNAME, ACTIVE_CLASSNAME } = BUTTON_CONFIG;\n\nconst NavbarButtonStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, NOT_ACTIVE_CLASSNAME),\n  isActiveClassList: cn(COMMONS, ACTIVE_CLASSNAME)\n} as const;\n\nexport default NavbarButtonStyle;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/navbar/NavbarDropdownButtonIconStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "191",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 7
            },
            "start": {
              "column": 17,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'transition-transform relative top-[3px] ml-1 h-5 w-5';\n\nconst NavbarDropdownButtonIconStyle: IButtonStyleBase = {\n  isActiveClassList: cn(COMMONS, '-rotate-180 rtl:rotate-180'),\n  isNotActiveClassList: COMMONS\n} as const;\n\nexport default NavbarDropdownButtonIconStyle;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/navbar/NavbarDropdownMenuButtonStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "192",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 16
            },
            "start": {
              "column": 61,
              "line": 16
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { COMMONS } from '@/components/config/styles/navbar/NavbarButtonStyle';\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { cn } from '@/lib/tailwind';\n\nconst { NOT_ACTIVE_CLASSNAME, ACTIVE_CLASSNAME } = BUTTON_CONFIG;\n\nconst NavbarDropdownMenuButtonStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, NOT_ACTIVE_CLASSNAME),\n  isActiveClassList: cn(COMMONS, ACTIVE_CLASSNAME)\n} as const;\n\nexport const NAVBAR_DROPDOWN_MENU_INNER_BUTTONS_CLASSLIST = 'flex items-center h-full px-4 py-2.5';\n\nexport default NavbarDropdownMenuButtonStyle;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/sidebar/SidebarButtonStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "193",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 8
            },
            "start": {
              "column": 17,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type IButtonStyleReactIcon from '@/components/config/styles/types/IButtonStyleReactIcon';\n\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'transition-colors duration-200 p-2.5 rounded-lg';\nconst { NOT_ACTIVE_CLASSNAME, ACTIVE_CLASSNAME } = BUTTON_CONFIG;\n\nconst SidebarButtonStyle: IButtonStyleReactIcon = {\n  isNotActiveClassList: cn(COMMONS, NOT_ACTIVE_CLASSNAME),\n  isActiveClassList: cn(COMMONS, ACTIVE_CLASSNAME),\n  sidebarIconProps: { size: 25 }\n} as const;\n\nexport default SidebarButtonStyle;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/sidebar/SidebarCollapseButtonIconStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "194",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 122,
              "line": 7
            },
            "start": {
              "column": 17,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'transition-transform duration-1000 m-auto w-full h-full p-1 text-primary-foreground lg:rtl:-scale-x-100';\n\nconst SidebarCollapseButtonIconStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, '-rotate-180 lg:rtl:rotate-180'),\n  isActiveClassList: COMMONS\n} as const;\n\nexport const SIZE_PX_VALUE = 20;\n\nexport default SidebarCollapseButtonIconStyle;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/config/styles/sidebar/SidebarCollapseButtonWrapperStyle.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "195",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 100,
              "line": 7
            },
            "start": {
              "column": 17,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type IButtonStyleBase from '@/components/config/styles/types/IButtonStyleBase';\n\nimport { cn } from '@/lib/tailwind';\n\nconst COMMONS = 'z-10 transition-opacity delay-300 duration-1000 relative h-0 flex lg:w-0 lg:block';\n\nconst SidebarCollapseButtonWrapperStyle: IButtonStyleBase = {\n  isNotActiveClassList: cn(COMMONS, 'opacity-20 hover:opacity-100 hover:delay-0 hover:duration-300'),\n  isActiveClassList: cn(COMMONS, 'opacity-100')\n} as const;\n\nexport default SidebarCollapseButtonWrapperStyle;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/hooks/useLockScreenScrollY.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "196",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/hooks/useLockScreenScrollY.ts(4,7): error TS7034: Variable 'EFFECT_CLASSES' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/components/hooks/useLockScreenScrollY.ts(8,41): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\nsrc/components/hooks/useLockScreenScrollY.ts(10,57): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 4
            },
            "start": {
              "column": 24,
              "line": 4
            }
          }
        },
        {
          "id": "197",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 4
            },
            "start": {
              "column": 25,
              "line": 4
            }
          }
        },
        {
          "id": "198",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 4
            },
            "start": {
              "column": 37,
              "line": 4
            }
          }
        },
        {
          "id": "199",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 9,
              "line": 11
            },
            "start": {
              "column": 30,
              "line": 6
            }
          }
        },
        {
          "id": "200",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 11
            },
            "start": {
              "column": 25,
              "line": 7
            }
          }
        },
        {
          "id": "201",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 10
            },
            "start": {
              "column": 12,
              "line": 10
            }
          }
        },
        {
          "id": "202",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 11
            },
            "start": {
              "column": 6,
              "line": 11
            }
          }
        }
      ],
      "source": "import { getBodyContainer } from '@/lib/html';\nimport { useLayoutEffect } from 'react';\n\nconst EFFECT_CLASSES = ['h-100svh', 'overflow-y-hidden'];\n\nconst useLockScreenScrollY = () =>\n  useLayoutEffect(() => {\n    getBodyContainer().classList.add(...EFFECT_CLASSES);\n\n    return () => getBodyContainer().classList.remove(...EFFECT_CLASSES);\n  }, []);\n\nexport default useLockScreenScrollY;\n"
    },
    "src/components/hooks/useResetScroll.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "203",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 3,
              "line": 15
            }
          }
        },
        {
          "id": "204",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 17
            },
            "start": {
              "column": 5,
              "line": 17
            }
          }
        },
        {
          "id": "205",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 19
            },
            "start": {
              "column": 5,
              "line": 19
            }
          }
        }
      ],
      "source": "import type { HookDepsArrayPrimitives } from '@rtm/shared-types/React';\nimport type { RefObject } from 'react';\n\nimport { resetScroll } from '@rtm/shared-lib/html';\nimport { useLayoutEffect } from 'react';\n\ninterface ResetScrollOptions {\n  additionalDep?: HookDepsArrayPrimitives;\n  alsoResetWindowScroll?: boolean;\n}\n\nfunction useResetScroll<T extends HTMLElement>(\n  scrollableElementToResetRef?: RefObject<T>,\n  { alsoResetWindowScroll, additionalDep }: ResetScrollOptions = {}\n) {\n  useLayoutEffect(\n    () => resetScroll(scrollableElementToResetRef, Boolean(alsoResetWindowScroll)),\n\n    [scrollableElementToResetRef, alsoResetWindowScroll, additionalDep]\n  );\n}\n\nexport default useResetScroll;\n"
    },
    "src/components/layouts/base/DocumentRoot.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "206",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 36
            },
            "start": {
              "column": 116,
              "line": 21
            }
          }
        },
        {
          "id": "207",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 28
            },
            "start": {
              "column": 12,
              "line": 28
            }
          }
        },
        {
          "id": "208",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 28
            },
            "start": {
              "column": 12,
              "line": 28
            }
          }
        },
        {
          "id": "209",
          "mutatorName": "LogicalOperator",
          "replacement": "!disableTopLoader || <NextTopLoader {...PROGRESSBAR_CONFIG} />",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 28
            },
            "start": {
              "column": 12,
              "line": 28
            }
          }
        },
        {
          "id": "210",
          "mutatorName": "BooleanLiteral",
          "replacement": "disableTopLoader",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 28
            },
            "start": {
              "column": 12,
              "line": 28
            }
          }
        },
        {
          "id": "211",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 29
            },
            "start": {
              "column": 12,
              "line": 29
            }
          }
        },
        {
          "id": "212",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 29
            },
            "start": {
              "column": 12,
              "line": 29
            }
          }
        },
        {
          "id": "213",
          "mutatorName": "LogicalOperator",
          "replacement": "withNavbar || <SitewideNavbar />",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 29
            },
            "start": {
              "column": 12,
              "line": 29
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { BODY_CONTAINER_CLS } from '@/components/config/styles/body';\nimport SitewideNavbar from '@/components/ui/navbar/SitewideNavbar';\nimport { SpeedInsights } from '@vercel/speed-insights/next';\nimport PROGRESSBAR_CONFIG from '@/config/progressbar';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport ELEMENTS_ID from '@/config/elementsId';\nimport Providers from '@/contexts/Providers';\n\nimport NextTopLoader from './NextTopLoader';\n\ninterface DocumentRootProps extends LayoutBaseProps {\n  disableTopLoader?: boolean;\n  withNavbar?: boolean;\n}\n\nconst DocumentRoot: FunctionComponent<DocumentRootProps> = ({ disableTopLoader, withNavbar, children, params }) => {\n  const language = params[I18nTaxonomy.LANGUAGE];\n\n  return (\n    <>\n      <div id={ELEMENTS_ID.BODY_CONTAINER} className={BODY_CONTAINER_CLS}>\n        <Providers locale={language}>\n          {!disableTopLoader && <NextTopLoader {...PROGRESSBAR_CONFIG} />}\n          {withNavbar && <SitewideNavbar />}\n          {children}\n        </Providers>\n      </div>\n      <SpeedInsights />\n    </>\n  );\n};\n\nexport default DocumentRoot;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/HtmlElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "214",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 83,
              "line": 14
            }
          }
        },
        {
          "id": "215",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 20
            },
            "start": {
              "column": 58,
              "line": 20
            }
          }
        },
        {
          "id": "216",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 20
            },
            "start": {
              "column": 77,
              "line": 20
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { HTML_STYLE } from '@/components/config/styles/html';\nimport BODY_CLS from '@/components/config/styles/body';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport Locale from 'intl-locale-textinfo-polyfill';\nimport { cn } from '@/lib/tailwind';\nimport { fInter } from '@/fonts';\nimport { fcn } from '@/lib/next';\n\nconst HtmlElement: FunctionComponent<LayoutBaseProps> = ({ children, params }) => {\n  const language = params[I18nTaxonomy.LANGUAGE];\n  const { direction: dir } = new Locale(language).textInfo;\n\n  return (\n    <html suppressHydrationWarning style={HTML_STYLE} lang={language} dir={dir}>\n      <body className={cn(BODY_CLS, fcn(fInter))} style={{ scrollbarGutter: 'stable' }}>\n        {children}\n      </body>\n    </html>\n  );\n};\n\nexport default HtmlElement;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/LandingPagesRootElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "217",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 70,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport DocumentRoot from '@/components/layouts/base/DocumentRoot';\n\ninterface HtmlElementProps extends LayoutBaseProps {}\n\nconst LandingPagesRootElement: FunctionComponent<HtmlElementProps> = ({ children, params }) => (\n  <DocumentRoot params={params}>{children}</DocumentRoot>\n);\n\nexport default LandingPagesRootElement;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/NextTopLoader.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "218",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 170
            },
            "start": {
              "column": 27,
              "line": 76
            }
          }
        },
        {
          "id": "219",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 30,
              "line": 79
            },
            "start": {
              "column": 24,
              "line": 79
            }
          }
        },
        {
          "id": "220",
          "mutatorName": "LogicalOperator",
          "replacement": "propColor && defaultColor",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 82
            },
            "start": {
              "column": 17,
              "line": 82
            }
          }
        },
        {
          "id": "221",
          "mutatorName": "LogicalOperator",
          "replacement": "propHeight && defaultHeight",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 83
            },
            "start": {
              "column": 18,
              "line": 83
            }
          }
        },
        {
          "id": "222",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 85
            },
            "start": {
              "column": 21,
              "line": 85
            }
          }
        },
        {
          "id": "223",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 85
            },
            "start": {
              "column": 21,
              "line": 85
            }
          }
        },
        {
          "id": "224",
          "mutatorName": "LogicalOperator",
          "replacement": "!shadow || shadow !== undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 85
            },
            "start": {
              "column": 21,
              "line": 85
            }
          }
        },
        {
          "id": "225",
          "mutatorName": "BooleanLiteral",
          "replacement": "shadow",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 28,
              "line": 85
            },
            "start": {
              "column": 21,
              "line": 85
            }
          }
        },
        {
          "id": "226",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 85
            },
            "start": {
              "column": 32,
              "line": 85
            }
          }
        },
        {
          "id": "227",
          "mutatorName": "EqualityOperator",
          "replacement": "shadow === undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 85
            },
            "start": {
              "column": 32,
              "line": 85
            }
          }
        },
        {
          "id": "228",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 85
            },
            "start": {
              "column": 55,
              "line": 85
            }
          }
        },
        {
          "id": "229",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 91,
              "line": 85
            },
            "start": {
              "column": 69,
              "line": 85
            }
          }
        },
        {
          "id": "230",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 85
            },
            "start": {
              "column": 94,
              "line": 85
            }
          }
        },
        {
          "id": "231",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 1111,
              "line": 89
            },
            "start": {
              "column": 8,
              "line": 89
            }
          }
        },
        {
          "id": "232",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 100
            },
            "start": {
              "column": 25,
              "line": 93
            }
          }
        },
        {
          "id": "233",
          "mutatorName": "MethodExpression",
          "replacement": "navigator.userAgent.toUpperCase()",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 94
            },
            "start": {
              "column": 23,
              "line": 94
            }
          }
        },
        {
          "id": "234",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 100
            },
            "start": {
              "column": 6,
              "line": 100
            }
          }
        },
        {
          "id": "235",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 167
            },
            "start": {
              "column": 25,
              "line": 102
            }
          }
        },
        {
          "id": "236",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 110
            },
            "start": {
              "column": 25,
              "line": 103
            }
          }
        },
        {
          "id": "237",
          "mutatorName": "LogicalOperator",
          "replacement": "showSpinner && true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 104
            },
            "start": {
              "column": 20,
              "line": 104
            }
          }
        },
        {
          "id": "238",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 104
            },
            "start": {
              "column": 35,
              "line": 104
            }
          }
        },
        {
          "id": "239",
          "mutatorName": "LogicalOperator",
          "replacement": "initialPosition && 0.08",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 105
            },
            "start": {
              "column": 16,
              "line": 105
            }
          }
        },
        {
          "id": "240",
          "mutatorName": "LogicalOperator",
          "replacement": "crawlSpeed && 200",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 106
            },
            "start": {
              "column": 21,
              "line": 106
            }
          }
        },
        {
          "id": "241",
          "mutatorName": "LogicalOperator",
          "replacement": "easing && 'ease'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 107
            },
            "start": {
              "column": 15,
              "line": 107
            }
          }
        },
        {
          "id": "242",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 107
            },
            "start": {
              "column": 25,
              "line": 107
            }
          }
        },
        {
          "id": "243",
          "mutatorName": "LogicalOperator",
          "replacement": "crawl && true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 108
            },
            "start": {
              "column": 16,
              "line": 108
            }
          }
        },
        {
          "id": "244",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 29,
              "line": 108
            },
            "start": {
              "column": 25,
              "line": 108
            }
          }
        },
        {
          "id": "245",
          "mutatorName": "LogicalOperator",
          "replacement": "speed && 200",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 109
            },
            "start": {
              "column": 14,
              "line": 109
            }
          }
        },
        {
          "id": "246",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 122
            },
            "start": {
              "column": 71,
              "line": 112
            }
          }
        },
        {
          "id": "247",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 116
            },
            "start": {
              "column": 11,
              "line": 116
            }
          }
        },
        {
          "id": "248",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 116
            },
            "start": {
              "column": 11,
              "line": 116
            }
          }
        },
        {
          "id": "249",
          "mutatorName": "EqualityOperator",
          "replacement": "currentUrlObj.origin === newUrlObj.origin",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 116
            },
            "start": {
              "column": 11,
              "line": 116
            }
          }
        },
        {
          "id": "250",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 118
            },
            "start": {
              "column": 54,
              "line": 116
            }
          }
        },
        {
          "id": "251",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 117
            },
            "start": {
              "column": 16,
              "line": 117
            }
          }
        },
        {
          "id": "252",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 118
            },
            "start": {
              "column": 18,
              "line": 118
            }
          }
        },
        {
          "id": "253",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 118
            },
            "start": {
              "column": 18,
              "line": 118
            }
          }
        },
        {
          "id": "254",
          "mutatorName": "EqualityOperator",
          "replacement": "getPathnameWithoutI18nFlag(currentUrlObj.pathname) === getPathnameWithoutI18nFlag(newUrlObj.pathname)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 119,
              "line": 118
            },
            "start": {
              "column": 18,
              "line": 118
            }
          }
        },
        {
          "id": "255",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 120
            },
            "start": {
              "column": 121,
              "line": 118
            }
          }
        },
        {
          "id": "256",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 119
            },
            "start": {
              "column": 16,
              "line": 119
            }
          }
        },
        {
          "id": "257",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 121
            },
            "start": {
              "column": 14,
              "line": 121
            }
          }
        },
        {
          "id": "258",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 124
            },
            "start": {
              "column": 45,
              "line": 124
            }
          }
        },
        {
          "id": "259",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 130
            },
            "start": {
              "column": 87,
              "line": 125
            }
          }
        },
        {
          "id": "260",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 126
            },
            "start": {
              "column": 14,
              "line": 126
            }
          }
        },
        {
          "id": "261",
          "mutatorName": "LogicalOperator",
          "replacement": "element || element.tagName !== 'A'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 126
            },
            "start": {
              "column": 14,
              "line": 126
            }
          }
        },
        {
          "id": "262",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 126
            },
            "start": {
              "column": 25,
              "line": 126
            }
          }
        },
        {
          "id": "263",
          "mutatorName": "EqualityOperator",
          "replacement": "element.tagName === 'A'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 126
            },
            "start": {
              "column": 25,
              "line": 126
            }
          }
        },
        {
          "id": "264",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 126
            },
            "start": {
              "column": 45,
              "line": 126
            }
          }
        },
        {
          "id": "265",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 128
            },
            "start": {
              "column": 50,
              "line": 126
            }
          }
        },
        {
          "id": "266",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 162
            },
            "start": {
              "column": 45,
              "line": 132
            }
          }
        },
        {
          "id": "267",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 133
            },
            "start": {
              "column": 11,
              "line": 133
            }
          }
        },
        {
          "id": "268",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 133
            },
            "start": {
              "column": 11,
              "line": 133
            }
          }
        },
        {
          "id": "269",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 158
            },
            "start": {
              "column": 11,
              "line": 134
            }
          }
        },
        {
          "id": "270",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 137
            },
            "start": {
              "column": 13,
              "line": 137
            }
          }
        },
        {
          "id": "271",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 137
            },
            "start": {
              "column": 13,
              "line": 137
            }
          }
        },
        {
          "id": "272",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 157
            },
            "start": {
              "column": 21,
              "line": 137
            }
          }
        },
        {
          "id": "273",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 140
            },
            "start": {
              "column": 34,
              "line": 140
            }
          }
        },
        {
          "id": "274",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 140
            },
            "start": {
              "column": 34,
              "line": 140
            }
          }
        },
        {
          "id": "275",
          "mutatorName": "EqualityOperator",
          "replacement": "(anchor as HTMLAnchorElement).target !== '_blank'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 140
            },
            "start": {
              "column": 34,
              "line": 140
            }
          }
        },
        {
          "id": "276",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 140
            },
            "start": {
              "column": 75,
              "line": 140
            }
          }
        },
        {
          "id": "277",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "278",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "279",
          "mutatorName": "LogicalOperator",
          "replacement": "(isSamePage || isExternalLink) && isOnMobileOrTablet",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "280",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "281",
          "mutatorName": "LogicalOperator",
          "replacement": "isSamePage && isExternalLink",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 143
            },
            "start": {
              "column": 15,
              "line": 143
            }
          }
        },
        {
          "id": "282",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 156
            },
            "start": {
              "column": 18,
              "line": 146
            }
          }
        },
        {
          "id": "283",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 14,
              "line": 155
            },
            "start": {
              "column": 45,
              "line": 149
            }
          }
        },
        {
          "id": "284",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 151
            },
            "start": {
              "column": 15,
              "line": 151
            }
          }
        },
        {
          "id": "285",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 153
            },
            "start": {
              "column": 64,
              "line": 151
            }
          }
        },
        {
          "id": "286",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 152
            },
            "start": {
              "column": 37,
              "line": 152
            }
          }
        },
        {
          "id": "287",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 161
            },
            "start": {
              "column": 15,
              "line": 158
            }
          }
        },
        {
          "id": "288",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 164
            },
            "start": {
              "column": 31,
              "line": 164
            }
          }
        },
        {
          "id": "289",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 166
            },
            "start": {
              "column": 12,
              "line": 166
            }
          }
        },
        {
          "id": "290",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 166
            },
            "start": {
              "column": 47,
              "line": 166
            }
          }
        },
        {
          "id": "291",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 167
            },
            "start": {
              "column": 6,
              "line": 167
            }
          }
        },
        {
          "id": "292",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 182
            },
            "start": {
              "column": 27,
              "line": 172
            }
          }
        },
        {
          "id": "293",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 173
            },
            "start": {
              "column": 31,
              "line": 173
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport { getPathnameWithoutI18nFlag } from '@/lib/i18n';\n\n// A Next.js Top Loading Bar component made using nprogress, works with Next.js 13.\n// https://github.com/TheSGJ/nextjs-toploader\n// https://www.npmjs.com/package/nextjs-toploader\n// Copyright (c) 2023 Shri Ganesh Jha\n\nimport * as PropTypes from 'prop-types';\nimport nProgress from 'nprogress';\nimport * as React from 'react';\nexport type NextTopLoaderProps = {\n  /**\n   * The initial position for the TopLoader in percentage, 0.08 is 8%.\n   * @default 0.08\n   */\n  initialPosition?: number;\n  /**\n   * Defines a shadow for the TopLoader.\n   * @default \"0 0 10px ${color},0 0 5px ${color}\"\n   * ... Disable it by setting it to `false`\n   */\n  shadow?: string | false;\n  /**\n   * To show spinner or not.\n   * @default true\n   */\n  showSpinner?: boolean;\n  /**\n   * The increament delay speed in milliseconds.\n   * @default 200\n   */\n  crawlSpeed?: number;\n  /**\n   * The height for the TopLoader in pixels (px).\n   * @default 3\n   */\n  height?: number;\n  /**\n   * Auto increamenting behaviour for the TopLoader.\n   * @default true\n   */\n  crawl?: boolean;\n  /**\n   * Animation settings using easing (a CSS easing string).\n   * @default \"ease\"\n   */\n  easing?: string;\n  /**\n   * Color for the TopLoader.\n   * @default \"#29d\"\n   */\n  color?: string;\n  /**\n   * Animation speed in ms for the TopLoader.\n   * @default 200\n   */\n  speed?: number;\n};\n\nconst NextTopLoader = ({\n  height: propHeight,\n  color: propColor,\n  initialPosition,\n  showSpinner,\n  crawlSpeed,\n  easing,\n  shadow,\n  crawl,\n  speed\n}: NextTopLoaderProps) => {\n  const [isOnMobileOrTablet, setIsOnMobileOrTablet] = React.useState<MaybeNull<boolean>>(null);\n\n  const defaultColor = '#29d';\n  const defaultHeight = 3;\n\n  const color = propColor ?? defaultColor;\n  const height = propHeight ?? defaultHeight;\n\n  const boxShadow = !shadow && shadow !== undefined ? '' : shadow ? `box-shadow:${shadow}` : `box-shadow:0 0 10px ${color},0 0 5px ${color}`;\n\n  const styles = (\n    <style>\n      {`#nprogress{pointer-events:none}#nprogress .bar{background:${color};position:fixed;z-index:1031;top:0;left:0;width:100%;height:${height}px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;${boxShadow};opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:1031;top:15px;right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:${color};border-left-color:${color};border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`}\n    </style>\n  );\n\n  React.useEffect(() => {\n    const userAgent = navigator.userAgent.toLowerCase();\n    const onMobile = Boolean(\n      userAgent.match(/(ipad)|(iphone)|(ipod)|(android)|(webos)|(blackberry)|(tablet)|(kindle)|(playbook)|(silk)|(windows phone)/i)\n    );\n\n    setIsOnMobileOrTablet(onMobile);\n  }, []);\n\n  React.useEffect(() => {\n    nProgress.configure({\n      showSpinner: showSpinner ?? true,\n      minimum: initialPosition ?? 0.08,\n      trickleSpeed: crawlSpeed ?? 200,\n      easing: easing ?? 'ease',\n      trickle: crawl ?? true,\n      speed: speed ?? 200\n    });\n\n    function isAnchorOfCurrentUrl(currentUrl: string, newUrl: string) {\n      const currentUrlObj = new URL(currentUrl);\n      const newUrlObj = new URL(newUrl);\n\n      if (currentUrlObj.origin !== newUrlObj.origin) {\n        return true;\n      } else if (getPathnameWithoutI18nFlag(currentUrlObj.pathname) !== getPathnameWithoutI18nFlag(newUrlObj.pathname)) {\n        return false;\n      }\n      return true;\n    }\n\n    const npgclass = document.querySelector('html');\n    function findClosestAnchor(element: HTMLElement | null): HTMLAnchorElement | null {\n      while (element && element.tagName !== 'A') {\n        element = element.parentElement;\n      }\n      return element as HTMLAnchorElement;\n    }\n\n    function handleClick(event: MouseEvent) {\n      if (event.ctrlKey) return;\n      try {\n        const target = event.target as HTMLElement;\n        const anchor = findClosestAnchor(target);\n        if (anchor) {\n          const currentUrl = window.location.href;\n          const newUrl = (anchor as HTMLAnchorElement).href;\n          const isExternalLink = (anchor as HTMLAnchorElement).target === '_blank';\n          const isSamePage = isAnchorOfCurrentUrl(currentUrl, newUrl);\n\n          if (isSamePage || isExternalLink || isOnMobileOrTablet) return;\n\n          nProgress.start();\n          (() => {\n            const history = window.history;\n            const pushState = history.pushState;\n            history.pushState = function () {\n              nProgress.done();\n              [].forEach.call(npgclass, function (el: Element) {\n                el.classList.remove('nprogress-busy');\n              });\n              return pushState.apply(history, arguments as any);\n            };\n          })();\n        }\n      } catch {\n        nProgress.start();\n        nProgress.done();\n      }\n    }\n\n    document.addEventListener('click', handleClick);\n\n    return () => document.removeEventListener('click', handleClick);\n  }, [crawl, crawlSpeed, easing, initialPosition, showSpinner, speed, isOnMobileOrTablet]);\n\n  return styles;\n};\n\nNextTopLoader.propTypes = {\n  shadow: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  initialPosition: PropTypes.number,\n  crawlSpeed: PropTypes.number,\n  showSpinner: PropTypes.bool,\n  height: PropTypes.number,\n  easing: PropTypes.string,\n  color: PropTypes.string,\n  speed: PropTypes.number,\n  crawl: PropTypes.bool\n};\n\nexport default NextTopLoader;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/base/PagesRootElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "294",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 63,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { LayoutBaseProps } from '@/types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport DocumentRoot from '@/components/layouts/base/DocumentRoot';\n\ninterface HtmlElementProps extends LayoutBaseProps {}\n\nconst PagesRootElement: FunctionComponent<HtmlElementProps> = ({ children, params }) => (\n  <DocumentRoot params={params} withNavbar>\n    {children}\n  </DocumentRoot>\n);\n\nexport default PagesRootElement;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/blog/MdxComponent.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "295",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 86,
              "line": 10
            }
          }
        },
        {
          "id": "296",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 56,
              "line": 20
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { FunctionComponent, ReactNode } from 'react';\n\nimport PrimitiveComponents from '@/components/config/blog/PrimitiveComponents';\nimport NextComponents from '@/components/config/blog/NextComponents';\nimport { useMDXComponent } from 'next-contentlayer/hooks';\nimport CTAs from '@/components/config/blog/CTAs';\n\nconst components: Record<PropertyKey, (...args: any[]) => JSX.Element | ReactNode> = {\n  ...PrimitiveComponents,\n  ...NextComponents,\n  ...CTAs\n};\n\ninterface MdxProps {\n  code: string;\n}\n\nconst MDX: FunctionComponent<MdxProps> = ({ code }) => {\n  const MDXComponent = useMDXComponent(code);\n\n  return (\n    <article className=\"mdx break-word\">\n      <MDXComponent components={components} />\n    </article>\n  );\n};\n\nexport default MDX;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/dashboard/DashboardLayoutClient.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "297",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 37
            },
            "start": {
              "column": 96,
              "line": 18
            }
          }
        },
        {
          "id": "298",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 34,
              "line": 24
            }
          }
        },
        {
          "id": "299",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 33,
              "line": 25
            },
            "start": {
              "column": 28,
              "line": 25
            }
          }
        },
        {
          "id": "300",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 32
            },
            "start": {
              "column": 27,
              "line": 32
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { LayoutMinimalProps } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport DashboardSidebar from '@/components/layouts/dashboard/DashboardSidebar';\nimport useLockScreenScrollY from '@/components/hooks/useLockScreenScrollY';\nimport MAIN_NEXT_UI_CLS from '@/components/config/styles/main';\nimport useResetScroll from '@/components/hooks/useResetScroll';\nimport { useSelectedLayoutSegment } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\nimport { useRef } from 'react';\n\ninterface DashboardLayoutClientProps extends LayoutMinimalProps {}\n\nconst DashboardLayoutClient: FunctionComponent<DashboardLayoutClientProps> = ({ children }) => {\n  useLockScreenScrollY();\n\n  const mainElementRef = useRef<HTMLDivElement>(null);\n  const segment = useSelectedLayoutSegment();\n\n  useResetScroll(mainElementRef, {\n    alsoResetWindowScroll: false,\n    additionalDep: segment\n  });\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-y-hidden lg:flex-row\">\n      <DashboardSidebar />\n      <main className={cn('flex-1 overflow-y-auto px-4 py-7 lg:px-8 lg:py-4', MAIN_NEXT_UI_CLS)} ref={mainElementRef}>\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default DashboardLayoutClient;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/dashboard/DashboardSidebar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "301",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(27,58): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 50
            },
            "start": {
              "column": 70,
              "line": 27
            }
          }
        },
        {
          "id": "302",
          "mutatorName": "ArithmeticOperator",
          "replacement": "keys.length + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 29
            },
            "start": {
              "column": 24,
              "line": 29
            }
          }
        },
        {
          "id": "303",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(33,24): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 49
            },
            "start": {
              "column": 40,
              "line": 33
            }
          }
        },
        {
          "id": "304",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(35,12): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(35,26): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(35,32): error TS2493: Tuple type '[]' of length '0' has no element at index '2'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(36,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"): string', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"'.\n  Overload 2 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"): ReactNode', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(38,56): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(42,113): error TS2322: Type 'undefined' is not assignable to type 'Url'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 136,
              "line": 35
            },
            "start": {
              "column": 44,
              "line": 35
            }
          }
        },
        {
          "id": "305",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 41
            },
            "start": {
              "column": 16,
              "line": 41
            }
          }
        },
        {
          "id": "306",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 42
            },
            "start": {
              "column": 29,
              "line": 42
            }
          }
        },
        {
          "id": "307",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "308",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "309",
          "mutatorName": "LogicalOperator",
          "replacement": "k !== lastKey || sidebarBtnsSeparator",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "310",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "311",
          "mutatorName": "EqualityOperator",
          "replacement": "k === lastKey",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 46
            }
          }
        },
        {
          "id": "312",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(52,7): error TS2322: Type '() => void' is not assignable to type 'FunctionComponent<DashboardSidebarProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 119
            },
            "start": {
              "column": 74,
              "line": 52
            }
          }
        },
        {
          "id": "313",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 53
            },
            "start": {
              "column": 40,
              "line": 53
            }
          }
        },
        {
          "id": "314",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 56
            },
            "start": {
              "column": 39,
              "line": 56
            }
          }
        },
        {
          "id": "315",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(56,68): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"md\" | \"sm\" | \"lg\" | \"2xl\" | \"xl\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 56
            },
            "start": {
              "column": 68,
              "line": 56
            }
          }
        },
        {
          "id": "316",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 102
            },
            "start": {
              "column": 19,
              "line": 60
            }
          }
        },
        {
          "id": "317",
          "mutatorName": "BooleanLiteral",
          "replacement": "sidebarInstance",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(92,50): error TS2339: Property 'classList' does not exist on type 'never'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(93,28): error TS2339: Property 'classList' does not exist on type 'never'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(99,47): error TS2339: Property 'classList' does not exist on type 'never'.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(100,26): error TS2339: Property 'classList' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 62
            },
            "start": {
              "column": 9,
              "line": 62
            }
          }
        },
        {
          "id": "318",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 62
            },
            "start": {
              "column": 9,
              "line": 62
            }
          }
        },
        {
          "id": "319",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 62
            },
            "start": {
              "column": 9,
              "line": 62
            }
          }
        },
        {
          "id": "320",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(64,11): error TS7034: Variable 'EFFECT_CLASSES' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(92,70): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(93,45): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(99,67): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(100,43): error TS7005: Variable 'EFFECT_CLASSES' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 64
            },
            "start": {
              "column": 28,
              "line": 64
            }
          }
        },
        {
          "id": "321",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 64
            },
            "start": {
              "column": 29,
              "line": 64
            }
          }
        },
        {
          "id": "322",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 64
            },
            "start": {
              "column": 47,
              "line": 64
            }
          }
        },
        {
          "id": "323",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 71
            },
            "start": {
              "column": 39,
              "line": 66
            }
          }
        },
        {
          "id": "324",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 67
            },
            "start": {
              "column": 42,
              "line": 67
            }
          }
        },
        {
          "id": "325",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 68
            },
            "start": {
              "column": 43,
              "line": 68
            }
          }
        },
        {
          "id": "326",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 69
            },
            "start": {
              "column": 41,
              "line": 69
            }
          }
        },
        {
          "id": "327",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 70
            },
            "start": {
              "column": 30,
              "line": 70
            }
          }
        },
        {
          "id": "328",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 89
            },
            "start": {
              "column": 37,
              "line": 73
            }
          }
        },
        {
          "id": "329",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 75
            },
            "start": {
              "column": 11,
              "line": 75
            }
          }
        },
        {
          "id": "330",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 75
            },
            "start": {
              "column": 11,
              "line": 75
            }
          }
        },
        {
          "id": "331",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 84
            },
            "start": {
              "column": 26,
              "line": 75
            }
          }
        },
        {
          "id": "332",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 76
            },
            "start": {
              "column": 43,
              "line": 76
            }
          }
        },
        {
          "id": "333",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 77
            },
            "start": {
              "column": 13,
              "line": 77
            }
          }
        },
        {
          "id": "334",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 77
            },
            "start": {
              "column": 13,
              "line": 77
            }
          }
        },
        {
          "id": "335",
          "mutatorName": "EqualityOperator",
          "replacement": "direction !== 'rtl'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 77
            },
            "start": {
              "column": 13,
              "line": 77
            }
          }
        },
        {
          "id": "336",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebar.tsx(77,13): error TS2367: This comparison appears to be unintentional because the types 'Direction' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 77
            },
            "start": {
              "column": 27,
              "line": 77
            }
          }
        },
        {
          "id": "337",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 80
            },
            "start": {
              "column": 34,
              "line": 77
            }
          }
        },
        {
          "id": "338",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 78
            },
            "start": {
              "column": 47,
              "line": 78
            }
          }
        },
        {
          "id": "339",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 100,
              "line": 78
            },
            "start": {
              "column": 96,
              "line": 78
            }
          }
        },
        {
          "id": "340",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 79
            },
            "start": {
              "column": 46,
              "line": 79
            }
          }
        },
        {
          "id": "341",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 83
            },
            "start": {
              "column": 16,
              "line": 80
            }
          }
        },
        {
          "id": "342",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 81
            },
            "start": {
              "column": 46,
              "line": 81
            }
          }
        },
        {
          "id": "343",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 99,
              "line": 81
            },
            "start": {
              "column": 95,
              "line": 81
            }
          }
        },
        {
          "id": "344",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 82
            },
            "start": {
              "column": 47,
              "line": 82
            }
          }
        },
        {
          "id": "345",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 87
            },
            "start": {
              "column": 14,
              "line": 84
            }
          }
        },
        {
          "id": "346",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 85
            },
            "start": {
              "column": 44,
              "line": 85
            }
          }
        },
        {
          "id": "347",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 86
            },
            "start": {
              "column": 43,
              "line": 86
            }
          }
        },
        {
          "id": "348",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 86
            },
            "start": {
              "column": 93,
              "line": 86
            }
          }
        },
        {
          "id": "349",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 88
            },
            "start": {
              "column": 30,
              "line": 88
            }
          }
        },
        {
          "id": "350",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 91
            },
            "start": {
              "column": 9,
              "line": 91
            }
          }
        },
        {
          "id": "351",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 91
            },
            "start": {
              "column": 9,
              "line": 91
            }
          }
        },
        {
          "id": "352",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 91
            },
            "start": {
              "column": 9,
              "line": 91
            }
          }
        },
        {
          "id": "353",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 97
            },
            "start": {
              "column": 23,
              "line": 91
            }
          }
        },
        {
          "id": "354",
          "mutatorName": "BooleanLiteral",
          "replacement": "wasCollapsed.current",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 92
            },
            "start": {
              "column": 11,
              "line": 92
            }
          }
        },
        {
          "id": "355",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 92
            },
            "start": {
              "column": 11,
              "line": 92
            }
          }
        },
        {
          "id": "356",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 92
            },
            "start": {
              "column": 11,
              "line": 92
            }
          }
        },
        {
          "id": "357",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 99
            },
            "start": {
              "column": 9,
              "line": 99
            }
          }
        },
        {
          "id": "358",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 99
            },
            "start": {
              "column": 9,
              "line": 99
            }
          }
        },
        {
          "id": "359",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 102
            },
            "start": {
              "column": 6,
              "line": 102
            }
          }
        },
        {
          "id": "360",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 130,
              "line": 107
            },
            "start": {
              "column": 20,
              "line": 107
            }
          }
        },
        {
          "id": "361",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 111
            },
            "start": {
              "column": 29,
              "line": 111
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { DashboardRoutesKeys } from '@/config/DashboardSidebar/utils/RoutesMapping';\nimport type { FunctionComponent, ReactElement, ReactNode } from 'react';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport { computeHTMLElementHeight, computeHTMLElementWidth, getDirection } from '@rtm/shared-lib/html';\nimport DASHBOARD_ROUTES, { DASHBOARD_ROUTES_TITLES } from '@/config/DashboardSidebar/routesImpl';\nimport DASHBOARD_ROUTES_SIDEBAR_COMPONENTS from '@/config/DashboardSidebar/utils/IconsMapping';\nimport SidebarButtonStyle from '@/components/config/styles/sidebar/SidebarButtonStyle';\nimport { getClientSideI18n, useCurrentLocale } from '@/i18n/client';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { useMediaQuery } from '@react-hook/media-query';\nimport { useEffect, useState, useRef } from 'react';\nimport { getBreakpoint, cn } from '@/lib/tailwind';\nimport { hrefMatchesPathname } from '@/lib/str';\nimport { usePathname } from 'next/navigation';\nimport ROUTES_ROOTS from '##/config/routes';\nimport Link from 'next/link';\n\nimport DashboardSidebarCollapseButton from './DashboardSidebarCollapseButton';\n\ninterface DashboardSidebarProps {}\n\nconst { isNotActiveClassList, isActiveClassList } = SidebarButtonStyle;\n\nfunction sidebarBtnsGenerator(currentPathname: AppPath): ReactNode[] {\n  const keys = Object.keys(DASHBOARD_ROUTES_SIDEBAR_COMPONENTS);\n  const lastKey = keys[keys.length - 1];\n  const sidebarBtnsSeparator = <hr className=\"m-auto my-2 hidden w-5/6 lg:block\" />;\n\n  const globalT = getClientSideI18n();\n  return keys.map((k): ReactElement => {\n    const k2 = k as DashboardRoutesKeys;\n    const [btnComponent, href, i18nPath] = [DASHBOARD_ROUTES_SIDEBAR_COMPONENTS[k2], DASHBOARD_ROUTES[k2], DASHBOARD_ROUTES_TITLES[k2]];\n    const title = globalT(i18nPath);\n\n    const sidebarButtonClassName = hrefMatchesPathname(href, currentPathname, ROUTES_ROOTS.DASHBOARD) ? isActiveClassList : isNotActiveClassList;\n\n    return (\n      <li key={`${k}-sidebar-btn-component`}>\n        <Link className={cn('flex w-fit max-w-full flex-col rounded-lg', sidebarButtonClassName)} title={title} href={href}>\n          <span className=\"sr-only\">{title}</span>\n          {btnComponent}\n        </Link>\n        {k !== lastKey && sidebarBtnsSeparator}\n      </li>\n    );\n  });\n}\n\nconst DashboardSidebar: FunctionComponent<DashboardSidebarProps> = () => {\n  const wasCollapsed = useRef<boolean>(false);\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(wasCollapsed.current);\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  const isLargeScreen = useMediaQuery(`(min-width: ${getBreakpoint('lg')}px)`);\n  const currentLocale = useCurrentLocale();\n  const currentPathname = usePathname();\n\n  useEffect(() => {\n    const sidebarInstance = getRefCurrentPtr(sidebarRef);\n    if (!sidebarInstance) return;\n\n    const EFFECT_CLASSES = ['transition-all', 'duration-300'];\n\n    function applyUncollapsedStyles() {\n      sidebarInstance.style.marginLeft = '0';\n      sidebarInstance.style.marginRight = '0';\n      sidebarInstance.style.marginTop = '0';\n      wasCollapsed.current = false;\n    }\n\n    function applyCollapsedStyles() {\n      const direction = getDirection();\n      if (isLargeScreen) {\n        sidebarInstance.style.marginTop = '0';\n        if (direction === 'rtl') {\n          sidebarInstance.style.marginRight = '-' + computeHTMLElementWidth(sidebarInstance) + 'px';\n          sidebarInstance.style.marginLeft = '0';\n        } else {\n          sidebarInstance.style.marginLeft = '-' + computeHTMLElementWidth(sidebarInstance) + 'px';\n          sidebarInstance.style.marginRight = '0';\n        }\n      } else {\n        sidebarInstance.style.marginLeft = '0';\n        sidebarInstance.style.marginTop = '-' + computeHTMLElementHeight(sidebarInstance) + 'px';\n      }\n      wasCollapsed.current = true;\n    }\n\n    if (!isCollapsed) {\n      if (!wasCollapsed.current) sidebarInstance.classList.remove(...EFFECT_CLASSES);\n      else sidebarInstance.classList.add(...EFFECT_CLASSES);\n\n      applyUncollapsedStyles();\n      return;\n    }\n\n    if (wasCollapsed.current) sidebarInstance.classList.remove(...EFFECT_CLASSES);\n    else sidebarInstance.classList.add(...EFFECT_CLASSES);\n    applyCollapsedStyles();\n  }, [isCollapsed, sidebarRef, isLargeScreen, currentLocale]);\n\n  return (\n    <>\n      <aside\n        className={'z-20 w-full justify-center border-t-[1px] border-muted-foreground bg-black dark:bg-card lg:w-fit lg:border-0'}\n        ref={sidebarRef}\n      >\n        <nav className=\"py-4 lg:overflow-y-auto lg:px-[22px]\">\n          <ul className={cn('flex flex-wrap justify-center gap-2 lg:block')} role=\"menu\">\n            {sidebarBtnsGenerator(currentPathname)}\n          </ul>\n        </nav>\n      </aside>\n      <DashboardSidebarCollapseButton setIsCollapsed={setIsCollapsed} isCollapsed={isCollapsed} />\n    </>\n  );\n};\n\nexport default DashboardSidebar;\n"
    },
    "src/components/layouts/dashboard/DashboardSidebarButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "362",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 13
            },
            "start": {
              "column": 20,
              "line": 13
            }
          }
        },
        {
          "id": "363",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 103,
              "line": 15
            }
          }
        },
        {
          "id": "364",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 17
            },
            "start": {
              "column": 16,
              "line": 17
            }
          }
        },
        {
          "id": "365",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 17
            },
            "start": {
              "column": 16,
              "line": 17
            }
          }
        },
        {
          "id": "366",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof pSize !== 'number'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 17
            },
            "start": {
              "column": 16,
              "line": 17
            }
          }
        },
        {
          "id": "367",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 17
            },
            "start": {
              "column": 33,
              "line": 17
            }
          }
        },
        {
          "id": "368",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 17
            },
            "start": {
              "column": 52,
              "line": 17
            }
          }
        },
        {
          "id": "369",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 17
            },
            "start": {
              "column": 52,
              "line": 17
            }
          }
        },
        {
          "id": "370",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof pSize !== 'string'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 17
            },
            "start": {
              "column": 52,
              "line": 17
            }
          }
        },
        {
          "id": "371",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 17
            },
            "start": {
              "column": 69,
              "line": 17
            }
          }
        },
        {
          "id": "372",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 18
            },
            "start": {
              "column": 34,
              "line": 18
            }
          }
        },
        {
          "id": "373",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 20
            },
            "start": {
              "column": 48,
              "line": 20
            }
          }
        },
        {
          "id": "374",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 20
            },
            "start": {
              "column": 48,
              "line": 20
            }
          }
        },
        {
          "id": "375",
          "mutatorName": "EqualityOperator",
          "replacement": "sizeInPx === null",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 20
            },
            "start": {
              "column": 48,
              "line": 20
            }
          }
        },
        {
          "id": "376",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 20
            },
            "start": {
              "column": 68,
              "line": 20
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { FunctionComponent, ComponentType } from 'react';\nimport type { IconBaseProps } from 'react-icons';\n\nimport SidebarButtonStyle from '@/components/config/styles/sidebar/SidebarButtonStyle';\n\ninterface DashboardSidebarButtonProps {\n  __SidebarIcon: ComponentType<IconBaseProps>;\n}\n\nconst { sidebarIconProps } = SidebarButtonStyle;\nconst ICON_PROPS = { ...sidebarIconProps };\n\nconst DashboardSidebarButton: FunctionComponent<DashboardSidebarButtonProps> = ({ __SidebarIcon }) => {\n  const pSize = ICON_PROPS.size;\n  const size = typeof pSize === 'number' ? pSize : typeof pSize === 'string' ? parseFloat(pSize) : null;\n  const sizeInPx = size ? size + 'px' : null;\n\n  return <__SidebarIcon {...ICON_PROPS} style={sizeInPx !== null ? { height: sizeInPx, width: sizeInPx } : undefined} />;\n};\n\nexport default DashboardSidebarButton;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "377",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(21,7): error TS2322: Type '({ setIsCollapsed, isCollapsed }: DashboardSidebarCollapseButtonProps) => void' is not assignable to type 'FunctionComponent<DashboardSidebarCollapseButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 133,
              "line": 21
            }
          }
        },
        {
          "id": "378",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 23
            },
            "start": {
              "column": 46,
              "line": 23
            }
          }
        },
        {
          "id": "379",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 231,
              "line": 25
            },
            "start": {
              "column": 5,
              "line": 25
            }
          }
        },
        {
          "id": "380",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(27,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"manual-SEO\" | \"auth\" | \"_infos\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 9 more ... | \"blog-categories.testing.fake-subcategory\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 27
            },
            "start": {
              "column": 33,
              "line": 27
            }
          }
        },
        {
          "id": "381",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(28,43): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n  Overload 2 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 28
            },
            "start": {
              "column": 43,
              "line": 28
            }
          }
        },
        {
          "id": "382",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(28,69): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n  Overload 2 of 2, '(key: \"hide-sidebar\" | \"show-sidebar\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"hide-sidebar\" | \"show-sidebar\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 28
            },
            "start": {
              "column": 69,
              "line": 28
            }
          }
        },
        {
          "id": "383",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(34,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property ''aria-expanded'' are incompatible.\n      Type '\"\" | \"true\"' is not assignable to type 'Booleanish | undefined'.\n        Type '\"\"' is not assignable to type 'Booleanish | undefined'.\nsrc/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(38,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"true\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property ''aria-expanded'' are incompatible.\n      Type '\"\" | \"true\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 29
            },
            "start": {
              "column": 38,
              "line": 29
            }
          }
        },
        {
          "id": "384",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(34,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property ''aria-expanded'' are incompatible.\n      Type '\"\" | \"false\"' is not assignable to type 'Booleanish | undefined'.\n        Type '\"\"' is not assignable to type 'Booleanish | undefined'.\nsrc/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(38,8): error TS2322: Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>'.\n  Type '{ children: Element; className: string; \"aria-expanded\": \"\" | \"false\"; \"aria-label\": string; type: \"button\"; }' is not assignable to type 'ButtonHTMLAttributes<HTMLButtonElement>'.\n    Types of property ''aria-expanded'' are incompatible.\n      Type '\"\" | \"false\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 29
            },
            "start": {
              "column": 48,
              "line": 29
            }
          }
        },
        {
          "id": "385",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(34,131): error TS2322: Type '\"\"' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.\nsrc/components/layouts/dashboard/DashboardSidebarCollapseButton.tsx(38,124): error TS2322: Type '\"\"' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 30
            },
            "start": {
              "column": 16,
              "line": 30
            }
          }
        },
        {
          "id": "386",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 100,
              "line": 33
            },
            "start": {
              "column": 66,
              "line": 33
            }
          }
        },
        {
          "id": "387",
          "mutatorName": "BooleanLiteral",
          "replacement": "isCollapsed",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 99,
              "line": 33
            },
            "start": {
              "column": 87,
              "line": 33
            }
          }
        },
        {
          "id": "388",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 34
            },
            "start": {
              "column": 58,
              "line": 34
            }
          }
        },
        {
          "id": "389",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 38
            },
            "start": {
              "column": 58,
              "line": 38
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport SidebarCollapseButtonIconStyle, { SIZE_PX_VALUE } from '@/components/config/styles/sidebar/SidebarCollapseButtonIconStyle';\nimport SidebarCollapseButtonWrapperStyle from '@/components/config/styles/sidebar/SidebarCollapseButtonWrapperStyle';\nimport { ArrowSmallRightIcon, ArrowSmallDownIcon } from '@heroicons/react/20/solid';\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\ninterface DashboardSidebarCollapseButtonProps {\n  setIsCollapsed: Function;\n  isCollapsed: boolean;\n}\n\nconst { isNotActiveClassList: btnIconIsNotActiveClassList, isActiveClassList: btnIconIsActiveClassList } = SidebarCollapseButtonIconStyle;\n\nconst { isNotActiveClassList: btnWrapperIsNotActiveClassList, isActiveClassList: btnWrapperIsActiveClassList } = SidebarCollapseButtonWrapperStyle;\n\nconst DashboardSidebarCollapseButton: FunctionComponent<DashboardSidebarCollapseButtonProps> = ({ setIsCollapsed, isCollapsed }) => {\n  const sidebarCollapseBtnIconClassList = isCollapsed ? btnIconIsActiveClassList : btnIconIsNotActiveClassList;\n  const sidebarCollapseBtnWrapperClassList = !isCollapsed ? btnWrapperIsActiveClassList : btnWrapperIsNotActiveClassList;\n  const sidebarCollapseBtnClassList =\n    'relative bottom-1 m-auto h-8 w-12 rounded-full rounded-b-full rounded-t-none bg-black dark:bg-card lg:bottom-0 lg:right-2 lg:w-8 lg:rounded-l-none lg:rounded-r-full rtl:lg:-right-2 rtl:lg:rounded-l-full rtl:lg:rounded-r-none';\n\n  const scopedT = useScopedI18n(`${i18ns.dashboard}.sr-only`);\n  const ariaLabel = isCollapsed ? scopedT('show-sidebar') : scopedT('hide-sidebar');\n  const ariaExpanded = isCollapsed ? 'false' : 'true';\n  const type = 'button';\n\n  return (\n    <div className={sidebarCollapseBtnWrapperClassList} onClick={() => setIsCollapsed(!isCollapsed)}>\n      <button className={cn(sidebarCollapseBtnClassList, 'hidden lg:inline')} aria-expanded={ariaExpanded} aria-label={ariaLabel} type={type}>\n        <ArrowSmallRightIcon className={sidebarCollapseBtnIconClassList} height={SIZE_PX_VALUE} width={SIZE_PX_VALUE} />\n      </button>\n\n      <button className={cn(sidebarCollapseBtnClassList, 'lg:hidden')} aria-expanded={ariaExpanded} aria-label={ariaLabel} type={type}>\n        <ArrowSmallDownIcon className={sidebarCollapseBtnIconClassList} height={SIZE_PX_VALUE} width={SIZE_PX_VALUE} />\n      </button>\n    </div>\n  );\n};\n\nexport default DashboardSidebarCollapseButton;\n"
    },
    "src/components/layouts/navbar/NavbarButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "390",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(28,7): error TS2322: Type '({ onClick: onClickFun, i18nTitle, icon }: Pick<NavbarButtonProps, \"i18nTitle\" | \"onClick\"> & OptionalIcon) => void' is not assignable to type 'FunctionComponent<Pick<NavbarButtonProps, \"i18nTitle\" | \"onClick\"> & OptionalIcon>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 150,
              "line": 28
            }
          }
        },
        {
          "id": "391",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(33,109): error TS2722: Cannot invoke an object which is possibly 'undefined'.\nsrc/components/layouts/navbar/NavbarButton.tsx(38,90): error TS2722: Cannot invoke an object which is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "392",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(33,109): error TS2722: Cannot invoke an object which is possibly 'undefined'.\nsrc/components/layouts/navbar/NavbarButton.tsx(38,90): error TS2722: Cannot invoke an object which is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "393",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 42
            },
            "start": {
              "column": 19,
              "line": 31
            }
          }
        },
        {
          "id": "394",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 33
            },
            "start": {
              "column": 51,
              "line": 33
            }
          }
        },
        {
          "id": "395",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 33
            },
            "start": {
              "column": 98,
              "line": 33
            }
          }
        },
        {
          "id": "396",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 38
            },
            "start": {
              "column": 51,
              "line": 38
            }
          }
        },
        {
          "id": "397",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 38
            },
            "start": {
              "column": 79,
              "line": 38
            }
          }
        },
        {
          "id": "398",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 45
            },
            "start": {
              "column": 49,
              "line": 45
            }
          }
        },
        {
          "id": "399",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 50
            },
            "start": {
              "column": 49,
              "line": 50
            }
          }
        },
        {
          "id": "400",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(54,7): error TS2322: Type '({ path: href, i18nTitle, icon }: Pick<AtomicNavDataEntity, \"i18nTitle\" | \"path\"> & OptionalIcon) => void' is not assignable to type 'FunctionComponent<Pick<AtomicNavDataEntity, \"i18nTitle\" | \"path\"> & OptionalIcon>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 73
            },
            "start": {
              "column": 142,
              "line": 54
            }
          }
        },
        {
          "id": "401",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 11,
              "line": 60
            },
            "start": {
              "column": 7,
              "line": 60
            }
          }
        },
        {
          "id": "402",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 11,
              "line": 60
            },
            "start": {
              "column": 7,
              "line": 60
            }
          }
        },
        {
          "id": "403",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 67
            },
            "start": {
              "column": 13,
              "line": 60
            }
          }
        },
        {
          "id": "404",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 62
            },
            "start": {
              "column": 38,
              "line": 62
            }
          }
        },
        {
          "id": "405",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(75,7): error TS2322: Type '({ i18nTitle, onClick, path, icon }: NavbarButtonProps) => void' is not assignable to type 'FunctionComponent<NavbarButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 89
            },
            "start": {
              "column": 100,
              "line": 75
            }
          }
        },
        {
          "id": "406",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(76,9): error TS2322: Type '() => void' is not assignable to type '() => ReactNode'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 80
            },
            "start": {
              "column": 66,
              "line": 76
            }
          }
        },
        {
          "id": "407",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(78,63): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 77
            },
            "start": {
              "column": 9,
              "line": 77
            }
          }
        },
        {
          "id": "408",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 77
            },
            "start": {
              "column": 9,
              "line": 77
            }
          }
        },
        {
          "id": "409",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(78,63): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 78
            },
            "start": {
              "column": 14,
              "line": 78
            }
          }
        },
        {
          "id": "410",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(78,64): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 78
            },
            "start": {
              "column": 14,
              "line": 78
            }
          }
        },
        {
          "id": "411",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(82,9): error TS2322: Type '() => void' is not assignable to type '() => ReactNode'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 86
            },
            "start": {
              "column": 63,
              "line": 82
            }
          }
        },
        {
          "id": "412",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(84,75): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 83
            },
            "start": {
              "column": 9,
              "line": 83
            }
          }
        },
        {
          "id": "413",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 83
            },
            "start": {
              "column": 9,
              "line": 83
            }
          }
        },
        {
          "id": "414",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(84,75): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 84
            },
            "start": {
              "column": 14,
              "line": 84
            }
          }
        },
        {
          "id": "415",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/layouts/navbar/NavbarButton.tsx(84,76): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 84
            },
            "start": {
              "column": 14,
              "line": 84
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent, MouseEventHandler, ReactNode } from 'react';\nimport type { AtomicNavDataEntity } from '@/types/NavData';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport NavbarButtonStyle from '@/components/config/styles/navbar/NavbarButtonStyle';\nimport { getLinkTarget } from '@rtm/shared-lib/react';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { Button } from '@/components/ui/Button';\nimport { hrefMatchesPathname } from '@/lib/str';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\ntype OptionalIcon = { icon?: ReactNode };\ntype OptionalPath = { path?: AppPath };\ntype OptionalOnClick = { onClick?: MouseEventHandler<HTMLButtonElement> };\n\ntype RequiredPath = Required<OptionalPath>;\ntype RequiredOnClick = Required<OptionalOnClick>;\n\ninterface INavbarButtonProps extends Pick<AtomicNavDataEntity, 'i18nTitle'>, OptionalPath, OptionalOnClick, OptionalIcon {}\ntype NavbarButtonProps = INavbarButtonProps & (RequiredOnClick | RequiredPath);\n\nconst { isNotActiveClassList, isActiveClassList } = NavbarButtonStyle;\n\nconst ButtonAsIs: FunctionComponent<Pick<NavbarButtonProps, 'i18nTitle' | 'onClick'> & OptionalIcon> = ({ onClick: onClickFun, i18nTitle, icon }) => {\n  const globalT = getClientSideI18n();\n\n  if (onClickFun) {\n    return icon ? (\n      <Button className={cn(isNotActiveClassList, 'items-center gap-2 bg-transparent')} onClick={(event) => onClickFun(event)}>\n        {icon}\n        {globalT(i18nTitle)}\n      </Button>\n    ) : (\n      <Button className={cn(isNotActiveClassList, 'bg-transparent')} onClick={(event) => onClickFun(event)}>\n        {globalT(i18nTitle)}\n      </Button>\n    );\n  }\n\n  return icon ? (\n    <Button className={cn(isNotActiveClassList, 'bg-transparent')}>\n      {icon}\n      {globalT(i18nTitle)}\n    </Button>\n  ) : (\n    <Button className={cn(isNotActiveClassList, 'bg-transparent')}>{globalT(i18nTitle)}</Button>\n  );\n};\n\nconst ButtonAsLink: FunctionComponent<Pick<AtomicNavDataEntity, 'i18nTitle' | 'path'> & OptionalIcon> = ({ path: href, i18nTitle, icon }) => {\n  const globalT = getClientSideI18n();\n  const currentPathname = usePathname();\n  const className = hrefMatchesPathname(href, currentPathname) ? isActiveClassList : isNotActiveClassList;\n  const target = getLinkTarget(href);\n\n  if (icon) {\n    return (\n      <Link className={cn(className, 'flex items-center')} target={target} href={href}>\n        {icon}\n        {globalT(i18nTitle)}\n      </Link>\n    );\n  }\n  return (\n    <Link className={className} target={target} href={href}>\n      {globalT(i18nTitle)}\n    </Link>\n  );\n};\n\nconst NavbarButton: FunctionComponent<NavbarButtonProps> = ({ i18nTitle, onClick, path, icon }) => {\n  const generateNavbarButtonWithoutIcon: () => ReactNode = () => {\n    if (onClick) return <ButtonAsIs i18nTitle={i18nTitle} onClick={onClick} />;\n    else if (path) return <ButtonAsLink i18nTitle={i18nTitle} path={path} />;\n    return null;\n  };\n\n  const generateNavbarButtonWithIcon: () => ReactNode = () => {\n    if (onClick) return <ButtonAsIs i18nTitle={i18nTitle} onClick={onClick} icon={icon} />;\n    else if (path) return <ButtonAsLink i18nTitle={i18nTitle} icon={icon} path={path} />;\n    return null;\n  };\n\n  return icon ? generateNavbarButtonWithIcon() : generateNavbarButtonWithoutIcon();\n};\n\nexport default NavbarButton;\n"
    },
    "src/components/layouts/navbar/NavbarDropdown.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "416",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(60,47): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 110,
              "line": 29
            }
          }
        },
        {
          "id": "417",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(64,47): error TS2322: Type 'void[]' is not assignable to type 'ReactNode'.\n  Type 'void[]' is not assignable to type 'Iterable<ReactNode>'.\n    The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n      Type 'IteratorResult<void, any>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n        Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n          Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorYieldResult<ReactNode>'.\n            Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 51
            },
            "start": {
              "column": 62,
              "line": 32
            }
          }
        },
        {
          "id": "418",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 98,
              "line": 36
            },
            "start": {
              "column": 95,
              "line": 36
            }
          }
        },
        {
          "id": "419",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 41
            },
            "start": {
              "column": 14,
              "line": 41
            }
          }
        },
        {
          "id": "420",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 42
            },
            "start": {
              "column": 16,
              "line": 42
            }
          }
        },
        {
          "id": "421",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(56,7): error TS2322: Type '({ embeddedEntities, path: href, i18nTitle }: NavbarButtonProps) => void' is not assignable to type 'FunctionComponent<NavbarButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 86
            },
            "start": {
              "column": 111,
              "line": 56
            }
          }
        },
        {
          "id": "422",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 59
            },
            "start": {
              "column": 39,
              "line": 59
            }
          }
        },
        {
          "id": "423",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarDropdown.tsx(59,68): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"md\" | \"sm\" | \"lg\" | \"2xl\" | \"xl\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 59
            },
            "start": {
              "column": 68,
              "line": 59
            }
          }
        },
        {
          "id": "424",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 64
            },
            "start": {
              "column": 53,
              "line": 64
            }
          }
        },
        {
          "id": "425",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 67
            },
            "start": {
              "column": 19,
              "line": 65
            }
          }
        },
        {
          "id": "426",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLargeScreen",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "427",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "428",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "429",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 66
            },
            "start": {
              "column": 37,
              "line": 66
            }
          }
        },
        {
          "id": "430",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 67
            },
            "start": {
              "column": 6,
              "line": 67
            }
          }
        },
        {
          "id": "431",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 70
            },
            "start": {
              "column": 5,
              "line": 70
            }
          }
        },
        {
          "id": "432",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 70
            },
            "start": {
              "column": 5,
              "line": 70
            }
          }
        },
        {
          "id": "433",
          "mutatorName": "LogicalOperator",
          "replacement": "hrefMatchesPathname(href, currentPathname) && isOpened",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 70
            },
            "start": {
              "column": 5,
              "line": 70
            }
          }
        },
        {
          "id": "434",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 73
            },
            "start": {
              "column": 24,
              "line": 73
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { NavbarDropdownElement, EmbeddedEntities } from '@/types/NavData';\nimport type { FunctionComponent, RefObject } from 'react';\n\nimport NavbarDropdownMenuButtonStyle, {\n  NAVBAR_DROPDOWN_MENU_INNER_BUTTONS_CLASSLIST\n} from '@/components/config/styles/navbar/NavbarDropdownMenuButtonStyle';\nimport { DropdownMenuContent, DropdownMenuTrigger, DropdownMenuItem, DropdownMenu } from '@/components/ui/DropdownMenu';\nimport NavbarDropdownButtonIconStyle from '@/components/config/styles/navbar/NavbarDropdownButtonIconStyle';\nimport { getRefCurrentPtr, getLinkTarget } from '@rtm/shared-lib/react';\nimport { ChevronDownIcon } from '@heroicons/react/20/solid';\nimport { useMediaQuery } from '@react-hook/media-query';\nimport { useEffect, useState, useRef } from 'react';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { hrefMatchesPathname } from '@/lib/str';\nimport { getBreakpoint } from '@/lib/tailwind';\nimport { usePathname } from 'next/navigation';\nimport Link from 'next/link';\n\ninterface NavbarButtonProps extends NavbarDropdownElement {}\n\nconst { isNotActiveClassList: navbarDropdownIsNotActiveClassList, isActiveClassList: navbarDropdownIsActiveClassList } =\n  NavbarDropdownMenuButtonStyle;\n\nconst { isNotActiveClassList: navbarDropdownBtnIconIsNotActiveClassList, isActiveClassList: navbarDropdownBtnIconIsActiveClassList } =\n  NavbarDropdownButtonIconStyle;\n\nconst menuItemsGenerator = (embeddedEntities: EmbeddedEntities, triggerRef: RefObject<HTMLButtonElement>) => {\n  const globalT = getClientSideI18n();\n\n  return embeddedEntities.map(({ path: href, i18nTitle }) => {\n    const title = globalT(i18nTitle);\n    const target = getLinkTarget(href);\n    const triggerRefInstance = getRefCurrentPtr(triggerRef);\n    const minWidth = triggerRefInstance ? window.getComputedStyle(triggerRefInstance).width : '0';\n\n    return (\n      <DropdownMenuItem\n        className=\"p-0 dark:bg-opacity-20 dark:text-muted-foreground dark:hover:text-primary-foreground\"\n        key={`${href}-${title}-navbar-menu-item`}\n        style={{ minWidth }}\n        textValue={title}\n        asChild\n      >\n        <Link className={NAVBAR_DROPDOWN_MENU_INNER_BUTTONS_CLASSLIST} target={target} title={title} href={href}>\n          {title}\n        </Link>\n      </DropdownMenuItem>\n    );\n  });\n};\n\n// {ToDo} Use Navigation Menu instead of this.\n// https://github.com/radix-ui/themes/discussions/139\nconst NavbarDropdown: FunctionComponent<NavbarButtonProps> = ({ embeddedEntities, path: href, i18nTitle }) => {\n  const currentPathname = usePathname();\n  const globalT = getClientSideI18n();\n  const isLargeScreen = useMediaQuery(`(min-width: ${getBreakpoint('lg')}px)`);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n\n  const title = globalT(i18nTitle);\n\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  useEffect(() => {\n    if (!isLargeScreen) setIsOpened(false);\n  }, [isLargeScreen]);\n\n  const navbarDropdownClassName =\n    hrefMatchesPathname(href, currentPathname) || isOpened ? navbarDropdownIsActiveClassList : navbarDropdownIsNotActiveClassList;\n  const navbarDropdownBtnClassName = isOpened ? navbarDropdownBtnIconIsActiveClassList : navbarDropdownBtnIconIsNotActiveClassList;\n\n  const onOpenChange = (opened: boolean) => setIsOpened(opened);\n\n  return (\n    <DropdownMenu withDeepResetOnLgBreakpointEvents onOpenChange={onOpenChange} open={isOpened}>\n      <DropdownMenuTrigger ref={triggerRef} asChild>\n        <button className={navbarDropdownClassName}>\n          {title}\n          <ChevronDownIcon className={navbarDropdownBtnClassName} aria-hidden=\"true\" />\n        </button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent aria-label={title}>{menuItemsGenerator(embeddedEntities, triggerRef)}</DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default NavbarDropdown;\n"
    },
    "src/components/layouts/navbar/NavbarLanguageMenu.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "435",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(37,33): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 34
            },
            "start": {
              "column": 32,
              "line": 17
            }
          }
        },
        {
          "id": "436",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 17,
              "line": 18
            }
          }
        },
        {
          "id": "437",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 23
            },
            "start": {
              "column": 11,
              "line": 23
            }
          }
        },
        {
          "id": "438",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "439",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "440",
          "mutatorName": "EqualityOperator",
          "replacement": "currentLocale !== language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "441",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 119,
              "line": 25
            },
            "start": {
              "column": 50,
              "line": 25
            }
          }
        },
        {
          "id": "442",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 26
            },
            "start": {
              "column": 54,
              "line": 26
            }
          }
        },
        {
          "id": "443",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        },
        {
          "id": "444",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        },
        {
          "id": "445",
          "mutatorName": "EqualityOperator",
          "replacement": "language === currentLocale",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        },
        {
          "id": "446",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 28
            },
            "start": {
              "column": 47,
              "line": 28
            }
          }
        },
        {
          "id": "447",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(36,7): error TS2322: Type '({ isMobile }: NavbarLanguageMenuProps) => void' is not assignable to type 'FunctionComponent<NavbarLanguageMenuProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 58
            },
            "start": {
              "column": 90,
              "line": 36
            }
          }
        },
        {
          "id": "448",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(39,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"manual-SEO\" | \"auth\" | \"_infos\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 9 more ... | \"blog-categories.testing.fake-subcategory\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 39
            },
            "start": {
              "column": 33,
              "line": 39
            }
          }
        },
        {
          "id": "449",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 40
            },
            "start": {
              "column": 45,
              "line": 40
            }
          }
        },
        {
          "id": "450",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 41
            },
            "start": {
              "column": 24,
              "line": 41
            }
          }
        },
        {
          "id": "451",
          "mutatorName": "BooleanLiteral",
          "replacement": "open",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 45
            },
            "start": {
              "column": 40,
              "line": 45
            }
          }
        },
        {
          "id": "452",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(45,56): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 45
            },
            "start": {
              "column": 56,
              "line": 45
            }
          }
        },
        {
          "id": "453",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(45,97): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 127,
              "line": 45
            },
            "start": {
              "column": 97,
              "line": 45
            }
          }
        },
        {
          "id": "454",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 121,
              "line": 49
            },
            "start": {
              "column": 23,
              "line": 49
            }
          }
        },
        {
          "id": "455",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 51
            },
            "start": {
              "column": 123,
              "line": 49
            }
          }
        },
        {
          "id": "456",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMobile",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 50
            },
            "start": {
              "column": 29,
              "line": 50
            }
          }
        },
        {
          "id": "457",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLanguageMenu.tsx(52,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 52
            },
            "start": {
              "column": 29,
              "line": 52
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { ChangeLocaleFun, LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { WithIsMobile } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { DropdownMenuContent, DropdownMenuTrigger, DropdownMenuItem, DropdownMenu } from '@/components/ui/DropdownMenu';\nimport { useCurrentLocale, useChangeLocale, useScopedI18n } from '@/i18n/client';\nimport localesLabels, { localesEmojis } from '@/i18n/localesLabels';\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { LANGUAGES, i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport { useState } from 'react';\n\ninterface NavbarLanguageMenuProps extends WithIsMobile {}\n\nconst dropdownItemsGenerator = (changeLocale: ChangeLocaleFun, currentLocale: LanguageFlag) =>\n  LANGUAGES.map((language) => (\n    <DropdownMenuItem className=\"relative my-1 px-3 py-2\" textValue={localesLabels[language]} key={language} asChild>\n      <button\n        className={cn(\n          BUTTON_CONFIG.CLASSNAME,\n          'w-full',\n          currentLocale === language\n            ? cn(BUTTON_CONFIG.ACTIVE_CLASSNAME, 'hover:bg-primary hover:text-white focus:bg-primary focus:text-white')\n            : cn(BUTTON_CONFIG.NOT_ACTIVE_CLASSNAME, 'text-black')\n        )}\n        onClick={language !== currentLocale ? () => changeLocale(language) : undefined}\n      >\n        <span className=\"absolute ltr:right-2 rtl:left-2\">{localesEmojis[language]}</span>\n        <span>{localesLabels[language]}</span>\n      </button>\n    </DropdownMenuItem>\n  ));\n\nconst NavbarLanguageMenu: FunctionComponent<NavbarLanguageMenuProps> = ({ isMobile }) => {\n  const changeLocale = useChangeLocale();\n  const currentLocale = useCurrentLocale();\n  const scopedT = useScopedI18n(`${i18ns.navbar}.sr-only`);\n  const [open, setOpen] = useState<boolean>(false);\n  const onOpenChange = (opened: boolean) => setOpen(opened);\n\n  return (\n    <DropdownMenu withDeepResetOnLgBreakpointEvents onOpenChange={onOpenChange} open={open}>\n      <DropdownMenuTrigger aria-label={!open ? scopedT('open-language-switcher-menu') : scopedT('close-language-switcher-menu')} asChild>\n        <button className=\"h-full bg-transparent text-primary-foreground\">{localesEmojis[currentLocale]}</button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className={cn('min-w-[125px] dark:border-card lg:relative ltr:lg:right-10 rtl:lg:left-10 lg:dark:border-inherit', {\n          'relative top-1': !isMobile\n        })}\n        aria-label={scopedT('language-switcher-menu')}\n      >\n        {dropdownItemsGenerator(changeLocale, currentLocale)}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default NavbarLanguageMenu;\n"
    },
    "src/components/layouts/navbar/NavbarLoginButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "458",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 47,
              "line": 29
            }
          }
        },
        {
          "id": "459",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "460",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "461",
          "mutatorName": "MethodExpression",
          "replacement": "getPathnameWithoutI18nFlag(currentUrl).endsWith(ROUTES_ROOTS.DASHBOARD)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "462",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 82,
              "line": 30
            }
          }
        },
        {
          "id": "463",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 31
            },
            "start": {
              "column": 13,
              "line": 31
            }
          }
        },
        {
          "id": "464",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(37,7): error TS2322: Type '({ currentPathname, session }: NavbarLoginButtonMobileProps) => void' is not assignable to type 'FunctionComponent<NavbarLoginButtonMobileProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 57
            },
            "start": {
              "column": 116,
              "line": 37
            }
          }
        },
        {
          "id": "465",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 39
            },
            "start": {
              "column": 21,
              "line": 39
            }
          }
        },
        {
          "id": "466",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "467",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "468",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 49
            },
            "start": {
              "column": 16,
              "line": 41
            }
          }
        },
        {
          "id": "469",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 43
            },
            "start": {
              "column": 24,
              "line": 43
            }
          }
        },
        {
          "id": "470",
          "mutatorName": "OptionalChaining",
          "replacement": "session.user",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 44
            },
            "start": {
              "column": 74,
              "line": 44
            }
          }
        },
        {
          "id": "471",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(46,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"signup\" | \"logout\" | \"login\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"signup\" | \"logout\" | \"login\"'.\n  Overload 2 of 2, '(key: \"signup\" | \"logout\" | \"login\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"signup\" | \"logout\" | \"login\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 46
            },
            "start": {
              "column": 44,
              "line": 46
            }
          }
        },
        {
          "id": "472",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 86,
              "line": 52
            },
            "start": {
              "column": 22,
              "line": 52
            }
          }
        },
        {
          "id": "473",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 52
            },
            "start": {
              "column": 35,
              "line": 52
            }
          }
        },
        {
          "id": "474",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 52
            },
            "start": {
              "column": 46,
              "line": 52
            }
          }
        },
        {
          "id": "475",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(54,42): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"signup\" | \"logout\" | \"login\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"signup\" | \"logout\" | \"login\"'.\n  Overload 2 of 2, '(key: \"signup\" | \"logout\" | \"login\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"signup\" | \"logout\" | \"login\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 54
            },
            "start": {
              "column": 42,
              "line": 54
            }
          }
        },
        {
          "id": "476",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(59,7): error TS2322: Type '({ isMobile }: NavbarLoginButtonProps) => void' is not assignable to type 'FunctionComponent<NavbarLoginButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 76
            },
            "start": {
              "column": 88,
              "line": 59
            }
          }
        },
        {
          "id": "477",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 64
            },
            "start": {
              "column": 7,
              "line": 64
            }
          }
        },
        {
          "id": "478",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 64
            },
            "start": {
              "column": 7,
              "line": 64
            }
          }
        },
        {
          "id": "479",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 66
            },
            "start": {
              "column": 7,
              "line": 66
            }
          }
        },
        {
          "id": "480",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 66
            },
            "start": {
              "column": 7,
              "line": 66
            }
          }
        },
        {
          "id": "481",
          "mutatorName": "OptionalChaining",
          "replacement": "session.user",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 69
            },
            "start": {
              "column": 57,
              "line": 69
            }
          }
        },
        {
          "id": "482",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 70
            },
            "start": {
              "column": 18,
              "line": 70
            }
          }
        },
        {
          "id": "483",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(71,9): error TS2322: Type '\"\"' is not assignable to type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 71
            },
            "start": {
              "column": 20,
              "line": 71
            }
          }
        },
        {
          "id": "484",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 97,
              "line": 75
            },
            "start": {
              "column": 33,
              "line": 75
            }
          }
        },
        {
          "id": "485",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 75
            },
            "start": {
              "column": 46,
              "line": 75
            }
          }
        },
        {
          "id": "486",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 75
            },
            "start": {
              "column": 57,
              "line": 75
            }
          }
        },
        {
          "id": "487",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarLoginButton.tsx(75,99): error TS2322: Type '\"\"' is not assignable to type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 75
            },
            "start": {
              "column": 110,
              "line": 75
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { WithIsMobile } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\nimport type { Session } from 'next-auth';\n\nimport NAVBAR_ICON_STYLE from '@/components/config/styles/navbar/NavbarIconStyle';\nimport { SignalSlashIcon, KeyIcon } from '@heroicons/react/20/solid';\nimport { useSession, signOut, signIn } from 'next-auth/react';\nimport { getPathnameWithoutI18nFlag } from '@/lib/i18n';\nimport UserImage from '@/components/ui/hoc/UserImage';\nimport { Button } from '@/components/ui/Button';\nimport { useScopedI18n } from '@/i18n/client';\nimport { usePathname } from 'next/navigation';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { i18ns } from '##/config/i18n';\n\nimport NavbarButton from './NavbarButton';\n\ninterface NavbarLoginButtonMobileProps {\n  session: Session | null;\n  currentPathname: string;\n}\n\ninterface NavbarLoginButtonProps extends WithIsMobile {}\n\nconst { SIZE_PX_VALUE: SIZE } = NAVBAR_ICON_STYLE;\n\nconst handleSignOut = (currentUrl: string) => {\n  if (getPathnameWithoutI18nFlag(currentUrl).startsWith(ROUTES_ROOTS.DASHBOARD)) {\n    signOut({ callbackUrl: ROUTES_ROOTS.WEBSITE });\n    return;\n  }\n  signOut();\n};\n\nconst NavbarLoginButtonMobile: FunctionComponent<NavbarLoginButtonMobileProps> = ({ currentPathname, session }) => {\n  const scopedT = useScopedI18n(i18ns.auth);\n  const className = 'h-full min-w-0 p-0';\n\n  if (session) {\n    return (\n      <Button onClick={() => handleSignOut(currentPathname)} withTransparentBackground className={className}>\n        <UserImage className=\"absolute rounded-full brightness-75\" user={session?.user} height={SIZE} width={SIZE} />\n        <SignalSlashIcon className=\"relative shadow-xl\" height={SIZE} width={SIZE} />\n        <span className=\"sr-only\">{scopedT('logout')}</span>\n      </Button>\n    );\n  }\n\n  return (\n    <Button onClick={() => signIn('discord', { callbackUrl: ROUTES_ROOTS.DASHBOARD })} withTransparentBackground className={className}>\n      <KeyIcon height={SIZE} width={SIZE} />\n      <span className=\"sr-only\">{scopedT('login')}</span>\n    </Button>\n  );\n};\n\nconst NavbarLoginButton: FunctionComponent<NavbarLoginButtonProps> = ({ isMobile }) => {\n  const { data: session } = useSession();\n  const currentPathname = usePathname();\n  const { auth } = i18ns;\n\n  if (isMobile) return <NavbarLoginButtonMobile currentPathname={currentPathname} session={session} />;\n\n  if (session)\n    return (\n      <NavbarButton\n        icon={<UserImage className=\"rounded-full\" user={session?.user} height={SIZE} width={SIZE} />}\n        onClick={() => handleSignOut(currentPathname)}\n        i18nTitle={`${auth}.logout`}\n      />\n    );\n\n  return <NavbarButton onClick={() => signIn('discord', { callbackUrl: ROUTES_ROOTS.DASHBOARD })} i18nTitle={`${auth}.login`} />;\n};\n\nexport default NavbarLoginButton;\n"
    },
    "src/components/layouts/navbar/NavbarThemeButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "488",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(20,7): error TS2322: Type '() => void' is not assignable to type 'FunctionComponent<NavbarLoginButtonProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 69
            },
            "start": {
              "column": 76,
              "line": 20
            }
          }
        },
        {
          "id": "489",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 22
            },
            "start": {
              "column": 55,
              "line": 22
            }
          }
        },
        {
          "id": "490",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 23
            },
            "start": {
              "column": 68,
              "line": 23
            }
          }
        },
        {
          "id": "491",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(25,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"manual-SEO\" | \"auth\" | \"_infos\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 9 more ... | \"blog-categories.testing.fake-subcategory\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 25
            },
            "start": {
              "column": 33,
              "line": 25
            }
          }
        },
        {
          "id": "492",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 27
            },
            "start": {
              "column": 13,
              "line": 27
            }
          }
        },
        {
          "id": "493",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 27
            },
            "start": {
              "column": 32,
              "line": 27
            }
          }
        },
        {
          "id": "494",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 27
            },
            "start": {
              "column": 39,
              "line": 27
            }
          }
        },
        {
          "id": "495",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 19,
              "line": 29
            }
          }
        },
        {
          "id": "496",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 30
            },
            "start": {
              "column": 25,
              "line": 30
            }
          }
        },
        {
          "id": "497",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 30
            },
            "start": {
              "column": 25,
              "line": 30
            }
          }
        },
        {
          "id": "498",
          "mutatorName": "EqualityOperator",
          "replacement": "theme === DEFAULT_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 30
            },
            "start": {
              "column": 25,
              "line": 30
            }
          }
        },
        {
          "id": "499",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 13,
              "line": 31
            },
            "start": {
              "column": 6,
              "line": 31
            }
          }
        },
        {
          "id": "500",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 45
            },
            "start": {
              "column": 11,
              "line": 34
            }
          }
        },
        {
          "id": "501",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 35
            },
            "start": {
              "column": 48,
              "line": 35
            }
          }
        },
        {
          "id": "502",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "503",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "504",
          "mutatorName": "EqualityOperator",
          "replacement": "theme !== DEFAULT_DARK_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 37
            }
          }
        },
        {
          "id": "505",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 39
            },
            "start": {
              "column": 13,
              "line": 39
            }
          }
        },
        {
          "id": "506",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 39
            },
            "start": {
              "column": 13,
              "line": 39
            }
          }
        },
        {
          "id": "507",
          "mutatorName": "EqualityOperator",
          "replacement": "theme !== DEFAULT_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 39
            },
            "start": {
              "column": 13,
              "line": 39
            }
          }
        },
        {
          "id": "508",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 7,
              "line": 47
            },
            "start": {
              "column": 5,
              "line": 47
            }
          }
        },
        {
          "id": "509",
          "mutatorName": "BooleanLiteral",
          "replacement": "isMounted",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "510",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "511",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 17,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "512",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 52
            },
            "start": {
              "column": 21,
              "line": 52
            }
          }
        },
        {
          "id": "513",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "514",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "515",
          "mutatorName": "LogicalOperator",
          "replacement": "changeThemeValue === DEFAULT_VARIANT && theme === DEFAULT_DARK_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "516",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "517",
          "mutatorName": "EqualityOperator",
          "replacement": "changeThemeValue !== DEFAULT_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 54
            }
          }
        },
        {
          "id": "518",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 54
            },
            "start": {
              "column": 47,
              "line": 54
            }
          }
        },
        {
          "id": "519",
          "mutatorName": "EqualityOperator",
          "replacement": "theme !== DEFAULT_DARK_VARIANT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 54
            },
            "start": {
              "column": 47,
              "line": 54
            }
          }
        },
        {
          "id": "520",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 61
            },
            "start": {
              "column": 79,
              "line": 54
            }
          }
        },
        {
          "id": "521",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 56
            },
            "start": {
              "column": 24,
              "line": 56
            }
          }
        },
        {
          "id": "522",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(58,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 58
            },
            "start": {
              "column": 44,
              "line": 58
            }
          }
        },
        {
          "id": "523",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 64
            },
            "start": {
              "column": 22,
              "line": 64
            }
          }
        },
        {
          "id": "524",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarThemeButton.tsx(66,42): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 66
            },
            "start": {
              "column": 42,
              "line": 66
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport NAVBAR_ICON_STYLE from '@/components/config/styles/navbar/NavbarIconStyle';\nimport { DEFAULT_DARK_VARIANT, DEFAULT_VARIANT } from '@/config/themes';\nimport { MoonIcon, SunIcon } from '@heroicons/react/20/solid';\nimport { Button } from '@/components/ui/Button';\nimport { useScopedI18n } from '@/i18n/client';\nimport { useEffect, useState } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { useTheme } from 'next-themes';\n\ninterface NavbarLoginButtonProps {}\n\nconst { SIZE_PX_VALUE: SIZE } = NAVBAR_ICON_STYLE;\n\n// https://github.com/pacocoursey/next-themes/issues/220#issuecomment-1818410035\n\nconst NavbarThemeButton: FunctionComponent<NavbarLoginButtonProps> = () => {\n  const { setTheme, theme } = useTheme();\n  const [isMounted, setIsMounted] = useState<boolean>(false);\n  const [changeThemeValue, setChangeThemeValue] = useState<string>('');\n\n  const scopedT = useScopedI18n(`${i18ns.navbar}.sr-only`);\n\n  useEffect(() => setIsMounted(true), []);\n\n  useEffect(() => {\n    setChangeThemeValue(theme !== DEFAULT_VARIANT ? DEFAULT_VARIANT : DEFAULT_DARK_VARIANT);\n  }, [theme]);\n\n  useEffect(\n    () => {\n      const checkDarkTheme = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const newValue =\n        theme === DEFAULT_DARK_VARIANT\n          ? DEFAULT_VARIANT\n          : theme === DEFAULT_VARIANT\n            ? DEFAULT_DARK_VARIANT\n            : checkDarkTheme\n              ? DEFAULT_VARIANT\n              : DEFAULT_DARK_VARIANT;\n      setChangeThemeValue(newValue);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  if (!isMounted) return null;\n\n  const className = 'h-full w-fit text-primary-foreground';\n\n  if (changeThemeValue === DEFAULT_VARIANT || theme === DEFAULT_DARK_VARIANT) {\n    return (\n      <Button onClick={() => setTheme(DEFAULT_VARIANT)} withTransparentBackground className={className} size=\"icon\">\n        <SunIcon height={SIZE} width={SIZE} />\n        <span className=\"sr-only\">{scopedT('switch-to-light-mode')}</span>\n      </Button>\n    );\n  }\n\n  return (\n    <Button onClick={() => setTheme(DEFAULT_DARK_VARIANT)} withTransparentBackground className={className} size=\"icon\">\n      <MoonIcon height={SIZE} width={SIZE} />\n      <span className=\"sr-only\">{scopedT('switch-to-dark-mode')}</span>\n    </Button>\n  );\n};\n\nexport default NavbarThemeButton;\n"
    },
    "src/components/layouts/navbar/NavbarToggle.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "525",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(50,14): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 52,
              "line": 19
            }
          }
        },
        {
          "id": "526",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(54,14): error TS2322: Type 'void[]' is not assignable to type 'ReactNode'.\n  Type 'void[]' is not assignable to type 'Iterable<ReactNode>'.\n    The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n      Type 'IteratorResult<void, any>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n        Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorResult<ReactNode, any>'.\n          Type 'IteratorYieldResult<void>' is not assignable to type 'IteratorYieldResult<ReactNode>'.\n            Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 37,
              "line": 22
            }
          }
        },
        {
          "id": "527",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 25
            },
            "start": {
              "column": 18,
              "line": 25
            }
          }
        },
        {
          "id": "528",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 26
            },
            "start": {
              "column": 14,
              "line": 26
            }
          }
        },
        {
          "id": "529",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(36,7): error TS2322: Type '({ items }: NavbarToggleProps) => void' is not assignable to type 'FunctionComponent<NavbarToggleProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 69
            },
            "start": {
              "column": 75,
              "line": 36
            }
          }
        },
        {
          "id": "530",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 37
            },
            "start": {
              "column": 53,
              "line": 37
            }
          }
        },
        {
          "id": "531",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 38
            },
            "start": {
              "column": 24,
              "line": 38
            }
          }
        },
        {
          "id": "532",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 78,
              "line": 40
            },
            "start": {
              "column": 39,
              "line": 40
            }
          }
        },
        {
          "id": "533",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(40,68): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"md\" | \"sm\" | \"lg\" | \"2xl\" | \"xl\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 40
            },
            "start": {
              "column": 68,
              "line": 40
            }
          }
        },
        {
          "id": "534",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(41,33): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"navbar\" | \"vocab\" | \"pages-titles\" | \"dashboard\" | \"manual-SEO\" | \"auth\" | \"_infos\" | \"blog-categories\" | \"navbar.sr-only\" | \"vocab.sr-only\" | \"dashboard.sr-only\" | \"dashboard.pages-titles\" | ... 9 more ... | \"blog-categories.testing.fake-subcategory\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 41
            },
            "start": {
              "column": 33,
              "line": 41
            }
          }
        },
        {
          "id": "535",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 49
            },
            "start": {
              "column": 19,
              "line": 45
            }
          }
        },
        {
          "id": "536",
          "mutatorName": "BooleanLiteral",
          "replacement": "togglerInstance",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(48,21): error TS2339: Property 'dataset' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 47
            },
            "start": {
              "column": 9,
              "line": 47
            }
          }
        },
        {
          "id": "537",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 47
            },
            "start": {
              "column": 9,
              "line": 47
            }
          }
        },
        {
          "id": "538",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 47
            },
            "start": {
              "column": 9,
              "line": 47
            }
          }
        },
        {
          "id": "539",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 48
            },
            "start": {
              "column": 47,
              "line": 48
            }
          }
        },
        {
          "id": "540",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 48
            },
            "start": {
              "column": 56,
              "line": 48
            }
          }
        },
        {
          "id": "541",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 49
            },
            "start": {
              "column": 6,
              "line": 49
            }
          }
        },
        {
          "id": "542",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 53
            },
            "start": {
              "column": 19,
              "line": 51
            }
          }
        },
        {
          "id": "543",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "544",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "545",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 52
            },
            "start": {
              "column": 36,
              "line": 52
            }
          }
        },
        {
          "id": "546",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 53
            },
            "start": {
              "column": 6,
              "line": 53
            }
          }
        },
        {
          "id": "547",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 577,
              "line": 56
            },
            "start": {
              "column": 5,
              "line": 56
            }
          }
        },
        {
          "id": "548",
          "mutatorName": "BooleanLiteral",
          "replacement": "isOpened",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 60
            },
            "start": {
              "column": 40,
              "line": 60
            }
          }
        },
        {
          "id": "549",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(60,60): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 60
            },
            "start": {
              "column": 60,
              "line": 60
            }
          }
        },
        {
          "id": "550",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(60,93): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 115,
              "line": 60
            },
            "start": {
              "column": 93,
              "line": 60
            }
          }
        },
        {
          "id": "551",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/layouts/navbar/NavbarToggle.tsx(64,123): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n  Overload 2 of 2, '(key: \"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"close-language-switcher-menu\" | \"open-language-switcher-menu\" | \"language-switcher-menu\" | \"close-hamburger-menu\" | \"switch-to-light-mode\" | \"open-hamburger-menu\" | \"switch-to-dark-mode\" | \"hamburger-menu\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 139,
              "line": 64
            },
            "start": {
              "column": 123,
              "line": 64
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { NavbarItems } from '@/types/NavData';\nimport type { FunctionComponent } from 'react';\n\nimport { DropdownMenuContent, DropdownMenuTrigger, DropdownMenuItem, DropdownMenu } from '@/components/ui/DropdownMenu';\nimport { preserveKeyboardNavigation } from '@rtm/shared-lib/html';\nimport { getClientSideI18n, useScopedI18n } from '@/i18n/client';\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { useMediaQuery } from '@react-hook/media-query';\nimport { useEffect, useState, useRef } from 'react';\nimport { getBreakpoint } from '@/lib/tailwind';\nimport { i18ns } from '##/config/i18n';\n\ninterface NavbarToggleProps {\n  items: NavbarItems;\n}\n\nconst menuItemsGenerator = (items: NavbarItems) => {\n  const globalT = getClientSideI18n();\n\n  return items.map((item, index) => {\n    return (\n      <DropdownMenuItem\n        onClick={(event) => preserveKeyboardNavigation(event.target)}\n        key={`navbar-hamburger-menu-item-${index}`}\n        textValue={globalT(item.i18nTitle)}\n        className=\"my-1 p-0\"\n      >\n        {item.jsx}\n      </DropdownMenuItem>\n    );\n  });\n};\n\nconst NavbarToggle: FunctionComponent<NavbarToggleProps> = ({ items }) => {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const onOpenChange = (opened: boolean) => setIsOpened(opened);\n\n  const isLargeScreen = useMediaQuery(`(min-width: ${getBreakpoint('lg')}px)`);\n  const scopedT = useScopedI18n(`${i18ns.navbar}.sr-only`);\n\n  const togglerRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    const togglerInstance = getRefCurrentPtr(togglerRef);\n    if (!togglerInstance) return;\n    togglerInstance.dataset.open = isOpened ? 'true' : 'false';\n  }, [togglerRef, isOpened]);\n\n  useEffect(() => {\n    if (isLargeScreen) setIsOpened(false);\n  }, [isLargeScreen]);\n\n  const className =\n    \"flex h-full w-full flex-col items-center justify-center text-white transition-opacity before:block before:h-px before:w-6 before:-translate-y-1 before:rotate-0 before:bg-current before:transition-transform before:duration-150 before:content-[''] after:block after:h-px after:w-6 after:translate-y-1 after:rotate-0 after:bg-current after:transition-transform after:duration-150 after:content-[''] data-[pressed=true]:opacity-70 data-[open=true]:before:translate-y-px data-[open=true]:before:rotate-45 data-[open=true]:after:translate-y-0 data-[open=true]:after:-rotate-45\";\n\n  return (\n    <DropdownMenu withDeepResetOnLgBreakpointEvents onOpenChange={onOpenChange} open={isOpened}>\n      <DropdownMenuTrigger aria-label={!isOpened ? scopedT('open-hamburger-menu') : scopedT('close-hamburger-menu')} asChild>\n        <button className={className} ref={togglerRef} />\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent className=\"relative min-w-[145px] ltr:right-4 rtl:left-4 dark:border-card\" aria-label={scopedT('hamburger-menu')}>\n        <nav>{menuItemsGenerator(items)}</nav>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default NavbarToggle;\n"
    },
    "src/components/pages/Homepage.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "552",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 30,
              "line": 15
            }
          }
        },
        {
          "id": "553",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 99,
              "line": 16
            },
            "start": {
              "column": 11,
              "line": 16
            }
          }
        },
        {
          "id": "554",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 18
            },
            "start": {
              "column": 43,
              "line": 18
            }
          }
        },
        {
          "id": "555",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 58,
              "line": 20
            }
          }
        },
        {
          "id": "556",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 22
            },
            "start": {
              "column": 23,
              "line": 22
            }
          }
        },
        {
          "id": "557",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 23
            },
            "start": {
              "column": 25,
              "line": 23
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { FunctionComponent, CSSProperties } from 'react';\n\nimport { useScopedI18n } from '@/i18n/client';\nimport { i18ns } from '##/config/i18n';\nimport Image from 'next/image';\n\nimport InviteTheBotButton from '../ui/cta/InviteTheBotButton';\n\ninterface HomepageProps {}\n\nconst style: CSSProperties = {\n  filter: 'invert(42%) sepia(7%) saturate(5518%) hue-rotate(189deg) brightness(92%) contrast(91%)'\n};\nconst [width, height]: [number, number] = [226, 69];\n\nconst Homepage: FunctionComponent<HomepageProps> = () => {\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const alt = scopedT('sr-only.brand-logo');\n  const brand = scopedT('brand');\n\n  return (\n    <div className=\"text-center\">\n      <Image src=\"/assets/rtm-txt-logo.svg\" className=\"m-auto\" height={height} style={style} width={width} alt={alt} priority />\n      <h1 className=\"mt-2\">{brand}</h1>\n      <InviteTheBotButton />\n    </div>\n  );\n};\n\nexport default Homepage;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/Notfound.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "558",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 64,
              "line": 10
            }
          }
        },
        {
          "id": "559",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 15
            },
            "start": {
              "column": 39,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { FunctionComponent } from 'react';\n\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\ninterface NotFoundProps {}\n\nconst NotFound: FunctionComponent<NotFoundProps> = async () => {\n  const globalT = await getServerSideI18n();\n\n  return (\n    <div className=\"flex h-full flex-1 items-center justify-center\">\n      <h1 className=\"m-auto\">{globalT(`${i18ns.vocab}.404`)}</h1>\n    </div>\n  );\n};\n\nexport default NotFound;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/blog/BlogPost.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "560",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 62,
              "line": 17
            }
          }
        },
        {
          "id": "561",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 18
            },
            "start": {
              "column": 26,
              "line": 18
            }
          }
        },
        {
          "id": "562",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(29,7): error TS2322: Type '({ className: classNameValue, params }: _BlogPostPageProps) => Promise<void>' is not assignable to type 'FunctionComponent<_BlogPostPageProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLikeOfReactNode'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = ReactNode, TResult2 = never>(onfulfilled?: ((value: ReactNode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 41
            },
            "start": {
              "column": 106,
              "line": 29
            }
          }
        },
        {
          "id": "563",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(30,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/pages/blog/BlogPost.tsx(30,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/pages/blog/BlogPost.tsx(30,33): error TS2493: Tuple type '[]' of length '0' has no element at index '2'.\nsrc/components/pages/blog/BlogPost.tsx(32,76): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/BlogPost.tsx(37,64): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/BlogPost.tsx(40,52): error TS2322: Type 'undefined' is not assignable to type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 141,
              "line": 30
            },
            "start": {
              "column": 45,
              "line": 30
            }
          }
        },
        {
          "id": "564",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidPair",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 33
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "565",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(42,72): error TS2322: Type 'MaybeNull<TBlogPost>' is not assignable to type 'TBlogPost'.\n  Type 'null' is not assignable to type 'TBlogPost'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 33
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "566",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 33
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "567",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(42,72): error TS2322: Type 'null' is not assignable to type 'TBlogPost'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "568",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(42,72): error TS2322: Type 'MaybeNull<TBlogPost>' is not assignable to type 'TBlogPost'.\n  Type 'null' is not assignable to type 'TBlogPost'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        },
        {
          "id": "569",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/BlogPost.tsx(42,72): error TS2322: Type 'MaybeNull<TBlogPost>' is not assignable to type 'TBlogPost'.\n  Type 'null' is not assignable to type 'TBlogPost'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 38
            }
          }
        }
      ],
      "source": "import type { BlogPostPageProps, BlogPostProps, TBlogPost } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { isValidBlogCategoryAndSubcategoryPair, getBlogPostUnstrict } from '@/lib/blog/api';\nimport BlogPostDate from '@/components/ui/blog/BlogPostDate';\nimport MDX from '@/components/layouts/blog/MdxComponent';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { notFound } from 'next/navigation';\nimport { cn } from '@/lib/tailwind';\n\ninterface BlogPostInnerProps extends BlogPostProps {}\ninterface _BlogPostPageProps extends BlogPostPageProps, Partial<WithClassname> {}\n\nconst BlogPostInner: FunctionComponent<BlogPostInnerProps> = ({ className: classNameValue, language, post }) => (\n  <section className={cn('mx-12 w-auto max-w-[730px]', classNameValue)}>\n    <div className=\"mb-4 text-center\">\n      <BlogPostDate language={language} post={post} />\n      <h1 className=\"mt-2\">{post.title}</h1>\n    </div>\n    <div className=\"max-w-full\">\n      <MDX code={post.body.code} />\n    </div>\n  </section>\n);\n\nconst BlogPost: FunctionComponent<_BlogPostPageProps> = async ({ className: classNameValue, params }) => {\n  const [category, subcategory, language] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[I18nTaxonomy.LANGUAGE]];\n\n  const isValidPair: boolean = await isValidBlogCategoryAndSubcategoryPair(category, subcategory, language);\n  if (!isValidPair) notFound();\n\n  const slug = params[BlogTaxonomy.SLUG];\n\n  const post: MaybeNull<TBlogPost> = await getBlogPostUnstrict(category, subcategory, slug, language);\n  if (!post) notFound();\n\n  return <BlogPostInner className={classNameValue} language={language} post={post} />;\n};\n\nexport default BlogPost;\n"
    },
    "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "570",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(16,7): error TS2322: Type '({ params }: CategoryRelatedSubcategoriesAndBlogPostsProps) => Promise<void>' is not assignable to type 'FunctionComponent<CategoryRelatedSubcategoriesAndBlogPostsProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLikeOfReactNode'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = ReactNode, TResult2 = never>(onfulfilled?: ((value: ReactNode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 51
            },
            "start": {
              "column": 138,
              "line": 16
            }
          }
        },
        {
          "id": "571",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(17,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(17,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(33,59): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(43,65): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(47,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"patch-notes-bis.discord-bot-bis.meta-description\" | \"patch-notes-bis.discord-bot-bis.title\" | \"patch-notes-bis.dashboard-bis.meta-description\" | \"patch-notes-bis.dashboard-bis.title\" | ... 11 more ... | \"testing._meta-description\"): string', gave the following error.\n    Argument of type '\"undefined._title\"' is not assignable to parameter of type '\"patch-notes-bis.discord-bot-bis.meta-description\" | \"patch-notes-bis.discord-bot-bis.title\" | \"patch-notes-bis.dashboard-bis.meta-description\" | \"patch-notes-bis.dashboard-bis.title\" | ... 11 more ... | \"testing._meta-description\"'.\n  Overload 2 of 2, '(key: \"patch-notes-bis.discord-bot-bis.meta-description\" | \"patch-notes-bis.discord-bot-bis.title\" | \"patch-notes-bis.dashboard-bis.meta-description\" | \"patch-notes-bis.dashboard-bis.title\" | ... 11 more ... | \"testing._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"undefined._title\"' is not assignable to parameter of type '\"patch-notes-bis.discord-bot-bis.meta-description\" | \"patch-notes-bis.discord-bot-bis.title\" | \"patch-notes-bis.dashboard-bis.meta-description\" | \"patch-notes-bis.dashboard-bis.title\" | ... 11 more ... | \"testing._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 17
            },
            "start": {
              "column": 32,
              "line": 17
            }
          }
        },
        {
          "id": "572",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(21,43): error TS2322: Type 'string' is not assignable to type 'TBlogPost'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 20
            },
            "start": {
              "column": 42,
              "line": 20
            }
          }
        },
        {
          "id": "573",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(34,3): error TS2322: Type 'TBlogPost[] | undefined' is not assignable to type 'TBlogPost[]'.\n  Type 'undefined' is not assignable to type 'TBlogPost[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(35,36): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 123,
              "line": 24
            },
            "start": {
              "column": 40,
              "line": 21
            }
          }
        },
        {
          "id": "574",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 123,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "575",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 24
            },
            "start": {
              "column": 32,
              "line": 24
            }
          }
        },
        {
          "id": "576",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 24
            },
            "start": {
              "column": 71,
              "line": 24
            }
          }
        },
        {
          "id": "577",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 24
            },
            "start": {
              "column": 71,
              "line": 24
            }
          }
        },
        {
          "id": "578",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostCategory === BlogConfig.TESTING_CATEGORY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 24
            },
            "start": {
              "column": 71,
              "line": 24
            }
          }
        },
        {
          "id": "579",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(32,3): error TS2322: Type 'TBlogPost[] | undefined' is not assignable to type 'TBlogPost[]'.\n  Type 'undefined' is not assignable to type 'TBlogPost[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(34,39): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 31
            },
            "start": {
              "column": 43,
              "line": 26
            }
          }
        },
        {
          "id": "580",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 28
            },
            "start": {
              "column": 9,
              "line": 28
            }
          }
        },
        {
          "id": "581",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 32,
              "line": 28
            }
          }
        },
        {
          "id": "582",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 65,
              "line": 28
            }
          }
        },
        {
          "id": "583",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 31
            },
            "start": {
              "column": 9,
              "line": 29
            }
          }
        },
        {
          "id": "584",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 30
            },
            "start": {
              "column": 11,
              "line": 30
            }
          }
        },
        {
          "id": "585",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 30
            },
            "start": {
              "column": 75,
              "line": 30
            }
          }
        },
        {
          "id": "586",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 30
            },
            "start": {
              "column": 75,
              "line": 30
            }
          }
        },
        {
          "id": "587",
          "mutatorName": "LogicalOperator",
          "replacement": "currentPostCategory !== BlogConfig.TESTING_CATEGORY || !currentPostDraft",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 30
            },
            "start": {
              "column": 75,
              "line": 30
            }
          }
        },
        {
          "id": "588",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 30
            },
            "start": {
              "column": 75,
              "line": 30
            }
          }
        },
        {
          "id": "589",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostCategory === BlogConfig.TESTING_CATEGORY",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 30
            },
            "start": {
              "column": 75,
              "line": 30
            }
          }
        },
        {
          "id": "590",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 147,
              "line": 30
            },
            "start": {
              "column": 130,
              "line": 30
            }
          }
        },
        {
          "id": "591",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(38,36): error TS2345: Argument of type 'MaybeNull<TBlogPost[]>' is not assignable to parameter of type 'TBlogPost[]'.\n  Type 'null' is not assignable to type 'TBlogPost[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(39,39): error TS2345: Argument of type 'MaybeNull<TBlogPost[]>' is not assignable to parameter of type 'TBlogPost[]'.\n  Type 'null' is not assignable to type 'TBlogPost[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "592",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(38,36): error TS2345: Argument of type 'MaybeNull<TBlogPost[]>' is not assignable to parameter of type 'TBlogPost[]'.\n  Type 'null' is not assignable to type 'TBlogPost[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(39,39): error TS2345: Argument of type 'MaybeNull<TBlogPost[]>' is not assignable to parameter of type 'TBlogPost[]'.\n  Type 'null' is not assignable to type 'TBlogPost[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "593",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection !== null",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(38,36): error TS2345: Argument of type 'null' is not assignable to parameter of type 'TBlogPost[]'.\nsrc/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(39,39): error TS2345: Argument of type 'null' is not assignable to parameter of type 'TBlogPost[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "594",
          "mutatorName": "MethodExpression",
          "replacement": "gettedOnTheFlyPosts",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 42
            },
            "start": {
              "column": 17,
              "line": 40
            }
          }
        },
        {
          "id": "595",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(41,42): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type '(a: TBlogPost, b: TBlogPost) => number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 41
            },
            "start": {
              "column": 42,
              "line": 40
            }
          }
        },
        {
          "id": "596",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/CategoryRelatedSubcategoriesAndBlogPosts.tsx(48,44): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"'.\n  Overload 2 of 2, '(key: \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 47
            },
            "start": {
              "column": 44,
              "line": 47
            }
          }
        }
      ],
      "source": "import type { BlogCategoryPageProps, TBlogPost } from '@/types/Blog';\nimport type { FunctionComponent } from 'react';\n\nimport blogCategoryPageBuilder from '@/lib/blog/blogCategoryPageBuilder';\nimport { getAllBlogPostsByCategory } from '@/lib/blog/api';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getScopedI18n } from '@/i18n/server';\nimport ComputedBlogCtx from '@/lib/blog/ctx';\nimport { notFound } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\nimport BlogConfig from '@/config/blog';\n\ninterface CategoryRelatedSubcategoriesAndBlogPostsProps extends BlogCategoryPageProps {}\n\nconst CategoryRelatedSubcategoriesAndBlogPosts: FunctionComponent<CategoryRelatedSubcategoriesAndBlogPostsProps> = async ({ params }) => {\n  const [language, category] = [params[I18nTaxonomy.LANGUAGE], params[BlogTaxonomy.CATEGORY]];\n  const scopedT = await getScopedI18n(i18ns.blogCategories);\n\n  let gettedOnTheFlyPosts: TBlogPost[] = [];\n  const getPostsWithAllowedDraftsCtx = (postsCollection: TBlogPost[]): TBlogPost[] =>\n    ComputedBlogCtx.TESTING\n      ? postsCollection\n      : postsCollection.filter(({ category: currentPostCategory }) => currentPostCategory !== BlogConfig.TESTING_CATEGORY);\n\n  const getPostsWithDisallowedDraftsCtx = (postsCollection: TBlogPost[]): TBlogPost[] =>\n    ComputedBlogCtx.TESTING\n      ? postsCollection.filter(({ draft: currentPostDraft }) => !currentPostDraft)\n      : postsCollection.filter(\n          ({ category: currentPostCategory, draft: currentPostDraft }) => currentPostCategory !== BlogConfig.TESTING_CATEGORY && !currentPostDraft\n        );\n\n  const postsCollection = await getAllBlogPostsByCategory(category);\n  if (postsCollection === null) notFound();\n\n  gettedOnTheFlyPosts = ComputedBlogCtx.ALLOWED_DRAFTS\n    ? getPostsWithAllowedDraftsCtx(postsCollection)\n    : getPostsWithDisallowedDraftsCtx(postsCollection);\n\n  const posts = gettedOnTheFlyPosts.sort((post1, post2) =>\n    BlogConfig.DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_POSTS_ON_BLOG_CATEGORY_PAGE(new Date(post1.date), new Date(post2.date))\n  );\n  const generatedContent = await blogCategoryPageBuilder(posts, category, language);\n\n  return (\n    <div className=\"w-full\">\n      <h1 className=\"text-center\">{scopedT(`${category}._title`)}</h1>\n      {generatedContent}\n    </div>\n  );\n};\n\nexport default CategoryRelatedSubcategoriesAndBlogPosts;\n"
    },
    "src/components/pages/blog/SubcategoryRelatedBlogPosts.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "597",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(22,7): error TS2322: Type '({ params }: BlogSubcategoryPageProps) => Promise<void>' is not assignable to type 'FunctionComponent<BlogSubcategoryPageProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLikeOfReactNode'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = ReactNode, TResult2 = never>(onfulfilled?: ((value: ReactNode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 59
            },
            "start": {
              "column": 104,
              "line": 22
            }
          }
        },
        {
          "id": "598",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(23,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(23,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(23,33): error TS2493: Tuple type '[]' of length '0' has no element at index '2'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(25,89): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(30,105): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(45,92): error TS2322: Type 'undefined' is not assignable to type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 141,
              "line": 23
            },
            "start": {
              "column": 45,
              "line": 23
            }
          }
        },
        {
          "id": "599",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidPair",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "600",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "601",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "602",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 32
            },
            "start": {
              "column": 7,
              "line": 32
            }
          }
        },
        {
          "id": "603",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 32
            },
            "start": {
              "column": 7,
              "line": 32
            }
          }
        },
        {
          "id": "604",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 33
            },
            "start": {
              "column": 12,
              "line": 33
            }
          }
        },
        {
          "id": "605",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 33
            },
            "start": {
              "column": 12,
              "line": 33
            }
          }
        },
        {
          "id": "606",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 33
            },
            "start": {
              "column": 12,
              "line": 33
            }
          }
        },
        {
          "id": "607",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(38,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(38,17): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(47,31): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 39
            },
            "start": {
              "column": 37,
              "line": 36
            }
          }
        },
        {
          "id": "608",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(39,13): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"'.\n  Overload 2 of 2, '(key: \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 37
            },
            "start": {
              "column": 13,
              "line": 37
            }
          }
        },
        {
          "id": "609",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(40,13): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"'.\n  Overload 2 of 2, '(key: \"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"patch-notes.dashboard.meta-description\" | \"patch-notes.dashboard.title\" | \"patch-notes.discord-bot.meta-description\" | \"patch-notes.discord-bot.title\" | \"patch-notes._title\" | ... 10 more ... | \"testing._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 38
            },
            "start": {
              "column": 13,
              "line": 38
            }
          }
        },
        {
          "id": "610",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 44
            },
            "start": {
              "column": 29,
              "line": 41
            }
          }
        },
        {
          "id": "611",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/pages/blog/SubcategoryRelatedBlogPosts.tsx(44,11): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type '(a: TBlogPost, b: TBlogPost) => number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 130,
              "line": 43
            },
            "start": {
              "column": 11,
              "line": 42
            }
          }
        },
        {
          "id": "612",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 126,
              "line": 45
            },
            "start": {
              "column": 10,
              "line": 45
            }
          }
        },
        {
          "id": "613",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 45
            },
            "start": {
              "column": 42,
              "line": 45
            }
          }
        },
        {
          "id": "614",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 53
            },
            "start": {
              "column": 44,
              "line": 53
            }
          }
        },
        {
          "id": "615",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 53
            },
            "start": {
              "column": 57,
              "line": 53
            }
          }
        }
      ],
      "source": "import type { BlogCategoriesAndSubcategoriesAssoc, BlogSubcategoryPageProps, TBlogPost } from '@/types/Blog';\nimport type { FunctionComponent } from 'react';\n\nimport {\n  getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict,\n  isValidBlogCategoryAndSubcategoryPairInAnyLanguage,\n  blogSubcategoryShouldTriggerNotFound\n} from '@/lib/blog/api';\nimport MaybePaginatedElements from '@/components/ui/hoc/MaybePaginatedElements';\nimport BlogPostsNotFound from '@/components/ui/blog/BlogPostsNotFound';\nimport BlogPostPreview from '@/components/ui/blog/BlogPostPreview';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getScopedI18n } from '@/i18n/server';\nimport GithubSlugger from 'github-slugger';\nimport { notFound } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\nimport BlogConfig from '@/config/blog';\n\nconst slugger = new GithubSlugger();\n\nconst SubcategoryRelatedBlogPosts: FunctionComponent<BlogSubcategoryPageProps> = async ({ params }) => {\n  const [category, subcategory, language] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[I18nTaxonomy.LANGUAGE]];\n\n  const isValidPair: boolean = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n  if (!isValidPair) notFound();\n\n  const scopedT = await getScopedI18n(i18ns.blogCategories);\n\n  const postsCollection: TBlogPost[] = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(category, subcategory, language);\n\n  if (blogSubcategoryShouldTriggerNotFound(postsCollection)) notFound();\n  else if (postsCollection.length === 0) return <BlogPostsNotFound />;\n\n  const narrowedCategoryAndSubcategoryAssoc = `${category}.${subcategory}` as BlogCategoriesAndSubcategoriesAssoc;\n  const [title, curSubcategTitle] = [\n    scopedT(`${narrowedCategoryAndSubcategoryAssoc}.title`),\n    scopedT(`${narrowedCategoryAndSubcategoryAssoc}.title`)\n  ];\n\n  const paginatedElements = postsCollection\n    .sort((post1, post2) =>\n      BlogConfig.DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_POSTS_ON_BLOG_SUBCATEGORY_PAGE(new Date(post1.date), new Date(post2.date))\n    )\n    .map((post) => <BlogPostPreview key={`${post._raw.flattenedPath}-paginated-blog-post`} language={language} post={post} />);\n\n  return (\n    <section id={slugger.slug(curSubcategTitle)} className=\"w-full\">\n      <h1 className=\"mb-2 ltr:text-left rtl:text-right\">{title}</h1>\n      {/* {ToDo} https://github.com/Tirraa/dashboard_rtm/issues/41 */}\n      <MaybePaginatedElements\n        elementsPerPage={BlogConfig.DISPLAYED_BLOG_POSTS_ON_SUBCATEGORY_RELATED_PAGE_PAGINATION_LIMIT}\n        paginatedElementsBodyWrapperProps={{ className: '[&>article:not(:last-of-type)]:mb-6' }}\n        paginatedElements={paginatedElements}\n        paginationButtonsPosition=\"top\"\n      />\n    </section>\n  );\n};\n\nexport default SubcategoryRelatedBlogPosts;\n"
    },
    "src/components/pages/dashboard/bar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "616",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 85
            },
            "start": {
              "column": 74,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { FunctionComponent } from 'react';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport Link from 'next/link';\n\ninterface DashboardBarPageProps {}\n\nconst DashboardBarPage: FunctionComponent<DashboardBarPageProps> = () => {\n  return (\n    <>\n      <h1>Hello there (Dashboard bar tab)</h1>\n      <span>\n        BEGIN\n        <br />\n        LoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLoremLorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br /> Lorem\n        <br />\n        END\n        <br />\n      </span>\n      <Link href={ROUTES_ROOTS.WEBSITE}>Go back to the homepage</Link>\n    </>\n  );\n};\n\nexport default DashboardBarPage;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/dashboard/foo.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "617",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 74,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { FunctionComponent } from 'react';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport Link from 'next/link';\n\ninterface DashboardFooPageProps {}\n\nconst DashboardFooPage: FunctionComponent<DashboardFooPageProps> = () => {\n  return (\n    <>\n      <h1>Hello there (Dashboard foo tab)</h1>\n      <Link href={ROUTES_ROOTS.WEBSITE}>Go back to the homepage</Link>\n    </>\n  );\n};\n\nexport default DashboardFooPage;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/pages/dashboard/main.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "618",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 76,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { FunctionComponent } from 'react';\n\nimport ROUTES_ROOTS from '##/config/routes';\nimport Link from 'next/link';\n\ninterface DashboardMainPageProps {}\n\nconst DashboardMainPage: FunctionComponent<DashboardMainPageProps> = () => {\n  return (\n    <>\n      <h1>Hello there</h1>\n      <Link href={ROUTES_ROOTS.WEBSITE}>Go back to the homepage</Link>\n    </>\n  );\n};\n\nexport default DashboardMainPage;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/phantoms/NotFoundCatchall.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "619",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/phantoms/NotFoundCatchall.ts(11,7): error TS2322: Type '({ params }: NotFoundCatchallProps) => void' is not assignable to type 'FunctionComponent<NotFoundCatchallProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 84,
              "line": 11
            }
          }
        },
        {
          "id": "620",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 13
            },
            "start": {
              "column": 71,
              "line": 13
            }
          }
        },
        {
          "id": "621",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 14
            },
            "start": {
              "column": 36,
              "line": 14
            }
          }
        },
        {
          "id": "622",
          "mutatorName": "UnaryOperator",
          "replacement": "+pathnameUnknownPart.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 14
            },
            "start": {
              "column": 54,
              "line": 14
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { NotFoundCatchallParams } from '@/types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { RedirectType, usePathname, redirect } from 'next/navigation';\nimport NotFoundTaxonomy from '##/config/taxonomies/notfound';\n\ninterface NotFoundCatchallProps extends NotFoundCatchallParams {}\n\nconst NotFoundCatchall: FunctionComponent<NotFoundCatchallProps> = ({ params }) => {\n  const pathname = usePathname();\n  const pathnameUnknownPart = params[NotFoundTaxonomy.NOT_FOUND].join('/');\n  const computedRedirectPathname = pathname.slice(0, -pathnameUnknownPart.length);\n  redirect(computedRedirectPathname, RedirectType.replace);\n};\n\nexport default NotFoundCatchall;\n"
    },
    "src/components/ui/Avatar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "623",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 12
            },
            "start": {
              "column": 3,
              "line": 10
            }
          }
        },
        {
          "id": "624",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 11
            },
            "start": {
              "column": 41,
              "line": 11
            }
          }
        },
        {
          "id": "625",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 140,
              "line": 17
            },
            "start": {
              "column": 3,
              "line": 17
            }
          }
        },
        {
          "id": "626",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 103,
              "line": 17
            },
            "start": {
              "column": 74,
              "line": 17
            }
          }
        },
        {
          "id": "627",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 3,
              "line": 24
            }
          }
        },
        {
          "id": "628",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 113,
              "line": 25
            },
            "start": {
              "column": 43,
              "line": 25
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport { cn } from '@/lib/tailwind';\nimport * as React from 'react';\n\nconst Avatar = React.forwardRef<React.ElementRef<typeof AvatarPrimitive.Root>, React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>>(\n  ({ className, ...props }, ref) => (\n    <AvatarPrimitive.Root className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)} ref={ref} {...props} />\n  )\n);\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<React.ElementRef<typeof AvatarPrimitive.Image>, React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>>(\n  ({ className, ...props }, ref) => <AvatarPrimitive.Image className={cn('aspect-square h-full w-full', className)} ref={ref} {...props} />\n);\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback className={cn('flex h-full w-full items-center justify-center rounded-full bg-muted', className)} ref={ref} {...props} />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { AvatarFallback, AvatarImage, Avatar };\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Button.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "629",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 183,
              "line": 21
            },
            "start": {
              "column": 3,
              "line": 21
            }
          }
        },
        {
          "id": "630",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 43
            },
            "start": {
              "column": 3,
              "line": 22
            }
          }
        },
        {
          "id": "631",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 38
            },
            "start": {
              "column": 15,
              "line": 23
            }
          }
        },
        {
          "id": "632",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 31
            },
            "start": {
              "column": 16,
              "line": 24
            }
          }
        },
        {
          "id": "633",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 25
            },
            "start": {
              "column": 18,
              "line": 25
            }
          }
        },
        {
          "id": "634",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 90,
              "line": 26
            },
            "start": {
              "column": 22,
              "line": 26
            }
          }
        },
        {
          "id": "635",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 27
            },
            "start": {
              "column": 20,
              "line": 27
            }
          }
        },
        {
          "id": "636",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 28
            },
            "start": {
              "column": 18,
              "line": 28
            }
          }
        },
        {
          "id": "637",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 29
            },
            "start": {
              "column": 15,
              "line": 29
            }
          }
        },
        {
          "id": "638",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 30
            },
            "start": {
              "column": 16,
              "line": 30
            }
          }
        },
        {
          "id": "639",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 8,
              "line": 37
            },
            "start": {
              "column": 13,
              "line": 32
            }
          }
        },
        {
          "id": "640",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 35,
              "line": 33
            },
            "start": {
              "column": 13,
              "line": 33
            }
          }
        },
        {
          "id": "641",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 34
            },
            "start": {
              "column": 18,
              "line": 34
            }
          }
        },
        {
          "id": "642",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "643",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 36
            },
            "start": {
              "column": 15,
              "line": 36
            }
          }
        },
        {
          "id": "644",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 42
            },
            "start": {
              "column": 22,
              "line": 39
            }
          }
        },
        {
          "id": "645",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 40
            },
            "start": {
              "column": 16,
              "line": 40
            }
          }
        },
        {
          "id": "646",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 41
            },
            "start": {
              "column": 13,
              "line": 41
            }
          }
        },
        {
          "id": "647",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 50
            },
            "start": {
              "column": 82,
              "line": 50
            }
          }
        },
        {
          "id": "648",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 53
            },
            "start": {
              "column": 135,
              "line": 50
            }
          }
        },
        {
          "id": "649",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 51
            },
            "start": {
              "column": 33,
              "line": 51
            }
          }
        },
        {
          "id": "650",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 52
            },
            "start": {
              "column": 45,
              "line": 52
            }
          }
        },
        {
          "id": "651",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 54
            },
            "start": {
              "column": 26,
              "line": 54
            }
          }
        },
        {
          "id": "652",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 90
            },
            "start": {
              "column": 7,
              "line": 67
            }
          }
        },
        {
          "id": "653",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 68
            },
            "start": {
              "column": 22,
              "line": 68
            }
          }
        },
        {
          "id": "654",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 68
            },
            "start": {
              "column": 22,
              "line": 68
            }
          }
        },
        {
          "id": "655",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof maybeOnClick === 'function' || !maybeHref",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 68
            },
            "start": {
              "column": 22,
              "line": 68
            }
          }
        },
        {
          "id": "656",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 68
            },
            "start": {
              "column": 22,
              "line": 68
            }
          }
        },
        {
          "id": "657",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof maybeOnClick !== 'function'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 68
            },
            "start": {
              "column": 22,
              "line": 68
            }
          }
        },
        {
          "id": "658",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 68
            },
            "start": {
              "column": 46,
              "line": 68
            }
          }
        },
        {
          "id": "659",
          "mutatorName": "BooleanLiteral",
          "replacement": "maybeHref",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 68
            },
            "start": {
              "column": 60,
              "line": 68
            }
          }
        },
        {
          "id": "660",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 107,
              "line": 68
            },
            "start": {
              "column": 73,
              "line": 68
            }
          }
        },
        {
          "id": "661",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 71
            },
            "start": {
              "column": 65,
              "line": 69
            }
          }
        },
        {
          "id": "662",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "663",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 16,
              "line": 73
            },
            "start": {
              "column": 7,
              "line": 73
            }
          }
        },
        {
          "id": "664",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 83
            },
            "start": {
              "column": 18,
              "line": 73
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { VariantProps } from 'class-variance-authority';\n\nimport { getLinkTarget } from '@rtm/shared-lib/react';\nimport { cva } from 'class-variance-authority';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cn } from '@/lib/tailwind';\nimport * as React from 'react';\nimport Link from 'next/link';\n\nimport BUTTON_CONFIG from '../config/styles/buttons';\n\ninterface ButtonHoCProps extends ButtonProps {\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  withTransparentBackground?: boolean;\n  href?: string;\n}\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        link: 'text-primary underline-offset-4 hover:underline',\n        ghost: 'hover:bg-accent hover:text-accent-foreground'\n      },\n      size: {\n        lg: 'h-11 rounded-md px-8',\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        icon: 'h-10 w-10'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default'\n    }\n  }\n);\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst ButtonBase = React.forwardRef<HTMLButtonElement, ButtonProps>(({ asChild = false, className, variant, size, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n  return <Comp className={cn(buttonVariants({ className, variant, size }))} ref={ref} {...props} />;\n});\nButtonBase.displayName = 'Button';\n\n/**\n * @hoc\n * @extends {ButtonBase} - AsLink?, LinkTarget?\n */\nconst Button: React.FunctionComponent<ButtonHoCProps> = ({\n  className: classNameValue,\n  withTransparentBackground,\n  onClick: maybeOnClick,\n  href: maybeHref,\n  children,\n  ...injectedProps\n}) => {\n  const onClickFun = typeof maybeOnClick === 'function' && !maybeHref ? () => (maybeOnClick as Function)() : undefined;\n  const className = cn(classNameValue, BUTTON_CONFIG.CLASSNAME, {\n    'bg-transparent hover:bg-transparent': withTransparentBackground\n  });\n\n  if (maybeHref) {\n    const target = getLinkTarget(maybeHref);\n\n    return (\n      <ButtonBase {...injectedProps} className={className} asChild>\n        <Link onClick={onClickFun} href={maybeHref} target={target}>\n          {children}\n        </Link>\n      </ButtonBase>\n    );\n  }\n\n  return (\n    <ButtonBase {...injectedProps} className={className} onClick={onClickFun}>\n      {children}\n    </ButtonBase>\n  );\n};\n\nexport { buttonVariants, Button };\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Card.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "665",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 85,
              "line": 8
            }
          }
        },
        {
          "id": "666",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 9
            },
            "start": {
              "column": 22,
              "line": 9
            }
          }
        },
        {
          "id": "667",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 11
            },
            "start": {
              "column": 20,
              "line": 11
            }
          }
        },
        {
          "id": "668",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 15
            },
            "start": {
              "column": 91,
              "line": 13
            }
          }
        },
        {
          "id": "669",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 14
            },
            "start": {
              "column": 22,
              "line": 14
            }
          }
        },
        {
          "id": "670",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 16
            },
            "start": {
              "column": 26,
              "line": 16
            }
          }
        },
        {
          "id": "671",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 88,
              "line": 19
            }
          }
        },
        {
          "id": "672",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 20
            },
            "start": {
              "column": 26,
              "line": 20
            }
          }
        },
        {
          "id": "673",
          "mutatorName": "LogicalOperator",
          "replacement": "titleTypeValue && 'h3'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 21
            },
            "start": {
              "column": 23,
              "line": 21
            }
          }
        },
        {
          "id": "674",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 45,
              "line": 21
            },
            "start": {
              "column": 41,
              "line": 21
            }
          }
        },
        {
          "id": "675",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 22
            },
            "start": {
              "column": 15,
              "line": 22
            }
          }
        },
        {
          "id": "676",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 36
            },
            "start": {
              "column": 25,
              "line": 36
            }
          }
        },
        {
          "id": "677",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 108,
              "line": 38
            }
          }
        },
        {
          "id": "678",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 39
            },
            "start": {
              "column": 20,
              "line": 39
            }
          }
        },
        {
          "id": "679",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 48,
              "line": 41
            },
            "start": {
              "column": 31,
              "line": 41
            }
          }
        },
        {
          "id": "680",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 45
            },
            "start": {
              "column": 92,
              "line": 43
            }
          }
        },
        {
          "id": "681",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 44
            },
            "start": {
              "column": 22,
              "line": 44
            }
          }
        },
        {
          "id": "682",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 40,
              "line": 46
            },
            "start": {
              "column": 27,
              "line": 46
            }
          }
        },
        {
          "id": "683",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 50
            },
            "start": {
              "column": 91,
              "line": 48
            }
          }
        },
        {
          "id": "684",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 50,
              "line": 49
            },
            "start": {
              "column": 22,
              "line": 49
            }
          }
        },
        {
          "id": "685",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 51
            },
            "start": {
              "column": 26,
              "line": 51
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { TitleType } from '@rtm/shared-types/HTML';\n\nimport { cn } from '@/lib/tailwind';\nimport * as React from 'react';\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('rounded-lg border bg-card text-card-foreground shadow-sm', className)} ref={ref} {...props} />\n));\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('flex flex-col space-y-1.5 p-6', className)} ref={ref} {...props} />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement> & { titleType?: TitleType }>(\n  ({ className: classNameValue, titleType: titleTypeValue, ...injectedProps }, ref) => {\n    const className = cn('text-2xl font-semibold leading-none tracking-tight', classNameValue);\n    const titleType = titleTypeValue ?? 'h3';\n    const p = { ...injectedProps, className, ref };\n\n    const TITLES_MAP: Record<TitleType, React.ReactNode> = {\n      h1: <h1 {...p} />,\n      h2: <h2 {...p} />,\n      h3: <h3 {...p} />,\n      h4: <h4 {...p} />,\n      h5: <h5 {...p} />,\n      h6: <h6 {...p} />\n    } as const;\n\n    return TITLES_MAP[titleType];\n  }\n);\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => (\n  <p className={cn('text-sm text-muted-foreground', className)} ref={ref} {...props} />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('p-6 pt-0', className)} ref={ref} {...props} />\n));\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div className={cn('flex items-center p-6 pt-0', className)} ref={ref} {...props} />\n));\nCardFooter.displayName = 'CardFooter';\n\nexport { CardDescription, CardContent, CardFooter, CardHeader, CardTitle, Card };\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/DropdownMenu.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "686",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 54
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "687",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 29
            },
            "start": {
              "column": 61,
              "line": 29
            }
          }
        },
        {
          "id": "688",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 30
            },
            "start": {
              "column": 19,
              "line": 30
            }
          }
        },
        {
          "id": "689",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 30
            },
            "start": {
              "column": 38,
              "line": 30
            }
          }
        },
        {
          "id": "690",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 30
            },
            "start": {
              "column": 45,
              "line": 30
            }
          }
        },
        {
          "id": "691",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 31
            },
            "start": {
              "column": 39,
              "line": 31
            }
          }
        },
        {
          "id": "692",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 31
            },
            "start": {
              "column": 68,
              "line": 31
            }
          }
        },
        {
          "id": "693",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 40
            },
            "start": {
              "column": 25,
              "line": 33
            }
          }
        },
        {
          "id": "694",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 43,
              "line": 34
            },
            "start": {
              "column": 28,
              "line": 34
            }
          }
        },
        {
          "id": "695",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 42,
              "line": 34
            },
            "start": {
              "column": 29,
              "line": 34
            }
          }
        },
        {
          "id": "696",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 13,
              "line": 36
            },
            "start": {
              "column": 9,
              "line": 36
            }
          }
        },
        {
          "id": "697",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 13,
              "line": 36
            },
            "start": {
              "column": 9,
              "line": 36
            }
          }
        },
        {
          "id": "698",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 72,
              "line": 39
            },
            "start": {
              "column": 12,
              "line": 39
            }
          }
        },
        {
          "id": "699",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 12,
              "line": 40
            },
            "start": {
              "column": 6,
              "line": 40
            }
          }
        },
        {
          "id": "700",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 42
            },
            "start": {
              "column": 44,
              "line": 42
            }
          }
        },
        {
          "id": "701",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 47
            },
            "start": {
              "column": 48,
              "line": 47
            }
          }
        },
        {
          "id": "702",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 47
            },
            "start": {
              "column": 80,
              "line": 47
            }
          }
        },
        {
          "id": "703",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 84
            },
            "start": {
              "column": 3,
              "line": 71
            }
          }
        },
        {
          "id": "704",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 74
            },
            "start": {
              "column": 7,
              "line": 74
            }
          }
        },
        {
          "id": "705",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "706",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "707",
          "mutatorName": "LogicalOperator",
          "replacement": "inset || 'pl-8'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 75
            },
            "start": {
              "column": 7,
              "line": 75
            }
          }
        },
        {
          "id": "708",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 75
            },
            "start": {
              "column": 16,
              "line": 75
            }
          }
        },
        {
          "id": "709",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 99
            },
            "start": {
              "column": 3,
              "line": 90
            }
          }
        },
        {
          "id": "710",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 446,
              "line": 93
            },
            "start": {
              "column": 7,
              "line": 93
            }
          }
        },
        {
          "id": "711",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 117
            },
            "start": {
              "column": 3,
              "line": 105
            }
          }
        },
        {
          "id": "712",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 448,
              "line": 109
            },
            "start": {
              "column": 9,
              "line": 109
            }
          }
        },
        {
          "id": "713",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 135
            },
            "start": {
              "column": 3,
              "line": 125
            }
          }
        },
        {
          "id": "714",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 232,
              "line": 128
            },
            "start": {
              "column": 7,
              "line": 128
            }
          }
        },
        {
          "id": "715",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 129
            },
            "start": {
              "column": 7,
              "line": 129
            }
          }
        },
        {
          "id": "716",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 129
            },
            "start": {
              "column": 7,
              "line": 129
            }
          }
        },
        {
          "id": "717",
          "mutatorName": "LogicalOperator",
          "replacement": "inset || 'pl-8'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 129
            },
            "start": {
              "column": 7,
              "line": 129
            }
          }
        },
        {
          "id": "718",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 129
            },
            "start": {
              "column": 16,
              "line": 129
            }
          }
        },
        {
          "id": "719",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 158
            },
            "start": {
              "column": 3,
              "line": 141
            }
          }
        },
        {
          "id": "720",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 237,
              "line": 144
            },
            "start": {
              "column": 7,
              "line": 144
            }
          }
        },
        {
          "id": "721",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 180
            },
            "start": {
              "column": 3,
              "line": 164
            }
          }
        },
        {
          "id": "722",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 237,
              "line": 167
            },
            "start": {
              "column": 7,
              "line": 167
            }
          }
        },
        {
          "id": "723",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 190
            },
            "start": {
              "column": 3,
              "line": 188
            }
          }
        },
        {
          "id": "724",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 189
            },
            "start": {
              "column": 46,
              "line": 189
            }
          }
        },
        {
          "id": "725",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 189
            },
            "start": {
              "column": 83,
              "line": 189
            }
          }
        },
        {
          "id": "726",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 189
            },
            "start": {
              "column": 83,
              "line": 189
            }
          }
        },
        {
          "id": "727",
          "mutatorName": "LogicalOperator",
          "replacement": "inset || 'pl-8'",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 189
            },
            "start": {
              "column": 83,
              "line": 189
            }
          }
        },
        {
          "id": "728",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 189
            },
            "start": {
              "column": 92,
              "line": 189
            }
          }
        },
        {
          "id": "729",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 147,
              "line": 196
            },
            "start": {
              "column": 3,
              "line": 196
            }
          }
        },
        {
          "id": "730",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 110,
              "line": 196
            },
            "start": {
              "column": 84,
              "line": 196
            }
          }
        },
        {
          "id": "731",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 201
            },
            "start": {
              "column": 98,
              "line": 199
            }
          }
        },
        {
          "id": "732",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 200
            },
            "start": {
              "column": 30,
              "line": 200
            }
          }
        },
        {
          "id": "733",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 58,
              "line": 202
            },
            "start": {
              "column": 36,
              "line": 202
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { WithDeepResetOnLgBreakpointEvents } from '@rtm/shared-types/Next';\n\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport { ChevronRight, Circle, Check } from 'lucide-react';\nimport { useMediaQuery } from '@react-hook/media-query';\nimport { getDirection } from '@rtm/shared-lib/html';\nimport { getBreakpoint, cn } from '@/lib/tailwind';\nimport { getBodyContainer } from '@/lib/html';\nimport * as React from 'react';\n\ntype DropdownMenuExtensions = Partial<WithDeepResetOnLgBreakpointEvents>;\n\nconst DropdownMenuBase = DropdownMenuPrimitive.Root;\n\n/**\n * @hoc\n * @extends {DropdownMenuBase} - Automatic dir attribute, deep reset on screen width heavy changes\n */\nconst DropdownMenu: React.FunctionComponent<DropdownMenuPrimitive.DropdownMenuProps & DropdownMenuExtensions> = ({\n  withDeepResetOnLgBreakpointEvents,\n  children,\n  open,\n  ...injectedProps\n}) => {\n  const [isMounted, setIsMounted] = React.useState<boolean>(false);\n  React.useEffect(() => setIsMounted(true), []);\n  const isLargeScreen = useMediaQuery(`(min-width: ${getBreakpoint('lg')}px)`);\n\n  React.useEffect(() => {\n    const EFFECT_CLASSES = ['select-none'];\n\n    if (open) getBodyContainer().classList.add(...EFFECT_CLASSES);\n    else getBodyContainer().classList.remove(...EFFECT_CLASSES);\n\n    return () => getBodyContainer().classList.remove(...EFFECT_CLASSES);\n  }, [open]);\n\n  const dir = isMounted ? getDirection() : 'ltr';\n\n  return (\n    <DropdownMenuBase\n      {...injectedProps}\n      key={withDeepResetOnLgBreakpointEvents ? `deep-reset-${isLargeScreen}` : 'no-deep-reset'}\n      open={open}\n      dir={dir}\n    >\n      {children}\n    </DropdownMenuBase>\n  );\n};\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, children, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\n      inset && 'pl-8',\n      className\n    )}\n    ref={ref}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className\n    )}\n    ref={ref}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ sideOffset = 4, className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      className={cn(\n        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      sideOffset={sideOffset}\n      ref={ref}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className\n    )}\n    ref={ref}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    checked={checked}\n    ref={ref}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    ref={ref}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)} ref={ref} {...props} />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => <DropdownMenuPrimitive.Separator className={cn('-mx-1 my-1 h-px bg-muted', className)} ref={ref} {...props} />);\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn('ml-auto text-xs tracking-widest opacity-60', className)} {...props} />;\n};\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\nexport {\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n  DropdownMenuPortal,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuSub,\n  DropdownMenu\n};\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/Loader.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "734",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 33
            },
            "start": {
              "column": 84,
              "line": 16
            }
          }
        },
        {
          "id": "735",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 20
            },
            "start": {
              "column": 14,
              "line": 20
            }
          }
        },
        {
          "id": "736",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 27
            },
            "start": {
              "column": 18,
              "line": 27
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { FunctionComponent, CSSProperties } from 'react';\n\nimport LOADER_COLORS from '@/components/config/styles/loader/colors';\nimport { BeatLoader } from 'react-spinners';\n\ninterface LoaderProps {\n  override?: CSSProperties;\n}\n\nconst { BACKGROUND_COLOR, COLOR } = LOADER_COLORS;\n\nconst Loader: FunctionComponent<LoaderProps> = ({ override: cssOverride } = {}) => {\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex h-screen w-full cursor-wait select-none items-center justify-center\"\n      style={{ backgroundColor: BACKGROUND_COLOR }}\n    >\n      <BeatLoader\n        cssOverride={cssOverride}\n        className=\"animate-pulse\"\n        speedMultiplier={1.35}\n        aria-label=\"...\"\n        loading={true}\n        color={COLOR}\n        margin={4.5}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/PaginatedElements.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "737",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/PaginatedElements.tsx(21,31): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type 'DynamicOptions<{}> | Loader<{}>'.\n  Type '() => undefined' is not assignable to type '() => LoaderComponent<{}>'.\n    Type 'undefined' is not assignable to type 'LoaderComponent<{}>'.\nsrc/components/ui/PaginatedElements.tsx(82,9): error TS2322: Type '{ previousLabel: Element; nextLabel: Element; nextLinkClassName: string; previousLinkClassName: string; pageLinkClassName: string; ariaLabelBuilder: (pageNumber: any) => string; ... 9 more ...; breakLabel: string; }' is not assignable to type 'IntrinsicAttributes'.\n  Property 'previousLabel' does not exist on type 'IntrinsicAttributes'.\nsrc/components/ui/PaginatedElements.tsx(95,28): error TS7006: Parameter 'pageNumber' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 21
            },
            "start": {
              "column": 31,
              "line": 21
            }
          }
        },
        {
          "id": "738",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(21,44): error TS2307: Cannot find module '' or its corresponding type declarations.\nsrc/components/ui/PaginatedElements.tsx(82,9): error TS2322: Type '{ previousLabel: Element; nextLabel: Element; nextLinkClassName: string; previousLinkClassName: string; pageLinkClassName: string; ariaLabelBuilder: (pageNumber: any) => string; ... 9 more ...; breakLabel: string; }' is not assignable to type 'IntrinsicAttributes'.\n  Property 'previousLabel' does not exist on type 'IntrinsicAttributes'.\nsrc/components/ui/PaginatedElements.tsx(95,28): error TS7006: Parameter 'pageNumber' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 21
            },
            "start": {
              "column": 44,
              "line": 21
            }
          }
        },
        {
          "id": "739",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 21
            },
            "start": {
              "column": 63,
              "line": 21
            }
          }
        },
        {
          "id": "740",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 21
            },
            "start": {
              "column": 70,
              "line": 21
            }
          }
        },
        {
          "id": "741",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/PaginatedElements.tsx(56,23): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/components/ui/PaginatedElements.tsx(87,114): error TS2365: Operator '>=' cannot be applied to types 'void' and 'number'.\nsrc/components/ui/PaginatedElements.tsx(88,118): error TS2365: Operator '<=' cannot be applied to types 'void' and 'number'.\nsrc/components/ui/PaginatedElements.tsx(98,20): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 37
            },
            "start": {
              "column": 70,
              "line": 32
            }
          }
        },
        {
          "id": "742",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 33
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "743",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 33
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "744",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "745",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "746",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl <= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "747",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl >= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 34
            },
            "start": {
              "column": 7,
              "line": 34
            }
          }
        },
        {
          "id": "748",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "749",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "750",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl >= maxPage",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "751",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl <= maxPage",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 35
            }
          }
        },
        {
          "id": "752",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/PaginatedElements.tsx(39,7): error TS2322: Type '({ paginationButtonsPosition: position, paginationButtonsJustify: justify, paginatedElementsBodyWrapperProps, pagesAmount: forcedPagesAmount, pagesRange: pagesRangeValue, paginatedElements, elementsPerPage }: PaginatedElementsProps) => void' is not assignable to type 'FunctionComponent<PaginatedElementsProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 127
            },
            "start": {
              "column": 7,
              "line": 47
            }
          }
        },
        {
          "id": "753",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 51
            },
            "start": {
              "column": 55,
              "line": 51
            }
          }
        },
        {
          "id": "754",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 52
            },
            "start": {
              "column": 13,
              "line": 52
            }
          }
        },
        {
          "id": "755",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 52
            },
            "start": {
              "column": 32,
              "line": 52
            }
          }
        },
        {
          "id": "756",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 52
            },
            "start": {
              "column": 39,
              "line": 52
            }
          }
        },
        {
          "id": "757",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 53
            },
            "start": {
              "column": 44,
              "line": 53
            }
          }
        },
        {
          "id": "758",
          "mutatorName": "LogicalOperator",
          "replacement": "pagesRangeValue && 3",
          "statusReason": "src/components/ui/PaginatedElements.tsx(97,29): error TS18048: 'pagesRange' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 55
            },
            "start": {
              "column": 22,
              "line": 55
            }
          }
        },
        {
          "id": "759",
          "mutatorName": "LogicalOperator",
          "replacement": "forcedPagesAmount && computePagesAmount(paginatedElements.length, elementsPerPage)",
          "statusReason": "src/components/ui/PaginatedElements.tsx(59,72): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\nsrc/components/ui/PaginatedElements.tsx(92,129): error TS18048: 'pagesAmount' is possibly 'undefined'.\nsrc/components/ui/PaginatedElements.tsx(97,42): error TS18048: 'pagesAmount' is possibly 'undefined'.\nsrc/components/ui/PaginatedElements.tsx(104,9): error TS2322: Type 'number | undefined' is not assignable to type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 105,
              "line": 57
            },
            "start": {
              "column": 23,
              "line": 57
            }
          }
        },
        {
          "id": "760",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 58
            },
            "start": {
              "column": 46,
              "line": 58
            }
          }
        },
        {
          "id": "761",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(pageFromUrl - 1) / elementsPerPage",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 61
            },
            "start": {
              "column": 22,
              "line": 61
            }
          }
        },
        {
          "id": "762",
          "mutatorName": "ArithmeticOperator",
          "replacement": "pageFromUrl + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 61
            },
            "start": {
              "column": 23,
              "line": 61
            }
          }
        },
        {
          "id": "763",
          "mutatorName": "ArithmeticOperator",
          "replacement": "startIndex - elementsPerPage",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 62
            },
            "start": {
              "column": 20,
              "line": 62
            }
          }
        },
        {
          "id": "764",
          "mutatorName": "MethodExpression",
          "replacement": "paginatedElements",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 63
            },
            "start": {
              "column": 27,
              "line": 63
            }
          }
        },
        {
          "id": "765",
          "mutatorName": "LogicalOperator",
          "replacement": "position && 'bottom'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 65
            },
            "start": {
              "column": 16,
              "line": 65
            }
          }
        },
        {
          "id": "766",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 65
            },
            "start": {
              "column": 28,
              "line": 65
            }
          }
        },
        {
          "id": "767",
          "mutatorName": "LogicalOperator",
          "replacement": "justify && 'normal'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 66
            },
            "start": {
              "column": 16,
              "line": 66
            }
          }
        },
        {
          "id": "768",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 66
            },
            "start": {
              "column": 27,
              "line": 66
            }
          }
        },
        {
          "id": "769",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 67
            },
            "start": {
              "column": 24,
              "line": 67
            }
          }
        },
        {
          "id": "770",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 67
            },
            "start": {
              "column": 24,
              "line": 67
            }
          }
        },
        {
          "id": "771",
          "mutatorName": "EqualityOperator",
          "replacement": "ypos !== 'bottom'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 67
            },
            "start": {
              "column": 24,
              "line": 67
            }
          }
        },
        {
          "id": "772",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(67,24): error TS2367: This comparison appears to be unintentional because the types '\"bottom\" | \"top\"' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 67
            },
            "start": {
              "column": 33,
              "line": 67
            }
          }
        },
        {
          "id": "773",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 67
            },
            "start": {
              "column": 44,
              "line": 67
            }
          }
        },
        {
          "id": "774",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 67
            },
            "start": {
              "column": 53,
              "line": 67
            }
          }
        },
        {
          "id": "775",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 68
            },
            "start": {
              "column": 29,
              "line": 68
            }
          }
        },
        {
          "id": "776",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 117,
              "line": 70
            },
            "start": {
              "column": 37,
              "line": 70
            }
          }
        },
        {
          "id": "777",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 76
            },
            "start": {
              "column": 57,
              "line": 72
            }
          }
        },
        {
          "id": "778",
          "mutatorName": "ArithmeticOperator",
          "replacement": "event.selected - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 73
            },
            "start": {
              "column": 18,
              "line": 73
            }
          }
        },
        {
          "id": "779",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 74
            },
            "start": {
              "column": 37,
              "line": 74
            }
          }
        },
        {
          "id": "780",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 75
            },
            "start": {
              "column": 20,
              "line": 75
            }
          }
        },
        {
          "id": "781",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 75
            },
            "start": {
              "column": 30,
              "line": 75
            }
          }
        },
        {
          "id": "782",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 78
            },
            "start": {
              "column": 28,
              "line": 78
            }
          }
        },
        {
          "id": "783",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 80
            },
            "start": {
              "column": 24,
              "line": 80
            }
          }
        },
        {
          "id": "784",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 84
            },
            "start": {
              "column": 14,
              "line": 84
            }
          }
        },
        {
          "id": "785",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 84
            },
            "start": {
              "column": 14,
              "line": 84
            }
          }
        },
        {
          "id": "786",
          "mutatorName": "EqualityOperator",
          "replacement": "dir !== 'ltr'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 84
            },
            "start": {
              "column": 14,
              "line": 84
            }
          }
        },
        {
          "id": "787",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(84,14): error TS2367: This comparison appears to be unintentional because the types 'Direction' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 84
            },
            "start": {
              "column": 22,
              "line": 84
            }
          }
        },
        {
          "id": "788",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 89
            },
            "start": {
              "column": 14,
              "line": 89
            }
          }
        },
        {
          "id": "789",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 89
            },
            "start": {
              "column": 14,
              "line": 89
            }
          }
        },
        {
          "id": "790",
          "mutatorName": "EqualityOperator",
          "replacement": "dir !== 'ltr'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 89
            },
            "start": {
              "column": 14,
              "line": 89
            }
          }
        },
        {
          "id": "791",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(89,14): error TS2367: This comparison appears to be unintentional because the types 'Direction' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 89
            },
            "start": {
              "column": 22,
              "line": 89
            }
          }
        },
        {
          "id": "792",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 92
            },
            "start": {
              "column": 31,
              "line": 92
            }
          }
        },
        {
          "id": "793",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 142,
              "line": 92
            },
            "start": {
              "column": 78,
              "line": 92
            }
          }
        },
        {
          "id": "794",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 140,
              "line": 92
            },
            "start": {
              "column": 114,
              "line": 92
            }
          }
        },
        {
          "id": "795",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 140,
              "line": 92
            },
            "start": {
              "column": 114,
              "line": 92
            }
          }
        },
        {
          "id": "796",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl > pagesAmount",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 140,
              "line": 92
            },
            "start": {
              "column": 114,
              "line": 92
            }
          }
        },
        {
          "id": "797",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl < pagesAmount",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 140,
              "line": 92
            },
            "start": {
              "column": 114,
              "line": 92
            }
          }
        },
        {
          "id": "798",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 93
            },
            "start": {
              "column": 35,
              "line": 93
            }
          }
        },
        {
          "id": "799",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 136,
              "line": 93
            },
            "start": {
              "column": 82,
              "line": 93
            }
          }
        },
        {
          "id": "800",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 93
            },
            "start": {
              "column": 118,
              "line": 93
            }
          }
        },
        {
          "id": "801",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 93
            },
            "start": {
              "column": 118,
              "line": 93
            }
          }
        },
        {
          "id": "802",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl < 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 93
            },
            "start": {
              "column": 118,
              "line": 93
            }
          }
        },
        {
          "id": "803",
          "mutatorName": "EqualityOperator",
          "replacement": "pageFromUrl > 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 93
            },
            "start": {
              "column": 118,
              "line": 93
            }
          }
        },
        {
          "id": "804",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 95
            },
            "start": {
              "column": 27,
              "line": 95
            }
          }
        },
        {
          "id": "805",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 95
            },
            "start": {
              "column": 43,
              "line": 95
            }
          }
        },
        {
          "id": "806",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(95,65): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n  Overload 2 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 95
            },
            "start": {
              "column": 65,
              "line": 95
            }
          }
        },
        {
          "id": "807",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 97
            },
            "start": {
              "column": 29,
              "line": 97
            }
          }
        },
        {
          "id": "808",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 97
            },
            "start": {
              "column": 29,
              "line": 97
            }
          }
        },
        {
          "id": "809",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesRange <= pagesAmount",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 97
            },
            "start": {
              "column": 29,
              "line": 97
            }
          }
        },
        {
          "id": "810",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesRange >= pagesAmount",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 97
            },
            "start": {
              "column": 29,
              "line": 97
            }
          }
        },
        {
          "id": "811",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 98
            },
            "start": {
              "column": 23,
              "line": 98
            }
          }
        },
        {
          "id": "812",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(100,36): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n  Overload 2 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 100
            },
            "start": {
              "column": 36,
              "line": 100
            }
          }
        },
        {
          "id": "813",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(101,32): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n  Overload 2 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 101
            },
            "start": {
              "column": 32,
              "line": 101
            }
          }
        },
        {
          "id": "814",
          "mutatorName": "ArithmeticOperator",
          "replacement": "pageFromUrl + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 103
            },
            "start": {
              "column": 20,
              "line": 103
            }
          }
        },
        {
          "id": "815",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 116
            },
            "start": {
              "column": 10,
              "line": 116
            }
          }
        },
        {
          "id": "816",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 116
            },
            "start": {
              "column": 10,
              "line": 116
            }
          }
        },
        {
          "id": "817",
          "mutatorName": "EqualityOperator",
          "replacement": "ypos !== 'bottom'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 116
            },
            "start": {
              "column": 10,
              "line": 116
            }
          }
        },
        {
          "id": "818",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/PaginatedElements.tsx(116,10): error TS2367: This comparison appears to be unintentional because the types '\"bottom\" | \"top\"' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 116
            },
            "start": {
              "column": 19,
              "line": 116
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FlexJustify } from '@rtm/shared-types/HTML';\nimport type { FunctionComponent, ReactNode } from 'react';\n\nimport { ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/20/solid';\nimport { createURLSearchParams, getDirection } from '@rtm/shared-lib/html';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { useScopedI18n } from '@/i18n/client';\nimport { useEffect, useState } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { capitalize } from '@/lib/str';\nimport { cn } from '@/lib/tailwind';\nimport dynamic from 'next/dynamic';\n\nimport type { PaginatedElementsBodyWrapperProps } from './hoc/PaginatedElementsBodyWrapper';\n\nimport PaginatedElementsBodyWrapper from './hoc/PaginatedElementsBodyWrapper';\nimport { computePagesAmount } from './hoc/MaybePaginatedElements';\n\nconst ReactPaginate = dynamic(() => import('react-paginate'), { ssr: false });\n\nexport interface PaginatedElementsProps extends PaginatedElementsBodyWrapperProps {\n  paginationButtonsPosition?: 'bottom' | 'top';\n  paginationButtonsJustify?: FlexJustify;\n  paginatedElements: ReactNode[];\n  elementsPerPage: number;\n  pagesAmount?: number;\n  pagesRange?: number;\n}\n\nfunction initializeCurrentPage(pageFromUrl: number, maxPage: number) {\n  if (isNaN(pageFromUrl)) return 1;\n  if (pageFromUrl < 1) return 1;\n  if (pageFromUrl > maxPage) return maxPage;\n  return pageFromUrl;\n}\n\nconst PaginatedElements: FunctionComponent<PaginatedElementsProps> = ({\n  paginationButtonsPosition: position,\n  paginationButtonsJustify: justify,\n  paginatedElementsBodyWrapperProps,\n  pagesAmount: forcedPagesAmount,\n  pagesRange: pagesRangeValue,\n  paginatedElements,\n  elementsPerPage\n}) => {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const scopedT = useScopedI18n(i18ns.vocab);\n  const [isMounted, setIsMounted] = useState<boolean>(false);\n  useEffect(() => setIsMounted(true), []);\n  const dir = isMounted ? getDirection() : 'ltr';\n\n  const pagesRange = pagesRangeValue ?? 3;\n\n  const pagesAmount = forcedPagesAmount ?? computePagesAmount(paginatedElements.length, elementsPerPage);\n  const unsafePageFromUrl = searchParams.get('page');\n  const pageFromUrl = initializeCurrentPage(Number(unsafePageFromUrl), pagesAmount);\n\n  const startIndex = (pageFromUrl - 1) * elementsPerPage;\n  const endIndex = startIndex + elementsPerPage;\n  const currentElements = paginatedElements.slice(startIndex, endIndex);\n\n  const ypos = position ?? 'bottom';\n  const xpos = justify ?? 'normal';\n  const posClassName = ypos === 'bottom' ? 'mt-4' : 'mb-4';\n  const chevronsClassName = 'scale-75';\n\n  const nextAndPrevIconsClassList = 'w-10 h-10 lg:w-8 lg:h-7 flex items-centers justify-center bg-accent rounded-md';\n\n  function handlePageClick(event: { selected: number }) {\n    const page = event.selected + 1;\n    const q = createURLSearchParams({ page });\n    router.push(q, { scroll: false });\n  }\n\n  const flexJustifyClass = `justify-${xpos}`;\n  const paginationNode = (\n    <div className={cn('min-h-[40px] lg:min-h-[32px]', posClassName)}>\n      <ReactPaginate\n        previousLabel={\n          <span className={nextAndPrevIconsClassList}>\n            {dir === 'ltr' ? <ChevronLeftIcon className={chevronsClassName} /> : <ChevronRightIcon className={chevronsClassName} />}\n          </span>\n        }\n        nextLabel={\n          <span className={nextAndPrevIconsClassList}>\n            {dir === 'ltr' ? <ChevronRightIcon className={chevronsClassName} /> : <ChevronLeftIcon className={chevronsClassName} />}\n          </span>\n        }\n        nextLinkClassName={cn('flex items-center justify-center rounded-md', { 'pointer-events-none opacity-50': pageFromUrl >= pagesAmount })}\n        previousLinkClassName={cn('flex items-center justify-center rounded-md', { 'pointer-events-none opacity-50': pageFromUrl <= 1 })}\n        pageLinkClassName=\"flex items-center justify-center hover:bg-accent p-2 px-4 lg:p-1 lg:px-3 rounded-md\"\n        ariaLabelBuilder={(pageNumber) => `${capitalize(scopedT('page'))} ${pageNumber}`}\n        containerClassName=\"flex items-center justify-center mt-8 mb-4 select-none\"\n        pageRangeDisplayed={pagesRange < pagesAmount ? pagesRange : pagesAmount}\n        className={cn('flex items-center gap-2', flexJustifyClass)}\n        activeClassName=\"pointer-events-none bg-accent rounded-md\"\n        previousAriaLabel={scopedT('prev')}\n        nextAriaLabel={scopedT('next')}\n        onPageChange={handlePageClick}\n        forcePage={pageFromUrl - 1}\n        pageCount={pagesAmount}\n        breakLabel=\"...\"\n      />\n    </div>\n  );\n\n  const currentElementsNode = (\n    <PaginatedElementsBodyWrapper paginatedElementsBodyWrapperProps={paginatedElementsBodyWrapperProps}>\n      {currentElements}\n    </PaginatedElementsBodyWrapper>\n  );\n\n  return ypos === 'bottom' ? (\n    <>\n      {currentElementsNode}\n      {paginationNode}\n    </>\n  ) : (\n    <>\n      {paginationNode}\n      {currentElementsNode}\n    </>\n  );\n};\n\nexport default PaginatedElements;\n"
    },
    "src/components/ui/blog/BlogPostDate.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "819",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 60,
              "line": 12
            }
          }
        },
        {
          "id": "820",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 13
            },
            "start": {
              "column": 23,
              "line": 13
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { BlogPostProps } from '@/types/Blog';\nimport type { FunctionComponent } from 'react';\n\nimport { getBlogPostFormattedDate } from '@/lib/blog/api';\nimport { cn } from '@/lib/tailwind';\n\ninterface BlogPostDateProps extends BlogPostProps, Partial<WithClassname> {}\n\nconst BlogPostDate: FunctionComponent<BlogPostDateProps> = ({ className: classNameValue, language, post }) => (\n  <time className={cn('text-xs', classNameValue)} dateTime={post.date}>\n    {getBlogPostFormattedDate(language, post.date)}\n  </time>\n);\n\nexport default BlogPostDate;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/blog/BlogPostPreview.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "821",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 41
            },
            "start": {
              "column": 118,
              "line": 16
            }
          }
        },
        {
          "id": "822",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 27
            },
            "start": {
              "column": 64,
              "line": 27
            }
          }
        },
        {
          "id": "823",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 27
            },
            "start": {
              "column": 71,
              "line": 27
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { BlogPostProps } from '@/types/Blog';\nimport type { FunctionComponent } from 'react';\n\nimport { getBlogPostPathWithoutI18nPart, getSlicedBlogPostDescription } from '@/lib/blog/api';\nimport Link from 'next/link';\n\nimport { CardDescription, CardContent, CardHeader, CardTitle, Card } from '../Card';\nimport BlogPostDate from './BlogPostDate';\n\ninterface BlogPostPreviewProps extends BlogPostProps {\n  isNotOnBlogSubcategoryPage?: boolean;\n}\n\nconst BlogPostPreview: FunctionComponent<BlogPostPreviewProps> = ({ isNotOnBlogSubcategoryPage, language, post }) => {\n  const descriptionSnippet = post.description ? getSlicedBlogPostDescription(post.description) : getSlicedBlogPostDescription(post.metadescription);\n\n  return (\n    <article>\n      <Link\n        className=\"flex h-full w-full flex-col transition-transform duration-300 hover:delay-0 hover:duration-100 focus:delay-0 focus:duration-100 dark:hover:brightness-125 dark:focus:brightness-125 lg:hover:scale-105 lg:focus:scale-105\"\n        href={getBlogPostPathWithoutI18nPart(post)}\n      >\n        <Card className=\"overflow-hidden rounded shadow-lg transition-[box-shadow] duration-300 hover:shadow-xl focus:shadow-xl\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle titleType={isNotOnBlogSubcategoryPage ? 'h3' : 'h2'} className=\"is-h3\">\n              {post.title}\n            </CardTitle>\n            <CardDescription>\n              <BlogPostDate className=\"bg-secondary p-1 text-black dark:text-white\" language={language} post={post} />\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"break-word text-sm [&>*:last-child]:mb-0 [&>*]:mb-3\">{descriptionSnippet}</div>\n          </CardContent>\n        </Card>\n      </Link>\n    </article>\n  );\n};\n\nexport default BlogPostPreview;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/blog/BlogPostsNotFound.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "824",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/BlogPostsNotFound.tsx(8,7): error TS2322: Type '() => Promise<void>' is not assignable to type 'FunctionComponent<BlogPostsNotFoundProps>'.\n  Type 'Promise<void>' is not assignable to type 'ReactNode'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLikeOfReactNode'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = ReactNode, TResult2 = never>(onfulfilled?: ((value: ReactNode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 82,
              "line": 8
            }
          }
        },
        {
          "id": "825",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/blog/BlogPostsNotFound.tsx(10,23): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"'.\n  Overload 2 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 10
            },
            "start": {
              "column": 23,
              "line": 10
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\ninterface BlogPostsNotFoundProps {}\n\nconst BlogPostsNotFound: FunctionComponent<BlogPostsNotFoundProps> = async () => {\n  const globalT = await getServerSideI18n();\n  const txt = globalT(`${i18ns.vocab}.no-blog-post`);\n  return <p>{txt}</p>;\n};\n\nexport default BlogPostsNotFound;\n"
    },
    "src/components/ui/blog/CopyToClipboard.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "826",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(14,7): error TS2322: Type '({ children }: CopyToClipboardProps) => void' is not assignable to type 'FunctionComponent<CopyToClipboardProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 97
            },
            "start": {
              "column": 84,
              "line": 14
            }
          }
        },
        {
          "id": "827",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 17
            },
            "start": {
              "column": 51,
              "line": 17
            }
          }
        },
        {
          "id": "828",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 18
            },
            "start": {
              "column": 51,
              "line": 18
            }
          }
        },
        {
          "id": "829",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 19
            },
            "start": {
              "column": 49,
              "line": 19
            }
          }
        },
        {
          "id": "830",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 22
            },
            "start": {
              "column": 24,
              "line": 22
            }
          }
        },
        {
          "id": "831",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 22
            },
            "start": {
              "column": 41,
              "line": 22
            }
          }
        },
        {
          "id": "832",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 25
            },
            "start": {
              "column": 30,
              "line": 23
            }
          }
        },
        {
          "id": "833",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 24
            },
            "start": {
              "column": 16,
              "line": 24
            }
          }
        },
        {
          "id": "834",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 27
            },
            "start": {
              "column": 19,
              "line": 27
            }
          }
        },
        {
          "id": "835",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 27
            },
            "start": {
              "column": 36,
              "line": 27
            }
          }
        },
        {
          "id": "836",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 30
            },
            "start": {
              "column": 24,
              "line": 28
            }
          }
        },
        {
          "id": "837",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 29
            },
            "start": {
              "column": 16,
              "line": 29
            }
          }
        },
        {
          "id": "838",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 32
            },
            "start": {
              "column": 20,
              "line": 32
            }
          }
        },
        {
          "id": "839",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 32
            },
            "start": {
              "column": 26,
              "line": 32
            }
          }
        },
        {
          "id": "840",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 32
            },
            "start": {
              "column": 26,
              "line": 32
            }
          }
        },
        {
          "id": "841",
          "mutatorName": "LogicalOperator",
          "replacement": "!hovered || !focused",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 32
            },
            "start": {
              "column": 26,
              "line": 32
            }
          }
        },
        {
          "id": "842",
          "mutatorName": "BooleanLiteral",
          "replacement": "hovered",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 32
            },
            "start": {
              "column": 26,
              "line": 32
            }
          }
        },
        {
          "id": "843",
          "mutatorName": "BooleanLiteral",
          "replacement": "focused",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 32
            },
            "start": {
              "column": 38,
              "line": 32
            }
          }
        },
        {
          "id": "844",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 33
            },
            "start": {
              "column": 19,
              "line": 33
            }
          }
        },
        {
          "id": "845",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 33
            },
            "start": {
              "column": 25,
              "line": 33
            }
          }
        },
        {
          "id": "846",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 33
            },
            "start": {
              "column": 25,
              "line": 33
            }
          }
        },
        {
          "id": "847",
          "mutatorName": "LogicalOperator",
          "replacement": "hovered && focused",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 33
            },
            "start": {
              "column": 25,
              "line": 33
            }
          }
        },
        {
          "id": "848",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 51
            },
            "start": {
              "column": 24,
              "line": 35
            }
          }
        },
        {
          "id": "849",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 39
            },
            "start": {
              "column": 15,
              "line": 39
            }
          }
        },
        {
          "id": "850",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(40,45): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 40
            },
            "start": {
              "column": 9,
              "line": 40
            }
          }
        },
        {
          "id": "851",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(40,46): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 40
            },
            "start": {
              "column": 9,
              "line": 40
            }
          }
        },
        {
          "id": "852",
          "mutatorName": "LogicalOperator",
          "replacement": "textInputInstance || textInputInstance.textContent !== null",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(40,48): error TS2339: Property 'textContent' does not exist on type 'never'.\nsrc/components/ui/blog/CopyToClipboard.tsx(40,100): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 40
            },
            "start": {
              "column": 9,
              "line": 40
            }
          }
        },
        {
          "id": "853",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(40,66): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.\n  Type 'null' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 40
            },
            "start": {
              "column": 30,
              "line": 40
            }
          }
        },
        {
          "id": "854",
          "mutatorName": "EqualityOperator",
          "replacement": "textInputInstance.textContent === null",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(40,100): error TS2345: Argument of type 'null' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 40
            },
            "start": {
              "column": 30,
              "line": 40
            }
          }
        },
        {
          "id": "855",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(41,28): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 41
            },
            "start": {
              "column": 9,
              "line": 41
            }
          }
        },
        {
          "id": "856",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(41,29): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 41
            },
            "start": {
              "column": 9,
              "line": 41
            }
          }
        },
        {
          "id": "857",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 50
            },
            "start": {
              "column": 41,
              "line": 43
            }
          }
        },
        {
          "id": "858",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentCoroutine",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(48,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'null' is not assignable to parameter of type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 44
            },
            "start": {
              "column": 11,
              "line": 44
            }
          }
        },
        {
          "id": "859",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(48,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 44
            },
            "start": {
              "column": 11,
              "line": 44
            }
          }
        },
        {
          "id": "860",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(48,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(timeoutId: string | number | Timeout | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'string | number | Timeout | undefined'.\n      Type 'null' is not assignable to type 'string | number | Timeout | undefined'.\n  Overload 2 of 2, '(id: number | undefined): void', gave the following error.\n    Argument of type 'Timeout | null' is not assignable to parameter of type 'number | undefined'.\n      Type 'null' is not assignable to type 'number | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 44
            },
            "start": {
              "column": 11,
              "line": 44
            }
          }
        },
        {
          "id": "861",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 45
            },
            "start": {
              "column": 17,
              "line": 45
            }
          }
        },
        {
          "id": "862",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 47
            },
            "start": {
              "column": 11,
              "line": 47
            }
          }
        },
        {
          "id": "863",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 47
            },
            "start": {
              "column": 11,
              "line": 47
            }
          }
        },
        {
          "id": "864",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 128,
              "line": 57
            },
            "start": {
              "column": 25,
              "line": 57
            }
          }
        },
        {
          "id": "865",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 62
            },
            "start": {
              "column": 130,
              "line": 57
            }
          }
        },
        {
          "id": "866",
          "mutatorName": "BooleanLiteral",
          "replacement": "copied",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 60
            },
            "start": {
              "column": 38,
              "line": 60
            }
          }
        },
        {
          "id": "867",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/blog/CopyToClipboard.tsx(63,31): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"'.\n  Overload 2 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.title\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 63
            },
            "start": {
              "column": 31,
              "line": 63
            }
          }
        },
        {
          "id": "868",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 70
            },
            "start": {
              "column": 33,
              "line": 70
            }
          }
        },
        {
          "id": "869",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 70
            },
            "start": {
              "column": 52,
              "line": 70
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { getRefCurrentPtr } from '@rtm/shared-lib/react';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { useState, useRef } from 'react';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\n\ninterface CopyToClipboardProps extends WithChildren {}\n\nconst CopyToClipboard: FunctionComponent<CopyToClipboardProps> = ({ children }) => {\n  const textInputRef = useRef<HTMLDivElement>(null);\n  const copyBtnRef = useRef<HTMLButtonElement>(null);\n  const [hovered, setHovered] = useState<boolean>(false);\n  const [focused, setFocused] = useState<boolean>(false);\n  const [copied, setCopied] = useState<boolean>(false);\n  const globalT = getClientSideI18n();\n\n  const onMouseEnter = () => setHovered(true);\n  const onMouseLeave = () => {\n    setHovered(false);\n  };\n\n  const onFocus = () => setFocused(true);\n  const onBlur = () => {\n    setFocused(false);\n  };\n\n  const isHidden = () => !hovered && !focused;\n  const isShown = () => hovered || focused;\n\n  const onCopy = () => {\n    let currentCoroutine: NodeJS.Timeout | null = null;\n    const textInputInstance = getRefCurrentPtr(textInputRef);\n\n    setCopied(true);\n    if (textInputInstance && textInputInstance.textContent !== null) navigator.clipboard.writeText(textInputInstance.textContent);\n    if (currentCoroutine) clearTimeout(currentCoroutine);\n\n    currentCoroutine = setTimeout(() => {\n      if (!currentCoroutine) return;\n      setCopied(false);\n      const copyBtnInstance = getRefCurrentPtr(copyBtnRef);\n      if (copyBtnInstance) copyBtnInstance.blur();\n      clearTimeout(currentCoroutine);\n      currentCoroutine = null;\n    }, 750);\n  };\n\n  return (\n    <div className=\"code-block relative\" onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} ref={textInputRef}>\n      {\n        <button\n          className={cn('absolute right-2 top-2 h-8 w-8 rounded border-2 bg-gray-700 p-1 transition-[opacity] dark:bg-gray-800', {\n            'border-green-400 focus:border-green-400 focus:outline-none': copied,\n            'opacity-0 delay-200': isHidden(),\n            'hover:border-gray-300': !copied,\n            'opacity-100': isShown()\n          })}\n          aria-label={globalT(`${i18ns.vocab}.copy-to-clipboard`)}\n          onFocus={onFocus}\n          ref={copyBtnRef}\n          onClick={onCopy}\n          onBlur={onBlur}\n        >\n          <svg\n            className={copied ? 'text-green-400' : 'text-gray-300'}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n          >\n            {copied ? (\n              <path\n                d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\"\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                strokeWidth={2}\n              />\n            ) : (\n              <path\n                d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                strokeWidth={2}\n              />\n            )}\n          </svg>\n        </button>\n      }\n      {children}\n    </div>\n  );\n};\n\nexport default CopyToClipboard;\n"
    },
    "src/components/ui/breadcrumbs/Breadcrumbs.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "870",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(31,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 69
            },
            "start": {
              "column": 16,
              "line": 32
            }
          }
        },
        {
          "id": "871",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(56,49): error TS2345: Argument of type 'void' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 65,
              "line": 33
            }
          }
        },
        {
          "id": "872",
          "mutatorName": "MethodExpression",
          "replacement": "pathParts",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 34
            },
            "start": {
              "column": 30,
              "line": 34
            }
          }
        },
        {
          "id": "873",
          "mutatorName": "ArithmeticOperator",
          "replacement": "depth - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 34
            },
            "start": {
              "column": 49,
              "line": 34
            }
          }
        },
        {
          "id": "874",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 45
            },
            "start": {
              "column": 7,
              "line": 40
            }
          }
        },
        {
          "id": "875",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 9,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 46
            }
          }
        },
        {
          "id": "876",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(53,55): error TS2322: Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 60
            },
            "start": {
              "column": 73,
              "line": 48
            }
          }
        },
        {
          "id": "877",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(43,37): error TS18048: 'customCrumbs' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 49
            },
            "start": {
              "column": 9,
              "line": 49
            }
          }
        },
        {
          "id": "878",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(43,37): error TS18048: 'customCrumbs' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 49
            },
            "start": {
              "column": 9,
              "line": 49
            }
          }
        },
        {
          "id": "879",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 53
            },
            "start": {
              "column": 23,
              "line": 49
            }
          }
        },
        {
          "id": "880",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 52
            },
            "start": {
              "column": 51,
              "line": 50
            }
          }
        },
        {
          "id": "881",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 51
            },
            "start": {
              "column": 13,
              "line": 51
            }
          }
        },
        {
          "id": "882",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 51
            },
            "start": {
              "column": 13,
              "line": 51
            }
          }
        },
        {
          "id": "883",
          "mutatorName": "EqualityOperator",
          "replacement": "customComponent.depth !== depth + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 51
            },
            "start": {
              "column": 13,
              "line": 51
            }
          }
        },
        {
          "id": "884",
          "mutatorName": "ArithmeticOperator",
          "replacement": "depth - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 51
            },
            "start": {
              "column": 39,
              "line": 51
            }
          }
        },
        {
          "id": "885",
          "mutatorName": "BooleanLiteral",
          "replacement": "Object.keys(SHARED_VOCAB_SCHEMA['pages-titles']).includes(pathParts[depth])",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 102,
              "line": 55
            },
            "start": {
              "column": 26,
              "line": 55
            }
          }
        },
        {
          "id": "886",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(54,39): error TS7053: Element implicitly has an 'any' type because expression of type '\"\"' can't be used to index type '{ readonly 'pages-titles': { readonly 'fake-subcategory': \"\"; readonly 'patch-notes-bis': \"\"; readonly 'discord-bot-bis': \"\"; readonly 'dashboard-bis': \"\"; readonly 'patch-notes': \"\"; readonly 'discord-bot': \"\"; readonly 'sign-up': \"\"; readonly dashboard: \"\"; readonly homepage: \"\"; readonly blog: \"\"; }; readonly voc...'.\n  Property '' does not exist on type '{ readonly 'pages-titles': { readonly 'fake-subcategory': \"\"; readonly 'patch-notes-bis': \"\"; readonly 'discord-bot-bis': \"\"; readonly 'dashboard-bis': \"\"; readonly 'patch-notes': \"\"; readonly 'discord-bot': \"\"; readonly 'sign-up': \"\"; readonly dashboard: \"\"; readonly homepage: \"\"; readonly blog: \"\"; }; readonly voc...'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 73,
              "line": 55
            },
            "start": {
              "column": 59,
              "line": 55
            }
          }
        },
        {
          "id": "887",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 56
            },
            "start": {
              "column": 9,
              "line": 56
            }
          }
        },
        {
          "id": "888",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 56
            },
            "start": {
              "column": 9,
              "line": 56
            }
          }
        },
        {
          "id": "889",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 107,
              "line": 56
            },
            "start": {
              "column": 39,
              "line": 56
            }
          }
        },
        {
          "id": "890",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 62
            },
            "start": {
              "column": 23,
              "line": 62
            }
          }
        },
        {
          "id": "891",
          "mutatorName": "EqualityOperator",
          "replacement": "depth <= pathParts.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 62
            },
            "start": {
              "column": 23,
              "line": 62
            }
          }
        },
        {
          "id": "892",
          "mutatorName": "EqualityOperator",
          "replacement": "depth >= pathParts.length",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 62
            },
            "start": {
              "column": 23,
              "line": 62
            }
          }
        },
        {
          "id": "893",
          "mutatorName": "UpdateOperator",
          "replacement": "depth--",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 62
            },
            "start": {
              "column": 49,
              "line": 62
            }
          }
        },
        {
          "id": "894",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 67
            },
            "start": {
              "column": 58,
              "line": 62
            }
          }
        },
        {
          "id": "895",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 63
            },
            "start": {
              "column": 20,
              "line": 63
            }
          }
        },
        {
          "id": "896",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 63
            },
            "start": {
              "column": 20,
              "line": 63
            }
          }
        },
        {
          "id": "897",
          "mutatorName": "EqualityOperator",
          "replacement": "pathParts[depth + 1] !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 63
            },
            "start": {
              "column": 20,
              "line": 63
            }
          }
        },
        {
          "id": "898",
          "mutatorName": "ArithmeticOperator",
          "replacement": "depth - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 63
            },
            "start": {
              "column": 30,
              "line": 63
            }
          }
        },
        {
          "id": "899",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 66
            },
            "start": {
              "column": 26,
              "line": 66
            }
          }
        },
        {
          "id": "900",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(70,7): error TS2322: Type '({ withHomepageElement: maybeWithHomepageElement, customCrumbs, className }: BreadcrumbsProps) => void' is not assignable to type 'FunctionComponent<BreadcrumbsProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 88
            },
            "start": {
              "column": 138,
              "line": 71
            }
          }
        },
        {
          "id": "901",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 80
            },
            "start": {
              "column": 7,
              "line": 80
            }
          }
        },
        {
          "id": "902",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 80
            },
            "start": {
              "column": 7,
              "line": 80
            }
          }
        },
        {
          "id": "903",
          "mutatorName": "EqualityOperator",
          "replacement": "pathname !== ROUTES_ROOTS.WEBSITE",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 80
            },
            "start": {
              "column": 7,
              "line": 80
            }
          }
        },
        {
          "id": "904",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(76,31): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n  Overload 2 of 2, '(key: \"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"copy-to-clipboard\" | \"invite-the-bot\" | \"no-blog-post\" | \"brand-short\" | \"see-more\" | \"loading\" | \"404\" | \"prev\" | \"next\" | \"breadcrumbs\" | \"brand\" | \"logo\" | \"page\" | \"sr-only.brand-logo\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 82
            },
            "start": {
              "column": 31,
              "line": 82
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { PagesTitlesKey, LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { CustomCrumbs } from '@rtm/shared-types/Breadcrumbs';\nimport type { FunctionComponent, ReactNode } from 'react';\nimport type { getScopedI18n } from '@/i18n/server';\n\nimport { buildAbsolutePathFromParts } from '@rtm/shared-lib/str';\nimport { useCurrentLocale, useScopedI18n } from '@/i18n/client';\nimport { SHARED_VOCAB_SCHEMA } from '@/i18n/locales/schema';\nimport { usePathname } from 'next/navigation';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { getPathParts } from '@/lib/next';\nimport { i18ns } from '##/config/i18n';\n\nimport HomepageCrumb from './custom/HomepageCrumb';\nimport CrumbSeparator from './CrumbSeparator';\nimport Crumb from './Crumb';\n\ninterface BreadcrumbsProps {\n  withHomepageElement?: boolean;\n  customCrumbs?: CustomCrumbs;\n  className?: string;\n}\n\nfunction crumbsGenerator(\n  pathParts: string[],\n  withHomepageElement: boolean,\n  scopedT: Awaited<ReturnType<typeof getScopedI18n<typeof i18ns.pagesTitles>>>,\n  currentLocale: LanguageFlag,\n  customCrumbs?: CustomCrumbs\n): ReactNode[] {\n  function buildCurrentPath(pathParts: string[], depth: number) {\n    const currentPathParts = pathParts.slice(0, depth + 1);\n    const currentPath = buildAbsolutePathFromParts(...currentPathParts);\n    return currentPath;\n  }\n\n  const crumbs: ReactNode[] = withHomepageElement\n    ? [\n        <>\n          <HomepageCrumb />\n          <CrumbSeparator />\n        </>\n      ]\n    : [];\n\n  function crumbGenerator(depth: number, isLeaf: boolean, href: string) {\n    if (customCrumbs) {\n      for (const customComponent of customCrumbs) {\n        if (customComponent.depth === depth + 1) return customComponent.jsx;\n      }\n    }\n\n    const missingLabel = !Object.keys(SHARED_VOCAB_SCHEMA['pages-titles']).includes(pathParts[depth]);\n    if (missingLabel) throw new Error(`Missing pages-titles (${currentLocale}) label: ${pathParts[depth]}`);\n\n    const label = scopedT(pathParts[depth] as PagesTitlesKey);\n    return <Crumb isLeaf={isLeaf} label={label} href={href} />;\n  }\n\n  for (let depth = 0; depth < pathParts.length; depth++) {\n    const isLeaf = pathParts[depth + 1] === undefined;\n    const href = buildCurrentPath(pathParts, depth);\n    const crumb = crumbGenerator(depth, isLeaf, href);\n    crumbs.push(<li key={`breadcrumbs-part-${depth}`}>{crumb}</li>);\n  }\n  return crumbs;\n}\n\nconst Breadcrumbs: FunctionComponent<BreadcrumbsProps> = ({ withHomepageElement: maybeWithHomepageElement, customCrumbs, className }) => {\n  const pathname = usePathname();\n  const pathParts = getPathParts(pathname);\n  const withHomepageElement = Boolean(maybeWithHomepageElement);\n  const { pagesTitles, vocab } = i18ns;\n  const scopedT = useScopedI18n(pagesTitles);\n  const scopedT2 = useScopedI18n(vocab);\n  const currentLocale = useCurrentLocale();\n\n  if (pathname === ROUTES_ROOTS.WEBSITE) return withHomepageElement ? <HomepageCrumb isLeaf /> : null;\n  return (\n    <nav aria-label={scopedT2('breadcrumbs')} className={className}>\n      <ol className=\"flex w-fit flex-wrap justify-center gap-y-1 rounded-lg bg-accent bg-opacity-75 px-3 py-2 lg:justify-normal\">\n        {crumbsGenerator(pathParts, withHomepageElement, scopedT, currentLocale, customCrumbs)}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumbs;\n"
    },
    "src/components/ui/breadcrumbs/Crumb.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "905",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Crumb.tsx(15,7): error TS2322: Type '({ isLeaf: maybeIsLeaf, label, href }: CrumbProps) => void' is not assignable to type 'FunctionComponent<CrumbProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 37
            },
            "start": {
              "column": 88,
              "line": 15
            }
          }
        },
        {
          "id": "906",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 22
            },
            "start": {
              "column": 11,
              "line": 22
            }
          }
        },
        {
          "id": "907",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 25
            },
            "start": {
              "column": 11,
              "line": 23
            }
          }
        },
        {
          "id": "908",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLeaf",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 108,
              "line": 24
            },
            "start": {
              "column": 101,
              "line": 24
            }
          }
        },
        {
          "id": "909",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 26
            },
            "start": {
              "column": 11,
              "line": 26
            }
          }
        },
        {
          "id": "910",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/Crumb.tsx(30,8): error TS2322: Type '{ children: string; className: string; \"aria-disabled\": \"\" | undefined; \"aria-current\": \"page\" | undefined; href: string; \"data-qa-warning\": MaybeObjectValue<string>; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property ''aria-disabled'' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'Booleanish | undefined'.\n      Type '\"\"' is not assignable to type 'Booleanish | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 28
            },
            "start": {
              "column": 33,
              "line": 28
            }
          }
        },
        {
          "id": "911",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/Crumb.tsx(30,8): error TS2322: Type '{ children: string; className: string; \"aria-disabled\": \"true\" | undefined; \"aria-current\": \"\" | undefined; href: string; \"data-qa-warning\": MaybeObjectValue<string>; }' is not assignable to type 'Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps>'.\n  Types of property ''aria-current'' are incompatible.\n    Type '\"\" | undefined' is not assignable to type 'boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | undefined'.\n      Type '\"\"' is not assignable to type 'boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 29
            },
            "start": {
              "column": 32,
              "line": 29
            }
          }
        },
        {
          "id": "912",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 34
            },
            "start": {
              "column": 8,
              "line": 34
            }
          }
        },
        {
          "id": "913",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 34
            },
            "start": {
              "column": 8,
              "line": 34
            }
          }
        },
        {
          "id": "914",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLeaf || <CrumbSeparator />",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 34
            },
            "start": {
              "column": 8,
              "line": 34
            }
          }
        },
        {
          "id": "915",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLeaf",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 34
            },
            "start": {
              "column": 8,
              "line": 34
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nimport CrumbSeparator from './CrumbSeparator';\n\ninterface CrumbProps {\n  withRescueCtx?: boolean;\n  isLeaf?: boolean;\n  label: string;\n  href: string;\n}\n\nconst Crumb: FunctionComponent<CrumbProps> = ({ isLeaf: maybeIsLeaf, label, href }) => {\n  const isLeaf = Boolean(maybeIsLeaf);\n\n  return (\n    <>\n      <Link\n        className={cn(\n          'duration-250 transition-colors',\n          {\n            'opacity-60 hover:text-primary hover:opacity-100 focus:text-primary focus:opacity-100': !isLeaf\n          },\n          { 'pointer-events-none font-semibold': isLeaf }\n        )}\n        aria-disabled={isLeaf ? 'true' : undefined}\n        aria-current={isLeaf ? 'page' : undefined}\n        href={href}\n      >\n        {label}\n      </Link>\n      {!isLeaf && <CrumbSeparator />}\n    </>\n  );\n};\n\nexport default Crumb;\n"
    },
    "src/components/ui/breadcrumbs/CrumbSeparator.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "916",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 64,
              "line": 5
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\ninterface CrumbSeparatorProps {}\n\nconst CrumbSeparator: FunctionComponent<CrumbSeparatorProps> = () => (\n  <span className=\"mx-1 select-none text-black text-opacity-50 dark:text-white\" aria-hidden=\"true\">\n    /\n  </span>\n);\n\nexport default CrumbSeparator;\n"
    },
    "src/components/ui/breadcrumbs/custom/BlogPostCrumb.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "917",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 123,
              "line": 10
            },
            "start": {
              "column": 62,
              "line": 10
            }
          }
        }
      ],
      "source": "import type { FunctionComponent } from 'react';\n\nimport Crumb from '../Crumb';\n\ninterface BlogPostCrumbProps {\n  label: string;\n  url: string;\n}\n\nconst BlogPostCrumb: FunctionComponent<BlogPostCrumbProps> = ({ label, url }) => <Crumb label={label} href={url} isLeaf />;\n\nexport default BlogPostCrumb;\n"
    },
    "src/components/ui/breadcrumbs/custom/HomepageCrumb.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "918",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/custom/HomepageCrumb.tsx(15,7): error TS2322: Type '({ isLeaf }: HomepageCrumbProps) => void' is not assignable to type 'FunctionComponent<HomepageCrumbProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 78,
              "line": 15
            }
          }
        },
        {
          "id": "919",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/components/ui/breadcrumbs/custom/HomepageCrumb.tsx(18,25): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"fake-subcategory\" | \"patch-notes-bis\" | \"discord-bot-bis\" | \"dashboard-bis\" | \"patch-notes\" | \"discord-bot\" | \"sign-up\" | \"dashboard\" | \"homepage\" | \"blog\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"fake-subcategory\" | \"patch-notes-bis\" | \"discord-bot-bis\" | \"dashboard-bis\" | \"patch-notes\" | \"discord-bot\" | \"sign-up\" | \"dashboard\" | \"homepage\" | \"blog\"'.\n  Overload 2 of 2, '(key: \"fake-subcategory\" | \"patch-notes-bis\" | \"discord-bot-bis\" | \"dashboard-bis\" | \"patch-notes\" | \"discord-bot\" | \"sign-up\" | \"dashboard\" | \"homepage\" | \"blog\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"fake-subcategory\" | \"patch-notes-bis\" | \"discord-bot-bis\" | \"dashboard-bis\" | \"patch-notes\" | \"discord-bot\" | \"sign-up\" | \"dashboard\" | \"homepage\" | \"blog\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 18
            },
            "start": {
              "column": 25,
              "line": 18
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport { useScopedI18n } from '@/i18n/client';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { i18ns } from '##/config/i18n';\n\nimport Crumb from '../Crumb';\n\ninterface HomepageCrumbProps {\n  isLeaf?: boolean;\n}\n\nconst HomepageCrumb: FunctionComponent<HomepageCrumbProps> = ({ isLeaf }) => {\n  const { pagesTitles } = i18ns;\n  const scopedT = useScopedI18n(pagesTitles);\n  const label = scopedT('homepage');\n  const href = ROUTES_ROOTS.WEBSITE;\n\n  return <Crumb isLeaf={isLeaf} label={label} href={href} />;\n};\n\nexport default HomepageCrumb;\n"
    },
    "src/components/ui/cta/InviteTheBotButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "920",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 78,
              "line": 15
            }
          }
        },
        {
          "id": "921",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 55,
              "line": 24
            },
            "start": {
              "column": 24,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport { CogIcon } from '@heroicons/react/20/solid';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { Button } from '@/components/ui/Button';\nimport DISCORD_CONFIG from '@/config/discord';\nimport { i18ns } from '##/config/i18n';\n\ninterface InviteTheBotButtonProps {}\n\nconst InviteTheBotButton: FunctionComponent<InviteTheBotButtonProps> = () => {\n  const globalT = getClientSideI18n();\n\n  return (\n    <Button href={DISCORD_CONFIG.BOT_INVITE_LINK}>\n      <span className=\"flex items-center gap-1\">\n        <span>\n          <CogIcon className=\"h-7 w-7\" />\n        </span>\n        <span>{globalT(`${i18ns.vocab}.invite-the-bot`)}</span>\n      </span>\n    </Button>\n  );\n};\n\nexport default InviteTheBotButton;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/cta/SignupButton.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "922",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 66,
              "line": 16
            }
          }
        },
        {
          "id": "923",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 21
            },
            "start": {
              "column": 22,
              "line": 21
            }
          }
        },
        {
          "id": "924",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 44,
              "line": 21
            },
            "start": {
              "column": 35,
              "line": 21
            }
          }
        },
        {
          "id": "925",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 21
            },
            "start": {
              "column": 46,
              "line": 21
            }
          }
        },
        {
          "id": "926",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 38,
              "line": 22
            },
            "start": {
              "column": 16,
              "line": 22
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { getClientSideI18n } from '@/i18n/client';\nimport { Button } from '@/components/ui/Button';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { signIn } from 'next-auth/react';\nimport { i18ns } from '##/config/i18n';\n\ninterface SignUpButtonProps {}\n\nconst SignupButton: FunctionComponent<SignUpButtonProps> = () => {\n  const globalT = getClientSideI18n();\n  const className = BUTTON_CONFIG.CLASSNAME;\n\n  return (\n    <Button onClick={() => signIn('discord', { callbackUrl: ROUTES_ROOTS.DASHBOARD })} className={className} size=\"lg\">\n      {globalT(`${i18ns.auth}.signup`)}\n    </Button>\n  );\n};\n\nexport default SignupButton;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/hoc/MaybePaginatedElements.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "927",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/hoc/MaybePaginatedElements.tsx(25,34): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 9
            },
            "start": {
              "column": 33,
              "line": 9
            }
          }
        },
        {
          "id": "928",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 9
            },
            "start": {
              "column": 58,
              "line": 9
            }
          }
        },
        {
          "id": "929",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 9
            },
            "start": {
              "column": 58,
              "line": 9
            }
          }
        },
        {
          "id": "930",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount < 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 9
            },
            "start": {
              "column": 58,
              "line": 9
            }
          }
        },
        {
          "id": "931",
          "mutatorName": "EqualityOperator",
          "replacement": "pagesAmount > 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 9
            },
            "start": {
              "column": 58,
              "line": 9
            }
          }
        },
        {
          "id": "932",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/PaginatedElements.tsx(57,63): error TS2554: Expected 0 arguments, but got 2.\nsrc/components/ui/PaginatedElements.tsx(59,72): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\nsrc/components/ui/PaginatedElements.tsx(92,129): error TS18048: 'pagesAmount' is possibly 'undefined'.\nsrc/components/ui/PaginatedElements.tsx(97,42): error TS18048: 'pagesAmount' is possibly 'undefined'.\nsrc/components/ui/PaginatedElements.tsx(104,9): error TS2322: Type 'number | undefined' is not assignable to type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\nsrc/components/ui/hoc/MaybePaginatedElements.tsx(23,42): error TS2554: Expected 0 arguments, but got 2.\nsrc/components/ui/hoc/MaybePaginatedElements.tsx(25,34): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 99,
              "line": 10
            },
            "start": {
              "column": 35,
              "line": 10
            }
          }
        },
        {
          "id": "933",
          "mutatorName": "ArithmeticOperator",
          "replacement": "total * perChunk",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 98,
              "line": 10
            },
            "start": {
              "column": 82,
              "line": 10
            }
          }
        },
        {
          "id": "934",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/hoc/MaybePaginatedElements.tsx(16,7): error TS2322: Type '({ paginatedElementsBodyWrapperProps, paginationButtonsPosition, paginationButtonsJustify, paginatedElements, elementsPerPage }: MaybePaginatedElementsProps) => void' is not assignable to type 'FunctionComponent<MaybePaginatedElementsProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 39
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        }
      ],
      "source": "import type { PaginatedElementsProps } from '@/components/ui/PaginatedElements';\nimport type { FunctionComponent } from 'react';\n\nimport PaginatedElementsBodyWrapper from '@/components/ui/hoc/PaginatedElementsBodyWrapper';\nimport PaginatedElements from '@/components/ui/PaginatedElements';\n\ninterface MaybePaginatedElementsProps extends PaginatedElementsProps {}\n\nconst paginationIsNotRequired = (pagesAmount: number) => pagesAmount <= 1;\nexport const computePagesAmount = (total: number, perChunk: number) => Math.ceil(total / perChunk);\n\n/**\n * @hoc\n * @extends {PaginatedElements} - WithControls?\n */\nconst MaybePaginatedElements: FunctionComponent<MaybePaginatedElementsProps> = ({\n  paginatedElementsBodyWrapperProps,\n  paginationButtonsPosition,\n  paginationButtonsJustify,\n  paginatedElements,\n  elementsPerPage\n}) => {\n  const pagesAmount = computePagesAmount(paginatedElements.length, elementsPerPage);\n\n  return paginationIsNotRequired(pagesAmount) ? (\n    <PaginatedElementsBodyWrapper paginatedElementsBodyWrapperProps={paginatedElementsBodyWrapperProps}>\n      {paginatedElements}\n    </PaginatedElementsBodyWrapper>\n  ) : (\n    <PaginatedElements\n      paginatedElementsBodyWrapperProps={paginatedElementsBodyWrapperProps}\n      paginationButtonsPosition={paginationButtonsPosition}\n      paginationButtonsJustify={paginationButtonsJustify}\n      paginatedElements={paginatedElements}\n      elementsPerPage={elementsPerPage}\n      pagesAmount={pagesAmount}\n    />\n  );\n};\n\nexport default MaybePaginatedElements;\n"
    },
    "src/components/ui/hoc/NavbarElement.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "935",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 62,
              "line": 13
            }
          }
        }
      ],
      "source": "import type { NavbarElementProps as NavbarElementPropsBase } from '@/types/NavData';\nimport type { FunctionComponent } from 'react';\n\nimport NavbarDropdown from '@/components/layouts/navbar/NavbarDropdown';\nimport NavbarButton from '@/components/layouts/navbar/NavbarButton';\n\ninterface NavbarElementProps extends NavbarElementPropsBase {}\n\n/**\n * @hoc\n * @generator NavbarDropdown?, NavbarButton?\n */\nconst NavbarElement: FunctionComponent<NavbarElementProps> = ({ embeddedEntities, i18nTitle, path }) =>\n  embeddedEntities ? (\n    <NavbarDropdown embeddedEntities={embeddedEntities} i18nTitle={i18nTitle} path={path} />\n  ) : (\n    <NavbarButton i18nTitle={i18nTitle} path={path} />\n  );\n\nexport default NavbarElement;\n"
    },
    "src/components/ui/hoc/PaginatedElementsBodyWrapper.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "936",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(25,7): error TS2322: Type '({ paginatedElementsBodyWrapperProps, children }: IPaginatedElementsBodyWrapperProps) => void' is not assignable to type 'FunctionComponent<IPaginatedElementsBodyWrapperProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 146,
              "line": 25
            }
          }
        },
        {
          "id": "937",
          "mutatorName": "BooleanLiteral",
          "replacement": "paginatedElementsBodyWrapperProps",
          "statusReason": "src/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(29,5): error TS2339: Property 'flexDirection' does not exist on type 'undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(30,5): error TS2339: Property 'flexJustify' does not exist on type 'undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(31,5): error TS2339: Property 'className' does not exist on type 'undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(32,5): error TS2339: Property 'flexWrap' does not exist on type 'undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(33,5): error TS2339: Property 'id' does not exist on type 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "938",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(29,5): error TS2339: Property 'flexDirection' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(30,5): error TS2339: Property 'flexJustify' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(31,5): error TS2339: Property 'className' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(32,5): error TS2339: Property 'flexWrap' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(33,5): error TS2339: Property 'id' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "939",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(29,5): error TS2339: Property 'flexDirection' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(30,5): error TS2339: Property 'flexJustify' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(31,5): error TS2339: Property 'className' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(32,5): error TS2339: Property 'flexWrap' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\nsrc/components/ui/hoc/PaginatedElementsBodyWrapper.tsx(33,5): error TS2339: Property 'id' does not exist on type 'PaginatedElementsBodyWrapperPropsBase | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 26
            },
            "start": {
              "column": 7,
              "line": 26
            }
          }
        },
        {
          "id": "940",
          "mutatorName": "LogicalOperator",
          "replacement": "flexWrapValue && 'wrap'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 36
            },
            "start": {
              "column": 20,
              "line": 36
            }
          }
        },
        {
          "id": "941",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 36
            },
            "start": {
              "column": 37,
              "line": 36
            }
          }
        },
        {
          "id": "942",
          "mutatorName": "LogicalOperator",
          "replacement": "flexDirectionValue && 'col'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 37
            },
            "start": {
              "column": 25,
              "line": 37
            }
          }
        },
        {
          "id": "943",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 37
            },
            "start": {
              "column": 47,
              "line": 37
            }
          }
        },
        {
          "id": "944",
          "mutatorName": "LogicalOperator",
          "replacement": "flexJustifyValue && 'normal'",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 38
            },
            "start": {
              "column": 23,
              "line": 38
            }
          }
        },
        {
          "id": "945",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 38
            },
            "start": {
              "column": 43,
              "line": 38
            }
          }
        },
        {
          "id": "946",
          "mutatorName": "LogicalOperator",
          "replacement": "idValue && undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 39
            },
            "start": {
              "column": 14,
              "line": 39
            }
          }
        },
        {
          "id": "947",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 40
            },
            "start": {
              "column": 24,
              "line": 40
            }
          }
        }
      ],
      "source": "import type { FlexDirection, FlexJustify, FlexWrap } from '@rtm/shared-types/HTML';\nimport type { WithClassname, WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { cn } from '@/lib/tailwind';\n\ninterface PaginatedElementsBodyWrapperPropsBase extends Partial<WithClassname> {\n  flexDirection?: FlexDirection;\n  flexJustify?: FlexJustify;\n  flexWrap?: FlexWrap;\n  id?: string;\n}\n\nexport interface PaginatedElementsBodyWrapperProps {\n  paginatedElementsBodyWrapperProps?: PaginatedElementsBodyWrapperPropsBase;\n}\n\ninterface IPaginatedElementsBodyWrapperProps extends PaginatedElementsBodyWrapperProps, WithChildren {}\n\n/**\n * @hoc\n * @extends {children} - Extra styling?\n * @implements {IPaginatedElementsBodyWrapperProps}\n */\nconst PaginatedElementsBodyWrapper: FunctionComponent<IPaginatedElementsBodyWrapperProps> = ({ paginatedElementsBodyWrapperProps, children }) => {\n  if (!paginatedElementsBodyWrapperProps) return <>{children}</>;\n\n  const {\n    flexDirection: flexDirectionValue,\n    flexJustify: flexJustifyValue,\n    className: classNameValue,\n    flexWrap: flexWrapValue,\n    id: idValue\n  } = paginatedElementsBodyWrapperProps;\n\n  const flexWrap = flexWrapValue ?? 'wrap';\n  const flexDirection = flexDirectionValue ?? 'col';\n  const flexJustify = flexJustifyValue ?? 'normal';\n  const id = idValue ?? undefined;\n  const className = cn(`flex-${flexWrap} flex-${flexDirection} justify-${flexJustify}`, classNameValue);\n\n  return (\n    <div className={className} id={id}>\n      {children}\n    </div>\n  );\n};\n\nexport default PaginatedElementsBodyWrapper;\n"
    },
    "src/components/ui/hoc/UserImage.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "948",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 35
            },
            "start": {
              "column": 119,
              "line": 20
            }
          }
        },
        {
          "id": "949",
          "mutatorName": "LogicalOperator",
          "replacement": "user?.image && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 21
            },
            "start": {
              "column": 15,
              "line": 21
            }
          }
        },
        {
          "id": "950",
          "mutatorName": "OptionalChaining",
          "replacement": "user.image",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 21
            },
            "start": {
              "column": 15,
              "line": 21
            }
          }
        },
        {
          "id": "951",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 21
            },
            "start": {
              "column": 30,
              "line": 21
            }
          }
        },
        {
          "id": "952",
          "mutatorName": "BooleanLiteral",
          "replacement": "src",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 11,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "953",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 11,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "954",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 11,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "955",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 24
            },
            "start": {
              "column": 32,
              "line": 24
            }
          }
        },
        {
          "id": "956",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 34,
              "line": 25
            },
            "start": {
              "column": 30,
              "line": 25
            }
          }
        },
        {
          "id": "957",
          "mutatorName": "LogicalOperator",
          "replacement": "user?.name && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 26
            },
            "start": {
              "column": 15,
              "line": 26
            }
          }
        },
        {
          "id": "958",
          "mutatorName": "OptionalChaining",
          "replacement": "user.name",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 26
            },
            "start": {
              "column": 15,
              "line": 26
            }
          }
        },
        {
          "id": "959",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 31,
              "line": 26
            },
            "start": {
              "column": 29,
              "line": 26
            }
          }
        },
        {
          "id": "960",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 27
            },
            "start": {
              "column": 32,
              "line": 27
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { FunctionComponent, CSSProperties } from 'react';\nimport type { WithClassname } from '@rtm/shared-types/Next';\nimport type { User } from '@rtm/shared-types/Auth';\n\nimport { AvatarFallback, AvatarImage, Avatar } from '@/components/ui/Avatar';\n\ninterface UserImageProps extends Partial<WithClassname> {\n  height: number;\n  width: number;\n  user: User;\n}\n\n/**\n * @hoc\n * @implements {User} image, name\n * @extends {Avatar}\n */\nconst UserImage: FunctionComponent<UserImageProps> = ({ height: heightValue, width: widthValue, className, user }) => {\n  const src = user?.image ?? '';\n  if (!src) return null;\n\n  const height = heightValue + 'px';\n  const width = widthValue + 'px';\n  const alt = user?.name ?? '';\n  const style: CSSProperties = { height, width };\n\n  return (\n    <Avatar className={className} style={style}>\n      <AvatarImage height={height} width={width} src={src} alt={alt} />\n      <AvatarFallback className=\"sr-only\">{alt}</AvatarFallback>\n    </Avatar>\n  );\n};\n\nexport default UserImage;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/components/ui/navbar/SitewideNavbar.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "961",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 44,
              "line": 24
            }
          }
        },
        {
          "id": "962",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(26,62): error TS2322: Type 'undefined' is not assignable to type 'ReactNode[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 31
            },
            "start": {
              "column": 56,
              "line": 26
            }
          }
        },
        {
          "id": "963",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 55,
              "line": 27
            }
          }
        },
        {
          "id": "964",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 28
            },
            "start": {
              "column": 14,
              "line": 28
            }
          }
        },
        {
          "id": "965",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(33,61): error TS2322: Type 'undefined' is not assignable to type 'ReactNode[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 38
            },
            "start": {
              "column": 55,
              "line": 33
            }
          }
        },
        {
          "id": "966",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 54,
              "line": 34
            }
          }
        },
        {
          "id": "967",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 35
            },
            "start": {
              "column": 61,
              "line": 35
            }
          }
        },
        {
          "id": "968",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(40,30): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 42,
              "line": 40
            }
          }
        },
        {
          "id": "969",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(43,3): error TS2322: Type 'undefined[]' is not assignable to type 'NavbarItems'.\n  Type 'undefined' is not assignable to type 'NavbarItem'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 45
            },
            "start": {
              "column": 43,
              "line": 42
            }
          }
        },
        {
          "id": "970",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(43,3): error TS2322: Type '{}[]' is not assignable to type 'NavbarItems'.\n  Type '{}' is missing the following properties from type 'NavbarItem': i18nTitle, jsx\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 45
            },
            "start": {
              "column": 87,
              "line": 42
            }
          }
        },
        {
          "id": "971",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 43
            },
            "start": {
              "column": 30,
              "line": 43
            }
          }
        },
        {
          "id": "972",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(49,7): error TS2322: Type '() => void' is not assignable to type 'FunctionComponent<SitewideNavbarProps>'.\n  Type 'void' is not assignable to type 'ReactNode'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 93
            },
            "start": {
              "column": 70,
              "line": 49
            }
          }
        },
        {
          "id": "973",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(51,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing._meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing._meta-description\"'.\n  Overload 2 of 2, '(key: \"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing._meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"navbar.assistance\" | \"navbar.sr-only.close-language-switcher-menu\" | \"navbar.sr-only.open-language-switcher-menu\" | \"navbar.sr-only.language-switcher-menu\" | \"navbar.sr-only.close-hamburger-menu\" | ... 53 more ... | \"blog-categories.testing._meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 51
            },
            "start": {
              "column": 27,
              "line": 51
            }
          }
        },
        {
          "id": "974",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 53
            },
            "start": {
              "column": 31,
              "line": 53
            }
          }
        },
        {
          "id": "975",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 59
            },
            "start": {
              "column": 46,
              "line": 55
            }
          }
        },
        {
          "id": "976",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 56
            },
            "start": {
              "column": 14,
              "line": 56
            }
          }
        },
        {
          "id": "977",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(61,9): error TS2322: Type 'undefined[]' is not assignable to type 'NavbarItems'.\n  Type 'undefined' is not assignable to type 'NavbarItem'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 5,
              "line": 64
            },
            "start": {
              "column": 58,
              "line": 61
            }
          }
        },
        {
          "id": "978",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/components/ui/navbar/SitewideNavbar.tsx(61,9): error TS2322: Type '{}[]' is not assignable to type 'NavbarItems'.\n  Type '{}' is missing the following properties from type 'NavbarItem': i18nTitle, jsx\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 64
            },
            "start": {
              "column": 69,
              "line": 61
            }
          }
        },
        {
          "id": "979",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 66
            },
            "start": {
              "column": 37,
              "line": 66
            }
          }
        },
        {
          "id": "980",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 80
            },
            "start": {
              "column": 27,
              "line": 80
            }
          }
        },
        {
          "id": "981",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 84
            },
            "start": {
              "column": 27,
              "line": 84
            }
          }
        }
      ],
      "source": "'use client';\n\nimport type { FunctionComponent, ReactNode } from 'react';\nimport type { NavbarItems } from '@/types/NavData';\n\nimport { NAVBAR_EXTRAS_COMPONENTS_DESKTOP, NAVBAR_EXTRAS_COMPONENTS_MOBILE } from '@/config/SitewideNavbar/Extras/utils/ComponentsMapping';\nimport SITEWIDE_NAVBAR_ROUTES, { SITEWIDE_NAVBAR_ROUTES_TITLES } from '@/config/SitewideNavbar/routesImpl';\nimport SITEWIDE_NAVBAR_DROPDOWNS_CONFIG from '@/config/SitewideNavbar/dropdownsConfig';\nimport NAVBAR_STYLE from '@/components/config/styles/navbar/NavbarStyle';\nimport NavbarButton from '@/components/layouts/navbar/NavbarButton';\nimport NavbarToggle from '@/components/layouts/navbar/NavbarToggle';\nimport getComputedNavData from '@/lib/misc/getComputedNavData';\nimport NavbarElement from '@/components/ui/hoc/NavbarElement';\nimport { getClientSideI18n } from '@/i18n/client';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { i18ns } from '##/config/i18n';\nimport { cn } from '@/lib/tailwind';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\ninterface SitewideNavbarProps {}\n\nconst { LOGO_SIZE_PX_VALUE } = NAVBAR_STYLE;\nconst navbarExtrasForMobileClassNameBase = 'h-[40px]';\n\nconst buildNavbarExtrasForDesktop: () => ReactNode[] = () =>\n  Object.values(NAVBAR_EXTRAS_COMPONENTS_DESKTOP).map((jsx, index) => (\n    <li key={`${index}-navbar-extra-desktop`} className=\"flex h-fit w-fit p-[2px]\">\n      {jsx}\n    </li>\n  ));\n\nconst buildNavbarExtrasForMobile: () => ReactNode[] = () =>\n  Object.values(NAVBAR_EXTRAS_COMPONENTS_MOBILE).map((jsx, index) => (\n    <li className={navbarExtrasForMobileClassNameBase} key={`${index}-navbar-extra-mobile`}>\n      {jsx}\n    </li>\n  ));\n\nfunction buildNavbarItems(): NavbarItems {\n  const computedNavData = getComputedNavData(SITEWIDE_NAVBAR_ROUTES, SITEWIDE_NAVBAR_ROUTES_TITLES, SITEWIDE_NAVBAR_DROPDOWNS_CONFIG);\n  const navbarItems = computedNavData.map(({ embeddedEntities, i18nTitle, path }) => ({\n    jsx: <NavbarElement key={`${i18nTitle}-${path}-navbar-btn`} embeddedEntities={embeddedEntities} i18nTitle={i18nTitle} path={path} />,\n    i18nTitle\n  }));\n  return navbarItems;\n}\n\nconst SitewideNavbar: FunctionComponent<SitewideNavbarProps> = () => {\n  const globalT = getClientSideI18n();\n  const logoAlt = globalT(`${i18ns.vocab}.sr-only.brand-logo`);\n\n  const navbarItemClassName = 'p-[5px]';\n  const navbarItems = buildNavbarItems();\n  const desktopNavbarItems = navbarItems.map((item, index) => (\n    <li key={`${index}-navbar-btn-typography-desktop`} className={navbarItemClassName}>\n      {item.jsx}\n    </li>\n  ));\n\n  const mobileNavbarItems: NavbarItems = navbarItems.map((item) => ({\n    ...item,\n    jsx: item.jsx.props.embeddedEntities ? <NavbarButton {...item.jsx.props} /> : item.jsx\n  }));\n\n  const navbarExtrasClassNameBase = 'gap-4 h-full flex-row flex-nowrap items-center';\n  const navbarBrand = (\n    <Link className=\"transition-[filter] hover:brightness-75\" href={ROUTES_ROOTS.WEBSITE}>\n      <Image height={LOGO_SIZE_PX_VALUE} src=\"/assets/rtm-logo.svg\" width={LOGO_SIZE_PX_VALUE} alt={logoAlt} priority />\n    </Link>\n  );\n\n  return (\n    <nav className=\"max-w-screen min-w-screen sticky inset-x-0 top-0 z-30 flex h-auto w-screen select-none items-center justify-center bg-black backdrop-blur-lg backdrop-saturate-150 dark:bg-card\">\n      <header className=\"max-w-screen relative z-30 flex h-[82px] w-screen flex-row flex-nowrap items-center justify-between gap-4 px-5\">\n        {navbarBrand}\n\n        <ul className=\"hidden justify-center gap-4 lg:flex\">{desktopNavbarItems}</ul>\n\n        <ul className={cn('relative hidden justify-end ltr:left-1 rtl:right-1 lg:flex', navbarExtrasClassNameBase)}>\n          {buildNavbarExtrasForDesktop()}\n        </ul>\n\n        <ul className={cn('flex justify-end lg:hidden', navbarExtrasClassNameBase)}>\n          {buildNavbarExtrasForMobile()}\n          <li className={navbarExtrasForMobileClassNameBase}>\n            <NavbarToggle items={mobileNavbarItems} />\n          </li>\n        </ul>\n      </header>\n    </nav>\n  );\n};\n\nexport default SitewideNavbar;\n"
    },
    "src/config/Auth/authOptions.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "982",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/config/Auth/authOptions.ts(11,89): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["42", "44", "45", "46", "47", "48", "49", "52"],
          "location": {
            "end": {
              "column": 2,
              "line": 23
            },
            "start": {
              "column": 116,
              "line": 12
            }
          }
        },
        {
          "id": "983",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected null to match /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "44", "45", "46", "47", "48", "49", "52"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "984",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["46"],
          "coveredBy": ["42", "44", "45", "46", "47", "48", "49", "52"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "985",
          "mutatorName": "LogicalOperator",
          "replacement": "!avatar && !id",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["46"],
          "coveredBy": ["42", "44", "45", "46", "47", "48", "49", "52"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "986",
          "mutatorName": "BooleanLiteral",
          "replacement": "avatar",
          "statusReason": "expected null to match /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "44", "45", "46", "47", "48", "49", "52"],
          "location": {
            "end": {
              "column": 14,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "987",
          "mutatorName": "BooleanLiteral",
          "replacement": "id",
          "statusReason": "expected null to match /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "44", "45", "47", "49"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 18,
              "line": 16
            }
          }
        },
        {
          "id": "988",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'FAKE_AVATAR' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["44"],
          "coveredBy": ["42", "44", "45", "49"],
          "location": {
            "end": {
              "column": 15,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "989",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to match /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "44", "45", "49"],
          "location": {
            "end": {
              "column": 15,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "990",
          "mutatorName": "MethodExpression",
          "replacement": "avatar.endsWith('a_')",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["45"],
          "coveredBy": ["44", "45", "49"],
          "location": {
            "end": {
              "column": 41,
              "line": 19
            },
            "start": {
              "column": 18,
              "line": 19
            }
          }
        },
        {
          "id": "991",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["44"],
          "coveredBy": ["44", "45", "49"],
          "location": {
            "end": {
              "column": 40,
              "line": 19
            },
            "start": {
              "column": 36,
              "line": 19
            }
          }
        },
        {
          "id": "992",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["45"],
          "coveredBy": ["45", "49"],
          "location": {
            "end": {
              "column": 49,
              "line": 19
            },
            "start": {
              "column": 44,
              "line": 19
            }
          }
        },
        {
          "id": "993",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 57,
              "line": 19
            },
            "start": {
              "column": 52,
              "line": 19
            }
          }
        },
        {
          "id": "994",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to be 'https://cdn.discordapp.com/avatars/FA…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["44"],
          "coveredBy": ["44", "45", "49"],
          "location": {
            "end": {
              "column": 82,
              "line": 20
            },
            "start": {
              "column": 20,
              "line": 20
            }
          }
        },
        {
          "id": "995",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/config/Auth/authOptions.ts(38,11): error TS2322: Type '({ session, token }: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Promise<void>' is not assignable to type '(params: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Awaitable<Session | DefaultSession>'.\n  Type 'Promise<void>' is not assignable to type 'Awaitable<Session | DefaultSession>'.\n    Type 'Promise<void>' is not assignable to type 'PromiseLike<Session | DefaultSession>'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = Session | DefaultSession, TResult2 = never>(onfulfilled?: ((value: Session | DefaultSession) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | ... 1 more ... | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type 'void' is not assignable to type 'Session | DefaultSession'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(50,51): error TS2339: Property 'user' does not exist on type 'never'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(84,51): error TS2339: Property 'user' does not exist on type 'never'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(198,51): error TS2339: Property 'user' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["42", "43", "49", "50", "51", "52"],
          "location": {
            "end": {
              "column": 2,
              "line": 42
            },
            "start": {
              "column": 104,
              "line": 25
            }
          }
        },
        {
          "id": "996",
          "mutatorName": "BooleanLiteral",
          "replacement": "BOT_TOKEN",
          "statusReason": "expected undefined to match /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "43", "49", "50", "51", "52"],
          "location": {
            "end": {
              "column": 17,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "997",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/config/Auth/authOptions.ts(33,80): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(33,116): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["42", "43", "49", "50", "51", "52"],
          "location": {
            "end": {
              "column": 17,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "998",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'https://cdn.discordapp.com/avatars/FA…' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["50"],
          "coveredBy": ["42", "43", "49", "50", "51", "52"],
          "location": {
            "end": {
              "column": 17,
              "line": 27
            },
            "start": {
              "column": 7,
              "line": 27
            }
          }
        },
        {
          "id": "999",
          "mutatorName": "BooleanLiteral",
          "replacement": "id",
          "statusReason": "src/config/Auth/authOptions.ts(33,80): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(33,116): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["42", "43", "49", "51", "52"],
          "location": {
            "end": {
              "column": 10,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1000",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/config/Auth/authOptions.ts(33,80): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(33,116): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["42", "43", "49", "51", "52"],
          "location": {
            "end": {
              "column": 10,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1001",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/config/Auth/authOptions.ts(33,80): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/config/Auth/authOptions.ts(33,116): error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["42", "43", "49", "51", "52"],
          "location": {
            "end": {
              "column": 10,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1002",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected undefined to match /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "43", "49", "52"],
          "location": {
            "end": {
              "column": 133,
              "line": 34
            },
            "start": {
              "column": 85,
              "line": 34
            }
          }
        },
        {
          "id": "1003",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 149,
              "line": 34
            },
            "start": {
              "column": 135,
              "line": 34
            }
          }
        },
        {
          "id": "1004",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Invalid duration expression \"\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "43", "49", "52"],
          "location": {
            "end": {
              "column": 147,
              "line": 34
            },
            "start": {
              "column": 142,
              "line": 34
            }
          }
        },
        {
          "id": "1005",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { user: { …(2) }, …(1) } to strictly equal { user: { …(3) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "43", "49", "52"],
          "location": {
            "end": {
              "column": 24,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "1006",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { user: { …(3) }, …(1) } to strictly equal { user: { …(2) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["52"],
          "coveredBy": ["42", "43", "49", "52"],
          "location": {
            "end": {
              "column": 24,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "1007",
          "mutatorName": "EqualityOperator",
          "replacement": "imageURL !== null",
          "statusReason": "expected { user: { …(2) }, …(1) } to strictly equal { user: { …(3) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "43", "49", "52"],
          "location": {
            "end": {
              "column": 24,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "1008",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/config/Auth/authOptions.ts(37,13): error TS1360: Type '{}' does not satisfy the expected type 'Session'.\n  Property 'expires' is missing in type '{}' but required in type 'Session'.\nsrc/config/Auth/authOptions.ts(52,11): error TS2322: Type '({ session, token }: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Promise<{}>' is not assignable to type '(params: { session: Session; token: JWT; user: AdapterUser; } & { newSession: any; trigger: \"update\"; }) => Awaitable<Session | DefaultSession>'.\n  Type 'Promise<{}>' is not assignable to type 'Awaitable<Session | DefaultSession>'.\n    Type 'Promise<{}>' is not assignable to type 'PromiseLike<Session | DefaultSession>'.\n      Types of property 'then' are incompatible.\n        Type '<TResult1 = {}, TResult2 = never>(onfulfilled?: ((value: {}) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | null | undefined) => Promise<...>' is not assignable to type '<TResult1 = Session | DefaultSession, TResult2 = never>(onfulfilled?: ((value: Session | DefaultSession) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<...>) | ... 1 more ... | undefined) => PromiseLike<...>'.\n          Types of parameters 'onfulfilled' and 'onfulfilled' are incompatible.\n            Types of parameters 'value' and 'value' are incompatible.\n              Type '{}' is not assignable to type 'Session | DefaultSession'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(50,51): error TS2339: Property 'user' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(84,51): error TS2339: Property 'user' does not exist on type '{}'.\nsrc/config/Auth/__tests__/prebuild.authOptions.test.ts(198,51): error TS2339: Property 'user' does not exist on type '{}'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["42", "43", "49"],
          "location": {
            "end": {
              "column": 4,
              "line": 41
            },
            "start": {
              "column": 10,
              "line": 38
            }
          }
        },
        {
          "id": "1009",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected { user: {}, …(1) } to strictly equal { user: { …(3) }, …(1) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["42"],
          "coveredBy": ["42", "43", "49"],
          "location": {
            "end": {
              "column": 47,
              "line": 39
            },
            "start": {
              "column": 11,
              "line": 39
            }
          }
        },
        {
          "id": "1010",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 64
            },
            "start": {
              "column": 38,
              "line": 46
            }
          }
        },
        {
          "id": "1011",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 53
            },
            "start": {
              "column": 14,
              "line": 47
            }
          }
        },
        {
          "id": "1012",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 52
            },
            "start": {
              "column": 21,
              "line": 48
            }
          }
        },
        {
          "id": "1013",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 49
            },
            "start": {
              "column": 22,
              "line": 49
            }
          }
        },
        {
          "id": "1014",
          "mutatorName": "LogicalOperator",
          "replacement": "process.env.DISCORD_CLIENT_SECRET && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 50
            },
            "start": {
              "column": 21,
              "line": 50
            }
          }
        },
        {
          "id": "1015",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 50
            },
            "start": {
              "column": 58,
              "line": 50
            }
          }
        },
        {
          "id": "1016",
          "mutatorName": "LogicalOperator",
          "replacement": "process.env.DISCORD_CLIENT_ID && ''",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 51
            },
            "start": {
              "column": 17,
              "line": 51
            }
          }
        },
        {
          "id": "1017",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 52,
              "line": 51
            },
            "start": {
              "column": 50,
              "line": 51
            }
          }
        },
        {
          "id": "1018",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 59
            },
            "start": {
              "column": 14,
              "line": 55
            }
          }
        },
        {
          "id": "1019",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 58
            },
            "start": {
              "column": 39,
              "line": 56
            }
          }
        },
        {
          "id": "1020",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 63
            },
            "start": {
              "column": 10,
              "line": 61
            }
          }
        },
        {
          "id": "1021",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 62
            },
            "start": {
              "column": 42,
              "line": 62
            }
          }
        }
      ],
      "source": "import type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { NextAuthOptions, Session } from 'next-auth';\nimport type { IDiscordApi } from '@/meta/discordapi';\nimport type { JWT } from 'next-auth/jwt';\n\nimport DiscordProvider from 'next-auth/providers/discord';\nimport ROUTES_ROOTS from '##/config/routes';\nimport discordApi from '@/meta/discordapi';\n\nimport bentocache, { keysFactory } from '../bentocache';\n\nexport async function getDiscordProfilePicture(sub: string, __discordApi: IDiscordApi): Promise<MaybeNull<string>> {\n  const freshProfile = await __discordApi.getFreshProfile(sub);\n\n  const { epicFail, avatar, id } = freshProfile;\n  if (!avatar || !id) return null;\n  if (epicFail) return avatar;\n\n  const format = avatar.startsWith('a_') ? 'gif' : 'png';\n  const imageURL = `https://cdn.discordapp.com/avatars/${id}/${avatar}.${format}`;\n\n  return imageURL;\n}\n\nexport async function getSession(session: Session, token: JWT, __discordApi: IDiscordApi = discordApi) {\n  const BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;\n  if (!BOT_TOKEN) return session;\n\n  const { sub: id } = token;\n  if (!id) return session;\n\n  // Stryker Workaround 1. Empty object mutant is pointless.\n  // Stryker disable next-line ObjectLiteral\n  const imageURL = await bentocache.getOrSet(keysFactory.discordProfilePicture(id), () => getDiscordProfilePicture(id, __discordApi), { ttl: '11m' }); // TTL: https://discord.com/developers/docs/topics/rate-limits#invalid-request-limit-aka-cloudflare-bans\n\n  if (imageURL === null) return session;\n\n  return {\n    user: { ...session.user, image: imageURL },\n    expires: session.expires\n  } satisfies Session;\n}\n\n/* v8 ignore start */\n// Stryker disable all\nconst authOptions: NextAuthOptions = {\n  providers: [\n    DiscordProvider({\n      authorization: 'https://discord.com/api/oauth2/authorize?scope=guilds+identify',\n      clientSecret: process.env.DISCORD_CLIENT_SECRET ?? '',\n      clientId: process.env.DISCORD_CLIENT_ID ?? ''\n    })\n  ],\n\n  callbacks: {\n    async session({ session, token }) {\n      return await getSession(session, token);\n    }\n  },\n\n  pages: {\n    signIn: ROUTES_ROOTS.LANDING_PAGES + 'sign-up'\n  }\n};\n\nexport default authOptions;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/DashboardSidebar/sidebarRoutesIcons.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1022",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 52,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { DashboardRoutesIcons } from '@/config/DashboardSidebar/utils/IconsMapping';\n\nimport { RxActivityLog, RxSketchLogo, RxDashboard } from 'react-icons/rx';\n\n/* eslint-disable perfectionist/sort-objects */\nconst SIDEBAR_ROUTES_ICONS: DashboardRoutesIcons = {\n  MAIN_PAGE: RxSketchLogo,\n  BAR_PAGE: RxActivityLog,\n  FOO_PAGE: RxDashboard\n};\n/* eslint-enable perfectionist/sort-objects */\n\nexport default SIDEBAR_ROUTES_ICONS;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/DashboardSidebar/utils/IconsMapping.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1023",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 137,
              "line": 13
            },
            "start": {
              "column": 32,
              "line": 13
            }
          }
        },
        {
          "id": "1024",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 117,
              "line": 17
            },
            "start": {
              "column": 3,
              "line": 17
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { IconBaseProps } from 'react-icons';\nimport type { ComponentType } from 'react';\n\nimport DashboardSidebarButton from '@/components/layouts/dashboard/DashboardSidebarButton';\nimport SIDEBAR_ROUTES_ICONS from '@/config/DashboardSidebar/sidebarRoutesIcons';\n\nimport type { DashboardRoutesSidebarReactElements, DashboardRoutesKeys, DashboardRoutes } from './RoutesMapping';\n\nexport type DashboardRoutesIcons = Record<keyof DashboardRoutes, ComponentType<IconBaseProps>>;\n\nconst createSidebarComponent = (__SidebarIcon: ComponentType<IconBaseProps>) => <DashboardSidebarButton __SidebarIcon={__SidebarIcon} />;\n\nconst computedDashboardRoutesSidebarComponents = {} as DashboardRoutesSidebarReactElements;\nObject.entries(SIDEBAR_ROUTES_ICONS).forEach(\n  ([k, icon]) => (computedDashboardRoutesSidebarComponents[k as DashboardRoutesKeys] = createSidebarComponent(icon))\n);\n\nconst DASHBOARD_ROUTES_SIDEBAR_COMPONENTS: DashboardRoutesSidebarReactElements = computedDashboardRoutesSidebarComponents;\n\nexport default DASHBOARD_ROUTES_SIDEBAR_COMPONENTS;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/SitewideNavbar/Extras/utils/ComponentsMapping.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1025",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 13
            },
            "start": {
              "column": 84,
              "line": 9
            }
          }
        },
        {
          "id": "1026",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 83,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport NavbarLanguageMenu from '@/components/layouts/navbar/NavbarLanguageMenu';\nimport NavbarLoginButton from '@/components/layouts/navbar/NavbarLoginButton';\nimport NavbarThemeButton from '@/components/layouts/navbar/NavbarThemeButton';\n\nimport type { NavbarExtrasFeaturesReactElements } from './RoutesMapping';\n\nexport const NAVBAR_EXTRAS_COMPONENTS_DESKTOP: NavbarExtrasFeaturesReactElements = {\n  LANGUAGE: <NavbarLanguageMenu />,\n  THEME: <NavbarThemeButton />,\n  LOGIN: <NavbarLoginButton />\n};\n\nexport const NAVBAR_EXTRAS_COMPONENTS_MOBILE: NavbarExtrasFeaturesReactElements = {\n  LANGUAGE: <NavbarLanguageMenu isMobile />,\n  LOGIN: <NavbarLoginButton isMobile />,\n  THEME: <NavbarThemeButton />\n};\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/SitewideNavbar/dropdownsConfig.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1027",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 87,
              "line": 9
            }
          }
        },
        {
          "id": "1028",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 11
            },
            "start": {
              "column": 10,
              "line": 11
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { PatchNotesRoutesKeys } from '@/config/SitewideNavbar/PatchNotes/utils/RoutesMapping';\nimport type { NavbarDropdownsConfig } from '@/types/WebsiteUtils';\nimport type { EmbeddedEntities } from '@/types/NavData';\n\nimport PATCH_NOTES_ROUTES, { PATCH_NOTES_ROUTES_TITLES } from '@/config/SitewideNavbar/PatchNotes/routesImpl';\n\nconst PATCH_NOTES_PAGE: EmbeddedEntities = Object.keys(PATCH_NOTES_ROUTES).map((k) => {\n  const k2 = k as PatchNotesRoutesKeys;\n  return { i18nTitle: PATCH_NOTES_ROUTES_TITLES[k2], path: PATCH_NOTES_ROUTES[k2] };\n});\n\nconst SITEWIDE_NAVBAR_DROPDOWNS_CONFIG: NavbarDropdownsConfig = { PATCH_NOTES_PAGE } as const;\nexport default SITEWIDE_NAVBAR_DROPDOWNS_CONFIG;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/bentocache.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1029",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 8
            },
            "start": {
              "column": 28,
              "line": 6
            }
          }
        },
        {
          "id": "1030",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 7
            },
            "start": {
              "column": 26,
              "line": 7
            }
          }
        },
        {
          "id": "1031",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 7
            },
            "start": {
              "column": 42,
              "line": 7
            }
          }
        },
        {
          "id": "1032",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 35,
              "line": 10
            }
          }
        },
        {
          "id": "1033",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 13
            },
            "start": {
              "column": 11,
              "line": 11
            }
          }
        },
        {
          "id": "1034",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 16,
              "line": 15
            }
          }
        },
        {
          "id": "1035",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 16
            },
            "start": {
              "column": 15,
              "line": 16
            }
          }
        },
        {
          "id": "1036",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 17
            },
            "start": {
              "column": 14,
              "line": 17
            }
          }
        },
        {
          "id": "1037",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 19
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport { memoryDriver } from 'bentocache/drivers/memory';\nimport { BentoCache, bentostore } from 'bentocache';\n\nexport const keysFactory = {\n  discordProfilePicture: (id: string) => `discord:pp:${id}`\n};\n\nconst bentocache = new BentoCache({\n  stores: {\n    default: bentostore().useL1Layer(memoryDriver())\n  },\n\n  gracePeriod: {\n    duration: '6h',\n    enabled: true\n  },\n  default: 'default'\n});\n\nexport default bentocache;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/discord.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1038",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 8
            },
            "start": {
              "column": 52,
              "line": 8
            }
          }
        },
        {
          "id": "1039",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 8
            },
            "start": {
              "column": 53,
              "line": 8
            }
          }
        },
        {
          "id": "1040",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 8
            },
            "start": {
              "column": 76,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\ntype TDiscordConfig = {\n  SUPPORT_SERVER_INVITE_LINK: string;\n  BOT_INVITE_LINK: string;\n};\n\nconst [CLIENT_ID, PERMISSIONS]: [string, string] = ['1120800430897778700', '8'];\nconst DISCORD_CONFIG: TDiscordConfig = {\n  BOT_INVITE_LINK: `https://discord.com/api/oauth2/authorize?client_id=${CLIENT_ID}&permissions=${PERMISSIONS}&scope=bot`,\n  SUPPORT_SERVER_INVITE_LINK: 'https://discord.gg/QWTXj3Dv4k'\n} as const;\n\nexport default DISCORD_CONFIG;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/config/themes.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1041",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 53,
              "line": 19
            },
            "start": {
              "column": 46,
              "line": 19
            }
          }
        },
        {
          "id": "1042",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 57,
              "line": 23
            },
            "start": {
              "column": 51,
              "line": 23
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\ntype ColorScheme = 'light' | 'dark';\ntype ThemeVariantKey = 'LIGHT' | 'DARK';\ntype ThemeConfig = Record<'VARIANTS', Record<ThemeVariantKey, string>> & Record<'VARIANTS_COLORS_SCHEME', Record<ThemeVariantKey, ColorScheme>>;\n\nconst THEME_CONFIG = {\n  VARIANTS_COLORS_SCHEME: {\n    LIGHT: 'light',\n    DARK: 'dark'\n  },\n\n  VARIANTS: {\n    LIGHT: 'light',\n    DARK: 'dark'\n  }\n} as const satisfies ThemeConfig;\n\nconst DEFAULT_VARIANT_KEY: ThemeVariantKey = 'LIGHT';\n\ntype ThemeVariant = (typeof THEME_CONFIG.VARIANTS)[keyof typeof THEME_CONFIG.VARIANTS];\n\nexport const DEFAULT_DARK_VARIANT: ThemeVariant = 'dark';\nconst DEFAULT_LIGHT_VARIANT: ThemeVariant = THEME_CONFIG.VARIANTS[DEFAULT_VARIANT_KEY];\nexport const DEFAULT_VARIANT: ThemeVariant = DEFAULT_LIGHT_VARIANT;\nexport const DEFAULT_VARIANT_COLOR_SCHEME: ColorScheme = THEME_CONFIG.VARIANTS_COLORS_SCHEME[DEFAULT_VARIANT_KEY];\n\n// export const THEME_VARIANTS: ThemeVariant[] = Object.values(THEME_CONFIG.VARIANTS);\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/I18nProvider.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1043",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 60,
              "line": 15
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { I18nProviderClient } from '@/i18n/client';\nimport Loader from '@/components/ui/Loader';\n\nexport interface I18nProviderProps extends WithChildren {\n  locale: string;\n}\n\nconst I18nProvider: FunctionComponent<I18nProviderProps> = ({ children, locale }) => (\n  <I18nProviderClient fallback={<Loader />} locale={locale}>\n    {children}\n  </I18nProviderClient>\n);\n\nexport default I18nProvider;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/Providers.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1044",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 54,
              "line": 16
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { FunctionComponent } from 'react';\n\nimport { SessionProvider } from 'next-auth/react';\n\nimport type { I18nProviderProps } from './I18nProvider';\n\nimport I18nProvider from './I18nProvider';\nimport UIProvider from './UIProvider';\n\ninterface ProvidersProps extends I18nProviderProps {}\n\nconst Providers: FunctionComponent<ProvidersProps> = ({ children, locale }) => (\n  <SessionProvider>\n    <I18nProvider locale={locale}>\n      <UIProvider>{children}</UIProvider>\n    </I18nProvider>\n  </SessionProvider>\n);\n\nexport default Providers;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/ThemeProvider.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1045",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 140,
              "line": 9
            },
            "start": {
              "column": 30,
              "line": 9
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\n'use client';\n\nimport type { ThemeProviderProps } from 'next-themes/dist/types';\n\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\n\nexport const ThemeProvider = ({ children, ...props }: ThemeProviderProps) => <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/contexts/UIProvider.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1046",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 56,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { WithChildren } from '@rtm/shared-types/Next';\nimport type { FunctionComponent } from 'react';\n\nimport { ThemeProvider } from './ThemeProvider';\n\ninterface UIProviderProps extends WithChildren {}\n\nconst UIProvider: FunctionComponent<UIProviderProps> = ({ children }) => (\n  <ThemeProvider disableTransitionOnChange defaultTheme=\"system\" attribute=\"class\" enableSystem>\n    {children}\n  </ThemeProvider>\n);\n\nexport default UIProvider;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/errors/vocab/warnings/executionContext.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1047",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 54,
              "line": 10
            },
            "start": {
              "column": 16,
              "line": 10
            }
          }
        },
        {
          "id": "1048",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/portable/node/env.ts(23,52): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/node/env.ts(41,52): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 55,
              "line": 19
            },
            "start": {
              "column": 45,
              "line": 16
            }
          }
        },
        {
          "id": "1049",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 15,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 19
            }
          }
        }
      ],
      "source": "import type { WarningMessage } from '@/errors/vocab/types';\n\ntype TExecutionContextWarningsVocab = {\n  UNABLE_TO_GET_NODE_ENV: WarningMessage;\n  FAILED_TO_INFER_CTX: WarningMessage;\n};\n\n// Stryker Workaround 1. Pointless mutant.\n// Stryker disable next-line StringLiteral\nconst PREFIX = 'Execution context inference warning:';\nconst EXECUTION_CONTEXT_WARNINGS_VOCAB: TExecutionContextWarningsVocab = {\n  UNABLE_TO_GET_NODE_ENV: \"unable to get process.env.NODE_ENV value! 'PROD' will be initialized to True.'\",\n  FAILED_TO_INFER_CTX: \"failed to infer the execution context. 'PROD' will be initialized to True.\"\n} as const;\n\nconst executionContextWarningsVocabGetter = (key: keyof TExecutionContextWarningsVocab): WarningMessage =>\n  // Stryker Workaround 2. Pointless mutant.\n  // Stryker disable next-line StringLiteral\n  PREFIX + ' ' + EXECUTION_CONTEXT_WARNINGS_VOCAB[key];\n\nexport default executionContextWarningsVocabGetter;\n"
    },
    "src/fonts.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1050",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 29,
              "line": 5
            }
          }
        },
        {
          "id": "1051",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 6
            },
            "start": {
              "column": 13,
              "line": 6
            }
          }
        },
        {
          "id": "1052",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 6
            },
            "start": {
              "column": 14,
              "line": 6
            }
          }
        },
        {
          "id": "1053",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 26,
              "line": 7
            },
            "start": {
              "column": 13,
              "line": 7
            }
          }
        },
        {
          "id": "1054",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 8
            },
            "start": {
              "column": 12,
              "line": 8
            }
          }
        },
        {
          "id": "1055",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 8
            },
            "start": {
              "column": 13,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport { Inter } from 'next/font/google';\n\nexport const fInter = Inter({\n  fallback: ['sans-serif'],\n  variable: '--font-sans',\n  subsets: ['latin']\n});\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/i18n/lazybones.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1056",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "src/i18n/lazybones.ts(4,7): error TS2322: Type '\"Stryker was here!\"' is not assignable to type '\"\"'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 4
            },
            "start": {
              "column": 24,
              "line": 4
            }
          }
        }
      ],
      "source": "import type { TypedLeafsJSONData } from '@rtm/shared-types/JSON';\nimport type { VocabObjValue } from '@rtm/shared-types/I18n';\n\nconst _: EmptyString = '';\nexport const SHARED_TESTING_BLOG_CATEGORY_METADATAS = {\n  'fake-subcategory': {\n    'meta-description': _,\n    title: _\n  },\n  '_meta-description': _,\n  _title: _\n} as const satisfies TypedLeafsJSONData<VocabObjValue>;\n\nexport const SHARED_TESTING_BLOG_SUBCATEGORIES_PAGES_TITLES = {\n  'fake-subcategory': _\n} as const satisfies TypedLeafsJSONData<VocabObjValue>;\n\ntype EmptyString = '';\n"
    },
    "src/i18n/locales/schema.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1057",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 25,
              "line": 7
            },
            "start": {
              "column": 23,
              "line": 7
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { TypedLeafsJSONData } from '@rtm/shared-types/JSON';\n\nimport blogCategories from '@rtm/generated/blogCategories';\n\nconst _: NotScanned = '';\n\nexport const SHARED_VOCAB_SCHEMA = {\n  'pages-titles': {\n    'fake-subcategory': _,\n    'patch-notes-bis': _,\n    'discord-bot-bis': _,\n    'dashboard-bis': _,\n\n    'patch-notes': _,\n    'discord-bot': _,\n    'sign-up': _,\n\n    dashboard: _,\n    homepage: _,\n\n    blog: _\n  },\n  vocab: {\n    breadcrumbs: _,\n    brand: _,\n    logo: _,\n    page: _\n  }\n} as const satisfies TypedLeafsJSONData<NotScanned>;\n\nexport default {\n  _infos: {\n    lng: '__SCANNED_ON_PREBUILD_FIELD__'\n  },\n\n  // eslint-disable-next-line perfectionist/sort-objects\n  navbar: {\n    'sr-only': {\n      'close-language-switcher-menu': _,\n      'open-language-switcher-menu': _,\n      'language-switcher-menu': _,\n      'close-hamburger-menu': _,\n      'switch-to-light-mode': _,\n      'open-hamburger-menu': _,\n      'switch-to-dark-mode': _,\n      'hamburger-menu': _\n    },\n    assistance: _\n  },\n\n  vocab: {\n    ...SHARED_VOCAB_SCHEMA.vocab,\n    'sr-only': {\n      'brand-logo': _\n    },\n    'copy-to-clipboard': _,\n    'invite-the-bot': _,\n    'no-blog-post': _,\n    'brand-short': _,\n    'see-more': _,\n    loading: _,\n    '404': _,\n    prev: _,\n    next: _\n  },\n\n  dashboard: {\n    'sr-only': {\n      'hide-sidebar': _,\n      'show-sidebar': _\n    },\n    'pages-titles': {\n      main: _,\n      foo: _,\n      bar: _\n    }\n  },\n\n  'manual-SEO': {\n    homepage: {\n      'meta-description': _\n    },\n\n    signup: {\n      'meta-description': _\n    }\n  },\n\n  auth: {\n    logout: _,\n    signup: _,\n    login: _\n  },\n\n  'pages-titles': SHARED_VOCAB_SCHEMA['pages-titles'],\n\n  'blog-categories': blogCategories\n} as const satisfies TypedLeafsJSONData<MaybeScanned>;\n\ntype NotScanned = '';\ntype Scanned = '__SCANNED_ON_PREBUILD_FIELD__';\ntype MaybeScanned = NotScanned | Scanned;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/blog/api.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1058",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(17,71): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "32",
            "35",
            "38",
            "39",
            "57",
            "58",
            "59",
            "64",
            "65",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "151",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 103,
              "line": 17
            }
          }
        },
        {
          "id": "1059",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(17,71): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "32",
            "35",
            "38",
            "39",
            "57",
            "58",
            "59",
            "64",
            "65",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "151",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1060",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(17,71): error TS2366: Function lacks ending return statement and return type does not include 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["300"],
          "location": {
            "end": {
              "column": 4,
              "line": 23
            },
            "start": {
              "column": 11,
              "line": 21
            }
          }
        },
        {
          "id": "1061",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(26,106): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 138,
              "line": 26
            }
          }
        },
        {
          "id": "1062",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/blog/api.ts(30,17): error TS18047: 'allPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "1063",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/blog/api.ts(30,17): error TS18047: 'allPosts' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "1064",
          "mutatorName": "EqualityOperator",
          "replacement": "allPosts !== null",
          "statusReason": "src/lib/blog/api.ts(30,17): error TS18047: 'allPosts' is possibly 'null'.\nsrc/lib/blog/api.ts(30,46): error TS7031: Binding element 'currentPostLanguage' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "300"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "1065",
          "mutatorName": "MethodExpression",
          "replacement": "allPosts",
          "statusReason": "expected 12 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["38"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 105,
              "line": 30
            },
            "start": {
              "column": 17,
              "line": 30
            }
          }
        },
        {
          "id": "1066",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 33,
              "line": 30
            }
          }
        },
        {
          "id": "1067",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 12 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["38"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 72,
              "line": 30
            }
          }
        },
        {
          "id": "1068",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 72,
              "line": 30
            }
          }
        },
        {
          "id": "1069",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostLanguage !== language",
          "statusReason": "expected 9 to be 3 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["38"],
          "coveredBy": [
            "25",
            "26",
            "28",
            "35",
            "38",
            "57",
            "59",
            "64",
            "66",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 104,
              "line": 30
            },
            "start": {
              "column": 72,
              "line": 30
            }
          }
        },
        {
          "id": "1070",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(38,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "218",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 67
            },
            "start": {
              "column": 25,
              "line": 38
            }
          }
        },
        {
          "id": "1071",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "1072",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "1073",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedBlogCtx.TESTING || category === BlogConfig.TESTING_CATEGORY",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "218",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "1074",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedBlogCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "218",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 41
            }
          }
        },
        {
          "id": "1075",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 35,
              "line": 41
            }
          }
        },
        {
          "id": "1076",
          "mutatorName": "EqualityOperator",
          "replacement": "category !== BlogConfig.TESTING_CATEGORY",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 41
            },
            "start": {
              "column": 35,
              "line": 41
            }
          }
        },
        {
          "id": "1077",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/blog/api.ts(41,85): error TS2322: Type 'string' is not assignable to type 'TBlogPost'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["218"],
          "location": {
            "end": {
              "column": 86,
              "line": 41
            },
            "start": {
              "column": 84,
              "line": 41
            }
          }
        },
        {
          "id": "1078",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidPair",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["25", "26", "27", "31", "32", "39", "57", "58", "64", "65", "73", "106", "149", "150", "151", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 19,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 46
            }
          }
        },
        {
          "id": "1079",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 46
            }
          }
        },
        {
          "id": "1080",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 19,
              "line": 46
            },
            "start": {
              "column": 7,
              "line": 46
            }
          }
        },
        {
          "id": "1081",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/blog/api.ts(46,29): error TS2322: Type 'string' is not assignable to type 'TBlogPost'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["31"],
          "location": {
            "end": {
              "column": 30,
              "line": 46
            },
            "start": {
              "column": 28,
              "line": 46
            }
          }
        },
        {
          "id": "1082",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(60,3): error TS2322: Type 'TBlogPost[] | undefined' is not assignable to type 'TBlogPost[]'.\n  Type 'undefined' is not assignable to type 'TBlogPost[]'.\nsrc/lib/blog/api.ts(60,72): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "73", "106", "149", "150", "151", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 6,
              "line": 54
            },
            "start": {
              "column": 40,
              "line": 48
            }
          }
        },
        {
          "id": "1083",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(33) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["73", "149", "150", "151"],
          "location": {
            "end": {
              "column": 6,
              "line": 54
            },
            "start": {
              "column": 5,
              "line": 49
            }
          }
        },
        {
          "id": "1084",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": ["73", "149", "150", "151"],
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "1085",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "1086",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "1087",
          "mutatorName": "LogicalOperator",
          "replacement": "// Stryker Workaround 3. Pointless mutants: there's no ambiguity here.\n// Stryker disable next-line ConditionalExpression\ncurrentPostSubcategory === subcategory || currentPostLanguage === language",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(33) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["73", "149", "150", "151"],
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "1088",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 47,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "1089",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSubcategory !== subcategory",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["73", "149", "150", "151"],
          "location": {
            "end": {
              "column": 47,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "1090",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 51,
              "line": 53
            }
          }
        },
        {
          "id": "1091",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostLanguage !== language",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(21) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(9) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["73"],
          "coveredBy": ["73", "149", "150", "151"],
          "location": {
            "end": {
              "column": 83,
              "line": 53
            },
            "start": {
              "column": 51,
              "line": 53
            }
          }
        },
        {
          "id": "1092",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(60,3): error TS2322: Type 'TBlogPost[] | undefined' is not assignable to type 'TBlogPost[]'.\n  Type 'undefined' is not assignable to type 'TBlogPost[]'.\nsrc/lib/blog/api.ts(60,123): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "73", "106", "149", "150", "151", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 6,
              "line": 62
            },
            "start": {
              "column": 43,
              "line": 56
            }
          }
        },
        {
          "id": "1093",
          "mutatorName": "MethodExpression",
          "replacement": "postsCollection",
          "statusReason": "expected 12 to be 5 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "106", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 6,
              "line": 62
            },
            "start": {
              "column": 5,
              "line": 57
            }
          }
        },
        {
          "id": "1094",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "106", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 58
            }
          }
        },
        {
          "id": "1095",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "1096",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "1097",
          "mutatorName": "LogicalOperator",
          "replacement": "// Stryker Workaround 4. Pointless mutants: there's no ambiguity here.\n// Stryker disable next-line ConditionalExpression\n!currentPostDraft && currentPostSubcategory === subcategory || currentPostLanguage === language",
          "statusReason": "expected 9 to be 5 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["26"],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "106", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "1098",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "1099",
          "mutatorName": "LogicalOperator",
          "replacement": "!currentPostDraft || currentPostSubcategory === subcategory",
          "statusReason": "expected [ { …(4) }, { …(4) }, { …(4) }, …(9) ] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 10,
          "static": false,
          "killedBy": ["106"],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "106", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "1100",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "106", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 26,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "1101",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 30,
              "line": 61
            }
          }
        },
        {
          "id": "1102",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSubcategory !== subcategory",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "106", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 68,
              "line": 61
            },
            "start": {
              "column": 30,
              "line": 61
            }
          }
        },
        {
          "id": "1103",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 72,
              "line": 61
            }
          }
        },
        {
          "id": "1104",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostLanguage !== language",
          "statusReason": "expected 'posts' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "27", "32", "39", "57", "58", "64", "65", "106", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 104,
              "line": 61
            },
            "start": {
              "column": 72,
              "line": 61
            }
          }
        },
        {
          "id": "1105",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(74,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "149", "150", "151", "190", "191", "219", "234", "235"],
          "location": {
            "end": {
              "column": 2,
              "line": 88
            },
            "start": {
              "column": 34,
              "line": 74
            }
          }
        },
        {
          "id": "1106",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "1107",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "1108",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedBlogCtx.TESTING || category === BlogConfig.TESTING_CATEGORY",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "149", "150", "151", "190", "191", "219", "234", "235"],
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "1109",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedBlogCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "149", "150", "151", "190", "191", "219", "234", "235"],
          "location": {
            "end": {
              "column": 31,
              "line": 77
            },
            "start": {
              "column": 7,
              "line": 77
            }
          }
        },
        {
          "id": "1110",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 35,
              "line": 77
            }
          }
        },
        {
          "id": "1111",
          "mutatorName": "EqualityOperator",
          "replacement": "category !== BlogConfig.TESTING_CATEGORY",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 77
            },
            "start": {
              "column": 35,
              "line": 77
            }
          }
        },
        {
          "id": "1112",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(79,73): error TS2322: Type 'undefined' is not assignable to type 'MaybeNull<TBlogPost>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "149", "150", "151", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 99,
              "line": 80
            },
            "start": {
              "column": 67,
              "line": 79
            }
          }
        },
        {
          "id": "1113",
          "mutatorName": "LogicalOperator",
          "replacement": "postsCollection.find(({\n  slug: currentPostSlug\n}) => currentPostSlug === targettedSlug) && null",
          "statusReason": "src/lib/blog/api.ts(80,5): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<TBlogPost>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<TBlogPost>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["149", "150", "151"],
          "location": {
            "end": {
              "column": 99,
              "line": 80
            },
            "start": {
              "column": 5,
              "line": 80
            }
          }
        },
        {
          "id": "1114",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": ["149", "150", "151"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 26,
              "line": 80
            }
          }
        },
        {
          "id": "1115",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { draft: false, …(13) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["151"],
          "coveredBy": ["149", "150", "151"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 57,
              "line": 80
            }
          }
        },
        {
          "id": "1116",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": ["149", "150", "151"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 57,
              "line": 80
            }
          }
        },
        {
          "id": "1117",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSlug !== targettedSlug",
          "statusReason": "expected 'fake-post-02' to be 'fake-post-01' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": ["149", "150", "151"],
          "location": {
            "end": {
              "column": 90,
              "line": 80
            },
            "start": {
              "column": 57,
              "line": 80
            }
          }
        },
        {
          "id": "1118",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(82,76): error TS2322: Type 'undefined' is not assignable to type 'MaybeNull<TBlogPost>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "149", "150", "151", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 145,
              "line": 83
            },
            "start": {
              "column": 70,
              "line": 82
            }
          }
        },
        {
          "id": "1119",
          "mutatorName": "LogicalOperator",
          "replacement": "postsCollection.find(({\n  draft: currentPostDraft,\n  slug: currentPostSlug\n}) => !currentPostDraft && currentPostSlug === targettedSlug) && null",
          "statusReason": "src/lib/blog/api.ts(83,5): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<TBlogPost>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<TBlogPost>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 145,
              "line": 83
            },
            "start": {
              "column": 5,
              "line": 83
            }
          }
        },
        {
          "id": "1120",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 26,
              "line": 83
            }
          }
        },
        {
          "id": "1121",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/blog/blog-testing-category/fake-subc…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "234", "235"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "1122",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "234", "235"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "1123",
          "mutatorName": "LogicalOperator",
          "replacement": "!currentPostDraft || currentPostSlug === targettedSlug",
          "statusReason": "expected '/blog/blog-testing-category/fake-subc…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "234", "235"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "1124",
          "mutatorName": "BooleanLiteral",
          "replacement": "currentPostDraft",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "234", "235"],
          "location": {
            "end": {
              "column": 99,
              "line": 83
            },
            "start": {
              "column": 82,
              "line": 83
            }
          }
        },
        {
          "id": "1125",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/blog/blog-testing-category/fake-subc…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "234", "235"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 103,
              "line": 83
            }
          }
        },
        {
          "id": "1126",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPostSlug !== targettedSlug",
          "statusReason": "expected 'fake-post-02' to be 'fake-post-01' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "32", "57", "58", "64", "65", "190", "234", "235"],
          "location": {
            "end": {
              "column": 136,
              "line": 83
            },
            "start": {
              "column": 103,
              "line": 83
            }
          }
        },
        {
          "id": "1127",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(94,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["26", "27"],
          "location": {
            "end": {
              "column": 2,
              "line": 101
            },
            "start": {
              "column": 25,
              "line": 94
            }
          }
        },
        {
          "id": "1128",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(112,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["25", "32", "149", "150", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 2,
              "line": 115
            },
            "start": {
              "column": 34,
              "line": 112
            }
          }
        },
        {
          "id": "1129",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(122,65): error TS2322: Type 'undefined' is not assignable to type '(keyof BlogArchitecture)[]'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 145,
              "line": 117
            },
            "start": {
              "column": 59,
              "line": 117
            }
          }
        },
        {
          "id": "1130",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(124,85): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["234", "235"],
          "location": {
            "end": {
              "column": 2,
              "line": 122
            },
            "start": {
              "column": 93,
              "line": 119
            }
          }
        },
        {
          "id": "1131",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["234"],
          "coveredBy": ["234", "235"],
          "location": {
            "end": {
              "column": 55,
              "line": 121
            },
            "start": {
              "column": 10,
              "line": 121
            }
          }
        },
        {
          "id": "1132",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["234"],
          "coveredBy": ["234", "235"],
          "location": {
            "end": {
              "column": 55,
              "line": 121
            },
            "start": {
              "column": 10,
              "line": 121
            }
          }
        },
        {
          "id": "1133",
          "mutatorName": "LogicalOperator",
          "replacement": "!isForcedPath || postsCollection.length === 0",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["234"],
          "coveredBy": ["234", "235"],
          "location": {
            "end": {
              "column": 55,
              "line": 121
            },
            "start": {
              "column": 10,
              "line": 121
            }
          }
        },
        {
          "id": "1134",
          "mutatorName": "BooleanLiteral",
          "replacement": "isForcedPath",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["234"],
          "coveredBy": ["234", "235"],
          "location": {
            "end": {
              "column": 23,
              "line": 121
            },
            "start": {
              "column": 10,
              "line": 121
            }
          }
        },
        {
          "id": "1135",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["234"],
          "coveredBy": ["234"],
          "location": {
            "end": {
              "column": 55,
              "line": 121
            },
            "start": {
              "column": 27,
              "line": 121
            }
          }
        },
        {
          "id": "1136",
          "mutatorName": "EqualityOperator",
          "replacement": "postsCollection.length !== 0",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["234"],
          "coveredBy": ["234"],
          "location": {
            "end": {
              "column": 55,
              "line": 121
            },
            "start": {
              "column": 27,
              "line": 121
            }
          }
        },
        {
          "id": "1137",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(124,92): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["237"],
          "location": {
            "end": {
              "column": 2,
              "line": 132
            },
            "start": {
              "column": 99,
              "line": 124
            }
          }
        },
        {
          "id": "1138",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(129,36): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["237"],
          "location": {
            "end": {
              "column": 113,
              "line": 127
            },
            "start": {
              "column": 27,
              "line": 127
            }
          }
        },
        {
          "id": "1139",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 113,
              "line": 127
            },
            "start": {
              "column": 56,
              "line": 127
            }
          }
        },
        {
          "id": "1140",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 113,
              "line": 127
            },
            "start": {
              "column": 56,
              "line": 127
            }
          }
        },
        {
          "id": "1141",
          "mutatorName": "EqualityOperator",
          "replacement": "date.substring(date.indexOf('T') + 1) === '00:00:00.000Z'",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["237"],
          "coveredBy": ["237"],
          "location": {
            "end": {
              "column": 113,
              "line": 127
            },
            "start": {
              "column": 56,
              "line": 127
            }
          }
        },
        {
          "id": "1142",
          "mutatorName": "MethodExpression",
          "replacement": "date",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["237"],
          "coveredBy": ["237"],
          "location": {
            "end": {
              "column": 93,
              "line": 127
            },
            "start": {
              "column": 56,
              "line": 127
            }
          }
        },
        {
          "id": "1143",
          "mutatorName": "ArithmeticOperator",
          "replacement": "date.indexOf('T') - 1",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["237"],
          "coveredBy": ["237"],
          "location": {
            "end": {
              "column": 92,
              "line": 127
            },
            "start": {
              "column": 71,
              "line": 127
            }
          }
        },
        {
          "id": "1144",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["237"],
          "coveredBy": ["237"],
          "location": {
            "end": {
              "column": 87,
              "line": 127
            },
            "start": {
              "column": 84,
              "line": 127
            }
          }
        },
        {
          "id": "1145",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Vendredi 24 décembre 2021 à 01:00' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["237"],
          "coveredBy": ["237"],
          "location": {
            "end": {
              "column": 113,
              "line": 127
            },
            "start": {
              "column": 98,
              "line": 127
            }
          }
        },
        {
          "id": "1146",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(134,56): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "73",
            "106",
            "115",
            "116",
            "117",
            "118",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "190",
            "191",
            "220",
            "234",
            "235",
            "238",
            "239",
            "243",
            "244"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 142
            },
            "start": {
              "column": 64,
              "line": 134
            }
          }
        },
        {
          "id": "1147",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 137
            },
            "start": {
              "column": 7,
              "line": 137
            }
          }
        },
        {
          "id": "1148",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 137
            },
            "start": {
              "column": 7,
              "line": 137
            }
          }
        },
        {
          "id": "1149",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedBlogCtx.TESTING || category === BlogConfig.TESTING_CATEGORY",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "73",
            "106",
            "115",
            "116",
            "117",
            "118",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "190",
            "191",
            "220",
            "234",
            "235",
            "238",
            "239",
            "243",
            "244"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 137
            },
            "start": {
              "column": 7,
              "line": 137
            }
          }
        },
        {
          "id": "1150",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedBlogCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "73",
            "106",
            "115",
            "116",
            "117",
            "118",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "190",
            "191",
            "220",
            "234",
            "235",
            "238",
            "239",
            "243",
            "244"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 137
            },
            "start": {
              "column": 7,
              "line": 137
            }
          }
        },
        {
          "id": "1151",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 137
            },
            "start": {
              "column": 35,
              "line": 137
            }
          }
        },
        {
          "id": "1152",
          "mutatorName": "EqualityOperator",
          "replacement": "category !== BlogConfig.TESTING_CATEGORY",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["220"],
          "coveredBy": ["220"],
          "location": {
            "end": {
              "column": 75,
              "line": 137
            },
            "start": {
              "column": 35,
              "line": 137
            }
          }
        },
        {
          "id": "1153",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["220"],
          "coveredBy": ["220"],
          "location": {
            "end": {
              "column": 89,
              "line": 137
            },
            "start": {
              "column": 84,
              "line": 137
            }
          }
        },
        {
          "id": "1154",
          "mutatorName": "BooleanLiteral",
          "replacement": "categories.includes((category as any))",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "73",
            "106",
            "115",
            "116",
            "117",
            "118",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "190",
            "191",
            "234",
            "235",
            "238",
            "239",
            "243",
            "244"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 140
            },
            "start": {
              "column": 7,
              "line": 140
            }
          }
        },
        {
          "id": "1155",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "73",
            "106",
            "115",
            "116",
            "117",
            "118",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "190",
            "191",
            "234",
            "235",
            "238",
            "239",
            "243",
            "244"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 140
            },
            "start": {
              "column": 7,
              "line": 140
            }
          }
        },
        {
          "id": "1156",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 27,
          "static": false,
          "killedBy": ["60"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "39",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "73",
            "106",
            "115",
            "116",
            "117",
            "118",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "190",
            "191",
            "234",
            "235",
            "238",
            "239",
            "243",
            "244"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 140
            },
            "start": {
              "column": 7,
              "line": 140
            }
          }
        },
        {
          "id": "1157",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["60"],
          "coveredBy": ["29", "34", "60", "62", "63", "67", "69", "70", "116", "117", "153", "238", "239", "244"],
          "location": {
            "end": {
              "column": 58,
              "line": 140
            },
            "start": {
              "column": 53,
              "line": 140
            }
          }
        },
        {
          "id": "1158",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["149"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "35",
            "39",
            "57",
            "58",
            "59",
            "61",
            "64",
            "65",
            "66",
            "68",
            "73",
            "106",
            "115",
            "118",
            "149",
            "150",
            "151",
            "152",
            "154",
            "190",
            "191",
            "234",
            "235",
            "243"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 141
            },
            "start": {
              "column": 10,
              "line": 141
            }
          }
        },
        {
          "id": "1159",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(147,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "33",
            "34",
            "35",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "115",
            "118",
            "152",
            "154",
            "239"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 157
            },
            "start": {
              "column": 21,
              "line": 147
            }
          }
        },
        {
          "id": "1160",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategory(category)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["33"],
          "coveredBy": [
            "33",
            "34",
            "35",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "115",
            "118",
            "152",
            "154",
            "239"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 150
            },
            "start": {
              "column": 7,
              "line": 150
            }
          }
        },
        {
          "id": "1161",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 150
            },
            "start": {
              "column": 7,
              "line": 150
            }
          }
        },
        {
          "id": "1162",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 150
            },
            "start": {
              "column": 7,
              "line": 150
            }
          }
        },
        {
          "id": "1163",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["239"],
          "coveredBy": ["34", "60", "62", "63", "67", "69", "70", "239"],
          "location": {
            "end": {
              "column": 51,
              "line": 150
            },
            "start": {
              "column": 46,
              "line": 150
            }
          }
        },
        {
          "id": "1164",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["33"],
          "coveredBy": ["33", "35", "57", "58", "59", "61", "64", "65", "66", "68", "115", "118", "152", "154"],
          "location": {
            "end": {
              "column": 4,
              "line": 155
            },
            "start": {
              "column": 37,
              "line": 152
            }
          }
        },
        {
          "id": "1165",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/blog/testing/__INVALID_SUBCATEGORY__' to be '/blog/testing' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["59"],
          "coveredBy": ["33", "35", "57", "58", "59", "61", "64", "65", "66", "68", "115", "118", "152", "154"],
          "location": {
            "end": {
              "column": 51,
              "line": 154
            },
            "start": {
              "column": 9,
              "line": 154
            }
          }
        },
        {
          "id": "1166",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["33"],
          "coveredBy": ["33", "35", "57", "58", "59", "61", "64", "65", "66", "68", "115", "118", "152", "154"],
          "location": {
            "end": {
              "column": 51,
              "line": 154
            },
            "start": {
              "column": 9,
              "line": 154
            }
          }
        },
        {
          "id": "1167",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["33", "57", "58", "64", "65", "115", "152"],
          "location": {
            "end": {
              "column": 64,
              "line": 154
            },
            "start": {
              "column": 60,
              "line": 154
            }
          }
        },
        {
          "id": "1168",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["35"],
          "coveredBy": ["35", "59", "61", "66", "68", "118", "154"],
          "location": {
            "end": {
              "column": 15,
              "line": 156
            },
            "start": {
              "column": 10,
              "line": 156
            }
          }
        },
        {
          "id": "1169",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(163,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "234",
            "235",
            "238"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 171
            },
            "start": {
              "column": 21,
              "line": 163
            }
          }
        },
        {
          "id": "1170",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategory(category)",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "234",
            "235",
            "238"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 166
            },
            "start": {
              "column": 7,
              "line": 166
            }
          }
        },
        {
          "id": "1171",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 166
            },
            "start": {
              "column": 7,
              "line": 166
            }
          }
        },
        {
          "id": "1172",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 37,
              "line": 166
            },
            "start": {
              "column": 7,
              "line": 166
            }
          }
        },
        {
          "id": "1173",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["29"],
          "coveredBy": ["29", "238"],
          "location": {
            "end": {
              "column": 51,
              "line": 166
            },
            "start": {
              "column": 46,
              "line": 166
            }
          }
        },
        {
          "id": "1174",
          "mutatorName": "BooleanLiteral",
          "replacement": "subcategories.includes(subcategory)",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 169
            },
            "start": {
              "column": 7,
              "line": 169
            }
          }
        },
        {
          "id": "1175",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 169
            },
            "start": {
              "column": 7,
              "line": 169
            }
          }
        },
        {
          "id": "1176",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["30"],
          "coveredBy": [
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "39",
            "57",
            "58",
            "64",
            "65",
            "73",
            "106",
            "149",
            "150",
            "151",
            "190",
            "191",
            "234",
            "235"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 169
            },
            "start": {
              "column": 7,
              "line": 169
            }
          }
        },
        {
          "id": "1177",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["30"],
          "coveredBy": ["30", "31"],
          "location": {
            "end": {
              "column": 57,
              "line": 169
            },
            "start": {
              "column": 52,
              "line": 169
            }
          }
        },
        {
          "id": "1178",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "27", "28", "32", "39", "57", "58", "64", "65", "73", "106", "149", "150", "151", "190", "191", "234", "235"],
          "location": {
            "end": {
              "column": 14,
              "line": 170
            },
            "start": {
              "column": 10,
              "line": 170
            }
          }
        },
        {
          "id": "1179",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/guards/blogSubcategoryGuard.ts(21,53): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/blog/guards/blogPostGuard.ts(30,32): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 142,
              "line": 173
            },
            "start": {
              "column": 43,
              "line": 173
            }
          }
        },
        {
          "id": "1180",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/guards/blogPostGuard.ts(28,58): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 176
            },
            "start": {
              "column": 69,
              "line": 175
            }
          }
        },
        {
          "id": "1181",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(178,79): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["32"],
          "location": {
            "end": {
              "column": 2,
              "line": 181
            },
            "start": {
              "column": 87,
              "line": 178
            }
          }
        },
        {
          "id": "1182",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '//posts/blog/blog-testing-category/fa…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["32"],
          "location": {
            "end": {
              "column": 66,
              "line": 179
            },
            "start": {
              "column": 51,
              "line": 179
            }
          }
        },
        {
          "id": "1183",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'blog/blog-testing-category/fake-subca…' to be '/blog/blog-testing-category/fake-subc…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["32"],
          "coveredBy": ["32"],
          "location": {
            "end": {
              "column": 71,
              "line": 179
            },
            "start": {
              "column": 68,
              "line": 179
            }
          }
        },
        {
          "id": "1184",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/api.ts(183,68): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 2,
              "line": 189
            },
            "start": {
              "column": 105,
              "line": 183
            }
          }
        },
        {
          "id": "1185",
          "mutatorName": "ArithmeticOperator",
          "replacement": "BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT + 1",
          "statusReason": "expected 251 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 82,
              "line": 184
            },
            "start": {
              "column": 21,
              "line": 184
            }
          }
        },
        {
          "id": "1186",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 251 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 185
            },
            "start": {
              "column": 7,
              "line": 185
            }
          }
        },
        {
          "id": "1187",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…' to strictly equal '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["37"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 185
            },
            "start": {
              "column": 7,
              "line": 185
            }
          }
        },
        {
          "id": "1188",
          "mutatorName": "EqualityOperator",
          "replacement": "description.length < takeLimit",
          "statusReason": "expected '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…' to strictly equal '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["37"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 185
            },
            "start": {
              "column": 7,
              "line": 185
            }
          }
        },
        {
          "id": "1189",
          "mutatorName": "EqualityOperator",
          "replacement": "description.length > takeLimit",
          "statusReason": "expected 251 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36", "37"],
          "location": {
            "end": {
              "column": 38,
              "line": 185
            },
            "start": {
              "column": 7,
              "line": 185
            }
          }
        },
        {
          "id": "1190",
          "mutatorName": "MethodExpression",
          "replacement": "description",
          "statusReason": "expected 252 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36"],
          "location": {
            "end": {
              "column": 64,
              "line": 187
            },
            "start": {
              "column": 29,
              "line": 187
            }
          }
        },
        {
          "id": "1191",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 249 to be 250 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["36"],
          "coveredBy": ["36"],
          "location": {
            "end": {
              "column": 70,
              "line": 187
            },
            "start": {
              "column": 67,
              "line": 187
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryFromUnknownCategory, UnknownBlogSlug, BlogCategory, StrictBlog, TBlogPost } from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { IsoDateTimeString } from 'contentlayer/core';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\nimport { buildAbsolutePathFromParts } from '@rtm/shared-lib/str';\nimport { getBlogSubcategoriesByCategory } from '@/cache/blog';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { LANGUAGES } from '##/config/i18n';\nimport { redirect } from 'next/navigation';\nimport BlogConfig from '@/config/blog';\n\nimport { getFormattedDate } from '../str';\nimport ComputedBlogCtx from './ctx';\n\nexport async function getAllBlogPostsByCategory(categ: BlogCategory): Promise<MaybeNull<TBlogPost[]>> {\n  try {\n    const posts = await BlogConfig.BLOG_CATEGORIES_ALL_POSTS_CONSTS_ASSOC[categ]();\n    return posts;\n  } catch {\n    return null;\n  }\n}\n\nexport async function getAllBlogPostsByCategoryAndLanguage(categ: BlogCategory, language: LanguageFlag): Promise<MaybeNull<TBlogPost[]>> {\n  const allPosts = await getAllBlogPostsByCategory(categ);\n  if (allPosts === null) return null;\n\n  const posts = allPosts.filter(({ language: currentPostLanguage }) => currentPostLanguage === language);\n  return posts;\n}\n\nexport async function getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory,\n  language: LanguageFlag\n): Promise<TBlogPost[]> {\n  // Stryker Workaround 1. Pointless mutants: there's no ambiguity here.\n  // Stryker disable next-line ConditionalExpression,EqualityOperator\n  if (!ComputedBlogCtx.TESTING && category === BlogConfig.TESTING_CATEGORY) return [];\n\n  const isValidPair: boolean = await isValidBlogCategoryAndSubcategoryPair(category, subcategory, language);\n  // Stryker Workaround 2. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!isValidPair) return [];\n\n  const getPostsWithAllowedDraftsCtx = (postsCollection: TBlogPost[]): TBlogPost[] =>\n    postsCollection.filter(\n      ({ subcategory: currentPostSubcategory, language: currentPostLanguage }) =>\n        // Stryker Workaround 3. Pointless mutants: there's no ambiguity here.\n        // Stryker disable next-line ConditionalExpression\n        currentPostSubcategory === subcategory && currentPostLanguage === language\n    );\n\n  const getPostsWithDisallowedDraftsCtx = (postsCollection: TBlogPost[]): TBlogPost[] =>\n    postsCollection.filter(\n      ({ subcategory: currentPostSubcategory, language: currentPostLanguage, draft: currentPostDraft }) =>\n        // Stryker Workaround 4. Pointless mutants: there's no ambiguity here.\n        // Stryker disable next-line ConditionalExpression\n        !currentPostDraft && currentPostSubcategory === subcategory && currentPostLanguage === language\n    );\n\n  const postsCollection = (await getAllBlogPostsByCategory(category)) as TBlogPost[];\n\n  return ComputedBlogCtx.ALLOWED_DRAFTS ? getPostsWithAllowedDraftsCtx(postsCollection) : getPostsWithDisallowedDraftsCtx(postsCollection);\n}\n\nexport async function getBlogPostUnstrict(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory,\n  targettedSlug: UnknownBlogSlug,\n  language: LanguageFlag\n): Promise<MaybeNull<TBlogPost>> {\n  // Stryker Workaround 5. Pointless mutants: there's no ambiguity here.\n  // Stryker disable next-line ConditionalExpression,EqualityOperator\n  if (!ComputedBlogCtx.TESTING && category === BlogConfig.TESTING_CATEGORY) return null;\n\n  const getPostWithAllowedDraftsCtx: () => MaybeNull<TBlogPost> = () =>\n    postsCollection.find(({ slug: currentPostSlug }) => currentPostSlug === targettedSlug) ?? null;\n\n  const getPostWithDisallowedDraftsCtx: () => MaybeNull<TBlogPost> = () =>\n    postsCollection.find(({ draft: currentPostDraft, slug: currentPostSlug }) => !currentPostDraft && currentPostSlug === targettedSlug) ?? null;\n\n  const postsCollection: TBlogPost[] = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(category, subcategory, language);\n\n  return ComputedBlogCtx.ALLOWED_DRAFTS ? getPostWithAllowedDraftsCtx() : getPostWithDisallowedDraftsCtx();\n}\n\nexport async function getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict<C extends keyof StrictBlog>(\n  category: C,\n  subcategory: keyof StrictBlog[C],\n  language: keyof StrictBlog[C][keyof StrictBlog[C]]\n): Promise<TBlogPost[]> {\n  const allPosts: TBlogPost[] = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n    category as any,\n    subcategory as any,\n    language as any\n  );\n  return allPosts;\n}\n\nexport async function getBlogPostStrict<\n  Category extends keyof StrictBlog,\n  Subcategory extends keyof StrictBlog[Category],\n  Language extends keyof StrictBlog[Category][keyof StrictBlog[Category]]\n>(\n  category: Category,\n  subcategory: Subcategory,\n  language: Language,\n  targettedSlug: StrictBlog[Category][Subcategory][Language]\n): Promise<MaybeNull<TBlogPost>> {\n  const post: MaybeNull<TBlogPost> = await getBlogPostUnstrict(category as any, subcategory as any, targettedSlug as any, language as any);\n  return post;\n}\n\nexport const getAllBlogCategories: () => BlogCategory[] = () => Object.keys(BlogConfig.BLOG_CATEGORIES_ALL_POSTS_CONSTS_ASSOC) as BlogCategory[];\n\nexport function blogSubcategoryShouldTriggerNotFound(postsCollection: TBlogPost[]): boolean {\n  const isForcedPath = BlogConfig.USE_BLOG_POSTS_NOTFOUND_WHEN_SUBCATEGORY_IS_EMPTY_INSTEAD_OF_NOT_FOUND;\n  return !isForcedPath && postsCollection.length === 0;\n}\n\nexport function getBlogPostFormattedDate(language: LanguageFlag, date: IsoDateTimeString): string {\n  // Stryker Workaround 6. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  const postDateHasTime = (date: IsoDateTimeString) => date.substring(date.indexOf('T') + 1) !== '00:00:00.000Z';\n\n  const giveTime = postDateHasTime(date);\n  const formattedDate = getFormattedDate(language, new Date(date), giveTime);\n  return formattedDate;\n}\n\nexport function isValidBlogCategory(category: string): boolean {\n  // Stryker Workaround 7. Testing \"&& true\" is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!ComputedBlogCtx.TESTING && category === BlogConfig.TESTING_CATEGORY) return false;\n\n  const categories = getAllBlogCategories();\n  if (!categories.includes(category as any)) return false;\n  return true;\n}\n\nexport async function isValidBlogCategoryAndSubcategoryPairInAnyLanguage(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory\n): Promise<boolean> {\n  // Stryker Workaround 8. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!isValidBlogCategory(category)) return false;\n\n  for (const language of LANGUAGES) {\n    const currentSubcategories = await getBlogSubcategoriesByCategory(category, language);\n    if (currentSubcategories.includes(subcategory)) return true;\n  }\n  return false;\n}\n\nexport async function isValidBlogCategoryAndSubcategoryPair(\n  category: BlogCategory,\n  subcategory: BlogSubcategoryFromUnknownCategory,\n  language: LanguageFlag\n): Promise<boolean> {\n  // Stryker Workaround 9. Mutant will be killed with `if (true)` as expected, but `if (false)` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!isValidBlogCategory(category)) return false;\n\n  const subcategories = await getBlogSubcategoriesByCategory(category, language);\n  if (!subcategories.includes(subcategory)) return false;\n  return true;\n}\n\nexport const redirectToBlogCategoryPage = (category: BlogCategory): void => redirect(buildAbsolutePathFromParts(ROUTES_ROOTS.BLOG, category));\n\nexport const redirectToBlogCategoryAndSubcategoryPairPageUnstrict = (category: BlogCategory, subcategory: BlogSubcategoryFromUnknownCategory): void =>\n  redirect(buildAbsolutePathFromParts(ROUTES_ROOTS.BLOG, category, subcategory));\n\nexport function getBlogPostPathWithoutI18nPart({ language, url }: TBlogPost): AppPath {\n  const blogPostPathWithoutI18nPart = url.replace(`/${language}/`, '/');\n  return blogPostPathWithoutI18nPart;\n}\n\nexport function getSlicedBlogPostDescription(description: string): CroppedDescription | DescriptionAsIs {\n  const takeLimit = BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT - 1;\n  if (description.length <= takeLimit) return description;\n\n  const slicedDescription = description.substring(0, takeLimit) + '…';\n  return slicedDescription;\n}\n\ntype DescriptionAsIs = string;\ntype CroppedDescription = string;\n"
    },
    "src/lib/blog/blogCategoryPageBuilder.tsx": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1192",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(20,109): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 123
            },
            "start": {
              "column": 145,
              "line": 20
            }
          }
        },
        {
          "id": "1193",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 29,
              "line": 21
            }
          }
        },
        {
          "id": "1194",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 30
            },
            "start": {
              "column": 31,
              "line": 22
            }
          }
        },
        {
          "id": "1195",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "1196",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "1197",
          "mutatorName": "EqualityOperator",
          "replacement": "histogram[curSubcateg] !== undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 24
            },
            "start": {
              "column": 11,
              "line": 24
            }
          }
        },
        {
          "id": "1198",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 26
            },
            "start": {
              "column": 11,
              "line": 26
            }
          }
        },
        {
          "id": "1199",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 26
            },
            "start": {
              "column": 11,
              "line": 26
            }
          }
        },
        {
          "id": "1200",
          "mutatorName": "LogicalOperator",
          "replacement": "histogram[curSubcateg].length < limit + 1 || post.language === language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 26
            },
            "start": {
              "column": 11,
              "line": 26
            }
          }
        },
        {
          "id": "1201",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 11,
              "line": 26
            }
          }
        },
        {
          "id": "1202",
          "mutatorName": "EqualityOperator",
          "replacement": "histogram[curSubcateg].length <= limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 11,
              "line": 26
            }
          }
        },
        {
          "id": "1203",
          "mutatorName": "EqualityOperator",
          "replacement": "histogram[curSubcateg].length >= limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 11,
              "line": 26
            }
          }
        },
        {
          "id": "1204",
          "mutatorName": "ArithmeticOperator",
          "replacement": "limit - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 26
            },
            "start": {
              "column": 43,
              "line": 26
            }
          }
        },
        {
          "id": "1205",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 26
            },
            "start": {
              "column": 56,
              "line": 26
            }
          }
        },
        {
          "id": "1206",
          "mutatorName": "EqualityOperator",
          "replacement": "post.language !== language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 26
            },
            "start": {
              "column": 56,
              "line": 26
            }
          }
        },
        {
          "id": "1207",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 29
            },
            "start": {
              "column": 84,
              "line": 26
            }
          }
        },
        {
          "id": "1208",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 28
            },
            "start": {
              "column": 13,
              "line": 28
            }
          }
        },
        {
          "id": "1209",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 28
            },
            "start": {
              "column": 13,
              "line": 28
            }
          }
        },
        {
          "id": "1210",
          "mutatorName": "MethodExpression",
          "replacement": "Object.values(histogram).some(posts2 => posts2.length >= limit + 1)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 28
            },
            "start": {
              "column": 13,
              "line": 28
            }
          }
        },
        {
          "id": "1211",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 44,
              "line": 28
            }
          }
        },
        {
          "id": "1212",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 56,
              "line": 28
            }
          }
        },
        {
          "id": "1213",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 56,
              "line": 28
            }
          }
        },
        {
          "id": "1214",
          "mutatorName": "EqualityOperator",
          "replacement": "posts2.length > limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 56,
              "line": 28
            }
          }
        },
        {
          "id": "1215",
          "mutatorName": "EqualityOperator",
          "replacement": "posts2.length < limit + 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 56,
              "line": 28
            }
          }
        },
        {
          "id": "1216",
          "mutatorName": "ArithmeticOperator",
          "replacement": "limit - 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 28
            },
            "start": {
              "column": 73,
              "line": 28
            }
          }
        },
        {
          "id": "1217",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 39
            },
            "start": {
              "column": 44,
              "line": 33
            }
          }
        },
        {
          "id": "1218",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 38
            },
            "start": {
              "column": 66,
              "line": 34
            }
          }
        },
        {
          "id": "1219",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 37
            },
            "start": {
              "column": 96,
              "line": 35
            }
          }
        },
        {
          "id": "1220",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 36
            },
            "start": {
              "column": 31,
              "line": 36
            }
          }
        },
        {
          "id": "1221",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 41
            },
            "start": {
              "column": 27,
              "line": 41
            }
          }
        },
        {
          "id": "1222",
          "mutatorName": "MethodExpression",
          "replacement": "Object.values(postsCollectionsSnippets).some(posts2 => posts2.length === 0)",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 41
            },
            "start": {
              "column": 33,
              "line": 41
            }
          }
        },
        {
          "id": "1223",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 41
            },
            "start": {
              "column": 79,
              "line": 41
            }
          }
        },
        {
          "id": "1224",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 41
            },
            "start": {
              "column": 91,
              "line": 41
            }
          }
        },
        {
          "id": "1225",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 41
            },
            "start": {
              "column": 91,
              "line": 41
            }
          }
        },
        {
          "id": "1226",
          "mutatorName": "EqualityOperator",
          "replacement": "posts2.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 41
            },
            "start": {
              "column": 91,
              "line": 41
            }
          }
        },
        {
          "id": "1227",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(43,32): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 94
            },
            "start": {
              "column": 44,
              "line": 43
            }
          }
        },
        {
          "id": "1228",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 44
            },
            "start": {
              "column": 33,
              "line": 44
            }
          }
        },
        {
          "id": "1229",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 45
            },
            "start": {
              "column": 18,
              "line": 45
            }
          }
        },
        {
          "id": "1230",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 92
            },
            "start": {
              "column": 82,
              "line": 48
            }
          }
        },
        {
          "id": "1231",
          "mutatorName": "UpdateOperator",
          "replacement": "--counter",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 49
            },
            "start": {
              "column": 7,
              "line": 49
            }
          }
        },
        {
          "id": "1232",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "1233",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "1234",
          "mutatorName": "EqualityOperator",
          "replacement": "counter > max",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "1235",
          "mutatorName": "EqualityOperator",
          "replacement": "counter < max",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "1236",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 51
            },
            "start": {
              "column": 11,
              "line": 51
            }
          }
        },
        {
          "id": "1237",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 51
            },
            "start": {
              "column": 11,
              "line": 51
            }
          }
        },
        {
          "id": "1238",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 51
            },
            "start": {
              "column": 11,
              "line": 51
            }
          }
        },
        {
          "id": "1239",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(53,40): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 110,
              "line": 53
            },
            "start": {
              "column": 40,
              "line": 53
            }
          }
        },
        {
          "id": "1240",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1241",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1242",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length >= limit",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1243",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length <= limit",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 65
            },
            "start": {
              "column": 11,
              "line": 65
            }
          }
        },
        {
          "id": "1244",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 74
            },
            "start": {
              "column": 33,
              "line": 65
            }
          }
        },
        {
          "id": "1245",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 68
            },
            "start": {
              "column": 60,
              "line": 68
            }
          }
        },
        {
          "id": "1246",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(69,42): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 69
            },
            "start": {
              "column": 42,
              "line": 69
            }
          }
        },
        {
          "id": "1247",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 122,
              "line": 76
            },
            "start": {
              "column": 82,
              "line": 76
            }
          }
        },
        {
          "id": "1248",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 80
            },
            "start": {
              "column": 16,
              "line": 80
            }
          }
        },
        {
          "id": "1249",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "1250",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "1251",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLast && !showMoreLink || max > 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "1252",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "1253",
          "mutatorName": "LogicalOperator",
          "replacement": "!isLast || !showMoreLink",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "1254",
          "mutatorName": "BooleanLiteral",
          "replacement": "isLast",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 91
            },
            "start": {
              "column": 11,
              "line": 91
            }
          }
        },
        {
          "id": "1255",
          "mutatorName": "BooleanLiteral",
          "replacement": "showMoreLink",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 91
            },
            "start": {
              "column": 22,
              "line": 91
            }
          }
        },
        {
          "id": "1256",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 91
            },
            "start": {
              "column": 39,
              "line": 91
            }
          }
        },
        {
          "id": "1257",
          "mutatorName": "EqualityOperator",
          "replacement": "max >= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 91
            },
            "start": {
              "column": 39,
              "line": 91
            }
          }
        },
        {
          "id": "1258",
          "mutatorName": "EqualityOperator",
          "replacement": "max <= 1",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 91
            },
            "start": {
              "column": 39,
              "line": 91
            }
          }
        },
        {
          "id": "1259",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 96
            },
            "start": {
              "column": 7,
              "line": 96
            }
          }
        },
        {
          "id": "1260",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 96
            },
            "start": {
              "column": 7,
              "line": 96
            }
          }
        },
        {
          "id": "1261",
          "mutatorName": "EqualityOperator",
          "replacement": "posts.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 96
            },
            "start": {
              "column": 7,
              "line": 96
            }
          }
        },
        {
          "id": "1262",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(100,9): error TS2322: Type 'undefined[]' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]][]'.\n  Type 'undefined' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 112,
              "line": 100
            },
            "start": {
              "column": 84,
              "line": 100
            }
          }
        },
        {
          "id": "1263",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(100,9): error TS2322: Type '[][]' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]][]'.\n  Type '[]' is not assignable to type '[BlogSubcategoryFromUnknownCategory, unknown[]]'.\n    Source has 0 element(s) but target requires 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 112,
              "line": 100
            },
            "start": {
              "column": 98,
              "line": 100
            }
          }
        },
        {
          "id": "1264",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 100
            },
            "start": {
              "column": 109,
              "line": 100
            }
          }
        },
        {
          "id": "1265",
          "mutatorName": "MethodExpression",
          "replacement": "entries",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 109
            },
            "start": {
              "column": 25,
              "line": 103
            }
          }
        },
        {
          "id": "1266",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(103,38): error TS2345: Argument of type '() => undefined' is not assignable to parameter of type '(a: [BlogSubcategoryFromUnknownCategory, unknown[]], b: [BlogSubcategoryFromUnknownCategory, unknown[]]) => number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 108
            },
            "start": {
              "column": 38,
              "line": 103
            }
          }
        },
        {
          "id": "1267",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(105,15): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 105
            },
            "start": {
              "column": 15,
              "line": 105
            }
          }
        },
        {
          "id": "1268",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(106,15): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): string', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n  Overload 2 of 2, '(key: \"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | ... 53 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"): ReactNode', gave the following error.\n    Argument of type '\"\"' is not assignable to parameter of type '\"dashboard.sr-only.hide-sidebar\" | \"dashboard.sr-only.show-sidebar\" | \"dashboard.pages-titles.main\" | \"dashboard.pages-titles.foo\" | \"dashboard.pages-titles.bar\" | \"navbar.assistance\" | ... 52 more ... | \"blog-categories.testing.fake-subcategory.meta-description\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 106
            },
            "start": {
              "column": 15,
              "line": 106
            }
          }
        },
        {
          "id": "1269",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/blogCategoryPageBuilder.tsx(24,11): error TS18048: 'histogram' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(26,11): error TS18048: 'histogram' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(27,9): error TS18048: 'histogram' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(28,27): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: { [s: string]: unknown; } | ArrayLike<unknown>): unknown[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{ [s: string]: unknown; } | ArrayLike<unknown>'.\n  Overload 2 of 2, '(o: {}): any[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(28,56): error TS18046: 'posts2' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(34,20): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: ArrayLike<unknown> | { [s: string]: unknown; }): [string, unknown][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type 'ArrayLike<unknown> | { [s: string]: unknown; }'.\n  Overload 2 of 2, '(o: {}): [string, any][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(35,7): error TS18048: 'postsCollectionsSnippets' is possibly 'undefined'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(35,85): error TS18046: 'posts2' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(35,97): error TS7006: Parameter 'post' implicitly has an 'any' type.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(41,47): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: { [s: string]: unknown; } | ArrayLike<unknown>): unknown[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{ [s: string]: unknown; } | ArrayLike<unknown>'.\n  Overload 2 of 2, '(o: {}): any[]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(41,91): error TS18046: 'posts2' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(46,32): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: ArrayLike<unknown> | { [s: string]: unknown; }): [string, unknown][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type 'ArrayLike<unknown> | { [s: string]: unknown; }'.\n  Overload 2 of 2, '(o: {}): [string, any][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(48,55): error TS2769: No overload matches this call.\n  Overload 1 of 2, '(o: ArrayLike<unknown> | { [s: string]: unknown; }): [string, unknown][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type 'ArrayLike<unknown> | { [s: string]: unknown; }'.\n  Overload 2 of 2, '(o: {}): [string, any][]', gave the following error.\n    Argument of type 'undefined' is not assignable to parameter of type '{}'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(51,11): error TS18046: 'posts' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(65,11): error TS18046: 'posts' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(73,9): error TS18046: 'posts' is of type 'unknown'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(85,11): error TS2322: Type 'unknown' is not assignable to type 'ReactNode'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(111,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/blog/blogCategoryPageBuilder.tsx(111,21): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 114
            },
            "start": {
              "column": 49,
              "line": 111
            }
          }
        },
        {
          "id": "1270",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 119
            },
            "start": {
              "column": 7,
              "line": 119
            }
          }
        },
        {
          "id": "1271",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 119
            },
            "start": {
              "column": 7,
              "line": 119
            }
          }
        }
      ],
      "source": "import type { BlogCategoriesAndSubcategoriesAssoc, BlogSubcategoryFromUnknownCategory, BlogCategory, TBlogPost } from '@/types/Blog';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { ReactElement, ReactNode } from 'react';\n\nimport BlogPostsNotFound from '@/components/ui/blog/BlogPostsNotFound';\nimport BlogPostPreview from '@/components/ui/blog/BlogPostPreview';\nimport BUTTON_CONFIG from '@/components/config/styles/buttons';\nimport { getBlogSubcategoriesByCategory } from '@/cache/blog';\nimport { buildPathFromParts } from '@rtm/shared-lib/str';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { Button } from '@/components/ui/Button';\nimport GithubSlugger from 'github-slugger';\nimport { i18ns } from '##/config/i18n';\nimport BlogConfig from '@/config/blog';\nimport { cn } from '@/lib/tailwind';\nimport Link from 'next/link';\n\nconst slugger = new GithubSlugger();\n\nasync function blogCategoryPageBuilder(posts: TBlogPost[], category: BlogCategory, language: LanguageFlag): Promise<ReactElement | ReactNode[]> {\n  function buildHistogram() {\n    for (const post of posts) {\n      const curSubcateg = post.subcategory as BlogSubcategoryFromUnknownCategory;\n      if (histogram[curSubcateg] === undefined) continue;\n\n      if (histogram[curSubcateg].length < limit + 1 && post.language === language) {\n        histogram[curSubcateg].push(post);\n        if (Object.values(histogram).every((posts2) => posts2.length >= limit + 1)) break;\n      }\n    }\n  }\n\n  function buildPostsCollectionsSnippets() {\n    Object.entries(histogram).forEach(([subcategory, posts2]) => {\n      postsCollectionsSnippets[subcategory as BlogSubcategoryFromUnknownCategory] = posts2.map((post) => (\n        <BlogPostPreview key={`${post._raw.flattenedPath}-post-snippet`} isNotOnBlogSubcategoryPage language={language} post={post} />\n      ));\n    });\n  }\n\n  const isEmptySnippets = () => Object.values(postsCollectionsSnippets).every((posts2) => posts2.length === 0);\n\n  function contentGenerator(): ReactNode[] {\n    const result: ReactNode[] = [];\n    let isLast = false;\n    const max = Object.entries(postsCollectionsSnippets).length;\n    let counter = 0;\n    for (const [subcategory, posts] of Object.entries(postsCollectionsSnippets)) {\n      ++counter;\n      isLast = counter >= max;\n      if (posts.length === 0) continue;\n      const narrowedCategoryAndSubcategoryAssoc = `${category}.${subcategory}` as BlogCategoriesAndSubcategoriesAssoc;\n      const curSubcategTitle = globalT(`${i18ns.blogCategories}.${narrowedCategoryAndSubcategoryAssoc}.title`);\n      const href = buildPathFromParts(category, subcategory);\n      const title = (\n        <Link\n          className=\"mb-4 flex h-fit w-fit border-b-[2px] border-transparent leading-none transition-all hover:border-b-[2px] hover:border-inherit hover:pr-2 hover:indent-1 focus:border-b-[2px] focus:border-inherit focus:pr-2 focus:indent-1\"\n          href={href}\n        >\n          <h2 className=\"mb-1 mt-2\">{curSubcategTitle}</h2>\n        </Link>\n      );\n\n      let showMoreLink = null;\n      if (posts.length > limit) {\n        showMoreLink = (\n          <div className=\"flex w-full justify-center\">\n            <Button className={cn(BUTTON_CONFIG.CLASSNAME, 'mb-6 mt-4 lg:mb-0')} size=\"lg\" asChild>\n              <Link href={href}>{globalT(`${i18ns.vocab}.see-more`)}</Link>\n            </Button>\n          </div>\n        );\n        posts.pop();\n      }\n\n      const sep = <hr className=\"color-inherit m-auto my-5 w-36 opacity-50\" key={`${subcategory}-${curSubcategTitle}-sep`} />;\n\n      const section = (\n        <section\n          key={`${subcategory}-${curSubcategTitle}-section`}\n          className=\"[&>article:not(:last-of-type)]:mb-6\"\n          id={slugger.slug(curSubcategTitle)}\n        >\n          {title}\n          {posts}\n          {showMoreLink}\n        </section>\n      );\n\n      result.push(section);\n      if (!isLast && !showMoreLink && max > 1) result.push(sep);\n    }\n    return result;\n  }\n\n  if (posts.length === 0) return <BlogPostsNotFound />;\n\n  const globalT = await getServerSideI18n();\n  const subcategs: BlogSubcategoryFromUnknownCategory[] = await getBlogSubcategoriesByCategory(category, language);\n  const entries: [BlogSubcategoryFromUnknownCategory, unknown[]][] = subcategs.map((subcateg) => [subcateg, []]);\n  const { pagesTitles } = i18ns;\n\n  const sortedEntries = entries.sort(([entry1], [entry2]) =>\n    BlogConfig.DEFAULT_COMPARE_FUNCTION_USED_TO_SORT_SUBCATEGORIES_ON_BLOG_CATEGORY_PAGE(\n      globalT(`${pagesTitles}.${entry1}`),\n      globalT(`${pagesTitles}.${entry2}`),\n      language\n    )\n  );\n\n  const [histogram, postsCollectionsSnippets] = [\n    Object.fromEntries(entries) as Record<BlogSubcategoryFromUnknownCategory, TBlogPost[]>,\n    Object.fromEntries(sortedEntries) as Record<BlogSubcategoryFromUnknownCategory, ReactNode[]>\n  ];\n  const limit = BlogConfig.DISPLAYED_BLOG_POSTS_PER_SUBCATEGORY_ON_BLOG_CATEGORY_PAGE_LIMIT;\n\n  buildHistogram();\n  buildPostsCollectionsSnippets();\n  if (isEmptySnippets()) return <BlogPostsNotFound />;\n\n  const result: ReactNode[] = contentGenerator();\n  return result;\n}\n\nexport default blogCategoryPageBuilder;\n"
    },
    "src/lib/blog/ctx.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1272",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { draft: true, …(13) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 309,
          "static": true,
          "killedBy": ["191"],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "1273",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 225,
          "static": true,
          "killedBy": ["150"],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "1274",
          "mutatorName": "LogicalOperator",
          "replacement": "BlogConfig.ENABLE_DRAFTS_IN_PROD && ComputedNodeCtx.DEV",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": true,
          "killedBy": ["150"],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        }
      ],
      "source": "import BlogConfig from '@/config/blog';\n\nimport ComputedNodeCtx from '../portable/node/env';\n\ntype TComputedBlogCtx = {\n  ALLOWED_DRAFTS: boolean;\n  TESTING: boolean;\n};\n\nconst TESTING = ComputedNodeCtx.TEST;\nconst ALLOWED_DRAFTS = BlogConfig.ENABLE_DRAFTS_IN_PROD || ComputedNodeCtx.DEV;\n\nconst ComputedBlogCtx: TComputedBlogCtx = {\n  ALLOWED_DRAFTS,\n  TESTING\n} as const;\n\nexport default ComputedBlogCtx;\n"
    },
    "src/lib/blog/guards/blogCategoryGuard.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1275",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 1, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["244"],
          "coveredBy": ["243", "244"],
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 84,
              "line": 8
            }
          }
        },
        {
          "id": "1276",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategory(category)",
          "statusReason": "promise rejected \"Error: NEXT_NOT_FOUND { digest: 'NEX…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["243"],
          "coveredBy": ["243", "244"],
          "location": {
            "end": {
              "column": 37,
              "line": 11
            },
            "start": {
              "column": 7,
              "line": 11
            }
          }
        },
        {
          "id": "1277",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_NOT_FOUND { digest: 'NEX…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["243"],
          "coveredBy": ["243", "244"],
          "location": {
            "end": {
              "column": 37,
              "line": 11
            },
            "start": {
              "column": 7,
              "line": 11
            }
          }
        },
        {
          "id": "1278",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected number of assertions to be 1, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["244"],
          "coveredBy": ["243", "244"],
          "location": {
            "end": {
              "column": 37,
              "line": 11
            },
            "start": {
              "column": 7,
              "line": 11
            }
          }
        }
      ],
      "source": "import type { BlogCategoryPageProps } from '@/types/Blog';\n\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport { notFound } from 'next/navigation';\n\nimport { isValidBlogCategory } from '../api';\n\nexport default async function blogCategoryGuard({ params }: BlogCategoryPageProps) {\n  const category = params[BlogTaxonomy.CATEGORY];\n\n  if (!isValidBlogCategory(category)) notFound();\n}\n"
    },
    "src/lib/blog/guards/blogPostGuard.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1279",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["58"],
          "coveredBy": ["57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 76,
              "line": 16
            }
          }
        },
        {
          "id": "1280",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/guards/blogPostGuard.ts(17,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/blog/guards/blogPostGuard.ts(17,20): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/lib/blog/guards/blogPostGuard.ts(19,94): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/lib/blog/guards/blogPostGuard.ts(23,61): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/lib/blog/guards/blogPostGuard.ts(26,58): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\nsrc/lib/blog/guards/blogPostGuard.ts(27,43): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/lib/blog/guards/blogPostGuard.ts(28,32): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'keyof BlogArchitecture'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 100,
              "line": 17
            },
            "start": {
              "column": 35,
              "line": 17
            }
          }
        },
        {
          "id": "1281",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/blog/guards/blogPostGuard.ts(21,10): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/blog/guards/blogPostGuard.ts(21,16): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/lib/blog/guards/blogPostGuard.ts(23,84): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 86,
              "line": 21
            },
            "start": {
              "column": 28,
              "line": 21
            }
          }
        },
        {
          "id": "1282",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 32,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1283",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/blog/testing' to be '/blog/testing/fake-subcategory' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["58"],
          "coveredBy": ["57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 32,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1284",
          "mutatorName": "LogicalOperator",
          "replacement": "!post || validCombination",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 32,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1285",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 12,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1286",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["58"],
          "coveredBy": ["58", "65"],
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 34,
              "line": 25
            }
          }
        },
        {
          "id": "1287",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "59", "60", "61", "62", "63", "64", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 52,
              "line": 27
            },
            "start": {
              "column": 14,
              "line": 27
            }
          }
        },
        {
          "id": "1288",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/testing' to be '/blog/testing' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["59"],
          "coveredBy": ["57", "59", "60", "61", "62", "63", "64", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 52,
              "line": 27
            },
            "start": {
              "column": 14,
              "line": 27
            }
          }
        },
        {
          "id": "1289",
          "mutatorName": "LogicalOperator",
          "replacement": "!post || isValidBlogCategory(category)",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "59", "60", "61", "62", "63", "64", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 52,
              "line": 27
            },
            "start": {
              "column": 14,
              "line": 27
            }
          }
        },
        {
          "id": "1290",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "59", "60", "61", "62", "63", "64", "66", "67", "68", "69", "70"],
          "location": {
            "end": {
              "column": 19,
              "line": 27
            },
            "start": {
              "column": 14,
              "line": 27
            }
          }
        },
        {
          "id": "1291",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["59"],
          "coveredBy": ["59", "61", "66", "68"],
          "location": {
            "end": {
              "column": 4,
              "line": 29
            },
            "start": {
              "column": 54,
              "line": 27
            }
          }
        },
        {
          "id": "1292",
          "mutatorName": "BooleanLiteral",
          "replacement": "post",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "60", "62", "63", "64", "67", "69", "70"],
          "location": {
            "end": {
              "column": 19,
              "line": 29
            },
            "start": {
              "column": 14,
              "line": 29
            }
          }
        },
        {
          "id": "1293",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["57"],
          "coveredBy": ["57", "60", "62", "63", "64", "67", "69", "70"],
          "location": {
            "end": {
              "column": 19,
              "line": 29
            },
            "start": {
              "column": 14,
              "line": 29
            }
          }
        },
        {
          "id": "1294",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["60"],
          "coveredBy": ["57", "60", "62", "63", "64", "67", "69", "70"],
          "location": {
            "end": {
              "column": 19,
              "line": 29
            },
            "start": {
              "column": 14,
              "line": 29
            }
          }
        },
        {
          "id": "1295",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["60"],
          "coveredBy": ["60", "62", "63", "67", "69", "70"],
          "location": {
            "end": {
              "column": 4,
              "line": 31
            },
            "start": {
              "column": 21,
              "line": 29
            }
          }
        },
        {
          "id": "1296",
          "mutatorName": "ArithmeticOperator",
          "replacement": "ROUTES_ROOTS.WEBSITE - category",
          "statusReason": "src/lib/blog/guards/blogPostGuard.ts(30,14): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/blog/guards/blogPostGuard.ts(30,14): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\nsrc/lib/blog/guards/blogPostGuard.ts(30,37): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["60", "62", "63", "67", "69", "70"],
          "location": {
            "end": {
              "column": 45,
              "line": 30
            },
            "start": {
              "column": 14,
              "line": 30
            }
          }
        }
      ],
      "source": "import type { BlogPostPageProps } from '@/types/Blog';\n\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\n\nimport {\n  redirectToBlogCategoryAndSubcategoryPairPageUnstrict,\n  isValidBlogCategoryAndSubcategoryPairInAnyLanguage,\n  redirectToBlogCategoryPage,\n  getBlogPostUnstrict,\n  isValidBlogCategory\n} from '../api';\n\nexport default async function blogPostGuard({ params }: BlogPostPageProps) {\n  const [category, subcategory] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY]];\n\n  const validCombination: boolean = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n\n  const [slug, language] = [params[BlogTaxonomy.SLUG], params[I18nTaxonomy.LANGUAGE]];\n\n  const post = validCombination ? await getBlogPostUnstrict(category, subcategory, slug, language) : undefined;\n\n  if (!post && validCombination) {\n    redirectToBlogCategoryAndSubcategoryPairPageUnstrict(category, subcategory);\n  } else if (!post && isValidBlogCategory(category)) {\n    redirectToBlogCategoryPage(category);\n  } else if (!post) {\n    redirect(ROUTES_ROOTS.WEBSITE + category);\n  }\n}\n"
    },
    "src/lib/blog/guards/blogSubcategoryGuard.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1297",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 90,
              "line": 9
            }
          }
        },
        {
          "id": "1298",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 15
            },
            "start": {
              "column": 29,
              "line": 15
            }
          }
        },
        {
          "id": "1299",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 15
            },
            "start": {
              "column": 29,
              "line": 15
            }
          }
        },
        {
          "id": "1300",
          "mutatorName": "EqualityOperator",
          "replacement": "ROUTES_ROOTS.WEBSITE + category !== ROUTES_ROOTS.BLOG + category",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 93,
              "line": 15
            },
            "start": {
              "column": 29,
              "line": 15
            }
          }
        },
        {
          "id": "1301",
          "mutatorName": "ArithmeticOperator",
          "replacement": "ROUTES_ROOTS.WEBSITE - category",
          "statusReason": "src/lib/blog/guards/blogSubcategoryGuard.ts(15,29): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(15,29): error TS2367: This comparison appears to be unintentional because the types 'number' and 'string' have no overlap.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(15,52): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 60,
              "line": 15
            },
            "start": {
              "column": 29,
              "line": 15
            }
          }
        },
        {
          "id": "1302",
          "mutatorName": "ArithmeticOperator",
          "replacement": "ROUTES_ROOTS.BLOG - category",
          "statusReason": "src/lib/blog/guards/blogSubcategoryGuard.ts(15,29): error TS2367: This comparison appears to be unintentional because the types 'string' and 'number' have no overlap.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(15,65): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(15,85): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 93,
              "line": 15
            },
            "start": {
              "column": 65,
              "line": 15
            }
          }
        },
        {
          "id": "1303",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["115"],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 43,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1304",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 43,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1305",
          "mutatorName": "LogicalOperator",
          "replacement": "!validCategory || !categServedAtRoot",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["115"],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 43,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1306",
          "mutatorName": "BooleanLiteral",
          "replacement": "validCategory",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["115"],
          "coveredBy": ["115", "116", "117", "118", "152", "153", "154"],
          "location": {
            "end": {
              "column": 21,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1307",
          "mutatorName": "BooleanLiteral",
          "replacement": "categServedAtRoot",
          "statusReason": "expected '/blog/__INVALID_CATEGORY__' to be '/__INVALID_CATEGORY__' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["116"],
          "coveredBy": ["116", "117", "153"],
          "location": {
            "end": {
              "column": 43,
              "line": 16
            },
            "start": {
              "column": 25,
              "line": 16
            }
          }
        },
        {
          "id": "1308",
          "mutatorName": "ArithmeticOperator",
          "replacement": "ROUTES_ROOTS.WEBSITE - category",
          "statusReason": "src/lib/blog/guards/blogSubcategoryGuard.ts(16,54): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(16,54): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\nsrc/lib/blog/guards/blogSubcategoryGuard.ts(16,77): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["116", "117", "153"],
          "location": {
            "end": {
              "column": 85,
              "line": 16
            },
            "start": {
              "column": 54,
              "line": 16
            }
          }
        },
        {
          "id": "1309",
          "mutatorName": "BooleanLiteral",
          "replacement": "validCombination",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["115"],
          "coveredBy": ["115", "118", "152", "154"],
          "location": {
            "end": {
              "column": 24,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "1310",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "promise rejected \"Error: NEXT_REDIRECT { digest: 'NEXT…' }\" instead of resolving",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["115"],
          "coveredBy": ["115", "118", "152", "154"],
          "location": {
            "end": {
              "column": 24,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "1311",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected number of assertions to be 2, but got 0",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["118"],
          "coveredBy": ["115", "118", "152", "154"],
          "location": {
            "end": {
              "column": 24,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryPageProps } from '@/types/Blog';\n\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport ROUTES_ROOTS from '##/config/routes';\nimport { redirect } from 'next/navigation';\n\nimport { isValidBlogCategoryAndSubcategoryPairInAnyLanguage, redirectToBlogCategoryPage, isValidBlogCategory } from '../api';\n\nexport default async function blogSubcategoryGuard({ params }: BlogSubcategoryPageProps) {\n  const category = params[BlogTaxonomy.CATEGORY];\n\n  const validCategory = isValidBlogCategory(category);\n  // Stryker Workaround 1. Mutant will be killed with `= true` as expected, but `= false` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  const categServedAtRoot = ROUTES_ROOTS.WEBSITE + category === ROUTES_ROOTS.BLOG + category;\n  if (!validCategory && !categServedAtRoot) redirect(ROUTES_ROOTS.WEBSITE + category);\n\n  const subcategory = params[BlogTaxonomy.SUBCATEGORY];\n\n  const validCombination: boolean = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n  if (!validCombination) redirectToBlogCategoryPage(category);\n}\n"
    },
    "src/lib/blog/static/getBlogStaticParams.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1312",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/blog/static/getBlogStaticParams.ts(10,54): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["73", "106"],
          "location": {
            "end": {
              "column": 2,
              "line": 40
            },
            "start": {
              "column": 82,
              "line": 10
            }
          }
        },
        {
          "id": "1313",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/blog/static/getBlogStaticParams.ts(11,49): error TS2322: Type 'string' is not assignable to type 'BlogStaticParams'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["73", "106"],
          "location": {
            "end": {
              "column": 50,
              "line": 11
            },
            "start": {
              "column": 48,
              "line": 11
            }
          }
        },
        {
          "id": "1314",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["106"],
          "coveredBy": ["73", "106"],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 37,
              "line": 14
            }
          }
        },
        {
          "id": "1315",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["106"],
          "coveredBy": ["73", "106"],
          "location": {
            "end": {
              "column": 6,
              "line": 36
            },
            "start": {
              "column": 41,
              "line": 15
            }
          }
        },
        {
          "id": "1316",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["106"],
          "coveredBy": ["73", "106"],
          "location": {
            "end": {
              "column": 8,
              "line": 35
            },
            "start": {
              "column": 44,
              "line": 19
            }
          }
        },
        {
          "id": "1317",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [] to strictly equal [ { …(4) }, { …(4) }, { …(4) }, …(6) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["106"],
          "coveredBy": ["73", "106"],
          "location": {
            "end": {
              "column": 10,
              "line": 34
            },
            "start": {
              "column": 42,
              "line": 24
            }
          }
        },
        {
          "id": "1318",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/lib/blog/static/getBlogStaticParams.ts(27,17): error TS2739: Type '{}' is missing the following properties from type 'BlogStaticParams': subcateg, locale, categ, slug\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["73", "106"],
          "location": {
            "end": {
              "column": 12,
              "line": 32
            },
            "start": {
              "column": 44,
              "line": 27
            }
          }
        }
      ],
      "source": "import type { BlogSubcategoryFromUnknownCategory, BlogStaticParams, UnknownBlogSlug, BlogCategory, TBlogPost } from '@/types/Blog';\n\nimport { getBlogSubcategoriesByCategory } from '@/cache/blog';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport { getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict, getAllBlogCategories } from '../api';\n\nexport default async function getBlogStaticParams(): Promise<BlogStaticParams[]> {\n  const blogStaticParams: BlogStaticParams[] = [];\n  const blogCategories = getAllBlogCategories();\n\n  for (const language of LANGUAGES) {\n    for (const categ of blogCategories) {\n      const category = categ as BlogCategory;\n      const curSubcategs: BlogSubcategoryFromUnknownCategory[] = await getBlogSubcategoriesByCategory(category, language);\n\n      for (const subcateg of curSubcategs) {\n        const subcategory = subcateg as BlogSubcategoryFromUnknownCategory;\n\n        const relatedPosts: TBlogPost[] = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(category, subcategory, language);\n\n        for (const post of relatedPosts) {\n          const slug = post.slug as UnknownBlogSlug;\n\n          const entity: BlogStaticParams = {\n            [BlogTaxonomy.SUBCATEGORY]: subcategory,\n            [I18nTaxonomy.LANGUAGE]: language,\n            [BlogTaxonomy.CATEGORY]: category,\n            [BlogTaxonomy.SLUG]: slug\n          };\n          blogStaticParams.push(entity);\n        }\n      }\n    }\n  }\n\n  return blogStaticParams;\n}\n"
    },
    "src/lib/blog/staticGeneration.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1319",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 74,
              "line": 25
            }
          }
        },
        {
          "id": "1320",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 83,
              "line": 30
            }
          }
        },
        {
          "id": "1321",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 34
            },
            "start": {
              "column": 40,
              "line": 34
            }
          }
        },
        {
          "id": "1322",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 111,
              "line": 34
            },
            "start": {
              "column": 73,
              "line": 34
            }
          }
        },
        {
          "id": "1323",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 80,
              "line": 35
            },
            "start": {
              "column": 31,
              "line": 35
            }
          }
        },
        {
          "id": "1324",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 37
            },
            "start": {
              "column": 10,
              "line": 37
            }
          }
        },
        {
          "id": "1325",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 51
            },
            "start": {
              "column": 89,
              "line": 40
            }
          }
        },
        {
          "id": "1326",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 141,
              "line": 41
            },
            "start": {
              "column": 45,
              "line": 41
            }
          }
        },
        {
          "id": "1327",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "1328",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "1329",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 43
            },
            "start": {
              "column": 7,
              "line": 43
            }
          }
        },
        {
          "id": "1330",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 48
            },
            "start": {
              "column": 40,
              "line": 48
            }
          }
        },
        {
          "id": "1331",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 137,
              "line": 48
            },
            "start": {
              "column": 73,
              "line": 48
            }
          }
        },
        {
          "id": "1332",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 106,
              "line": 49
            },
            "start": {
              "column": 31,
              "line": 49
            }
          }
        },
        {
          "id": "1333",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 50
            },
            "start": {
              "column": 10,
              "line": 50
            }
          }
        },
        {
          "id": "1334",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 71
            },
            "start": {
              "column": 75,
              "line": 53
            }
          }
        },
        {
          "id": "1335",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 59
            },
            "start": {
              "column": 51,
              "line": 54
            }
          }
        },
        {
          "id": "1336",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 66
            },
            "start": {
              "column": 7,
              "line": 66
            }
          }
        },
        {
          "id": "1337",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 66
            },
            "start": {
              "column": 7,
              "line": 66
            }
          }
        },
        {
          "id": "1338",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 66
            },
            "start": {
              "column": 7,
              "line": 66
            }
          }
        },
        {
          "id": "1339",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 68,
              "line": 68
            },
            "start": {
              "column": 40,
              "line": 68
            }
          }
        },
        {
          "id": "1340",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 70
            },
            "start": {
              "column": 10,
              "line": 70
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type {\n  BlogCategoriesAndSubcategoriesAssoc,\n  BlogSubcategoryPageProps,\n  BlogCategoryPageProps,\n  BlogPostPageProps,\n  BlogStaticParams,\n  TBlogPost\n} from '@/types/Blog';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\n\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { i18ns } from '##/config/i18n';\n\nimport { isValidBlogCategoryAndSubcategoryPair, getBlogPostUnstrict } from './api';\nimport blogSubcategoryGuard from './guards/blogSubcategoryGuard';\nimport doGetBlogStaticParams from './static/getBlogStaticParams';\nimport blogCategoryGuard from './guards/blogCategoryGuard';\nimport blogPostGuard from './guards/blogPostGuard';\n\nexport async function getBlogStaticParams(): Promise<BlogStaticParams[]> {\n  const blogStaticParams = await doGetBlogStaticParams();\n  return blogStaticParams;\n}\n\nexport async function getBlogCategoryMetadatas({ params }: BlogCategoryPageProps) {\n  const globalT = await getServerSideI18n();\n  const category = params[BlogTaxonomy.CATEGORY];\n  const { blogCategories, vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), globalT(`${blogCategories}.${category}._title`));\n  const description = globalT(`${blogCategories}.${category}._meta-description`);\n\n  return { description, title };\n}\n\nexport async function getBlogSubcategoryMetadatas({ params }: BlogSubcategoryPageProps) {\n  const [category, subcategory, language] = [params[BlogTaxonomy.CATEGORY], params[BlogTaxonomy.SUBCATEGORY], params[I18nTaxonomy.LANGUAGE]];\n\n  if (!isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)) return {};\n\n  const globalT = await getServerSideI18n();\n  const { blogCategories, vocab } = i18ns;\n  const narrowedCategoryAndSubcategoryAssoc = `${category}.${subcategory}` as BlogCategoriesAndSubcategoriesAssoc;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), globalT(`${blogCategories}.${narrowedCategoryAndSubcategoryAssoc}.title`));\n  const description = globalT(`${blogCategories}.${narrowedCategoryAndSubcategoryAssoc}.meta-description`);\n  return { description, title };\n}\n\nexport async function getBlogPostMetadatas({ params }: BlogPostPageProps) {\n  const [category, subcategory, slug, language] = [\n    params[BlogTaxonomy.CATEGORY],\n    params[BlogTaxonomy.SUBCATEGORY],\n    params[BlogTaxonomy.SLUG],\n    params[I18nTaxonomy.LANGUAGE]\n  ];\n\n  const post: MaybeNull<TBlogPost> = await getBlogPostUnstrict(category, subcategory, slug, language);\n\n  const globalT = await getServerSideI18n();\n  const currentPost = post as TBlogPost;\n\n  if (!isValidBlogCategoryAndSubcategoryPair(category, subcategory, language)) return {};\n\n  const title = buildPageTitle(globalT(`${i18ns.vocab}.brand-short`), currentPost.title);\n  const { metadescription: description } = post as TBlogPost;\n  return { description, title };\n}\n\nexport { blogSubcategoryGuard, blogCategoryGuard, blogPostGuard };\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/html.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1341",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 105,
              "line": 5
            },
            "start": {
              "column": 33,
              "line": 5
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport ELEMENTS_ID from '@/config/elementsId';\n\nexport const getBodyContainer = () => document.getElementById(ELEMENTS_ID.BODY_CONTAINER) as HTMLElement;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/i18n.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1342",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/i18n.ts(9,89): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 2,
              "line": 16
            },
            "start": {
              "column": 96,
              "line": 9
            }
          }
        },
        {
          "id": "1343",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/i18n.ts(12,39): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/i18n.ts(12,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/i18n.ts(15,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/i18n.ts(15,18): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 135,
              "line": 10
            },
            "start": {
              "column": 19,
              "line": 10
            }
          }
        },
        {
          "id": "1344",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 76,
              "line": 10
            },
            "start": {
              "column": 61,
              "line": 10
            }
          }
        },
        {
          "id": "1345",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 76,
              "line": 10
            },
            "start": {
              "column": 61,
              "line": 10
            }
          }
        },
        {
          "id": "1346",
          "mutatorName": "EqualityOperator",
          "replacement": "endIndex !== -1",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 76,
              "line": 10
            },
            "start": {
              "column": 61,
              "line": 10
            }
          }
        },
        {
          "id": "1347",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 76,
              "line": 10
            },
            "start": {
              "column": 74,
              "line": 10
            }
          }
        },
        {
          "id": "1348",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["256", "257"],
          "location": {
            "end": {
              "column": 100,
              "line": 10
            },
            "start": {
              "column": 79,
              "line": 10
            }
          }
        },
        {
          "id": "1349",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 134,
              "line": 10
            },
            "start": {
              "column": 103,
              "line": 10
            }
          }
        },
        {
          "id": "1350",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/i18n.ts(12,38): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 37,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 12
            }
          }
        },
        {
          "id": "1351",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/i18n.ts(12,39): error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.\n  Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 37,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 12
            }
          }
        },
        {
          "id": "1352",
          "mutatorName": "EqualityOperator",
          "replacement": "providedEndIndex === undefined",
          "statusReason": "src/lib/i18n.ts(12,64): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'number'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["74", "75", "76", "256", "257", "264", "265"],
          "location": {
            "end": {
              "column": 37,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 12
            }
          }
        },
        {
          "id": "1353",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": ["256"],
          "location": {
            "end": {
              "column": 54,
              "line": 14
            },
            "start": {
              "column": 51,
              "line": 14
            }
          }
        },
        {
          "id": "1354",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/i18n.ts(18,64): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["74", "75", "76", "257", "264", "265"],
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 86,
              "line": 18
            }
          }
        },
        {
          "id": "1355",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '/fr/foo' to be '/foo' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["74", "75", "76", "257", "264", "265"],
          "location": {
            "end": {
              "column": 62,
              "line": 19
            },
            "start": {
              "column": 59,
              "line": 19
            }
          }
        },
        {
          "id": "1356",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(pathnameI18nFlag)",
          "statusReason": "expected '/' to be '/foo' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["74", "75", "76", "257", "264", "265"],
          "location": {
            "end": {
              "column": 45,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1357",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/fr/foo' to be '/foo' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["74", "75", "76", "257", "264", "265"],
          "location": {
            "end": {
              "column": 45,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1358",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/' to be '/foo' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["74", "75", "76", "257", "264", "265"],
          "location": {
            "end": {
              "column": 45,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1359",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '/' to be '/foo' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["76", "257", "264"],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 31,
              "line": 24
            }
          }
        },
        {
          "id": "1360",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["76", "257", "264"],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 31,
              "line": 24
            }
          }
        },
        {
          "id": "1361",
          "mutatorName": "EqualityOperator",
          "replacement": "secondSlashIndex !== -1",
          "statusReason": "expected '/' to be '/foo' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["76", "257", "264"],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 31,
              "line": 24
            }
          }
        },
        {
          "id": "1362",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected '/fr' to be '/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["76", "257", "264"],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 52,
              "line": 24
            }
          }
        },
        {
          "id": "1363",
          "mutatorName": "MethodExpression",
          "replacement": "pathname",
          "statusReason": "expected '/fr/foo' to be '/foo' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["257"],
          "coveredBy": ["76", "257", "264"],
          "location": {
            "end": {
              "column": 116,
              "line": 24
            },
            "start": {
              "column": 80,
              "line": 24
            }
          }
        },
        {
          "id": "1364",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/i18n.ts(28,62): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["256"],
          "location": {
            "end": {
              "column": 2,
              "line": 32
            },
            "start": {
              "column": 80,
              "line": 28
            }
          }
        },
        {
          "id": "1365",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(languageFlag)",
          "statusReason": "src/lib/i18n.ts(31,3): error TS2322: Type 'string' is not assignable to type '\"\" | \"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["256"],
          "location": {
            "end": {
              "column": 41,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1366",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/i18n.ts(31,3): error TS2322: Type 'string' is not assignable to type '\"\" | \"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["256"],
          "location": {
            "end": {
              "column": 41,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1367",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/i18n.ts(31,3): error TS2322: Type 'string' is not assignable to type '\"\" | \"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["256"],
          "location": {
            "end": {
              "column": 41,
              "line": 30
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "1368",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "src/lib/i18n.ts(30,43): error TS2322: Type '\"Stryker was here!\"' is not assignable to type '\"\" | \"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["256"],
          "location": {
            "end": {
              "column": 52,
              "line": 30
            },
            "start": {
              "column": 50,
              "line": 30
            }
          }
        }
      ],
      "source": "import type { AppPathAsIs, AppPath } from '@rtm/shared-types/Next';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport indexOfNthOccurrence from './portable/str/indexOfNthOccurrence';\nimport isValidLanguageFlag from './portable/i18n/isValidLanguageFlag';\n\nfunction computePathnameI18nFlagUnstrict(pathname: AppPath, providedEndIndex?: number): string {\n  const compute = (pathname: AppPath, endIndex: number) => (endIndex === -1 ? pathname.substring(1) : pathname.substring(1, endIndex));\n\n  if (providedEndIndex !== undefined) return compute(pathname, providedEndIndex);\n\n  const endIndex = indexOfNthOccurrence(pathname, '/', 2);\n  return compute(pathname, endIndex);\n}\n\nexport function getPathnameWithoutI18nFlag(pathname: AppPath): AppPathAsIs | AppPath {\n  const secondSlashIndex = indexOfNthOccurrence(pathname, '/', 2);\n\n  const pathnameI18nFlag = computePathnameI18nFlagUnstrict(pathname, secondSlashIndex);\n  if (!isValidLanguageFlag(pathnameI18nFlag)) return pathname;\n\n  const pathnameWithouti18n = secondSlashIndex === -1 ? ROUTES_ROOTS.WEBSITE : pathname.substring(secondSlashIndex);\n  return pathnameWithouti18n;\n}\n\nexport function getPathnameMaybeI18nFlag(pathname: AppPath): LanguageFlag | '' {\n  const languageFlag = computePathnameI18nFlagUnstrict(pathname);\n  if (!isValidLanguageFlag(languageFlag)) return '';\n  return languageFlag;\n}\n"
    },
    "src/lib/landingPages/api.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1369",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/landingPages/api.ts(11,112): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 135,
              "line": 11
            }
          }
        },
        {
          "id": "1370",
          "mutatorName": "LogicalOperator",
          "replacement": "allLandingPages.find(({\n  language: currentLanguage,\n  slug: currentSlug\n}) => currentSlug === slug && currentLanguage === language) && null",
          "statusReason": "src/lib/landingPages/api.ts(20,64): error TS2339: Property 'category' does not exist on type 'never'.\nsrc/lib/landingPages/api.ts(21,93): error TS2339: Property 'draft' does not exist on type 'never'.\nsrc/lib/landingPages/api.ts(22,3): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<LandingPage>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<LandingPage>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 141,
              "line": 13
            },
            "start": {
              "column": 5,
              "line": 13
            }
          }
        },
        {
          "id": "1371",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["214"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 132,
              "line": 13
            },
            "start": {
              "column": 26,
              "line": 13
            }
          }
        },
        {
          "id": "1372",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["214"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 132,
              "line": 13
            },
            "start": {
              "column": 80,
              "line": 13
            }
          }
        },
        {
          "id": "1373",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["214"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 132,
              "line": 13
            },
            "start": {
              "column": 80,
              "line": 13
            }
          }
        },
        {
          "id": "1374",
          "mutatorName": "LogicalOperator",
          "replacement": "currentSlug === slug || currentLanguage === language",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["214"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 132,
              "line": 13
            },
            "start": {
              "column": 80,
              "line": 13
            }
          }
        },
        {
          "id": "1375",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["214"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 100,
              "line": 13
            },
            "start": {
              "column": 80,
              "line": 13
            }
          }
        },
        {
          "id": "1376",
          "mutatorName": "EqualityOperator",
          "replacement": "currentSlug !== slug",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["214"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 100,
              "line": 13
            },
            "start": {
              "column": 80,
              "line": 13
            }
          }
        },
        {
          "id": "1377",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'fr' to be 'en' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["56", "119", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 132,
              "line": 13
            },
            "start": {
              "column": 104,
              "line": 13
            }
          }
        },
        {
          "id": "1378",
          "mutatorName": "EqualityOperator",
          "replacement": "currentLanguage !== language",
          "statusReason": "expected 'en' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["56", "119", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 132,
              "line": 13
            },
            "start": {
              "column": 104,
              "line": 13
            }
          }
        },
        {
          "id": "1379",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 112,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "1380",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 112,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "1381",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedLandingPagesCtx.TESTING || matchingLandingPage?.category === LandingPagesConfig.TESTING_CATEGORY",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 112,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "1382",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedLandingPagesCtx.TESTING",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215", "270"],
          "location": {
            "end": {
              "column": 39,
              "line": 17
            },
            "start": {
              "column": 7,
              "line": 17
            }
          }
        },
        {
          "id": "1383",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 112,
              "line": 17
            },
            "start": {
              "column": 43,
              "line": 17
            }
          }
        },
        {
          "id": "1384",
          "mutatorName": "EqualityOperator",
          "replacement": "matchingLandingPage?.category !== LandingPagesConfig.TESTING_CATEGORY",
          "statusReason": "expected { draft: false, …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["270"],
          "coveredBy": ["270"],
          "location": {
            "end": {
              "column": 112,
              "line": 17
            },
            "start": {
              "column": 43,
              "line": 17
            }
          }
        },
        {
          "id": "1385",
          "mutatorName": "OptionalChaining",
          "replacement": "matchingLandingPage.category",
          "statusReason": "src/lib/landingPages/api.ts(17,43): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["270"],
          "location": {
            "end": {
              "column": 72,
              "line": 17
            },
            "start": {
              "column": 43,
              "line": 17
            }
          }
        },
        {
          "id": "1386",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["119"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215"],
          "location": {
            "end": {
              "column": 98,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1387",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { draft: true, …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": ["215"],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215"],
          "location": {
            "end": {
              "column": 98,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1388",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingLandingPage && !ComputedLandingPagesCtx.ALLOWED_DRAFTS || matchingLandingPage.draft",
          "statusReason": "src/lib/landingPages/api.ts(18,73): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215"],
          "location": {
            "end": {
              "column": 98,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1389",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/landingPages/api.ts(18,15): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215"],
          "location": {
            "end": {
              "column": 69,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1390",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingLandingPage || !ComputedLandingPagesCtx.ALLOWED_DRAFTS",
          "statusReason": "src/lib/landingPages/api.ts(18,73): error TS18047: 'matchingLandingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56", "119", "120", "121", "208", "209", "214", "215"],
          "location": {
            "end": {
              "column": 69,
              "line": 18
            },
            "start": {
              "column": 7,
              "line": 18
            }
          }
        },
        {
          "id": "1391",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedLandingPagesCtx.ALLOWED_DRAFTS",
          "statusReason": "expected { draft: true, …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["215"],
          "coveredBy": ["56", "119", "208", "209", "214", "215"],
          "location": {
            "end": {
              "column": 69,
              "line": 18
            },
            "start": {
              "column": 30,
              "line": 18
            }
          }
        },
        {
          "id": "1392",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/landingPages/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts(28,16): error TS2352: Conversion of type 'undefined' to type 'LandingPage' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/lib/landingPages/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts(28,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/landingPages/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts(40,16): error TS2352: Conversion of type 'undefined' to type 'LandingPage' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/lib/landingPages/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts(40,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/landingPages/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts(28,16): error TS2352: Conversion of type 'undefined' to type 'LandingPage' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/lib/landingPages/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts(28,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/landingPages/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts(39,16): error TS2352: Conversion of type 'undefined' to type 'LandingPage' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/lib/landingPages/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts(39,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/landingPages/__tests__/postbuild.api.not_testing_ctx.test.ts(21,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts(38,16): error TS2352: Conversion of type 'undefined' to type 'LandingPage' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts(38,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts(50,16): error TS2352: Conversion of type 'undefined' to type 'LandingPage' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts(50,54): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts(62,16): error TS2352: Conversion of type 'undefined' to type 'LandingPage' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nsrc/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts(62,54): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 23
            },
            "start": {
              "column": 54,
              "line": 22
            }
          }
        }
      ],
      "source": "import type { UnknownLandingPageSlug, LandingPageLang, LandingPageSlug } from '@/types/LandingPage';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport { allLandingPages } from 'contentlayer/generated';\nimport LandingPagesConfig from '@/config/landingPages';\n\nimport ComputedLandingPagesCtx from './ctx';\n\nexport function getLandingPageByLanguageAndSlugUnstrict(language: LanguageFlag, slug: UnknownLandingPageSlug): MaybeNull<LandingPage> {\n  const matchingLandingPage =\n    allLandingPages.find(({ language: currentLanguage, slug: currentSlug }) => currentSlug === slug && currentLanguage === language) ?? null;\n\n  // Stryker Workaround 1. Mutant will be killed with `&& false` as expected, but `&& true` mutant is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (!ComputedLandingPagesCtx.TESTING && matchingLandingPage?.category === LandingPagesConfig.TESTING_CATEGORY) return null;\n  if (matchingLandingPage && !ComputedLandingPagesCtx.ALLOWED_DRAFTS && matchingLandingPage.draft) return null;\n  return matchingLandingPage;\n}\n\nexport const getLandingPageByLanguageAndSlugStrict = <L extends LandingPageLang>(lang: L, slug: LandingPageSlug<L>): MaybeNull<LandingPage> =>\n  getLandingPageByLanguageAndSlugUnstrict(lang as any, slug as any);\n"
    },
    "src/lib/landingPages/ctx.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1393",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { draft: true, …(10) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": true,
          "killedBy": ["215"],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "1394",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 72,
          "static": true,
          "killedBy": ["209"],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "1395",
          "mutatorName": "LogicalOperator",
          "replacement": "LandingPagesConfig.ENABLE_DRAFTS_IN_PROD && ComputedNodeCtx.DEV",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 177,
          "static": true,
          "killedBy": ["209"],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        }
      ],
      "source": "import LandingPagesConfig from '@/config/landingPages';\n\nimport ComputedNodeCtx from '../portable/node/env';\n\ntype TComputedLandingPagesCtx = {\n  ALLOWED_DRAFTS: boolean;\n  TESTING: boolean;\n};\n\nconst TESTING = ComputedNodeCtx.TEST;\nconst ALLOWED_DRAFTS = LandingPagesConfig.ENABLE_DRAFTS_IN_PROD || ComputedNodeCtx.DEV;\n\nconst ComputedLandingPagesCtx: TComputedLandingPagesCtx = {\n  ALLOWED_DRAFTS,\n  TESTING\n} as const;\n\nexport default ComputedLandingPagesCtx;\n"
    },
    "src/lib/landingPages/static/getLandingPagesStaticParams.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1396",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal [ { …(2) }, { locale: 'en', …(1) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["56"],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 46,
              "line": 8
            }
          }
        },
        {
          "id": "1397",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(15,23): error TS2345: Argument of type '{ locale: string; \"lp-slug\": string; }' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 26,
              "line": 9
            },
            "start": {
              "column": 24,
              "line": 9
            }
          }
        },
        {
          "id": "1398",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(9,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(12,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 4,
              "line": 16
            },
            "start": {
              "column": 53,
              "line": 11
            }
          }
        },
        {
          "id": "1399",
          "mutatorName": "BooleanLiteral",
          "replacement": "isValidLanguageFlag(language)",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(13,63): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 39,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "1400",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(9,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(13,63): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(15,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(15,98): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 39,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "1401",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(13,63): error TS2345: Argument of type 'string' is not assignable to parameter of type '\"fr\" | \"en\"'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 39,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "1402",
          "mutatorName": "BooleanLiteral",
          "replacement": "matchedLp",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(15,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(15,98): error TS18047: 'matchedLp' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 19,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "1403",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(9,9): error TS7034: Variable 'staticParams' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(15,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(15,98): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(17,10): error TS7005: Variable 'staticParams' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 19,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "1404",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/lib/landingPages/static/getLandingPagesStaticParams.ts(15,50): error TS18047: 'matchedLp' is possibly 'null'.\nsrc/lib/landingPages/static/getLandingPagesStaticParams.ts(15,98): error TS18047: 'matchedLp' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 19,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "1405",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [ {}, {} ] to strictly equal [ { …(2) }, { locale: 'en', …(1) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["56"],
          "coveredBy": ["56"],
          "location": {
            "end": {
              "column": 114,
              "line": 15
            },
            "start": {
              "column": 23,
              "line": 15
            }
          }
        }
      ],
      "source": "import LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport { isValidLanguageFlag } from '##/lib/builders/unifiedImport';\nimport { allLandingPages } from 'contentlayer/generated';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\n\nimport { getLandingPageByLanguageAndSlugUnstrict } from '../api';\n\nasync function getLandingPagesStaticParams() {\n  const staticParams = [];\n\n  for (const { language, slug } of allLandingPages) {\n    if (!isValidLanguageFlag(language)) continue;\n    const matchedLp = getLandingPageByLanguageAndSlugUnstrict(language, slug);\n    if (!matchedLp) continue;\n    staticParams.push({ [I18nTaxonomy.LANGUAGE]: matchedLp.language, [LandingPageTaxonomy.SLUG]: matchedLp.slug });\n  }\n  return staticParams;\n}\n\nexport default getLandingPagesStaticParams;\n"
    },
    "src/lib/landingPages/staticGeneration.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1406",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 53,
              "line": 17
            }
          }
        },
        {
          "id": "1407",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 77,
              "line": 22
            }
          }
        },
        {
          "id": "1408",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 89,
              "line": 23
            },
            "start": {
              "column": 24,
              "line": 23
            }
          }
        },
        {
          "id": "1409",
          "mutatorName": "BooleanLiteral",
          "replacement": "lp",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1410",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1411",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "1412",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 31
            },
            "start": {
              "column": 40,
              "line": 31
            }
          }
        },
        {
          "id": "1413",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 32,
              "line": 33
            },
            "start": {
              "column": 10,
              "line": 33
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LandingPageProps } from '@/types/LandingPage';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport { buildPageTitle } from '@rtm/shared-lib/str';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { getServerSideI18n } from '@/i18n/server';\nimport { notFound } from 'next/navigation';\nimport { i18ns } from '##/config/i18n';\n\nimport doGetLandingPagesStaticParams from './static/getLandingPagesStaticParams';\nimport { getLandingPageByLanguageAndSlugUnstrict } from './api';\n\nexport async function getLandingPagesStaticParams() {\n  const landingPagesStaticParams = await doGetLandingPagesStaticParams();\n  return landingPagesStaticParams;\n}\n\nexport async function getLandingPageMetadatas({ params }: LandingPageProps) {\n  const [lang, slug] = [params[I18nTaxonomy.LANGUAGE], params[LandingPageTaxonomy.SLUG]];\n  const lp: MaybeNull<LandingPage> = getLandingPageByLanguageAndSlugUnstrict(lang, slug);\n  if (!lp) notFound();\n\n  const globalT = await getServerSideI18n();\n  const { metadescription: description, title: lpTitle } = lp;\n\n  const { vocab } = i18ns;\n  const title = buildPageTitle(globalT(`${vocab}.brand-short`), lpTitle);\n\n  return { description, title };\n}\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/misc/getComputedNavData.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1414",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/misc/getComputedNavData.ts(11,4): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["197", "198", "199"],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 20,
              "line": 11
            }
          }
        },
        {
          "id": "1415",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/misc/getComputedNavData.ts(12,9): error TS2322: Type 'void[]' is not assignable to type 'NavDataEntities'.\n  Type 'void' is not assignable to type 'NavDataEntity'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["197", "198", "199"],
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 75,
              "line": 12
            }
          }
        },
        {
          "id": "1416",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/lib/misc/getComputedNavData.ts(14,11): error TS2739: Type '{}' is missing the following properties from type 'NavDataEntity': i18nTitle, path\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["197", "198", "199"],
          "location": {
            "end": {
              "column": 6,
              "line": 18
            },
            "start": {
              "column": 42,
              "line": 14
            }
          }
        },
        {
          "id": "1417",
          "mutatorName": "OptionalChaining",
          "replacement": "dropdownConfig[k2]",
          "statusReason": "src/lib/misc/getComputedNavData.ts(17,11): error TS18048: 'dropdownConfig' is possibly 'undefined'.\nsrc/lib/misc/getComputedNavData.ts(17,57): error TS18048: 'dropdownConfig' is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["197", "198", "199"],
          "location": {
            "end": {
              "column": 31,
              "line": 17
            },
            "start": {
              "column": 11,
              "line": 17
            }
          }
        },
        {
          "id": "1418",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected [ { …(2) }, { …(2) }, { …(2) } ] to strictly equal [ { …(3) }, { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["199"],
          "coveredBy": ["199"],
          "location": {
            "end": {
              "column": 100,
              "line": 17
            },
            "start": {
              "column": 34,
              "line": 17
            }
          }
        },
        {
          "id": "1419",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected [ { …(3) }, { …(2) }, { …(2) } ] to strictly equal [ { …(3) }, { …(2) }, { …(2) } ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["199"],
          "coveredBy": ["199"],
          "location": {
            "end": {
              "column": 98,
              "line": 17
            },
            "start": {
              "column": 54,
              "line": 17
            }
          }
        }
      ],
      "source": "import type { DropdownsConfig, NavDataEntities, NavDataEntity } from '@/types/NavData';\nimport type { I18nVocabTarget } from '@rtm/shared-types/I18n';\nimport type RoutesKeysUnion from '@/types/RoutesKeysUnion';\nimport type { AppPath } from '@rtm/shared-types/Next';\n\n// {ToDo} Recursive embeddedEntities?\nfunction getComputedNavData<ScopedRoutesK extends RoutesKeysUnion>(\n  routes: Record<ScopedRoutesK, AppPath>,\n  routesTitles: Record<ScopedRoutesK, I18nVocabTarget>,\n  dropdownConfig?: DropdownsConfig<ScopedRoutesK>\n): NavDataEntities {\n  const computedNavData: NavDataEntities = Object.keys(routes).map((k) => {\n    const k2 = k as ScopedRoutesK;\n    const currentEntity: NavDataEntity = {\n      i18nTitle: routesTitles[k2],\n      path: routes[k2],\n      ...(dropdownConfig?.[k2] ? { embeddedEntities: [...(dropdownConfig[k2] as NavDataEntities)] } : {})\n    };\n    return currentEntity;\n  });\n  return computedNavData;\n}\n\nexport default getComputedNavData;\n"
    },
    "src/lib/next.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1420",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 11
            },
            "start": {
              "column": 20,
              "line": 11
            }
          }
        },
        {
          "id": "1421",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 120,
              "line": 13
            },
            "start": {
              "column": 44,
              "line": 13
            }
          }
        },
        {
          "id": "1422",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/lib/next.ts(17,68): error TS2322: Type 'string' is not assignable to type 'MiddlewareFactory'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77"],
          "location": {
            "end": {
              "column": 69,
              "line": 17
            },
            "start": {
              "column": 67,
              "line": 17
            }
          }
        },
        {
          "id": "1423",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/next.ts(17,83): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78", "79", "80", "81", "82"],
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 98,
              "line": 17
            }
          }
        },
        {
          "id": "1424",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Hit limit reached (2701/2700)",
          "status": "Timeout",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78", "79", "80", "81", "82"],
          "location": {
            "end": {
              "column": 24,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "1425",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected \"spy\" to be called at least once",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["77", "78", "79", "80", "81", "82"],
          "location": {
            "end": {
              "column": 24,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 19
            }
          }
        },
        {
          "id": "1426",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/next.ts(19,7): error TS2774: This condition will always return true since this function is always defined. Did you mean to call it instead?\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["77", "78", "79", "80", "81", "82"],
          "location": {
            "end": {
              "column": 4,
              "line": 22
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "1427",
          "mutatorName": "ArithmeticOperator",
          "replacement": "index - 1",
          "statusReason": "expected \"spy\" to be called at least once",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["78"],
          "coveredBy": ["77", "78", "79", "80", "81", "82"],
          "location": {
            "end": {
              "column": 65,
              "line": 20
            },
            "start": {
              "column": 56,
              "line": 20
            }
          }
        },
        {
          "id": "1428",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected undefined to be an instance of NextResponse",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": ["81"],
          "coveredBy": ["77", "78", "79", "80", "81", "82"],
          "location": {
            "end": {
              "column": 35,
              "line": 23
            },
            "start": {
              "column": 10,
              "line": 23
            }
          }
        },
        {
          "id": "1429",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/components/ui/breadcrumbs/Breadcrumbs.tsx(78,26): error TS2345: Argument of type 'void' is not assignable to parameter of type 'string[]'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["74", "75", "76"],
          "location": {
            "end": {
              "column": 2,
              "line": 31
            },
            "start": {
              "column": 49,
              "line": 26
            }
          }
        },
        {
          "id": "1430",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected [ 'absolutely_not_lang', 'foo', 'bar' ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["75"],
          "coveredBy": ["74", "75", "76"],
          "location": {
            "end": {
              "column": 48,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "1431",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["74"],
          "coveredBy": ["74", "75", "76"],
          "location": {
            "end": {
              "column": 48,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "1432",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18nFlag.charAt(0) !== '/'",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["74"],
          "coveredBy": ["74", "75", "76"],
          "location": {
            "end": {
              "column": 48,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "1433",
          "mutatorName": "MethodExpression",
          "replacement": "pathnameWithoutI18nFlag",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["74"],
          "coveredBy": ["74", "75", "76"],
          "location": {
            "end": {
              "column": 40,
              "line": 28
            },
            "start": {
              "column": 7,
              "line": 28
            }
          }
        },
        {
          "id": "1434",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["74"],
          "coveredBy": ["74", "75", "76"],
          "location": {
            "end": {
              "column": 48,
              "line": 28
            },
            "start": {
              "column": 45,
              "line": 28
            }
          }
        },
        {
          "id": "1435",
          "mutatorName": "MethodExpression",
          "replacement": "pathnameWithoutI18nFlag",
          "statusReason": "expected [ '', '_absolutely_not_lang', …(2) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["74"],
          "coveredBy": ["74", "76"],
          "location": {
            "end": {
              "column": 112,
              "line": 28
            },
            "start": {
              "column": 76,
              "line": 28
            }
          }
        },
        {
          "id": "1436",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected [ '_', 'a', 'b', 's', 'o', 'l', …(22) ] to strictly equal [ Array(3) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["74"],
          "coveredBy": ["74", "75", "76"],
          "location": {
            "end": {
              "column": 43,
              "line": 30
            },
            "start": {
              "column": 40,
              "line": 30
            }
          }
        }
      ],
      "source": "import type { MiddlewareFactory, AppPath } from '@rtm/shared-types/Next';\nimport type { NextMiddleware, NextRequest } from 'next/server';\nimport type { NextFont } from 'next/dist/compiled/@next/font';\n\nimport { NextResponse } from 'next/server';\n\nimport { getPathnameWithoutI18nFlag, getPathnameMaybeI18nFlag } from './i18n';\n\n/* v8 ignore start */\n// Stryker disable all\nexport const fcn = (f: NextFont): string => f.className;\n\nexport const getMaybeI18nFlagFromRequest = (request: NextRequest) => getPathnameMaybeI18nFlag(request.nextUrl.pathname);\n// Stryker restore all\n/* v8 ignore stop */\n\nexport function stackMiddlewares(functions: MiddlewareFactory[] = [], index = 0): NextMiddleware {\n  const currentMiddleware = functions[index];\n  if (currentMiddleware) {\n    const nextMiddleware = stackMiddlewares(functions, index + 1);\n    return currentMiddleware(nextMiddleware);\n  }\n  return () => NextResponse.next();\n}\n\nexport function getPathParts(pathname: AppPath) {\n  let pathnameWithoutI18nFlag = getPathnameWithoutI18nFlag(pathname);\n  if (pathnameWithoutI18nFlag.charAt(0) === '/') pathnameWithoutI18nFlag = pathnameWithoutI18nFlag.substring(1);\n\n  return pathnameWithoutI18nFlag.split('/');\n}\n"
    },
    "src/lib/pages/api.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1437",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/pages/api.ts(11,98): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 18
            },
            "start": {
              "column": 114,
              "line": 11
            }
          }
        },
        {
          "id": "1438",
          "mutatorName": "LogicalOperator",
          "replacement": "allPages.find(({\n  language: currentLanguage,\n  path: currentPath\n}) => currentPath === path && currentLanguage === language) && null",
          "statusReason": "src/lib/pages/api.ts(18,50): error TS2339: Property 'root' does not exist on type 'never'.\nsrc/lib/pages/api.ts(19,72): error TS2339: Property 'draft' does not exist on type 'never'.\nsrc/lib/pages/api.ts(20,3): error TS2322: Type 'null | undefined' is not assignable to type 'MaybeNull<Page>'.\n  Type 'undefined' is not assignable to type 'MaybeNull<Page>'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 134,
              "line": 13
            },
            "start": {
              "column": 5,
              "line": 13
            }
          }
        },
        {
          "id": "1439",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 13
            },
            "start": {
              "column": 19,
              "line": 13
            }
          }
        },
        {
          "id": "1440",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 13
            },
            "start": {
              "column": 73,
              "line": 13
            }
          }
        },
        {
          "id": "1441",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 13
            },
            "start": {
              "column": 73,
              "line": 13
            }
          }
        },
        {
          "id": "1442",
          "mutatorName": "LogicalOperator",
          "replacement": "currentPath === path || currentLanguage === language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 13
            },
            "start": {
              "column": 73,
              "line": 13
            }
          }
        },
        {
          "id": "1443",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 13
            },
            "start": {
              "column": 73,
              "line": 13
            }
          }
        },
        {
          "id": "1444",
          "mutatorName": "EqualityOperator",
          "replacement": "currentPath !== path",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 93,
              "line": 13
            },
            "start": {
              "column": 73,
              "line": 13
            }
          }
        },
        {
          "id": "1445",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 13
            },
            "start": {
              "column": 97,
              "line": 13
            }
          }
        },
        {
          "id": "1446",
          "mutatorName": "EqualityOperator",
          "replacement": "currentLanguage !== language",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 125,
              "line": 13
            },
            "start": {
              "column": 97,
              "line": 13
            }
          }
        },
        {
          "id": "1447",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/pages/api.ts(16,59): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1448",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1449",
          "mutatorName": "LogicalOperator",
          "replacement": "!ComputedPagesCtx.TESTING || matchingPage?.root === PagesConfig.TESTING_ROOT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1450",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedPagesCtx.TESTING",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 15
            },
            "start": {
              "column": 7,
              "line": 15
            }
          }
        },
        {
          "id": "1451",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 15
            },
            "start": {
              "column": 36,
              "line": 15
            }
          }
        },
        {
          "id": "1452",
          "mutatorName": "EqualityOperator",
          "replacement": "matchingPage?.root !== PagesConfig.TESTING_ROOT",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 15
            },
            "start": {
              "column": 36,
              "line": 15
            }
          }
        },
        {
          "id": "1453",
          "mutatorName": "OptionalChaining",
          "replacement": "matchingPage.root",
          "statusReason": "src/lib/pages/api.ts(15,36): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 15
            },
            "start": {
              "column": 36,
              "line": 15
            }
          }
        },
        {
          "id": "1454",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1455",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1456",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingPage && !ComputedPagesCtx.ALLOWED_DRAFTS || matchingPage.draft",
          "statusReason": "src/lib/pages/api.ts(16,59): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1457",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/lib/pages/api.ts(16,15): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1458",
          "mutatorName": "LogicalOperator",
          "replacement": "matchingPage || !ComputedPagesCtx.ALLOWED_DRAFTS",
          "statusReason": "src/lib/pages/api.ts(16,59): error TS18047: 'matchingPage' is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 16
            },
            "start": {
              "column": 7,
              "line": 16
            }
          }
        },
        {
          "id": "1459",
          "mutatorName": "BooleanLiteral",
          "replacement": "ComputedPagesCtx.ALLOWED_DRAFTS",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 16
            },
            "start": {
              "column": 23,
              "line": 16
            }
          }
        },
        {
          "id": "1460",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 22
            },
            "start": {
              "column": 47,
              "line": 21
            }
          }
        }
      ],
      "source": "import type { UnknownPagePath, PageLang, PagePath } from '@/types/Page';\nimport type { MaybeNull } from '@rtm/shared-types/CustomUtilityTypes';\nimport type { LanguageFlag } from '@rtm/shared-types/I18n';\nimport type { Page } from 'contentlayer/generated';\n\nimport { allPages } from 'contentlayer/generated';\nimport PagesConfig from '@/config/pages';\n\nimport ComputedPagesCtx from './ctx';\n\nexport function getPageByLanguageAndPathUnstrict(language: LanguageFlag, path: UnknownPagePath): MaybeNull<Page> {\n  const matchingPage =\n    allPages.find(({ language: currentLanguage, path: currentPath }) => currentPath === path && currentLanguage === language) ?? null;\n\n  if (!ComputedPagesCtx.TESTING && matchingPage?.root === PagesConfig.TESTING_ROOT) return null;\n  if (matchingPage && !ComputedPagesCtx.ALLOWED_DRAFTS && matchingPage.draft) return null;\n  return matchingPage;\n}\n\n// {ToDo} Write tests\nexport const getPageByLanguageAndPathStrict = <L extends PageLang>(lang: L, path: PagePath<L>): MaybeNull<Page> =>\n  getPageByLanguageAndPathUnstrict(lang as any, path as any);\n"
    },
    "src/lib/pages/ctx.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1461",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "1462",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        },
        {
          "id": "1463",
          "mutatorName": "LogicalOperator",
          "replacement": "PagesConfig.ENABLE_DRAFTS_IN_PROD && ComputedNodeCtx.DEV",
          "status": "NoCoverage",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 11
            },
            "start": {
              "column": 24,
              "line": 11
            }
          }
        }
      ],
      "source": "import PagesConfig from '@/config/pages';\n\nimport ComputedNodeCtx from '../portable/node/env';\n\ntype TComputedPagesCtx = {\n  ALLOWED_DRAFTS: boolean;\n  TESTING: boolean;\n};\n\nconst TESTING = ComputedNodeCtx.TEST;\nconst ALLOWED_DRAFTS = PagesConfig.ENABLE_DRAFTS_IN_PROD || ComputedNodeCtx.DEV;\n\nconst ComputedPagesCtx: TComputedPagesCtx = {\n  ALLOWED_DRAFTS,\n  TESTING\n} as const;\n\nexport default ComputedPagesCtx;\n"
    },
    "src/lib/portable/i18n/isValidLanguageFlag.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1464",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/i18n.ts(22,28): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/i18n.ts(30,28): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/i18n.ts(31,3): error TS2322: Type 'string' is not assignable to type '\"\" | \"fr\" | \"en\"'.\nsrc/lib/portable/i18n/__tests__/prebuild.isValidLanguageFlag.test.ts(9,85): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/i18n/__tests__/prebuild.isValidLanguageFlag.test.ts(16,32): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 104,
              "line": 5
            },
            "start": {
              "column": 29,
              "line": 5
            }
          }
        }
      ],
      "source": "import type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport { LANGUAGES } from '../../../../interop/config/i18n';\n\nconst isValidLanguageFlag = (key: string): key is LanguageFlag => (LANGUAGES as string[]).includes(key);\nexport default isValidLanguageFlag;\n"
    },
    "src/lib/portable/node/env.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1465",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/lib/portable/node/env.ts(9,8): error TS2493: Tuple type '[]' of length '0' has no element at index '0'.\nsrc/lib/portable/node/env.ts(9,30): error TS2493: Tuple type '[]' of length '0' has no element at index '1'.\nsrc/lib/portable/node/env.ts(9,51): error TS2493: Tuple type '[]' of length '0' has no element at index '2'.\nsrc/lib/portable/node/env.ts(14,57): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/lib/portable/node/env.ts(15,54): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/lib/portable/node/env.ts(16,55): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 98,
              "line": 9
            },
            "start": {
              "column": 75,
              "line": 9
            }
          }
        },
        {
          "id": "1466",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": true,
          "killedBy": ["208"],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 82,
              "line": 9
            },
            "start": {
              "column": 76,
              "line": 9
            }
          }
        },
        {
          "id": "1467",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { draft: true, …(13) } to be null // Object.is equality",
          "status": "Killed",
          "testsCompleted": 39,
          "static": true,
          "killedBy": ["191"],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 89,
              "line": 9
            },
            "start": {
              "column": 84,
              "line": 9
            }
          }
        },
        {
          "id": "1468",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 155,
          "static": true,
          "killedBy": ["134"],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 97,
              "line": 9
            },
            "start": {
              "column": 91,
              "line": 9
            }
          }
        },
        {
          "id": "1469",
          "mutatorName": "MethodExpression",
          "replacement": "NODE_ENV.endsWith(NODE_PROD_ENV_NEEDLE)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 78,
              "line": 14
            },
            "start": {
              "column": 37,
              "line": 14
            }
          }
        },
        {
          "id": "1470",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 14
            },
            "start": {
              "column": 81,
              "line": 14
            }
          }
        },
        {
          "id": "1471",
          "mutatorName": "MethodExpression",
          "replacement": "NODE_ENV.endsWith(NODE_DEV_ENV_NEEDLE)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 15
            },
            "start": {
              "column": 34,
              "line": 15
            }
          }
        },
        {
          "id": "1472",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 15
            },
            "start": {
              "column": 77,
              "line": 15
            }
          }
        },
        {
          "id": "1473",
          "mutatorName": "MethodExpression",
          "replacement": "NODE_ENV.endsWith(NODE_TEST_ENV_NEEDLE)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 76,
              "line": 16
            },
            "start": {
              "column": 35,
              "line": 16
            }
          }
        },
        {
          "id": "1474",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 84,
              "line": 16
            },
            "start": {
              "column": 79,
              "line": 16
            }
          }
        },
        {
          "id": "1475",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 22
            },
            "start": {
              "column": 5,
              "line": 22
            }
          }
        },
        {
          "id": "1476",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 27,
              "line": 22
            },
            "start": {
              "column": 5,
              "line": 22
            }
          }
        },
        {
          "id": "1477",
          "mutatorName": "EqualityOperator",
          "replacement": "NODE_ENV !== undefined",
          "statusReason": "Cannot read properties of null (reading 'category')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["208"],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 27,
              "line": 22
            },
            "start": {
              "column": 5,
              "line": 22
            }
          }
        },
        {
          "id": "1478",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 29,
              "line": 22
            }
          }
        },
        {
          "id": "1479",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/node/env.ts(23,52): error TS2345: Argument of type '\"\"' is not assignable to parameter of type 'keyof TExecutionContextWarningsVocab'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["137"],
          "location": {
            "end": {
              "column": 76,
              "line": 23
            },
            "start": {
              "column": 52,
              "line": 23
            }
          }
        },
        {
          "id": "1480",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 26
            },
            "start": {
              "column": 18,
              "line": 26
            }
          }
        },
        {
          "id": "1481",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 31
            },
            "start": {
              "column": 5,
              "line": 31
            }
          }
        },
        {
          "id": "1482",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 17,
              "line": 31
            },
            "start": {
              "column": 5,
              "line": 31
            }
          }
        },
        {
          "id": "1483",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 36
            },
            "start": {
              "column": 19,
              "line": 31
            }
          }
        },
        {
          "id": "1484",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["135"],
          "coveredBy": ["135", "137"],
          "location": {
            "end": {
              "column": 17,
              "line": 32
            },
            "start": {
              "column": 12,
              "line": 32
            }
          }
        },
        {
          "id": "1485",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 18,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "1486",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 40
            },
            "start": {
              "column": 5,
              "line": 40
            }
          }
        },
        {
          "id": "1487",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 40
            },
            "start": {
              "column": 5,
              "line": 40
            }
          }
        },
        {
          "id": "1488",
          "mutatorName": "MethodExpression",
          "replacement": "[devCtx, testCtx, prodCtx, forcedToProd].some(v => v === false)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["133"],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 71,
              "line": 40
            },
            "start": {
              "column": 5,
              "line": 40
            }
          }
        },
        {
          "id": "1489",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["133"],
          "coveredBy": ["133", "134", "135", "136", "137"],
          "location": {
            "end": {
              "column": 45,
              "line": 40
            },
            "start": {
              "column": 5,
              "line": 40
            }
          }
        },
        {
          "id": "1490",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 40
            },
            "start": {
              "column": 52,
              "line": 40
            }
          }
        },
        {
          "id": "1491",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 40
            },
            "start": {
              "column": 59,
              "line": 40
            }
          }
        },
        {
          "id": "1492",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 40
            },
            "start": {
              "column": 59,
              "line": 40
            }
          }
        },
        {
          "id": "1493",
          "mutatorName": "EqualityOperator",
          "replacement": "v !== false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 40
            },
            "start": {
              "column": 59,
              "line": 40
            }
          }
        },
        {
          "id": "1494",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 40
            },
            "start": {
              "column": 65,
              "line": 40
            }
          }
        },
        {
          "id": "1495",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 45
            },
            "start": {
              "column": 73,
              "line": 40
            }
          }
        },
        {
          "id": "1496",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/node/env.ts(41,52): error TS2345: Argument of type '\"\"' is not assignable to parameter of type 'keyof TExecutionContextWarningsVocab'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["136"],
          "location": {
            "end": {
              "column": 73,
              "line": 41
            },
            "start": {
              "column": 52,
              "line": 41
            }
          }
        },
        {
          "id": "1497",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 22,
              "line": 44
            },
            "start": {
              "column": 18,
              "line": 44
            }
          }
        }
      ],
      "source": "import executionContextWarningsVocabGetter from '../../../errors/vocab/warnings/executionContext';\n\ntype TComputedNodeEnv = {\n  PROD: boolean;\n  TEST: boolean;\n  DEV: boolean;\n};\n\nconst [NODE_PROD_ENV_NEEDLE, NODE_DEV_ENV_NEEDLE, NODE_TEST_ENV_NEEDLE] = ['prod', 'dev', 'test'];\nconst NODE_ENV = process.env.NODE_ENV;\n\n// Stryker Workaround 1. Pointless mutants: it makes no sense to granularly test each of these lines for these scenarios.\n// Stryker disable MethodExpression,BooleanLiteral\nconst prodCtx: boolean = NODE_ENV ? NODE_ENV.startsWith(NODE_PROD_ENV_NEEDLE) : false;\nlet devCtx: boolean = NODE_ENV ? NODE_ENV.startsWith(NODE_DEV_ENV_NEEDLE) : false;\nlet testCtx: boolean = NODE_ENV ? NODE_ENV.startsWith(NODE_TEST_ENV_NEEDLE) : false;\n// Stryker restore MethodExpression,BooleanLiteral\nlet forcedToProd: boolean = prodCtx;\n\n// Stryker Workaround 2. Pointless mutants: there's no ambiguity here.\n// Stryker disable next-line BlockStatement,ConditionalExpression\nif (NODE_ENV === undefined) {\n  console.warn(executionContextWarningsVocabGetter('UNABLE_TO_GET_NODE_ENV'));\n  // Stryker Workaround 3. Pointless mutant: it makes no sense to test this line for this scenario.\n  // Stryker disable next-line BooleanLiteral\n  forcedToProd = true;\n}\n\n// Stryker Workaround 4. Pointless mutants: there's no ambiguity here.\n// Stryker disable next-line BlockStatement,ConditionalExpression\nif (forcedToProd) {\n  devCtx = false;\n  // Stryker Workaround 5. Pointless mutant: it makes no sense to test this line for this scenario.\n  // Stryker disable next-line BooleanLiteral\n  testCtx = false;\n}\n\n// Stryker Workaround 6. Pointless mutant: it makes no sense to test this line for these scenarios.\n// Stryker disable next-line ConditionalExpression,ArrowFunction,ConditionalExpression,EqualityOperator,BooleanLiteral,BlockStatement\nif ([devCtx, testCtx, prodCtx, forcedToProd].every((v) => v === false)) {\n  console.warn(executionContextWarningsVocabGetter('FAILED_TO_INFER_CTX'));\n  // Stryker Workaround 7. Pointless mutant: it makes no sense to test this line for this scenario.\n  // Stryker disable next-line BooleanLiteral\n  forcedToProd = true;\n}\n\nconst ComputedNodeCtx: TComputedNodeEnv = {\n  PROD: forcedToProd || !testCtx ? !devCtx : false,\n  TEST: !forcedToProd ? testCtx : false,\n  DEV: !forcedToProd ? devCtx : false\n} as const;\n\nexport default ComputedNodeCtx;\n"
    },
    "src/lib/portable/str/capitalize.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1498",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/i18n/locales/fr.ts(79,35): error TS2554: Expected 0 arguments, but got 1.\ninterop/lib/blog/builders/blogDataAssoc/getBlogDataVariableName.ts(5,78): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/fromKebabCaseToSentenceCase.ts(3,65): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/getFormattedDate.ts(8,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/portable/str/getFormattedDate.ts(8,14): error TS2554: Expected 0 arguments, but got 1.\nsrc/i18n/locales/en.ts(80,35): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(7,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(8,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(9,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.capitalize.test.ts(13,23): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/PaginatedElements.tsx(95,57): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 91,
              "line": 1
            },
            "start": {
              "column": 20,
              "line": 1
            }
          }
        },
        {
          "id": "1499",
          "mutatorName": "ArithmeticOperator",
          "replacement": "str.charAt(0).toUpperCase() - str.substring(1)",
          "statusReason": "src/lib/portable/str/capitalize.ts(1,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/portable/str/capitalize.ts(1,45): error TS2322: Type 'number' is not assignable to type 'string'.\nsrc/lib/portable/str/capitalize.ts(1,75): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["237", "299", "304", "305"],
          "location": {
            "end": {
              "column": 91,
              "line": 1
            },
            "start": {
              "column": 45,
              "line": 1
            }
          }
        },
        {
          "id": "1500",
          "mutatorName": "MethodExpression",
          "replacement": "str.charAt(0).toLowerCase()",
          "statusReason": "expected 'vendredi 24 décembre 2021' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 41,
          "static": true,
          "killedBy": ["237"],
          "coveredBy": ["237", "299", "304", "305"],
          "location": {
            "end": {
              "column": 72,
              "line": 1
            },
            "start": {
              "column": 45,
              "line": 1
            }
          }
        },
        {
          "id": "1501",
          "mutatorName": "MethodExpression",
          "replacement": "str",
          "statusReason": "Cannot read properties of undefined (reading 'filter')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["190"],
          "coveredBy": ["237", "299", "304", "305"],
          "location": {
            "end": {
              "column": 58,
              "line": 1
            },
            "start": {
              "column": 45,
              "line": 1
            }
          }
        },
        {
          "id": "1502",
          "mutatorName": "MethodExpression",
          "replacement": "str",
          "statusReason": "Cannot read properties of undefined (reading 'filter')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["190"],
          "coveredBy": ["237", "299", "304", "305"],
          "location": {
            "end": {
              "column": 91,
              "line": 1
            },
            "start": {
              "column": 75,
              "line": 1
            }
          }
        }
      ],
      "source": "const capitalize = (str: string): string => str.charAt(0).toUpperCase() + str.substring(1);\n\nexport default capitalize;\n"
    },
    "src/lib/portable/str/compareAlphabetically.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1503",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/portable/str/compareAlphabetically.ts(6,56): error TS2322: Type 'undefined' is not assignable to type 'number'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 123,
              "line": 6
            },
            "start": {
              "column": 50,
              "line": 6
            }
          }
        },
        {
          "id": "1504",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 122,
              "line": 6
            },
            "start": {
              "column": 99,
              "line": 6
            }
          }
        },
        {
          "id": "1505",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/str/compareAlphabetically.ts(6,101): error TS2322: Type '\"\"' is not assignable to type '\"base\" | \"accent\" | \"case\" | \"variant\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 6
            },
            "start": {
              "column": 114,
              "line": 6
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\nimport type { StringsCompareFun } from '@rtm/shared-types/StringManipulations';\n\n// Stryker Workaround 1. Pointless mutant (no coverage on s2, locale, {}).\n// Stryker disable next-line ObjectLiteral\nconst compareAlphabetically: StringsCompareFun = (s1, s2, locale) => s1.localeCompare(s2, locale, { sensitivity: 'base' });\n\nexport default compareAlphabetically;\n/* v8 ignore stop */\n"
    },
    "src/lib/portable/str/countCharacter.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1506",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/app/[locale]/(pages)/[categ]/[subcateg]/[slug]/page.tsx(41,17): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["285", "286"],
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 52,
              "line": 6
            }
          }
        },
        {
          "id": "1507",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Impossible to countCharacter with:\n{\n  \"char\": \"a\"\n}\nchar's length must be: 1.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["285"],
          "coveredBy": ["285", "286"],
          "location": {
            "end": {
              "column": 24,
              "line": 9
            },
            "start": {
              "column": 7,
              "line": 9
            }
          }
        },
        {
          "id": "1508",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected function to throw an error, but it didn't",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["286"],
          "coveredBy": ["285", "286"],
          "location": {
            "end": {
              "column": 24,
              "line": 9
            },
            "start": {
              "column": 7,
              "line": 9
            }
          }
        },
        {
          "id": "1509",
          "mutatorName": "EqualityOperator",
          "replacement": "char.length === 1",
          "statusReason": "Impossible to countCharacter with:\n{\n  \"char\": \"a\"\n}\nchar's length must be: 1.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["285"],
          "coveredBy": ["285", "286"],
          "location": {
            "end": {
              "column": 24,
              "line": 9
            },
            "start": {
              "column": 7,
              "line": 9
            }
          }
        },
        {
          "id": "1510",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 87,
              "line": 9
            },
            "start": {
              "column": 79,
              "line": 9
            }
          }
        },
        {
          "id": "1511",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 115,
              "line": 9
            },
            "start": {
              "column": 89,
              "line": 9
            }
          }
        },
        {
          "id": "1512",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 47 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["285"],
          "coveredBy": ["285"],
          "location": {
            "end": {
              "column": 58,
              "line": 12
            },
            "start": {
              "column": 38,
              "line": 12
            }
          }
        },
        {
          "id": "1513",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected +0 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["285"],
          "coveredBy": ["285"],
          "location": {
            "end": {
              "column": 58,
              "line": 12
            },
            "start": {
              "column": 38,
              "line": 12
            }
          }
        },
        {
          "id": "1514",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChar !== char",
          "statusReason": "expected 43 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["285"],
          "coveredBy": ["285"],
          "location": {
            "end": {
              "column": 58,
              "line": 12
            },
            "start": {
              "column": 38,
              "line": 12
            }
          }
        },
        {
          "id": "1515",
          "mutatorName": "UpdateOperator",
          "replacement": "count--",
          "statusReason": "expected -4 to be 4 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["285"],
          "coveredBy": ["285"],
          "location": {
            "end": {
              "column": 67,
              "line": 12
            },
            "start": {
              "column": 60,
              "line": 12
            }
          }
        }
      ],
      "source": "import InvalidArgumentsError from '../../../../interop/errors/InvalidArguments';\n\n/**\n * @throws {InvalidArgumentsError}\n */\nfunction countCharacter(str: string, char: string) {\n  // Stryker Workaround 1. Pointless mutants (fault tolerant).\n  // Stryker disable next-line ObjectLiteral,StringLiteral\n  if (char.length !== 1) throw new InvalidArgumentsError(countCharacter.name, { char }, \"char's length must be: 1\");\n\n  let count = 0;\n  for (const currentChar of str) if (currentChar === char) count++;\n  return count;\n}\n\nexport default countCharacter;\n"
    },
    "src/lib/portable/str/endsWithChar.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1516",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "interop/errors/InvalidArguments.ts(10,47): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(8,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(9,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(10,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(15,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(16,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(17,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(22,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(23,26): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts(24,26): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 111,
              "line": 1
            },
            "start": {
              "column": 23,
              "line": 1
            }
          }
        },
        {
          "id": "1517",
          "mutatorName": "MethodExpression",
          "replacement": "endsChar.split('').every(char => str.endsWith(char))",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["212"],
          "coveredBy": [
            "93",
            "96",
            "105",
            "112",
            "132",
            "142",
            "157",
            "160",
            "175",
            "196",
            "207",
            "210",
            "211",
            "212",
            "217",
            "248",
            "253",
            "254",
            "255",
            "286"
          ],
          "location": {
            "end": {
              "column": 111,
              "line": 1
            },
            "start": {
              "column": 58,
              "line": 1
            }
          }
        },
        {
          "id": "1518",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["212"],
          "coveredBy": [
            "93",
            "96",
            "105",
            "112",
            "132",
            "142",
            "157",
            "160",
            "175",
            "196",
            "207",
            "210",
            "211",
            "212",
            "217",
            "248",
            "253",
            "254",
            "255",
            "286"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 1
            },
            "start": {
              "column": 73,
              "line": 1
            }
          }
        },
        {
          "id": "1519",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": ["212"],
          "coveredBy": [
            "93",
            "96",
            "105",
            "112",
            "132",
            "142",
            "157",
            "160",
            "175",
            "196",
            "207",
            "210",
            "211",
            "212",
            "217",
            "248",
            "253",
            "254",
            "255",
            "286"
          ],
          "location": {
            "end": {
              "column": 110,
              "line": 1
            },
            "start": {
              "column": 82,
              "line": 1
            }
          }
        },
        {
          "id": "1520",
          "mutatorName": "MethodExpression",
          "replacement": "str.startsWith(char)",
          "statusReason": "expected 'Impossible to FAKE_FUNCTION with:\\n{\\…' to be 'Impossible to FAKE_FUNCTION with:\\n{\\…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": ["212"],
          "coveredBy": [
            "93",
            "96",
            "105",
            "112",
            "132",
            "142",
            "157",
            "160",
            "175",
            "196",
            "207",
            "210",
            "211",
            "212",
            "217",
            "248",
            "253",
            "254",
            "286"
          ],
          "location": {
            "end": {
              "column": 110,
              "line": 1
            },
            "start": {
              "column": 92,
              "line": 1
            }
          }
        }
      ],
      "source": "const endsWithChars = (str: string, endsChar: string) => endsChar.split('').some((char) => str.endsWith(char));\n\nexport default endsWithChars;\n"
    },
    "src/lib/portable/str/getFormattedDate.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1521",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/blog/api.ts(135,42): error TS2554: Expected 0 arguments, but got 3.\nsrc/lib/blog/api.ts(136,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/portable/str/__tests__/prebuild.getFormattedDate.test.ts(10,29): error TS2554: Expected 0 arguments, but got 3.\nsrc/lib/portable/str/__tests__/prebuild.getFormattedDate.test.ts(11,29): error TS2554: Expected 0 arguments, but got 3.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 140,
              "line": 8
            },
            "start": {
              "column": 26,
              "line": 7
            }
          }
        },
        {
          "id": "1522",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 7
            },
            "start": {
              "column": 83,
              "line": 7
            }
          }
        },
        {
          "id": "1523",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '24/12/2021' to be 'Vendredi 24 décembre 2021' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["237"],
          "coveredBy": ["237", "299"],
          "location": {
            "end": {
              "column": 114,
              "line": 8
            },
            "start": {
              "column": 48,
              "line": 8
            }
          }
        },
        {
          "id": "1524",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/str/getFormattedDate.ts(8,50): error TS2322: Type '\"\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["237", "299"],
          "location": {
            "end": {
              "column": 67,
              "line": 8
            },
            "start": {
              "column": 61,
              "line": 8
            }
          }
        },
        {
          "id": "1525",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'Dimanche 1 février 1998' to be 'Dimanche 1 février 1998 à 07:29' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["299"],
          "coveredBy": ["299"],
          "location": {
            "end": {
              "column": 106,
              "line": 8
            },
            "start": {
              "column": 84,
              "line": 8
            }
          }
        },
        {
          "id": "1526",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/lib/portable/str/getFormattedDate.ts(8,48): error TS2345: Argument of type '{ timeStyle?: \"\" | undefined; dateStyle: \"full\"; }' is not assignable to parameter of type 'DateTimeFormatOptions'.\n  Types of property 'timeStyle' are incompatible.\n    Type '\"\" | undefined' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n      Type '\"\"' is not assignable to type '\"full\" | \"long\" | \"medium\" | \"short\" | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["299"],
          "location": {
            "end": {
              "column": 104,
              "line": 8
            },
            "start": {
              "column": 97,
              "line": 8
            }
          }
        }
      ],
      "source": "import type { LanguageFlag } from '@rtm/shared-types/I18n';\n\nimport capitalize from './capitalize';\n\n// Stryker Workaround 1. Pointless mutant (no coverage on giveTime: boolean = true).\n// Stryker disable next-line BooleanLiteral\nconst getFormattedDate = (language: LanguageFlag, date: Date, giveTime: boolean = false): string =>\n  capitalize(new Intl.DateTimeFormat(language, { dateStyle: 'full', ...(giveTime ? { timeStyle: 'short' } : {}) }).format(date).toString());\n\nexport default getFormattedDate;\n"
    },
    "src/lib/portable/str/getSlashEnvelope.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1527",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "interop/config/routes.ts(9,29): error TS2554: Expected 0 arguments, but got 1.\ninterop/config/routes.ts(10,26): error TS2554: Expected 0 arguments, but got 1.\ninterop/config/routes.ts(28,3): error TS1360: Type '{ DASHBOARD: string; PATCH_NOTES: string; WEBSITE: undefined; BLOG: undefined; }' does not satisfy the expected type 'RoutesRoots'.\n  Types of property 'WEBSITE' are incompatible.\n    Type 'undefined' is not assignable to type 'string'.\nsrc/lib/i18n.ts(25,3): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\nsrc/lib/str.ts(15,71): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/str.ts(16,48): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/str.ts(17,34): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/str.ts(18,34): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/str.ts(23,46): error TS2339: Property 'startsWith' does not exist on type 'never'.\nsrc/middlewares/withProtectedRoutes.ts(16,55): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/blog/api.ts(178,113): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/lib/blog/api.ts(181,39): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/config/DashboardSidebar/routesImpl.ts(9,31): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/SitewideNavbar/PatchNotes/routesImpl.ts(9,31): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/SitewideNavbar/routesImpl.ts(10,31): error TS2554: Expected 0 arguments, but got 1.\nsrc/config/SitewideNavbar/routesImpl.ts(14,3): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/blog/guards/__tests__/postbuild.blogCategoryGuard.mocked_blog_route_root.test.ts(22,7): error TS2322: Type 'string' is not assignable to type 'undefined'.\nsrc/lib/blog/guards/__tests__/postbuild.blogSubcategoryGuard.mocked_blog_route_root.test.ts(22,7): error TS2322: Type 'string' is not assignable to type 'undefined'.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(8,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(9,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(10,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(11,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts(15,29): error TS2554: Expected 0 arguments, but got 1.\nsrc/app/error.tsx(10,12): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/components/ui/navbar/SitewideNavbar.tsx(68,63): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/ui/breadcrumbs/custom/HomepageCrumb.tsx(18,47): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/app/[locale]/(pages)/[categ]/[subcateg]/[slug]/page.tsx(41,32): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'string'.\nsrc/components/pages/dashboard/main.tsx(14,13): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/pages/dashboard/bar.tsx(82,13): error TS2322: Type 'undefined' is not assignable to type 'Url'.\nsrc/components/pages/dashboard/foo.tsx(14,13): error TS2322: Type 'undefined' is not assignable to type 'Url'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 3
            },
            "start": {
              "column": 26,
              "line": 3
            }
          }
        },
        {
          "id": "1528",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'foo' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 171,
          "static": true,
          "killedBy": ["297"],
          "coveredBy": ["264", "265", "297", "298"],
          "location": {
            "end": {
              "column": 74,
              "line": 3
            },
            "start": {
              "column": 71,
              "line": 3
            }
          }
        }
      ],
      "source": "import surroundString from './surroundString';\n\nconst getSlashEnvelope = (str: string): string => surroundString(str, '/');\nexport default getSlashEnvelope;\n"
    },
    "src/lib/portable/str/indexOfNthOccurrence.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1529",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/portable/str/indexOfNthOccurrence.ts(1,80): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 92,
              "line": 1
            }
          }
        },
        {
          "id": "1530",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 17,
              "line": 2
            },
            "start": {
              "column": 15,
              "line": 2
            }
          }
        },
        {
          "id": "1531",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 3
            },
            "start": {
              "column": 19,
              "line": 3
            }
          }
        },
        {
          "id": "1532",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= n",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 3
            },
            "start": {
              "column": 19,
              "line": 3
            }
          }
        },
        {
          "id": "1533",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= n",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 3
            },
            "start": {
              "column": 19,
              "line": 3
            }
          }
        },
        {
          "id": "1534",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 3
            },
            "start": {
              "column": 26,
              "line": 3
            }
          }
        },
        {
          "id": "1535",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 8
            },
            "start": {
              "column": 31,
              "line": 3
            }
          }
        },
        {
          "id": "1536",
          "mutatorName": "ArithmeticOperator",
          "replacement": "index - 1",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 4
            },
            "start": {
              "column": 41,
              "line": 4
            }
          }
        },
        {
          "id": "1537",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 7
            },
            "start": {
              "column": 9,
              "line": 7
            }
          }
        },
        {
          "id": "1538",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 7
            },
            "start": {
              "column": 9,
              "line": 7
            }
          }
        },
        {
          "id": "1539",
          "mutatorName": "EqualityOperator",
          "replacement": "index !== -1",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["256"],
          "coveredBy": [
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "74",
            "75",
            "76",
            "92",
            "93",
            "95",
            "96",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "116",
            "117",
            "118",
            "140",
            "141",
            "153",
            "154",
            "156",
            "157",
            "158",
            "159",
            "160",
            "188",
            "189",
            "217",
            "249",
            "250",
            "256",
            "257",
            "264",
            "265"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 7
            },
            "start": {
              "column": 9,
              "line": 7
            }
          }
        },
        {
          "id": "1540",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 21,
              "line": 7
            },
            "start": {
              "column": 19,
              "line": 7
            }
          }
        }
      ],
      "source": "function indexOfNthOccurrence(strHaystack: string, needle: string, n: number): number | -1 {\n  let index = -1;\n  for (let i = 0; i < n; i++) {\n    index = strHaystack.indexOf(needle, index + 1);\n    // Stryker Workaround 1. Pointless mutants (out of scope: surviving is expected behavior).\n    // Stryker disable next-line ConditionalExpression,UnaryOperator\n    if (index === -1) break;\n  }\n  return index;\n}\n\nexport default indexOfNthOccurrence;\n"
    },
    "src/lib/portable/str/surroundString.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1541",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/portable/str/getSlashEnvelope.ts(3,51): error TS2322: Type 'undefined' is not assignable to type 'string'.\nsrc/lib/portable/str/getSlashEnvelope.ts(3,66): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(11,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(12,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(13,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(14,27): error TS2554: Expected 0 arguments, but got 2.\nsrc/lib/portable/str/__tests__/prebuild.surroundString.test.ts(19,27): error TS2554: Expected 0 arguments, but got 2.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 2
            },
            "start": {
              "column": 24,
              "line": 1
            }
          }
        },
        {
          "id": "1542",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(!str.startsWith(envelope) ? envelope : '') + str - (!str.endsWith(envelope) ? envelope : '')",
          "statusReason": "src/lib/portable/str/surroundString.ts(2,3): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/portable/str/surroundString.ts(2,3): error TS2322: Type 'number' is not assignable to type 'string'.\nsrc/lib/portable/str/surroundString.ts(2,55): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["264", "265", "283", "284", "297", "298"],
          "location": {
            "end": {
              "column": 96,
              "line": 2
            },
            "start": {
              "column": 3,
              "line": 2
            }
          }
        },
        {
          "id": "1543",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(!str.startsWith(envelope) ? envelope : '') - str",
          "statusReason": "src/lib/portable/str/surroundString.ts(2,3): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\nsrc/lib/portable/str/surroundString.ts(2,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": ["264", "265", "283", "284", "297", "298"],
          "location": {
            "end": {
              "column": 52,
              "line": 2
            },
            "start": {
              "column": 3,
              "line": 2
            }
          }
        },
        {
          "id": "1544",
          "mutatorName": "BooleanLiteral",
          "replacement": "str.startsWith(envelope)",
          "statusReason": "expected '//fr' to be '//' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 19,
          "static": true,
          "killedBy": ["257"],
          "coveredBy": ["264", "265", "283", "284", "297", "298"],
          "location": {
            "end": {
              "column": 29,
              "line": 2
            },
            "start": {
              "column": 4,
              "line": 2
            }
          }
        },
        {
          "id": "1545",
          "mutatorName": "MethodExpression",
          "replacement": "str.endsWith(envelope)",
          "statusReason": "expected '//foo/' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 171,
          "static": true,
          "killedBy": ["297"],
          "coveredBy": ["264", "265", "283", "284", "297", "298"],
          "location": {
            "end": {
              "column": 29,
              "line": 2
            },
            "start": {
              "column": 5,
              "line": 2
            }
          }
        },
        {
          "id": "1546",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Stryker was here!/foo/' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["297"],
          "coveredBy": ["264", "265", "283", "297"],
          "location": {
            "end": {
              "column": 45,
              "line": 2
            },
            "start": {
              "column": 43,
              "line": 2
            }
          }
        },
        {
          "id": "1547",
          "mutatorName": "BooleanLiteral",
          "replacement": "str.endsWith(envelope)",
          "statusReason": "expected '/foo' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["297"],
          "coveredBy": ["264", "265", "283", "284", "297", "298"],
          "location": {
            "end": {
              "column": 79,
              "line": 2
            },
            "start": {
              "column": 56,
              "line": 2
            }
          }
        },
        {
          "id": "1548",
          "mutatorName": "MethodExpression",
          "replacement": "str.startsWith(envelope)",
          "statusReason": "expected '/foo' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["297"],
          "coveredBy": ["264", "265", "283", "284", "297", "298"],
          "location": {
            "end": {
              "column": 79,
              "line": 2
            },
            "start": {
              "column": 57,
              "line": 2
            }
          }
        },
        {
          "id": "1549",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected '/foo/Stryker was here!' to be '/foo/' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": ["297"],
          "coveredBy": ["264", "283", "297"],
          "location": {
            "end": {
              "column": 95,
              "line": 2
            },
            "start": {
              "column": 93,
              "line": 2
            }
          }
        }
      ],
      "source": "const surroundString = (str: string, envelope: string): string =>\n  (!str.startsWith(envelope) ? envelope : '') + str + (!str.endsWith(envelope) ? envelope : '');\n\nexport default surroundString;\n"
    },
    "src/lib/portable/tailwind/cn.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1550",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 8
            },
            "start": {
              "column": 12,
              "line": 8
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { ClassValue } from 'clsx';\n\nimport { twMerge } from 'tailwind-merge';\nimport { clsx } from 'clsx';\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs));\nexport default cn;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/lib/portable/tailwind/getBreakpoint.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1551",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/portable/tailwind/getBreakpoint.ts(7,83): error TS2532: Object is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 5
            },
            "start": {
              "column": 20,
              "line": 5
            }
          }
        },
        {
          "id": "1552",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/lib/portable/tailwind/__tests__/prebuild.getBreakpoint.test.ts(20,26): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/tailwind/__tests__/prebuild.getBreakpoint.test.ts(21,26): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/ui/DropdownMenu.tsx(31,68): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/layouts/navbar/NavbarToggle.tsx(40,68): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/layouts/navbar/NavbarDropdown.tsx(59,68): error TS2554: Expected 0 arguments, but got 1.\nsrc/components/layouts/dashboard/DashboardSidebar.tsx(56,68): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 108,
              "line": 7
            },
            "start": {
              "column": 23,
              "line": 7
            }
          }
        }
      ],
      "source": "import type { TailwindScreensBreakpoint } from '@/types/Tailwind';\n\nimport config from 'tailwind.config';\n\nconst getScreens = () => config.theme.screens;\n\nconst getBreakpoint = (breakpoint: TailwindScreensBreakpoint): number => parseInt(getScreens()[breakpoint]);\n\nexport default getBreakpoint;\n"
    },
    "src/lib/portable/typescript/getEnumKeys.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1553",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "interop/config/i18n.ts(30,14): error TS2322: Type 'undefined' is not assignable to type '(\"fr\" | \"en\")[]'.\ninterop/config/i18n.ts(30,54): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(12,32): error TS2554: Expected 0 arguments, but got 1.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(13,11): error TS2322: Type 'string[]' is not assignable to type 'undefined'.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(19,11): error TS2322: Type 'undefined' is not assignable to type 'never[]'.\nsrc/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts(19,41): error TS2554: Expected 0 arguments, but got 1.\n",
          "status": "CompileError",
          "static": true,
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 2
            },
            "start": {
              "column": 21,
              "line": 1
            }
          }
        },
        {
          "id": "1554",
          "mutatorName": "MethodExpression",
          "replacement": "Object.keys(enumerableObject)",
          "statusReason": "expected [ '0', '1', 'foo', 'bar' ] to strictly equal [ 'foo', 'bar' ]",
          "status": "Killed",
          "testsCompleted": 179,
          "static": true,
          "killedBy": ["293"],
          "coveredBy": ["293", "294"],
          "location": {
            "end": {
              "column": 68,
              "line": 2
            },
            "start": {
              "column": 3,
              "line": 2
            }
          }
        },
        {
          "id": "1555",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected '' to be 'fr' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 12,
          "static": true,
          "killedBy": ["256"],
          "coveredBy": ["293", "294"],
          "location": {
            "end": {
              "column": 67,
              "line": 2
            },
            "start": {
              "column": 40,
              "line": 2
            }
          }
        }
      ],
      "source": "const getEnumKeys = <T extends Record<string, unknown>>(enumerableObject: T): (keyof T)[] =>\n  Object.keys(enumerableObject).filter((key) => isNaN(Number(key)));\n\nexport default getEnumKeys;\n"
    },
    "src/lib/str.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1556",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/lib/str.ts(15,110): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "killedBy": [],
          "coveredBy": ["264", "265"],
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 118,
              "line": 14
            }
          }
        },
        {
          "id": "1557",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "1558",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 36,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "1559",
          "mutatorName": "EqualityOperator",
          "replacement": "pathnameWithoutI18n !== _href",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["265"],
          "coveredBy": ["264", "265"],
          "location": {
            "end": {
              "column": 36,
              "line": 21
            },
            "start": {
              "column": 7,
              "line": 21
            }
          }
        },
        {
          "id": "1560",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["264"],
          "coveredBy": ["264"],
          "location": {
            "end": {
              "column": 49,
              "line": 21
            },
            "start": {
              "column": 45,
              "line": 21
            }
          }
        },
        {
          "id": "1561",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["265"],
          "coveredBy": ["264", "265"],
          "location": {
            "end": {
              "column": 63,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1562",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["264"],
          "coveredBy": ["264", "265"],
          "location": {
            "end": {
              "column": 63,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1563",
          "mutatorName": "LogicalOperator",
          "replacement": "_href !== _root || pathnameWithoutI18n.startsWith(_href)",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["265"],
          "coveredBy": ["264", "265"],
          "location": {
            "end": {
              "column": 63,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1564",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": ["265"],
          "coveredBy": ["264", "265"],
          "location": {
            "end": {
              "column": 22,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1565",
          "mutatorName": "EqualityOperator",
          "replacement": "_href === _root",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["264"],
          "coveredBy": ["264", "265"],
          "location": {
            "end": {
              "column": 22,
              "line": 22
            },
            "start": {
              "column": 7,
              "line": 22
            }
          }
        },
        {
          "id": "1566",
          "mutatorName": "MethodExpression",
          "replacement": "pathnameWithoutI18n.endsWith(_href)",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["264"],
          "coveredBy": ["264"],
          "location": {
            "end": {
              "column": 63,
              "line": 22
            },
            "start": {
              "column": 26,
              "line": 22
            }
          }
        },
        {
          "id": "1567",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["264"],
          "coveredBy": ["264"],
          "location": {
            "end": {
              "column": 76,
              "line": 22
            },
            "start": {
              "column": 72,
              "line": 22
            }
          }
        },
        {
          "id": "1568",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": ["265"],
          "coveredBy": ["265"],
          "location": {
            "end": {
              "column": 15,
              "line": 23
            },
            "start": {
              "column": 10,
              "line": 23
            }
          }
        }
      ],
      "source": "import type { AppPath } from '@rtm/shared-types/Next';\n\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport compareAlphabetically from './portable/str/compareAlphabetically';\nimport indexOfNthOccurrence from './portable/str/indexOfNthOccurrence';\nimport getFormattedDate from './portable/str/getFormattedDate';\nimport getSlashEnvelope from './portable/str/getSlashEnvelope';\nimport countCharacter from './portable/str/countCharacter';\nimport endsWithChars from './portable/str/endsWithChar';\nimport { getPathnameWithoutI18nFlag } from './i18n';\nimport capitalize from './portable/str/capitalize';\n\nexport function hrefMatchesPathname(href: AppPath, pathname: AppPath, root: AppPath = ROUTES_ROOTS.WEBSITE): boolean {\n  const pathnameWithoutI18n = getSlashEnvelope(getPathnameWithoutI18nFlag(pathname));\n  const _href = getSlashEnvelope(href);\n  const _root = getSlashEnvelope(root);\n\n  // Stryker Workaround 1. Tautology is pointless.\n  // Stryker disable next-line ConditionalExpression\n  if (pathnameWithoutI18n === _href) return true;\n  if (_href !== _root && pathnameWithoutI18n.startsWith(_href)) return true;\n  return false;\n}\n\nexport { compareAlphabetically, indexOfNthOccurrence, getFormattedDate, getSlashEnvelope, countCharacter, endsWithChars, capitalize };\n"
    },
    "src/meta/discordapi.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1569",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 61,
              "line": 12
            }
          }
        },
        {
          "id": "1570",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 20
            },
            "start": {
              "column": 9,
              "line": 13
            }
          }
        },
        {
          "id": "1571",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 15
            },
            "start": {
              "column": 21,
              "line": 15
            }
          }
        },
        {
          "id": "1572",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 10,
              "line": 18
            },
            "start": {
              "column": 65,
              "line": 15
            }
          }
        },
        {
          "id": "1573",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 77,
              "line": 16
            },
            "start": {
              "column": 20,
              "line": 16
            }
          }
        },
        {
          "id": "1574",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 16
            },
            "start": {
              "column": 37,
              "line": 16
            }
          }
        },
        {
          "id": "1575",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 24,
              "line": 17
            },
            "start": {
              "column": 19,
              "line": 17
            }
          }
        },
        {
          "id": "1576",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 6,
              "line": 25
            },
            "start": {
              "column": 13,
              "line": 20
            }
          }
        },
        {
          "id": "1577",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 22
            },
            "start": {
              "column": 11,
              "line": 22
            }
          }
        },
        {
          "id": "1578",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 20,
              "line": 22
            },
            "start": {
              "column": 11,
              "line": 22
            }
          }
        },
        {
          "id": "1579",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 22
            },
            "start": {
              "column": 29,
              "line": 22
            }
          }
        },
        {
          "id": "1580",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Math.random() / 6",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 23
            },
            "start": {
              "column": 34,
              "line": 23
            }
          }
        },
        {
          "id": "1581",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 108,
              "line": 24
            },
            "start": {
              "column": 14,
              "line": 24
            }
          }
        },
        {
          "id": "1582",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 81,
              "line": 24
            },
            "start": {
              "column": 24,
              "line": 24
            }
          }
        },
        {
          "id": "1583",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 97,
              "line": 24
            },
            "start": {
              "column": 93,
              "line": 24
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport bentocache, { keysFactory } from '@/config/bentocache';\n\ntype FreshProfile = { epicFail?: boolean; avatar: string; id: string };\n\nexport interface IDiscordApi {\n  getFreshProfile(sub: string): Promise<FreshProfile>;\n}\n\nclass DiscordApi implements IDiscordApi {\n  async getFreshProfile(sub: string): Promise<FreshProfile> {\n    try {\n      return await (\n        await fetch(`https://discord.com/api/v10/users/${sub}`, {\n          headers: { Authorization: `Bot ${process.env.DISCORD_BOT_TOKEN}` },\n          method: 'GET'\n        })\n      ).json();\n    } catch {\n      const cachedURL = await bentocache.get(keysFactory.discordProfilePicture(sub));\n      if (cachedURL) return { avatar: cachedURL, id: sub };\n      const randint = Math.floor(Math.random() * 6);\n      return { avatar: `https://cdn.discordapp.com/embed/avatars/${randint}.png`, epicFail: true, id: sub };\n    }\n  }\n}\n\nconst DISCORD_API = new DiscordApi();\nexport default DISCORD_API;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middleware.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1584",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 6
            },
            "start": {
              "column": 23,
              "line": 6
            }
          }
        },
        {
          "id": "1585",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 71,
              "line": 6
            },
            "start": {
              "column": 34,
              "line": 6
            }
          }
        },
        {
          "id": "1586",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 70,
              "line": 6
            },
            "start": {
              "column": 35,
              "line": 6
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport { withAuthMiddlewaresChain } from '@/middlewaresChain';\nimport { APP_PROTECTED_PATHS } from '##/config/auth';\n\nexport const config = { matcher: ['/((?!api|static|_next|.*\\\\..*).*)'] };\n\nexport { APP_PROTECTED_PATHS };\nexport default withAuthMiddlewaresChain;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middlewares/withI18n.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1587",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 95,
              "line": 18
            },
            "start": {
              "column": 24,
              "line": 18
            }
          }
        },
        {
          "id": "1588",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 20
            },
            "start": {
              "column": 37,
              "line": 20
            }
          }
        },
        {
          "id": "1589",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 20
            },
            "start": {
              "column": 43,
              "line": 20
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { I18nMiddlewareConfig } from '@rtm/shared-types/I18n';\nimport type { MiddlewareFactory } from '@rtm/shared-types/Next';\nimport type { NextResponse, NextRequest } from 'next/server';\n\nimport { createI18nMiddleware } from 'next-international/middleware';\nimport { DEFAULT_LANGUAGE, LANGUAGES } from '##/config/i18n';\n\nconst I18N_MIDDLEWARE_CONFIG: I18nMiddlewareConfig = {\n  urlMappingStrategy: 'rewriteDefault',\n  defaultLocale: DEFAULT_LANGUAGE,\n  locales: LANGUAGES\n} as const;\n\nconst i18nMiddlewareInstance = createI18nMiddleware(I18N_MIDDLEWARE_CONFIG);\n\nconst i18nMiddleware = (request: NextRequest): NextResponse => i18nMiddlewareInstance(request);\n\nconst withI18n: MiddlewareFactory = () => async (request: NextRequest) => i18nMiddleware(request);\n\nexport default withI18n;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middlewares/withProtectedRoutes.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1590",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 47,
              "line": 14
            }
          }
        },
        {
          "id": "1591",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 41,
              "line": 16
            },
            "start": {
              "column": 38,
              "line": 16
            }
          }
        },
        {
          "id": "1592",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 16
            },
            "start": {
              "column": 60,
              "line": 16
            }
          }
        },
        {
          "id": "1593",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 41,
              "line": 18
            }
          }
        },
        {
          "id": "1594",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 75,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 19
            }
          }
        },
        {
          "id": "1595",
          "mutatorName": "ArithmeticOperator",
          "replacement": "i18nPrefix - ROUTES_ROOTS.LANDING_PAGES",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 61,
              "line": 19
            },
            "start": {
              "column": 22,
              "line": 19
            }
          }
        },
        {
          "id": "1596",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 73,
              "line": 19
            },
            "start": {
              "column": 64,
              "line": 19
            }
          }
        },
        {
          "id": "1597",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 46,
              "line": 23
            }
          }
        },
        {
          "id": "1598",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 25
            },
            "start": {
              "column": 53,
              "line": 25
            }
          }
        },
        {
          "id": "1599",
          "mutatorName": "MethodExpression",
          "replacement": "currentRoute.endsWith(r)",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 86,
              "line": 25
            },
            "start": {
              "column": 60,
              "line": 25
            }
          }
        },
        {
          "id": "1600",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 48,
              "line": 29
            }
          }
        },
        {
          "id": "1601",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 125,
              "line": 29
            }
          }
        },
        {
          "id": "1602",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "1603",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 49,
              "line": 31
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { NextFetchEvent, NextMiddleware, NextRequest } from 'next/server';\nimport type { MiddlewareFactory, AppPath } from '@rtm/shared-types/Next';\nimport type { NextRequestWithAuth } from 'next-auth/middleware';\n\nimport { mainMiddlewaresChain } from '@/middlewaresChain';\nimport { getMaybeI18nFlagFromRequest } from '@/lib/next';\nimport { getPathnameWithoutI18nFlag } from '@/lib/i18n';\nimport { APP_PROTECTED_PATHS } from '@/middleware';\nimport { withAuth } from 'next-auth/middleware';\nimport ROUTES_ROOTS from '##/config/routes';\n\nfunction authMiddleware(request: NextRequest) {\n  const maybeI18nFlag = getMaybeI18nFlagFromRequest(request);\n  const i18nPrefix = maybeI18nFlag ? '/' + maybeI18nFlag : '';\n\n  return withAuth(mainMiddlewaresChain, {\n    pages: { signIn: i18nPrefix + ROUTES_ROOTS.LANDING_PAGES + 'sign-up' }\n  });\n}\n\nfunction isProtectedRoute(pathname: AppPath) {\n  const currentRoute = getPathnameWithoutI18nFlag(pathname);\n  const isProtectedRoute = APP_PROTECTED_PATHS.find((r) => currentRoute.startsWith(r));\n  return Boolean(isProtectedRoute);\n}\n\nconst withProtectedRoutes: MiddlewareFactory = (next: NextMiddleware) => async (req: NextRequest, _next: NextFetchEvent) => {\n  const request = req as NextRequestWithAuth;\n  if (isProtectedRoute(request.nextUrl.pathname)) return authMiddleware(request)(request, _next);\n  const res = await next(request, _next);\n  return res;\n};\n\nexport default withProtectedRoutes;\n// Stryker restore all\n/* v8 ignore stop */\n"
    },
    "src/middlewaresChain.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1604",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 9
            },
            "start": {
              "column": 41,
              "line": 9
            }
          }
        },
        {
          "id": "1605",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Ignored using a comment",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 10
            },
            "start": {
              "column": 46,
              "line": 10
            }
          }
        }
      ],
      "source": "/* v8 ignore start */\n// Stryker disable all\nimport type { MiddlewareFactory } from '@rtm/shared-types/Next';\n\nimport withProtectedRoutes from '@/middlewares/withProtectedRoutes';\nimport { stackMiddlewares } from '@/lib/next';\nimport withI18n from '@/middlewares/withI18n';\n\nconst MAIN_CHAIN: MiddlewareFactory[] = [withI18n];\nconst WITH_AUTH_CHAIN: MiddlewareFactory[] = [withProtectedRoutes, ...MAIN_CHAIN];\n\nexport const mainMiddlewaresChain = stackMiddlewares(MAIN_CHAIN);\nexport const withAuthMiddlewaresChain = stackMiddlewares(WITH_AUTH_CHAIN);\n// Stryker restore all\n/* v8 ignore stop */\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 80,
    "low": 60,
    "break": null
  },
  "testFiles": {
    "packages/prebuilder/src/validators/__tests__/prebuild.arguments.test.ts": {
      "tests": [
        {
          "id": "0",
          "name": "parseArguments unhappy paths (sys) should throw, given unknown args"
        },
        {
          "id": "1",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid schema path (not a file)"
        },
        {
          "id": "2",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid pages folder path (not a directory)"
        },
        {
          "id": "3",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid posts folder path (not a directory)"
        },
        {
          "id": "4",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid lp folder path (not a directory)"
        },
        {
          "id": "5",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid schema path (can't open)"
        },
        {
          "id": "6",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid pages folder path (can't open)"
        },
        {
          "id": "7",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid posts folder path (can't open)"
        },
        {
          "id": "8",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but invalid lp folder path (can't open)"
        },
        {
          "id": "9",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but full invalid paths (not a directory, not a file)"
        },
        {
          "id": "10",
          "name": "parseArguments unhappy paths (sys) should throw, given valid args schema, but full invalid paths (can't open)"
        },
        {
          "id": "11",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any i18n option & no i18n option)"
        },
        {
          "id": "12",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any pages option & no pages option)"
        },
        {
          "id": "13",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any blog option & no blog option)"
        },
        {
          "id": "14",
          "name": "parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool) should throw, given conflicting args (both any lp option & no lp option)"
        },
        {
          "id": "15",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting i18n locales schema filepath option without no i18n option)"
        },
        {
          "id": "16",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting pages folder option without no pages option)"
        },
        {
          "id": "17",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting blog folder option without no blog option)"
        },
        {
          "id": "18",
          "name": "parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it) should throw, given invalid args (omitting lp folder option without no lp option)"
        },
        {
          "id": "19",
          "name": "parseArguments unhappy paths (invalid args combinators: breaking dependencies) should throw, given conflicting args (both any pages option & no i18n option)"
        },
        {
          "id": "20",
          "name": "parseArguments unhappy paths (invalid args combinators: breaking dependencies) should throw, given conflicting args (both any blog option & no i18n option)"
        },
        {
          "id": "21",
          "name": "parseArguments unhappy paths (invalid args combinators: breaking dependencies) should throw, given conflicting args (both any lp option & no i18n option)"
        },
        {
          "id": "22",
          "name": "parseArguments vacuous path (disabling all tools) should pass, disabling all tools"
        },
        {
          "id": "23",
          "name": "parseArguments language support should fallback on default language, given unknown locale"
        },
        {
          "id": "24",
          "name": "parseArguments language support should set the language to default locale, given defaut locale"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { NOT_A_DIRECTORY_NEEDLE, BREAKING_DEP_NEEDLE, NOT_A_FILE_NEEDLE, CANT_OPEN_NEEDLE, CANT_OMIT_NEEDLE, CANT_USE_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { afterEach, describe, expect, it, vi } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport ArgumentsValidatorError from '../../errors/ArgumentsValidatorError';\nimport { getCurrentLocale } from '../../config/formatMessage';\nimport { DEFAULT_LOCALE } from '../../config/translations';\nimport parseArguments from '../arguments';\nimport { FLAGS } from '../../config';\n\nconst VALID_I18N_LOCALES_SCHEMA_FILEPATH = './packages/prebuilder/src/validators/__tests__/fake_locales/valid_fake_locales/schema.ts';\n\nconst VALID_PAGES_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_pages_folders/phony_valid_fake_pages_folder';\n\nconst VALID_LP_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/phony_valid_fake_lp_folder';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/phony_valid_fake_posts_folder';\n\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_NOT_A_FILE =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_schema_dir/schema.ts';\n\nconst INVALID_PAGES_FOLDER_NOT_A_DIR = './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder.FAKE_EXT';\n\nconst INVALID_BLOG_POSTS_FOLDER_NOT_A_DIR = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder.FAKE_EXT';\n\nconst INVALID_LP_FOLDER_NOT_A_DIR = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder.FAKE_EXT';\n\ndescribe('parseArguments unhappy paths (sys)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given unknown args', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    argvSpy.mockReturnValue(['_', '_', '--__unknown_arg1', 'foo', '--_unknown_arg2', 'bar']);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n  });\n\n  it('should throw, given valid args schema, but invalid schema path (not a file)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_NOT_A_FILE,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_FILE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but invalid pages folder path (not a directory)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.PAGES_FOLDER, INVALID_PAGES_FOLDER_NOT_A_DIR,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_BLOG\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_DIRECTORY_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but invalid posts folder path (not a directory)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_BLOG_POSTS_FOLDER_NOT_A_DIR,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_DIRECTORY_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but invalid lp folder path (not a directory)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_LP_FOLDER_NOT_A_DIR,\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(NOT_A_DIRECTORY_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid schema path (can't open)\", async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_PATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid pages folder path (can't open)\", async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.PAGES_FOLDER, INVALID_PATH,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_BLOG\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid posts folder path (can't open)\", async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_PATH,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it(\"should throw, given valid args schema, but invalid lp folder path (can't open)\", async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_PATH\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OPEN_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given valid args schema, but full invalid paths (not a directory, not a file)', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_BLOG_POSTS_FOLDER_NOT_A_DIR,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_NOT_A_FILE,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_LP_FOLDER_NOT_A_DIR,\n      FLAGS.PAGES_FOLDER, INVALID_PAGES_FOLDER_NOT_A_DIR,\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n  });\n\n  it(\"should throw, given valid args schema, but full invalid paths (can't open)\", async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, INVALID_PATH,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, INVALID_PATH,\n      FLAGS.LANDING_PAGES_FOLDER, INVALID_PATH,\n      FLAGS.PAGES_FOLDER, INVALID_PATH,\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n  });\n});\n\ndescribe('parseArguments unhappy paths (invalid args combinators: both disabling and calling a tool)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given conflicting args (both any i18n option & no i18n option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any pages option & no pages option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.NO_PAGES, FLAGS.NO_BLOG, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any blog option & no blog option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.NO_BLOG, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any lp option & no lp option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.LANDING_PAGES_FOLDER, VALID_LP_FOLDER,\n      FLAGS.NO_LP, FLAGS.NO_BLOG, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_USE_NEEDLE)).toBe(true);\n    }\n  });\n});\n\ndescribe('parseArguments unhappy paths (invalid omissions: omitting a tool argument without disabling it)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given invalid args (omitting i18n locales schema filepath option without no i18n option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.NO_BLOG, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given invalid args (omitting pages folder option without no pages option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_BLOG, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given invalid args (omitting blog folder option without no blog option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_PAGES, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given invalid args (omitting lp folder option without no lp option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_PAGES, FLAGS.NO_BLOG\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(CANT_OMIT_NEEDLE)).toBe(true);\n    }\n  });\n});\n\ndescribe('parseArguments unhappy paths (invalid args combinators: breaking dependencies)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should throw, given conflicting args (both any pages option & no i18n option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.PAGES_FOLDER, VALID_PAGES_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_BLOG, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(BREAKING_DEP_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any blog option & no i18n option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_PAGES, FLAGS.NO_LP\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(BREAKING_DEP_NEEDLE)).toBe(true);\n    }\n  });\n\n  it('should throw, given conflicting args (both any lp option & no i18n option)', async () => {\n    expect.assertions(2);\n\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.LANDING_PAGES_FOLDER, VALID_LP_FOLDER,\n      FLAGS.NO_I18N, FLAGS.NO_BLOG, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).rejects.toThrowError(ArgumentsValidatorError);\n\n    try {\n      await parseArguments();\n    } catch (e) {\n      const interceptedError = e as Error;\n      expect(interceptedError.message.toLowerCase().includes(BREAKING_DEP_NEEDLE)).toBe(true);\n    }\n  });\n});\n\ndescribe('parseArguments vacuous path (disabling all tools)', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should pass, disabling all tools', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.NO_BLOG, FLAGS.NO_I18N, FLAGS.NO_LP, FLAGS.NO_PAGES\n    ]);\n\n    await expect(parseArguments()).resolves.not.toThrowError(ArgumentsValidatorError);\n  });\n});\n\ndescribe('parseArguments language support', () => {\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should fallback on default language, given unknown locale', async () => {\n    vi.spyOn(console, 'warn').mockImplementationOnce(vi.fn(() => {}));\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES,\n      FLAGS.LANG, '__UNKNOWN_LANG__'\n    ]);\n\n    await parseArguments();\n    expect(getCurrentLocale()).toBe(DEFAULT_LOCALE);\n  });\n\n  it('should set the language to default locale, given defaut locale', async () => {\n    const argvSpy = vi.spyOn(process, 'argv', 'get');\n    // prettier-ignore\n    argvSpy.mockReturnValue([\n      '_', '_',\n      FLAGS.BLOG_POSTS_FOLDER, VALID_BLOG_POSTS_FOLDER,\n      FLAGS.I18N_LOCALES_SCHEMA_FILEPATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH,\n      FLAGS.NO_LP, FLAGS.NO_PAGES,\n      FLAGS.LANG, DEFAULT_LOCALE\n    ]);\n\n    await parseArguments();\n    expect(getCurrentLocale()).toBe(DEFAULT_LOCALE);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.testing_ctx.test.ts": {
      "tests": [
        {
          "id": "25",
          "name": "getPostStrict (happy paths) should always return a valid post"
        },
        {
          "id": "26",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict (happy paths) should return 5 posts, given the fake language 'posts'"
        },
        {
          "id": "27",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict (happy paths) should return 4 posts, with the default language"
        },
        {
          "id": "28",
          "name": "isValidBlogCategoryAndSubcategoryPair should be true for valid combinations"
        },
        {
          "id": "29",
          "name": "isValidBlogCategoryAndSubcategoryPair should be false for invalid combinations, given invalid category"
        },
        {
          "id": "30",
          "name": "isValidBlogCategoryAndSubcategoryPair should be false for invalid combinations, given invalid subcategory"
        },
        {
          "id": "31",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths) should return empty list, given invalid combination"
        },
        {
          "id": "32",
          "name": "getBlogPostPathWithoutI18nPart (happy paths) should return the path without its language part"
        },
        {
          "id": "33",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return true, given a valid combination"
        },
        {
          "id": "34",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return false, given an invalid category"
        },
        {
          "id": "35",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return false, given an invalid subcategory"
        },
        {
          "id": "36",
          "name": "getSlicedBlogPostDescription should slice description, given a too long description"
        },
        {
          "id": "37",
          "name": "getSlicedBlogPostDescription should not slice description, given a description that doesn't exceed the limit"
        },
        {
          "id": "38",
          "name": "getAllBlogPostsByCategoryAndLanguage (happy paths) should pass"
        },
        {
          "id": "39",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (happy paths) should pass"
        }
      ],
      "source": "import type { TBlogFakeLanguage } from '𝕍/testingBlogCategoryDatas';\nimport type { TBlogPost } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { INDEX_TOKEN } from '##/lib/misc/contentlayerCornerCases';\nimport { describe, expect, it, vi } from 'vitest';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport ROUTES_ROOTS from '##/config/routes';\nimport BlogConfig from '@/config/blog';\n\nimport {\n  getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict,\n  getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict,\n  isValidBlogCategoryAndSubcategoryPairInAnyLanguage,\n  isValidBlogCategoryAndSubcategoryPair,\n  getAllBlogPostsByCategoryAndLanguage,\n  getBlogPostPathWithoutI18nPart,\n  getSlicedBlogPostDescription,\n  getBlogPostStrict\n} from '../api';\n\nvi.mock('../ctx', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../ctx')>();\n\n  return {\n    default: {\n      ...mod.default,\n      TESTING: true\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('getPostStrict (happy paths)', () => {\n  it('should always return a valid post', async () => {\n    const [category, subcategory, targettedSlug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const language = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict(category, subcategory, language, targettedSlug)) as TBlogPost;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(targettedSlug);\n    expect(post.language).toBe(language);\n    expect(post.url).toBe('/' + language + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${targettedSlug}`);\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict (happy paths)', () => {\n  it(\"should return 5 posts, given the fake language 'posts'\", async () => {\n    const postsCollection = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'posts' satisfies TBlogFakeLanguage\n    );\n    expect(postsCollection.length).toBe(5);\n  });\n\n  it('should return 4 posts, with the default language', async () => {\n    const postsCollection = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageStrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      DEFAULT_LANGUAGE\n    );\n\n    expect(postsCollection.length).toBe(4);\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPair', () => {\n  it('should be true for valid combinations', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' satisfies TBlogFakeLanguage as any\n    );\n    expect(isValid).toBe(true);\n  });\n\n  it('should be false for invalid combinations, given invalid category', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      // @ts-expect-error\n      '__INVALID_CATEGORY__',\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' satisfies TBlogFakeLanguage\n    );\n    expect(isValid).toBe(false);\n  });\n\n  it('should be false for invalid combinations, given invalid subcategory', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      BlogConfig.TESTING_CATEGORY,\n      // @ts-expect-error\n      '__INVALID_SUBCATEGORY__',\n      'drafts' satisfies TBlogFakeLanguage\n    );\n    expect(isValid).toBe(false);\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths)', () => {\n  it('should return empty list, given invalid combination', async () => {\n    const posts = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n      BlogConfig.TESTING_CATEGORY,\n      // @ts-expect-error\n      '__INVALID_SUBCATEGORY__',\n      DEFAULT_LANGUAGE\n    );\n    expect(posts).toStrictEqual([]);\n  });\n});\n\ndescribe('getBlogPostPathWithoutI18nPart (happy paths)', () => {\n  it('should return the path without its language part', async () => {\n    const [category, subcategory, language, targettedSlug] = [\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'posts' as const satisfies TBlogFakeLanguage,\n      'fake-post-03' as const\n    ];\n\n    const post = (await getBlogPostStrict(category, subcategory, language, targettedSlug)) as TBlogPost;\n    const blogPostWithoutI18nPart = getBlogPostPathWithoutI18nPart(post);\n\n    expect(blogPostWithoutI18nPart).toBe(ROUTES_ROOTS.BLOG + [category, subcategory, targettedSlug].join('/'));\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPairInAnyLanguage', () => {\n  it('should return true, given a valid combination', async () => {\n    const [category, subcategory] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY];\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(category, subcategory);\n\n    expect(isValid).toBe(true);\n  });\n\n  it('should return false, given an invalid category', async () => {\n    // @ts-expect-error\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage('__INVALID_CATEGORY__', TESTING_BLOG_FAKE_SUBCATEGORY);\n\n    expect(isValid).toBe(false);\n  });\n\n  it('should return false, given an invalid subcategory', async () => {\n    // @ts-expect-error\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage(BlogConfig.TESTING_CATEGORY, '__INVALID_SUBCATEGORY__');\n\n    expect(isValid).toBe(false);\n  });\n});\n\ndescribe('getSlicedBlogPostDescription', () => {\n  it('should slice description, given a too long description', () => {\n    const description = '$'.repeat(BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT + 1);\n    const slicedDescription = getSlicedBlogPostDescription(description);\n    expect(slicedDescription.length).toBe(BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT);\n  });\n\n  it(\"should not slice description, given a description that doesn't exceed the limit\", () => {\n    const description = '$'.repeat(BlogConfig.BLOG_POST_PREVIEW_DESCRIPTION_CHARACTERS_LIMIT - 1);\n    const slicedDescription = getSlicedBlogPostDescription(description);\n    expect(description).toStrictEqual(slicedDescription);\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndLanguage (happy paths)', () => {\n  it('should pass', async () => {\n    const posts = (await getAllBlogPostsByCategoryAndLanguage(\n      BlogConfig.TESTING_CATEGORY,\n      'drafts' as const satisfies TBlogFakeLanguage as any\n    )) as TBlogPost[];\n\n    expect(posts.length).toBe(3);\n\n    expect(posts[0].draft).toBe(true);\n    expect(posts[0].metadescription).toBe('FAKE');\n    expect(posts[0].description).toBe('FAKE');\n    expect(posts[0].title).toBe('FAKE');\n    expect(posts[0]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-01.mdx`);\n    expect(posts[0]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-01.mdx`);\n    expect(posts[0]._raw.sourceFileName).toBe('fake-draft-01.mdx');\n    expect(posts[0]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts`);\n    expect(posts[0]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-01`);\n    expect(posts[0].subcategory).toBe('fake-subcategory');\n    expect(posts[0].language).toBe('drafts');\n    expect(posts[0].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[0].slug).toBe('fake-draft-01');\n    expect(posts[0].url).toBe('/drafts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-draft-01`);\n\n    expect(posts[1].draft).toBe(true);\n    expect(posts[1].metadescription).toBe('FAKE');\n    expect(posts[1].description).toBe('FAKE');\n    expect(posts[1].title).toBe('FAKE');\n    expect(posts[1]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-02.mdx`);\n    expect(posts[1]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-02.mdx`);\n    expect(posts[1]._raw.sourceFileName).toBe('fake-draft-02.mdx');\n    expect(posts[1]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts`);\n    expect(posts[1]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-02`);\n    expect(posts[1].subcategory).toBe('fake-subcategory');\n    expect(posts[1].language).toBe('drafts');\n    expect(posts[1].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[1].slug).toBe('fake-draft-02');\n    expect(posts[1].url).toBe('/drafts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-draft-02`);\n\n    expect(posts[2].draft).toBe(true);\n    expect(posts[2].metadescription).toBe('FAKE');\n    expect(posts[2].description).toBe('FAKE');\n    expect(posts[2].title).toBe('FAKE');\n    expect(posts[2]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-03.mdx`);\n    expect(posts[2]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-03.mdx`);\n    expect(posts[2]._raw.sourceFileName).toBe('fake-draft-03.mdx');\n    expect(posts[2]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts`);\n    expect(posts[2]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/drafts/fake-draft-03`);\n    expect(posts[2].subcategory).toBe('fake-subcategory');\n    expect(posts[2].language).toBe('drafts');\n    expect(posts[2].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[2].slug).toBe('fake-draft-03');\n    expect(posts[2].url).toBe('/drafts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-draft-03`);\n  });\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (happy paths)', () => {\n  it('should pass', async () => {\n    const posts = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'posts' as const satisfies TBlogFakeLanguage as any\n    );\n\n    expect(posts.length).toBe(5);\n\n    expect(posts[0].draft).toBe(false);\n    expect(posts[0].metadescription).toBe('FAKE');\n    expect(posts[0].description).toBe('FAKE');\n    expect(posts[0].title).toBe('FAKE');\n    expect(posts[0]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-01.mdx`);\n    expect(posts[0]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-01.mdx`);\n    expect(posts[0]._raw.sourceFileName).toBe('fake-post-01.mdx');\n    expect(posts[0]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[0]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-01`);\n    expect(posts[0].subcategory).toBe('fake-subcategory');\n    expect(posts[0].language).toBe('posts');\n    expect(posts[0].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[0].slug).toBe('fake-post-01');\n    expect(posts[0].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-01`);\n\n    expect(posts[1].draft).toBe(false);\n    expect(posts[1].metadescription).toBe('FAKE');\n    expect(posts[1].description).toBe('FAKE');\n    expect(posts[1].title).toBe('FAKE');\n    expect(posts[1]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-02.mdx`);\n    expect(posts[1]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-02.mdx`);\n    expect(posts[1]._raw.sourceFileName).toBe('fake-post-02.mdx');\n    expect(posts[1]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[1]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-02`);\n    expect(posts[1].subcategory).toBe('fake-subcategory');\n    expect(posts[1].language).toBe('posts');\n    expect(posts[1].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[1].slug).toBe('fake-post-02');\n    expect(posts[1].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-02`);\n\n    expect(posts[2].draft).toBe(false);\n    expect(posts[2].metadescription).toBe('FAKE');\n    expect(posts[2].description).toBe('FAKE');\n    expect(posts[2].title).toBe('FAKE');\n    expect(posts[2]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-03.mdx`);\n    expect(posts[2]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-03.mdx`);\n    expect(posts[2]._raw.sourceFileName).toBe('fake-post-03.mdx');\n    expect(posts[2]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[2]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-03`);\n    expect(posts[2].subcategory).toBe('fake-subcategory');\n    expect(posts[2].language).toBe('posts');\n    expect(posts[2].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[2].slug).toBe('fake-post-03');\n    expect(posts[2].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-03`);\n\n    expect(posts[3].draft).toBe(false);\n    expect(posts[3].metadescription).toBe('FAKE');\n    expect(posts[3].description).toBe('FAKE');\n    expect(posts[3].title).toBe('FAKE');\n    expect(posts[3]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-04.mdx`);\n    expect(posts[3]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-04.mdx`);\n    expect(posts[3]._raw.sourceFileName).toBe('fake-post-04.mdx');\n    expect(posts[3]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[3]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/fake-post-04`);\n    expect(posts[3].subcategory).toBe('fake-subcategory');\n    expect(posts[3].language).toBe('posts');\n    expect(posts[3].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[3].slug).toBe('fake-post-04');\n    expect(posts[3].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/fake-post-04`);\n\n    expect(posts[4].draft).toBe(false);\n    expect(posts[4].metadescription).toBe('FAKE');\n    expect(posts[4].description).toBe('FAKE');\n    expect(posts[4].title).toBe('FAKE');\n    expect(posts[4]._id).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/${INDEX_TOKEN}.mdx`);\n    expect(posts[4]._raw.sourceFilePath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts/${INDEX_TOKEN}.mdx`);\n    expect(posts[4]._raw.sourceFileName).toBe(`${INDEX_TOKEN}.mdx`);\n    expect(posts[4]._raw.sourceFileDir).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[4]._raw.flattenedPath).toBe(`blog/${BlogConfig.TESTING_CATEGORY}/fake-subcategory/posts`);\n    expect(posts[4].subcategory).toBe('fake-subcategory');\n    expect(posts[4].language).toBe('posts');\n    expect(posts[4].category).toBe(BlogConfig.TESTING_CATEGORY);\n    expect(posts[4].slug).toBe(`${INDEX_TOKEN}`);\n    expect(posts[4].url).toBe('/posts' + ROUTES_ROOTS.BLOG + `${BlogConfig.TESTING_CATEGORY}/fake-subcategory/${INDEX_TOKEN}`);\n  });\n});\n\nvi.doUnmock('../ctx');\n"
    },
    "packages/prebuilder/src/generators/blog/__tests__/prebuild.i18nBlogCategories.test.ts": {
      "tests": [
        {
          "id": "40",
          "name": "generateI18nBlogCategories (formatted) should match snapshot"
        },
        {
          "id": "41",
          "name": "generateI18nBlogCategories (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport generateI18nBlogCategories from '../i18nBlogCategories';\n\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/blog/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'I18N_BLOG_CATEGORIES';\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN: string[] = ['_title', '_meta-description'];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN: string[] = ['title', 'meta-description'];\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE: string[] = ['_fake'];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE: string[] = ['fake'];\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE: string[] = ['_title', '_meta-description', '_fake'];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE: string[] = ['title', 'meta-description', 'fake'];\n\nconst __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY: string[] = [];\nconst __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY: string[] = [];\n\nconst EMPTY_METADATAS = {};\n\nconst FAKE_METADATAS_A = {\n  'fake-category-one': {\n    'fake-subcategory-one': {\n      DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n      en: ['fake-post-01', 'fake-post-03'],\n      it: ['fake-post-01', 'fake-post-02'],\n      fr: ['fake-post-01']\n    },\n    'fake-subcategory-three': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-01'], zh: ['fake-post-02'] },\n    'fake-subcategory-two': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], fr: ['fake-post-02'] }\n  },\n  'fake-category-three': {\n    'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n    'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n  },\n  'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } }\n};\n\nconst FAKE_METADATAS_B = {\n  'fake-category-one': {\n    'fake-subcategory-one': {\n      DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n      en: ['fake-post-01', 'fake-post-03'],\n      it: ['fake-post-01', 'fake-post-02'],\n      fr: ['fake-post-01']\n    },\n    'fake-subcategory-three': {\n      DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n      es: ['fake-post-01'],\n      zh: ['fake-post-02']\n    },\n    'fake-subcategory-two': { fr: ['fake-post-02'] }\n  },\n  'fake-category-three': {\n    'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n    'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n  },\n  'fake-empty-subcategories-nested-in-category': {\n    'fake-subcategory-seven': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] },\n    'fake-empty-subcategory': {}\n  },\n  'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } },\n  'fake-empty-category': {}\n};\n\ndescribe('generateI18nBlogCategories (formatted)', () => {\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_CATEGORIES_MIN';\n\n    await generateI18nBlogCategories(\n      EMPTY_METADATAS,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONES_EXTRAS_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONES_EXTRAS_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREES_EXTRAS_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREES_EXTRAS_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateI18nBlogCategories (ugly)', () => {\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_CATEGORIES_MIN';\n\n    await generateI18nBlogCategories(\n      EMPTY_METADATAS,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_MIN_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_MIN,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_MIN\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_EMPTY_EXTRAS_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_EMPTY\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONES_EXTRAS_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_ONES_EXTRAS_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_ONE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_ONE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREES_EXTRAS_FAKE_METADATAS_A';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_A,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_NOT_EMPTY_BLOG_CATEGORIES_USING_THREES_EXTRAS_FAKE_METADATAS_B';\n\n    await generateI18nBlogCategories(\n      FAKE_METADATAS_B,\n      pretty,\n      targetFile,\n      __TARGET_FOLDER,\n      __PREFIXED_I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS_THREE,\n      __I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS_THREE\n    );\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "src/config/Auth/__tests__/prebuild.authOptions.test.ts": {
      "tests": [
        {
          "id": "42",
          "name": "getDiscordProfilePicture (rate limited) should cache a fallback ImageURL, given unhappy path (all is valid, but we got rate limited and empty cache)"
        },
        {
          "id": "43",
          "name": "getDiscordProfilePicture (rate limited) should return the cached ImageURL as fallback, given unhappy path (all is valid, but we got rate limited)"
        },
        {
          "id": "44",
          "name": "getDiscordProfilePicture should return a PNG Discord avatar URL, given a plain avatar/id couple"
        },
        {
          "id": "45",
          "name": "getDiscordProfilePicture should return a GIF Discord avatar URL, given an avatar field starting with \"a_\""
        },
        {
          "id": "46",
          "name": "getDiscordProfilePicture should return null, given empty avatar field"
        },
        {
          "id": "47",
          "name": "getDiscordProfilePicture should return null, given empty id field"
        },
        {
          "id": "48",
          "name": "getDiscordProfilePicture should return null, given both empty id and avatar fields"
        },
        {
          "id": "49",
          "name": "Caching test should cache the ImageURL, given happy path"
        },
        {
          "id": "50",
          "name": "Caching test should return session as is, given unhappy path (undefined DISCORD_BOT_TOKEN)"
        },
        {
          "id": "51",
          "name": "Caching test should return session as is, given unhappy path (undefined sub)"
        },
        {
          "id": "52",
          "name": "Caching test should return session as is, given unhappy path (failed to get imageURL)"
        }
      ],
      "source": "import type { IDiscordApi } from '@/meta/discordapi';\n\nimport { beforeEach, afterEach, describe, expect, it, vi } from 'vitest';\nimport bentocache, { keysFactory } from '@/config/bentocache';\nimport discordApi from '@/meta/discordapi';\n\nimport { getDiscordProfilePicture, getSession } from '../authOptions';\n\ndescribe('getDiscordProfilePicture (rate limited)', () => {\n  beforeEach(() => {\n    global.fetch = vi.fn().mockImplementation(() => {\n      throw new Error('Rate limit');\n    });\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n    bentocache.clearAll();\n  });\n\n  it('should cache a fallback ImageURL, given unhappy path (all is valid, but we got rate limited and empty cache)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = discordApi;\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = await bentocache.get(keysFactory.discordProfilePicture(FAKE_ID));\n    const fallbackAvatarRegex = /^https:\\/\\/cdn\\.discordapp\\.com\\/embed\\/avatars\\/[0-5]\\.png$/;\n\n    expect(cachedURL).toMatch(fallbackAvatarRegex);\n    expect(gotSession).toStrictEqual({\n      user: { ...session.user, image: gotSession?.user?.image },\n      expires: session.expires\n    });\n  });\n\n  it('should return the cached ImageURL as fallback, given unhappy path (all is valid, but we got rate limited)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n    bentocache.set(keysFactory.discordProfilePicture('FAKE_ID'), 'FAKE_URL');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = discordApi;\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = await bentocache.get(keysFactory.discordProfilePicture(FAKE_ID));\n\n    expect(cachedURL).toBe('FAKE_URL');\n    expect(gotSession).toStrictEqual({\n      user: { ...session.user, image: gotSession?.user?.image },\n      expires: session.expires\n    });\n  });\n});\n\ndescribe('getDiscordProfilePicture', () => {\n  it('should return a PNG Discord avatar URL, given a plain avatar/id couple', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: 'FAKE_AVATAR',\n          id: 'FAKE_ID'\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe('https://cdn.discordapp.com/avatars/FAKE_ID/FAKE_AVATAR.png');\n  });\n\n  it('should return a GIF Discord avatar URL, given an avatar field starting with \"a_\"', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: 'FAKE_ID'\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe('https://cdn.discordapp.com/avatars/FAKE_ID/a_FAKE_AVATAR.gif');\n  });\n\n  it('should return null, given empty avatar field', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          id: 'FAKE_ID',\n          avatar: ''\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe(null);\n  });\n\n  it('should return null, given empty id field', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: 'FAKE_AVATAR',\n          id: ''\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe(null);\n  });\n\n  it('should return null, given both empty id and avatar fields', async () => {\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: '',\n          id: ''\n        };\n      }\n    };\n    const profilePicture = await getDiscordProfilePicture('FAKE_ID', fakeDiscordApi);\n    expect(profilePicture).toBe(null);\n  });\n});\n\ndescribe('Caching test', () => {\n  beforeEach(() => {\n    vi.unstubAllEnvs();\n    bentocache.clearAll();\n    vi.resetModules();\n  });\n\n  it('should cache the ImageURL, given happy path', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: FAKE_ID\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = await bentocache.get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe('https://cdn.discordapp.com/avatars/FAKE_ID/a_FAKE_AVATAR.gif');\n    expect(gotSession).toStrictEqual({\n      user: { ...session.user, image: gotSession?.user?.image },\n      expires: session.expires\n    });\n  });\n\n  it('should return session as is, given unhappy path (undefined DISCORD_BOT_TOKEN)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', '');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: FAKE_ID\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        sub: FAKE_ID,\n        name: 'foo'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = await bentocache.get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe(undefined);\n    expect(gotSession).toStrictEqual(session);\n  });\n\n  it('should return session as is, given unhappy path (undefined sub)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: 'a_FAKE_AVATAR',\n          id: FAKE_ID\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        name: 'foo',\n        sub: ''\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = await bentocache.get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe(undefined);\n    expect(gotSession).toStrictEqual(session);\n  });\n\n  it('should return session as is, given unhappy path (failed to get imageURL)', async () => {\n    vi.stubEnv('DISCORD_BOT_TOKEN', 'FAKE');\n\n    const FAKE_ID = 'FAKE_ID';\n    const fakeDiscordApi: IDiscordApi = {\n      getFreshProfile: async () => {\n        return {\n          avatar: '',\n          id: ''\n        };\n      }\n    };\n\n    const session = {\n      user: {\n        email: 'foo@bar.baz',\n        name: 'foo'\n      },\n      expires: new Date().toString()\n    };\n\n    const gotSession = await getSession(\n      session,\n      {\n        email: 'foo@bar.baz',\n        name: 'foo',\n        sub: 'FAKE'\n      },\n      fakeDiscordApi\n    );\n\n    const cachedURL = await bentocache.get(keysFactory.discordProfilePicture(FAKE_ID));\n    expect(cachedURL).toBe(undefined);\n    expect(gotSession).toStrictEqual(session);\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/pages/__tests__/prebuild.pagesType.test.ts": {
      "tests": [
        {
          "id": "53",
          "name": "Hard-coded values safety check should not be stale"
        },
        {
          "id": "54",
          "name": "generatePagesType (formatted) should match snapshot"
        },
        {
          "id": "55",
          "name": "generatePagesType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport type { Page } from '../../../types/Metadatas';\n\nimport generatePagesType, { HARDCODED_FALLBACK_TYPE_FIELDS } from '../pagesType';\n\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/pages/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'PAGES_TYPE';\n\ndescribe('Hard-coded values safety check', () => {\n  it('should not be stale', () => {\n    function isStale(fields: (keyof Page)[]) {\n      for (const field of fields) {\n        if (!HARDCODED_FALLBACK_TYPE_FIELDS.has(field)) {\n          const expectedFields = fields.sort().join(', ');\n          const gotFields = Array.from(HARDCODED_FALLBACK_TYPE_FIELDS).sort().join(', ');\n          console.warn('stale:', { expectedFields, gotFields });\n          return true;\n        }\n      }\n      return false;\n    }\n\n    const fakePage: Page = {\n      nestingLevelTwo: 'FAKE',\n      pathWithoutHead: 'FAKE',\n      head: 'FAKE',\n      path: 'FAKE',\n      tail: 'FAKE',\n      url: 'FAKE'\n    };\n    const fields = Object.keys(fakePage) as (keyof Page)[];\n\n    expect(isStale(fields)).toBe(false);\n  });\n});\n\ndescribe('generatePagesType (formatted)', () => {\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_PAGES_TYPE';\n    await generatePagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TYPE';\n    await generatePagesType(\n      {\n        'nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-2/page-00',\n            path: 'nesting-1/nesting-2/page-00',\n            url: '/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'nesting-2/page-01',\n            path: 'nesting-1/nesting-2/page-01',\n            url: '/nesting-1/nesting-2/page-01',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        'nesting-1': [\n          {\n            pathWithoutHead: 'page-00',\n            path: 'nesting-1/page-00',\n            url: '/nesting-1/page-00',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            path: 'nesting-1/page-01',\n            url: '/nesting-1/page-01',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        '/': [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'page-00',\n            url: '/page-00',\n            tail: 'page-00',\n            head: '/'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            nestingLevelTwo: '',\n            path: 'page-01',\n            url: '/page-01',\n            tail: 'page-01',\n            head: '/'\n          }\n        ],\n        'en/nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-1/nesting-2/page-00',\n            path: 'en/nesting-1/nesting-2/page-00',\n            url: '/en/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        'en/nesting-1': [\n          {\n            pathWithoutHead: 'nesting-1/page-00',\n            path: 'en/nesting-1/page-00',\n            url: '/en/nesting-1/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        en: [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'en/page-00',\n            url: '/en/page-00',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ]\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generatePagesType (ugly)', () => {\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_PAGES_TYPE';\n    await generatePagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_PAGES_TYPE';\n    await generatePagesType(\n      {\n        'nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-2/page-00',\n            path: 'nesting-1/nesting-2/page-00',\n            url: '/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'nesting-2/page-01',\n            path: 'nesting-1/nesting-2/page-01',\n            url: '/nesting-1/nesting-2/page-01',\n            nestingLevelTwo: 'nesting-2',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        'nesting-1': [\n          {\n            pathWithoutHead: 'page-00',\n            path: 'nesting-1/page-00',\n            url: '/nesting-1/page-00',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-00'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            path: 'nesting-1/page-01',\n            url: '/nesting-1/page-01',\n            nestingLevelTwo: '',\n            head: 'nesting-1',\n            tail: 'page-01'\n          }\n        ],\n        '/': [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'page-00',\n            url: '/page-00',\n            tail: 'page-00',\n            head: '/'\n          },\n          {\n            pathWithoutHead: 'page-01',\n            nestingLevelTwo: '',\n            path: 'page-01',\n            url: '/page-01',\n            tail: 'page-01',\n            head: '/'\n          }\n        ],\n        'en/nesting-1/nesting-2': [\n          {\n            pathWithoutHead: 'nesting-1/nesting-2/page-00',\n            path: 'en/nesting-1/nesting-2/page-00',\n            url: '/en/nesting-1/nesting-2/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        'en/nesting-1': [\n          {\n            pathWithoutHead: 'nesting-1/page-00',\n            path: 'en/nesting-1/page-00',\n            url: '/en/nesting-1/page-00',\n            nestingLevelTwo: 'nesting-1',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ],\n        en: [\n          {\n            pathWithoutHead: 'page-00',\n            nestingLevelTwo: '',\n            path: 'en/page-00',\n            url: '/en/page-00',\n            tail: 'page-00',\n            head: 'en'\n          }\n        ]\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "src/lib/landingPages/static/__tests__/postbuild.getLandingPagesStaticParams.test.ts": {
      "tests": [
        {
          "id": "56",
          "name": "getLandingPagesStaticParams should return static params, according to the allLandingPages mock"
        }
      ],
      "source": "import type { TLpFakeLanguage } from '𝕍/testingBlogCategoryDatas';\n\nimport { TESTING_LP_FAKE_LANGUAGES } from '𝕍/testingBlogCategoryDatas';\nimport LandingPageTaxonomy from '##/config/taxonomies/landingPages';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport getLandingPagesStaticParams from '../getLandingPagesStaticParams';\n\nvi.mock('../../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: TESTING_LP_FAKE_LANGUAGES\n  };\n});\n\nvi.mock('contentlayer/generated', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('contentlayer/generated')>();\n\n  return {\n    ...mod,\n    allLandingPages: [\n      {\n        _raw: {\n          sourceFilePath: 'landing-pages/dummy-category/lp-00.mdx',\n          flattenedPath: 'landing-pages/dummy-category/lp-00',\n          sourceFileDir: 'landing-pages/dummy-category',\n          sourceFileName: 'lp-00.mdx',\n          contentType: 'mdx'\n        },\n        metadescription: 'Meta description LP test (default language)',\n        language: 'default_language' satisfies TLpFakeLanguage,\n        url: '/default_language/lp/dummy-category-lp-00',\n        _id: 'landing-pages/dummy-category/lp-00.mdx',\n        title: 'LP test (default language)',\n        slug: 'dummy-category-lp-00',\n        category: 'dummy-category',\n        type: 'LandingPage',\n        draft: true\n      },\n      {\n        _raw: {\n          sourceFilePath: 'landing-pages/testing/fake-draft-lp-00.mdx',\n          flattenedPath: 'landing-pages/testing/fake-draft-lp-00',\n          sourceFileName: 'fake-draft-lp-00.mdx',\n          sourceFileDir: 'landing-pages/testing',\n          contentType: 'mdx'\n        },\n        language: 'default_language' satisfies TLpFakeLanguage,\n        url: '/default_language/lp/testing-fake-draft-lp-00',\n        _id: 'landing-pages/testing/fake-draft-lp-00.mdx',\n        slug: 'testing-fake-draft-lp-00',\n        metadescription: 'FAKE',\n        type: 'LandingPage',\n        category: 'testing',\n        title: 'FAKE',\n        draft: true\n      },\n      {\n        _raw: {\n          sourceFilePath: 'landing-pages/testing/fake-lp-00.mdx',\n          flattenedPath: 'landing-pages/testing/fake-lp-00',\n          sourceFileDir: 'landing-pages/testing',\n          sourceFileName: 'fake-lp-00.mdx',\n          contentType: 'mdx'\n        },\n        language: 'default_language' satisfies TLpFakeLanguage,\n        url: '/default_language/lp/testing-fake-lp-00',\n        _id: 'landing-pages/testing/fake-lp-00.mdx',\n        slug: 'testing-fake-lp-00',\n        metadescription: 'FAKE',\n        type: 'LandingPage',\n        category: 'testing',\n        title: 'FAKE',\n        draft: false\n      },\n      {\n        _raw: {\n          sourceFilePath: 'landing-pages/dummy-category/en/lp-00.mdx',\n          flattenedPath: 'landing-pages/dummy-category/en/lp-00',\n          sourceFileDir: 'landing-pages/dummy-category/en',\n          sourceFileName: 'lp-00.mdx',\n          contentType: 'mdx'\n        },\n        _id: 'landing-pages/dummy-category/en/lp-00.mdx',\n        metadescription: 'Meta description LP test EN',\n        language: 'en' satisfies TLpFakeLanguage,\n        url: '/en/lp/dummy-category-lp-00',\n        slug: 'dummy-category-lp-00',\n        category: 'dummy-category',\n        title: 'LP test EN',\n        type: 'LandingPage',\n        draft: true\n      },\n      {\n        _raw: {\n          sourceFilePath: 'landing-pages/testing/en/fake-draft-lp-00.mdx',\n          flattenedPath: 'landing-pages/testing/en/fake-draft-lp-00',\n          sourceFileDir: 'landing-pages/testing/en',\n          sourceFileName: 'fake-draft-lp-00.mdx',\n          contentType: 'mdx'\n        },\n        _id: 'landing-pages/testing/en/fake-draft-lp-00.mdx',\n        language: 'en' satisfies TLpFakeLanguage,\n        url: '/en/lp/testing-fake-draft-lp-00',\n        slug: 'testing-fake-draft-lp-00',\n        metadescription: 'FAKE',\n        type: 'LandingPage',\n        category: 'testing',\n        title: 'FAKE',\n        draft: true\n      },\n      {\n        _raw: {\n          sourceFilePath: 'landing-pages/testing/en/fake-lp-00.mdx',\n          flattenedPath: 'landing-pages/testing/en/fake-lp-00',\n          sourceFileDir: 'landing-pages/testing/en',\n          sourceFileName: 'fake-lp-00.mdx',\n          contentType: 'mdx'\n        },\n        _id: 'landing-pages/testing/en/fake-lp-00.mdx',\n        language: 'en' satisfies TLpFakeLanguage,\n        url: '/en/lp/testing-fake-lp-00',\n        slug: 'testing-fake-lp-00',\n        metadescription: 'FAKE',\n        type: 'LandingPage',\n        category: 'testing',\n        title: 'FAKE',\n        draft: false\n      },\n      {\n        _raw: {\n          sourceFilePath: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00.mdx',\n          flattenedPath: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00',\n          sourceFileDir: 'landing-pages/testing/__INVALID_LOCALE__',\n          sourceFileName: 'fake-lp-00.mdx',\n          contentType: 'mdx'\n        },\n        _id: 'landing-pages/testing/__INVALID_LOCALE__/fake-lp-00.mdx',\n        url: '/__INVALID_LOCALE__/lp/testing-fake-lp-00',\n        language: '__INVALID_LOCALE__',\n        slug: 'testing-fake-lp-00',\n        metadescription: 'FAKE',\n        type: 'LandingPage',\n        category: 'testing',\n        title: 'FAKE',\n        draft: false\n      }\n    ]\n  };\n});\n\ndescribe('getLandingPagesStaticParams', () => {\n  it('should return static params, according to the allLandingPages mock', async () => {\n    const staticParams = await getLandingPagesStaticParams();\n\n    expect(staticParams).toStrictEqual([\n      {\n        [I18nTaxonomy.LANGUAGE]: 'default_language' satisfies TLpFakeLanguage,\n        [LandingPageTaxonomy.SLUG]: 'testing-fake-lp-00'\n      },\n      {\n        [I18nTaxonomy.LANGUAGE]: 'en' satisfies TLpFakeLanguage,\n        [LandingPageTaxonomy.SLUG]: 'testing-fake-lp-00'\n      }\n    ]);\n  });\n});\n\nvi.doUnmock('../../../../../interop/config/i18n');\nvi.doUnmock('contentlayer/generated');\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogCategoryGuard.mocked_blog_route_root.test.ts": {
      "tests": [
        {
          "id": "57",
          "name": "blogPostGuard should not throw, given valid input"
        },
        {
          "id": "58",
          "name": "blogPostGuard should throw redirect error, given invalid slug"
        },
        {
          "id": "59",
          "name": "blogPostGuard should throw redirect error, given invalid subcategory"
        },
        {
          "id": "60",
          "name": "blogPostGuard should throw redirect error, given invalid category"
        },
        {
          "id": "61",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid subcategory"
        },
        {
          "id": "62",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid category"
        },
        {
          "id": "63",
          "name": "blogPostGuard should throw redirect error, given invalid slug, invalid category, and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport ROUTES_ROOTS from '##/config/routes';\nimport BlogConfig from '@/config/blog';\n\nimport blogPostGuard from '../blogPostGuard';\n\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\nvi.mock('##/config/routes', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/routes')>();\n\n  return {\n    default: {\n      ...mod.default,\n      BLOG: '/blog/'\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('blogPostGuard', () => {\n  it('should not throw, given valid input', async () => {\n    await expect(\n      blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid slug', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY + '/' + TESTING_BLOG_FAKE_SUBCATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid subcategory', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid category', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid subcategory', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid category', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug, invalid category, and invalid subcategory', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n});\n\nvi.doUnmock('##/config/routes');\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogPostGuard.test.ts": {
      "tests": [
        {
          "id": "64",
          "name": "blogPostGuard should not throw, given valid input"
        },
        {
          "id": "65",
          "name": "blogPostGuard should throw redirect error, given invalid slug"
        },
        {
          "id": "66",
          "name": "blogPostGuard should throw redirect error, given invalid subcategory"
        },
        {
          "id": "67",
          "name": "blogPostGuard should throw redirect error, given invalid category"
        },
        {
          "id": "68",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid subcategory"
        },
        {
          "id": "69",
          "name": "blogPostGuard should throw redirect error, given invalid slug and invalid category"
        },
        {
          "id": "70",
          "name": "blogPostGuard should throw redirect error, given invalid slug, invalid category, and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport { describe, expect, it } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\nimport BlogConfig from '@/config/blog';\n\nimport blogPostGuard from '../blogPostGuard';\n\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\ndescribe('blogPostGuard', () => {\n  it('should not throw, given valid input', async () => {\n    await expect(\n      blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid slug', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY + '/' + TESTING_BLOG_FAKE_SUBCATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid subcategory', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid category', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: 'fake-post-01',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid subcategory', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__'\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug and invalid category', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid slug, invalid category, and invalid subcategory', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogPostGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          [BlogTaxonomy.SLUG]: '__INVALID_SLUG__',\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/blog/__tests__/prebuild.blogType.test.ts": {
      "tests": [
        {
          "id": "71",
          "name": "generateBlogType (formatted) should match snapshot"
        },
        {
          "id": "72",
          "name": "generateBlogType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INDEX_TOKEN } from '##/lib/builders/unifiedImport';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport generateBlogType from '../blogType';\n\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/blog/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'BLOG_TYPE';\n\ndescribe('generateBlogType (formatted)', () => {\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_TYPE';\n    await generateBlogType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_TYPE';\n    await generateBlogType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            en: ['fake-post-01', 'fake-post-03'],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            es: ['fake-post-01', INDEX_TOKEN],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n          'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          'fake-subcategory-seven': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] },\n          'fake-empty-subcategory': {}\n        },\n        'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateBlogType (ugly)', () => {\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_TYPE';\n    await generateBlogType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_TYPE';\n    await generateBlogType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            en: ['fake-post-01', 'fake-post-03', INDEX_TOKEN],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            es: ['fake-post-01'],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            en: ['fake-post-03'],\n            it: ['fake-post-03']\n          },\n          'fake-subcategory-four': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            es: ['fake-post-04', INDEX_TOKEN]\n          }\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          'fake-subcategory-seven': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN],\n            zh: ['fake-post-10', INDEX_TOKEN]\n          },\n          'fake-empty-subcategory': {}\n        },\n        'fake-category-two': {\n          'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03', INDEX_TOKEN], zh: ['fake-post-10'] }\n        },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.getBlogStaticParams.enabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "73",
          "name": "getBlogStaticParams should return static params, including the 'drafts' fake language"
        }
      ],
      "source": "import type { TBlogConfig } from '@/config/blog';\n\nimport { TESTING_BLOG_CATEGORY_FAKE_LANGUAGES, TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { INDEX_TOKEN } from '##/lib/misc/contentlayerCornerCases';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport BlogConfig from '@/config/blog';\n\nimport getBlogStaticParams from '../static/getBlogStaticParams';\n\nvi.mock('##/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/i18n')>();\n\n  return {\n    ...mod,\n    LANGUAGES: [mod.DEFAULT_LANGUAGE, ...TESTING_BLOG_CATEGORY_FAKE_LANGUAGES]\n  };\n});\n\nvi.mock('../api', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../api')>();\n\n  return {\n    ...mod,\n    getAllBlogCategories: () => [BlogConfig.TESTING_CATEGORY]\n  };\n});\n\nvi.mock('@/config/blog', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/blog')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies TBlogConfig\n  };\n});\n\ndescribe('getBlogStaticParams', () => {\n  it(\"should return static params, including the 'drafts' fake language\", async () => {\n    const staticParams = await getBlogStaticParams();\n    expect(staticParams).toStrictEqual([\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-01'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-02'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-03'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-draft-01',\n        [I18nTaxonomy.LANGUAGE]: 'drafts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-draft-02',\n        [I18nTaxonomy.LANGUAGE]: 'drafts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-draft-03',\n        [I18nTaxonomy.LANGUAGE]: 'drafts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-01',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-02',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-03',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-04',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN,\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      }\n    ]);\n  });\n});\n\nvi.doUnmock('##/config/i18n');\nvi.doUnmock('../api');\nvi.doUnmock('@/config/blog');\n"
    },
    "src/lib/__tests__/prebuild.next.test.ts": {
      "tests": [
        {
          "id": "74",
          "name": "getPathParts should return path parts, given path without i18n flag"
        },
        {
          "id": "75",
          "name": "getPathParts should return path parts, given path without i18n flag, not starting with '/'"
        },
        {
          "id": "76",
          "name": "getPathParts should return path parts, given path with an i18n flag"
        },
        {
          "id": "77",
          "name": "stackMiddlewares should always return an instanceof function"
        },
        {
          "id": "78",
          "name": "stackMiddlewares calls each middleware with the correct arguments"
        },
        {
          "id": "79",
          "name": "stackMiddlewares calls middlewares in the correct order"
        },
        {
          "id": "80",
          "name": "stackMiddlewares properly propagates request and event through middlewares"
        },
        {
          "id": "81",
          "name": "stackMiddlewares returns the final response correctly"
        },
        {
          "id": "82",
          "name": "stackMiddlewares handles slow async middleware correctly"
        }
      ],
      "source": "import type { NextFetchEvent, NextMiddleware, NextRequest } from 'next/server';\nimport type { MiddlewareFactory } from '@rtm/shared-types/Next';\n\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { NextResponse } from 'next/server';\n\nimport { stackMiddlewares, getPathParts } from '../next';\n\nconst fakeMiddleware: MiddlewareFactory = (next: NextMiddleware) => {\n  return async (request: NextRequest, _next: NextFetchEvent) => {\n    const res = await next(request, _next);\n    return res;\n  };\n};\n\nconst fakeSlowAsyncMiddleware: MiddlewareFactory = (next: NextMiddleware) => {\n  return async (request: NextRequest, _next: NextFetchEvent) => {\n    const res = await next(request, _next);\n    await new Promise((resolve) => setTimeout(resolve, 10));\n    return res;\n  };\n};\n\nconst fakeRequest = {} as NextRequest;\nconst fakeEvent = {} as NextFetchEvent;\n\ndescribe('getPathParts', () => {\n  it('should return path parts, given path without i18n flag', () => {\n    const pathParts = getPathParts('/_absolutely_not_lang/foo/bar');\n    expect(pathParts).toStrictEqual(['_absolutely_not_lang', 'foo', 'bar']);\n  });\n\n  it(\"should return path parts, given path without i18n flag, not starting with '/'\", () => {\n    const pathParts = getPathParts('_absolutely_not_lang/foo/bar');\n    expect(pathParts).toStrictEqual(['_absolutely_not_lang', 'foo', 'bar']);\n  });\n\n  it('should return path parts, given path with an i18n flag', () => {\n    const pathParts = getPathParts(`/${DEFAULT_LANGUAGE}/foo/bar`);\n    expect(pathParts).toStrictEqual(['foo', 'bar']);\n  });\n});\n\ndescribe('stackMiddlewares', () => {\n  it('should always return an instanceof function', () => {\n    const foo = stackMiddlewares();\n    expect(foo).toBeInstanceOf(Function);\n    const bar = stackMiddlewares([]);\n    expect(bar).toBeInstanceOf(Function);\n    const foo2 = stackMiddlewares([fakeMiddleware]);\n    expect(foo2).toBeInstanceOf(Function);\n    const bar2 = stackMiddlewares([fakeMiddleware, fakeMiddleware]);\n    expect(bar2).toBeInstanceOf(Function);\n  });\n\n  // * ... [ChatGPT] AUTOGENERATED\n\n  it('calls each middleware with the correct arguments', () => {\n    const mockMiddleware1 = vi.fn((next) => next);\n    const mockMiddleware2 = vi.fn((next) => next);\n    const stackedMiddleware = stackMiddlewares([mockMiddleware1, mockMiddleware2]);\n\n    stackedMiddleware(fakeRequest, fakeEvent);\n\n    expect(mockMiddleware1).toHaveBeenCalled();\n    expect(mockMiddleware2).toHaveBeenCalled();\n  });\n\n  it('calls middlewares in the correct order', () => {\n    const order: number[] = [];\n    const middleware1: MiddlewareFactory = (next) => (req, evt) => {\n      order.push(1);\n      next(req, evt);\n    };\n    const middleware2: MiddlewareFactory = (next) => (req, evt) => {\n      order.push(2);\n      next(req, evt);\n    };\n\n    const stackedMiddleware = stackMiddlewares([middleware1, middleware2]);\n    stackedMiddleware(fakeRequest, fakeEvent);\n\n    expect(order).toStrictEqual([1, 2]);\n  });\n\n  it('properly propagates request and event through middlewares', async () => {\n    const middleware1 = vi.fn((next) => (req: any, evt: any) => next(req, evt));\n    const middleware2 = vi.fn((next) => (req: any, evt: any) => next(req, evt));\n\n    const stackedMiddleware = stackMiddlewares([middleware1, middleware2]);\n    await stackedMiddleware(fakeRequest, fakeEvent);\n\n    expect(middleware1).toHaveBeenCalledWith(expect.any(Function));\n    expect(middleware2).toHaveBeenCalledWith(expect.any(Function));\n  });\n\n  it('returns the final response correctly', async () => {\n    const middleware: MiddlewareFactory = (next) => async (req, evt) => next(req, evt);\n    const stackedMiddleware = stackMiddlewares([middleware]);\n    const response = await stackedMiddleware(fakeRequest, fakeEvent);\n\n    expect(response).toBeInstanceOf(NextResponse);\n  });\n\n  it('handles slow async middleware correctly', async () => {\n    const stackedMiddleware = stackMiddlewares([fakeSlowAsyncMiddleware]);\n    const stackedMiddleware2 = stackMiddlewares([fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware]);\n    const stackedMiddleware3 = stackMiddlewares([fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware]);\n\n    await Promise.all([\n      expect(stackedMiddleware(fakeRequest, fakeEvent)).resolves.not.toThrow(),\n      expect(stackedMiddleware2(fakeRequest, fakeEvent)).resolves.not.toThrow(),\n      expect(stackedMiddleware3(fakeRequest, fakeEvent)).resolves.not.toThrow()\n    ]);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.localesInfos.test.ts": {
      "tests": [
        {
          "id": "83",
          "name": "localesInfosValidator should not produce error feedback, given valid inputs"
        },
        {
          "id": "84",
          "name": "localesInfosValidator should throw ENOENT, given invalid localesFolder"
        },
        {
          "id": "85",
          "name": "localesInfosValidator should throw BuilderError, given invalid i18nSchemaFilePath"
        },
        {
          "id": "86",
          "name": "localesInfosValidator should throw, given invalid locales folder (missing locale infos in it.ts)"
        },
        {
          "id": "87",
          "name": "localesInfosValidator should produce an error feedback, given invalid locales folder (invalid locale code)"
        },
        {
          "id": "88",
          "name": "localesInfosValidator should produce an error feedback, given invalid locales folder with several issues (invalid locale code in both invalid_it.ts and invalid_fr.ts)"
        },
        {
          "id": "89",
          "name": "localesInfosValidator should produce error feedback, given one _infos obj has an empty lng field"
        }
      ],
      "source": "// @ts-expect-error\nimport BuilderError from '@rtm/prebuilder/errors/BuilderError';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport localesInfosValidator from '../localesInfos';\n\nconst VALID_LOCALES_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_locales/valid_fake_locales';\nconst VALID_I18N_LOCALES_SCHEMA_FILEPATH = './packages/prebuilder/src/validators/__tests__/fake_locales/valid_fake_locales/schema.ts';\n\nconst INVALID_LOCALES_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH = './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales/schema.ts';\n\nconst INVALID_LOCALES_FOLDER_SEVERAL_LNG_FIELD_MISMATCH =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_several_lng_field_mismatch';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_SEVERAL_LNG_FIELD_MISMATCH =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_several_lng_field_mismatch/schema.ts';\n\nconst INVALID_LOCALES_FOLDER_MISSING_LOCALE_CODE =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_missing_locale_infos';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_MISSING_LOCALE_CODE =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_missing_locale_infos/schema.ts';\n\nconst INVALID_LOCALES_FOLDER_EMPTY_LNG_FIELD = './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_empty_lng_field';\nconst INVALID_I18N_LOCALES_SCHEMA_FILEPATH_EMPTY_LNG_FIELD =\n  './packages/prebuilder/src/validators/__tests__/fake_locales/invalid_fake_locales_empty_lng_field/schema.ts';\n\nconst EMPTY_FEEDBACK = '';\n\ndescribe('localesInfosValidator', () => {\n  it('should not produce error feedback, given valid inputs', async () => {\n    const feedback = await localesInfosValidator(VALID_LOCALES_FOLDER, VALID_I18N_LOCALES_SCHEMA_FILEPATH);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n\n  it('should throw ENOENT, given invalid localesFolder', async () => {\n    expect.assertions(2);\n\n    try {\n      await localesInfosValidator(INVALID_PATH, VALID_I18N_LOCALES_SCHEMA_FILEPATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n\n    try {\n      await localesInfosValidator(INVALID_PATH, INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should throw BuilderError, given invalid i18nSchemaFilePath', async () => {\n    await expect(localesInfosValidator(VALID_LOCALES_FOLDER, INVALID_PATH)).rejects.toThrowError(BuilderError);\n  });\n\n  it('should throw, given invalid locales folder (missing locale infos in it.ts)', async () => {\n    await expect(\n      localesInfosValidator(INVALID_LOCALES_FOLDER_MISSING_LOCALE_CODE, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_MISSING_LOCALE_CODE)\n    ).rejects.toThrowError(BuilderError);\n  });\n\n  it('should produce an error feedback, given invalid locales folder (invalid locale code)', async () => {\n    const feedback = await localesInfosValidator(INVALID_LOCALES_FOLDER, INVALID_I18N_LOCALES_SCHEMA_FILEPATH);\n    expect(feedback).not.toBe(EMPTY_FEEDBACK);\n  });\n\n  it('should produce an error feedback, given invalid locales folder with several issues (invalid locale code in both invalid_it.ts and invalid_fr.ts)', async () => {\n    const feedback = await localesInfosValidator(\n      INVALID_LOCALES_FOLDER_SEVERAL_LNG_FIELD_MISMATCH,\n      INVALID_I18N_LOCALES_SCHEMA_FILEPATH_SEVERAL_LNG_FIELD_MISMATCH\n    );\n    expect(feedback).not.toBe(EMPTY_FEEDBACK);\n  });\n\n  it('should produce error feedback, given one _infos obj has an empty lng field', async () => {\n    const feedback = await localesInfosValidator(INVALID_LOCALES_FOLDER_EMPTY_LNG_FIELD, INVALID_I18N_LOCALES_SCHEMA_FILEPATH_EMPTY_LNG_FIELD);\n    expect(feedback).not.toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.url.test.ts": {
      "tests": [
        {
          "id": "90",
          "name": "blog url (happy paths) should return the correct default language URL, given a valid default language flattened path"
        },
        {
          "id": "91",
          "name": "blog url (happy paths) should return the correct language URL, given a valid flattened path including a language"
        },
        {
          "id": "92",
          "name": "blog url (happy paths, with index notation) should return the correct language URL, given a valid flattened path including a language"
        },
        {
          "id": "93",
          "name": "blog url (unhappy paths) should throw, given invalid flattened paths"
        }
      ],
      "source": "import {\n  ForbiddenToUseIndexError,\n  InvalidArgumentsError,\n  BLOG_POSTS_FOLDER,\n  DEFAULT_LANGUAGE,\n  ROUTES_ROOTS,\n  INDEX_TOKEN\n} from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostUrl from '../url';\n\nconst EXT = '.FAKE_EXT';\n\nconst root = ROUTES_ROOTS.BLOG;\n\ndescribe('blog url (happy paths)', () => {\n  it('should return the correct default language URL, given a valid default language flattened path', () => {\n    const url = '/' + DEFAULT_LANGUAGE + root + 'category/subcategory/slug';\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n  });\n\n  it('should return the correct language URL, given a valid flattened path including a language', () => {\n    const url = '/' + 'fr' + root + 'category/subcategory/slug';\n    const url2 = '/' + 'en' + root + 'category/subcategory/slug';\n    const url3 = '/' + 'it' + root + 'category/subcategory/slug';\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/fr/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/fr/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/en/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/en/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url2);\n\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url3);\n  });\n});\n\ndescribe('blog url (happy paths, with index notation)', () => {\n  it('should return the correct language URL, given a valid flattened path including a language', () => {\n    const url = '/' + 'it' + root + 'category/subcategory/index';\n    expect(\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n  });\n});\n\ndescribe('blog url (unhappy paths)', () => {\n  it('should throw, given invalid flattened paths', () => {\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostUrl({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo/bar' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/it/slug/foo/bar'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.url.test.ts": {
      "tests": [
        {
          "id": "94",
          "name": "lp url (happy paths) should return the correct default language URL, given a valid default language flattened path"
        },
        {
          "id": "95",
          "name": "lp url (happy paths) should return the correct language URL, given a valid flattened path including a language"
        },
        {
          "id": "96",
          "name": "lp url (unhappy paths) should throw, given invalid flattened paths"
        }
      ],
      "source": "import {\n  ForbiddenToUseIndexError,\n  InvalidArgumentsError,\n  LANDING_PAGES_FOLDER,\n  DEFAULT_LANGUAGE,\n  ROUTES_ROOTS,\n  INDEX_TOKEN\n} from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildLandingPageUrl from '../url';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('lp url (happy paths)', () => {\n  const root = ROUTES_ROOTS.LANDING_PAGES;\n  it('should return the correct default language URL, given a valid default language flattened path', () => {\n    const url = '/' + DEFAULT_LANGUAGE + root + 'category-slug';\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n  });\n\n  it('should return the correct language URL, given a valid flattened path including a language', () => {\n    const url = '/' + 'fr' + root + 'category-slug';\n    const url2 = '/' + 'en' + root + 'category-slug';\n    const url3 = '/' + 'it' + root + 'category-slug';\n    const url4 = '/' + 'it' + root + 'index-slug';\n    const url5 = '/' + 'it' + root + 'category-index';\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/fr/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/fr/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/en/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/en/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url2);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/it/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(url3);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/it/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/it/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(url4);\n\n    expect(\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/it/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it'\n        },\n        _id: '_'\n      })\n    ).toBe(url5);\n  });\n});\n\ndescribe('lp url (unhappy paths)', () => {\n  it('should throw, given invalid flattened paths', () => {\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/it/slug/foo' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it/slug/foo'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageUrl({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/it/slug/foo/bar' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/it/slug/foo/bar'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/blog/__tests__/prebuild.blogArchitectureType.test.ts": {
      "tests": [
        {
          "id": "97",
          "name": "generateBlogArchitectureType (formatted) should match snapshot"
        },
        {
          "id": "98",
          "name": "generateBlogArchitectureType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport generateBlogArchitectureType from '../blogArchitectureType';\n\nconst fs = require('fs/promises');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/blog/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'BLOG_ARCHITECTURE_TYPE';\n\ndescribe('generateBlogArchitectureType (formatted)', () => {\n  const pretty = true;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            en: ['fake-post-01', 'fake-post-03'],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            es: ['fake-post-01'],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n          'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n        },\n        'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } }\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateBlogArchitectureType (ugly)', () => {\n  const pretty = false;\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_BLOG_ARCHITECTURE_TYPE';\n    await generateBlogArchitectureType(\n      {\n        'fake-category-one': {\n          'fake-subcategory-one': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            en: ['fake-post-01', 'fake-post-03'],\n            it: ['fake-post-01', 'fake-post-02'],\n            fr: ['fake-post-01']\n          },\n          'fake-subcategory-three': {\n            DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'],\n            es: ['fake-post-01'],\n            zh: ['fake-post-02']\n          },\n          'fake-subcategory-two': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], fr: ['fake-post-02'] }\n        },\n        'fake-category-three': {\n          'fake-subcategory-five': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], en: ['fake-post-03'], it: ['fake-post-03'] },\n          'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], es: ['fake-post-04'] }\n        },\n        'fake-category-two': { 'fake-subcategory-six': { DEFAULT_LANGUAGE: ['fake-post-01', 'fake-post-02', 'fake-post-03'], zh: ['fake-post-10'] } }\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = await fs.readFile(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.language.test.ts": {
      "tests": [
        {
          "id": "99",
          "name": "lp language (happy paths) should be fault tolerant, given an invalid language in the flattenedPath"
        },
        {
          "id": "100",
          "name": "lp language (happy paths) should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "101",
          "name": "lp language (happy paths) should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "102",
          "name": "lp language (happy paths, with index notation) should be fault tolerant, given an invalid language in the flattenedPath"
        },
        {
          "id": "103",
          "name": "lp language (happy paths, with index notation) should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "104",
          "name": "lp language (happy paths, with index notation) should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "105",
          "name": "lp language (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, LANDING_PAGES_FOLDER, DEFAULT_LANGUAGE, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport buildLandingPageLanguageFlag from '../language';\n\nconst EXT = '.FAKE_EXT';\n\nconst PREFIX = '$';\nlet prefixAcc = PREFIX;\nwhile (LANGUAGES.includes((prefixAcc + DEFAULT_LANGUAGE) as any)) prefixAcc += PREFIX;\nconst invalidLanguage = prefixAcc + DEFAULT_LANGUAGE;\n\ndescribe('lp language (happy paths)', () => {\n  it('should be fault tolerant, given an invalid language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/category/slug' + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('lp language (happy paths, with index notation)', () => {\n  it('should be fault tolerant, given an invalid language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${invalidLanguage}`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}/{INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/category/${DEFAULT_LANGUAGE}`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('lp language (unhappy paths)', () => {\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + '/category/lang/slug' + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + '/category/lang/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildLandingPageLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + '/category/slug' + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + '/category/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.getBlogStaticParams.disabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "106",
          "name": "getBlogStaticParams should return static params, excluding the 'drafts' fake language"
        }
      ],
      "source": "import type { TBlogConfig } from '@/config/blog';\n\nimport { TESTING_BLOG_CATEGORY_FAKE_LANGUAGES, TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { INDEX_TOKEN } from '##/lib/misc/contentlayerCornerCases';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport BlogConfig from '@/config/blog';\n\nimport getBlogStaticParams from '../static/getBlogStaticParams';\n\nvi.mock('##/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/i18n')>();\n\n  return {\n    ...mod,\n    LANGUAGES: [mod.DEFAULT_LANGUAGE, ...TESTING_BLOG_CATEGORY_FAKE_LANGUAGES]\n  };\n});\n\nvi.mock('../api', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../api')>();\n\n  return {\n    ...mod,\n    getAllBlogCategories: () => [BlogConfig.TESTING_CATEGORY]\n  };\n});\n\nvi.mock('@/config/blog', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/blog')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies TBlogConfig\n  };\n});\n\ndescribe('getBlogStaticParams', () => {\n  it(\"should return static params, excluding the 'drafts' fake language\", async () => {\n    const staticParams = await getBlogStaticParams();\n    expect(staticParams).toStrictEqual([\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-01'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-02'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: 'fake-post-03'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-01',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-02',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-03',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: 'fake-post-04',\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      },\n      {\n        [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n        [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n        [BlogTaxonomy.SLUG]: INDEX_TOKEN,\n        [I18nTaxonomy.LANGUAGE]: 'posts'\n      }\n    ]);\n  });\n});\n\nvi.doUnmock('##/config/i18n');\nvi.doUnmock('../api');\nvi.doUnmock('@/config/blog');\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.language.test.ts": {
      "tests": [
        {
          "id": "107",
          "name": "blog language (happy paths) should be fault tolerant, given an invalid language in the flattenedPath"
        },
        {
          "id": "108",
          "name": "blog language (happy paths) should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "109",
          "name": "blog language (happy paths) should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "110",
          "name": "blog language (happy paths, with index notation) should handle index corner cases, given a valid default language path using index notation"
        },
        {
          "id": "111",
          "name": "blog language (happy paths, with index notation) should handle index corner cases, given a valid custom language path using index notation"
        },
        {
          "id": "112",
          "name": "blog language (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, BLOG_POSTS_FOLDER, DEFAULT_LANGUAGE, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport buildBlogPostLanguageFlag from '../language';\n\nconst EXT = '.FAKE_EXT';\n\nconst PREFIX = '$';\nlet prefixAcc = PREFIX;\nwhile (LANGUAGES.includes((prefixAcc + DEFAULT_LANGUAGE) as any)) prefixAcc += PREFIX;\nconst invalidLanguage = prefixAcc + DEFAULT_LANGUAGE;\n\ndescribe('blog language (happy paths)', () => {\n  it('should be fault tolerant, given an invalid language in the flattenedPath', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/category/subcategory/slug' + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + '/category/subcategory/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('blog language (happy paths, with index notation)', () => {\n  it('should handle index corner cases, given a valid default language path using index notation', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${INDEX_TOKEN}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should handle index corner cases, given a valid custom language path using index notation', () => {\n    expect(\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}/${INDEX_TOKEN}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${invalidLanguage}`\n        },\n        _id: '_'\n      })\n    ).toBe(invalidLanguage);\n  });\n});\n\ndescribe('blog language (unhappy paths)', () => {\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/lang/slug' + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/lang/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostLanguageFlag({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/slug' + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + '/category/subcategory/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/generators/lp/__tests__/prebuild.lpType.test.ts": {
      "tests": [
        {
          "id": "113",
          "name": "generateLandingPagesType (formatted) should match snapshot"
        },
        {
          "id": "114",
          "name": "generateLandingPagesType (ugly) should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INDEX_TOKEN } from '##/lib/builders/unifiedImport';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport generateLandingPagesType from '../lpType';\n\nconst fs = require('fs');\n\nconst __TARGET_FOLDER_ROOT = './packages/prebuilder/src/generators/lp/__tests__/FAKE_CODEGEN';\nconst __TARGET_FOLDER = __TARGET_FOLDER_ROOT + '/' + 'LP_TYPE';\n\ndescribe('generateLandingPagesType (formatted)', () => {\n  const pretty = true;\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_LP_TYPE';\n    await generateLandingPagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = fs.readFileSync(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_LP_TYPE';\n    await generateLandingPagesType(\n      {\n        'fake-category-one': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'],\n          en: ['fake-lp-01', 'fake-lp-03'],\n          it: ['fake-lp-01', 'fake-lp-02'],\n          fr: ['fake-lp-01']\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'],\n          zh: ['fake-lp-10']\n        },\n        'fake-category-three': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], en: ['fake-lp-03'], it: ['fake-lp-03'] },\n        'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], es: ['fake-lp-04'] },\n        'fake-category-two': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], zh: ['fake-lp-10'] },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = fs.readFileSync(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n\ndescribe('generateLandingPagesType (ugly)', () => {\n  const pretty = false;\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_EMPTY_LP_TYPE';\n    await generateLandingPagesType({}, pretty, targetFile, __TARGET_FOLDER);\n\n    const fileContent = fs.readFileSync(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const targetFile = 'FAKE_LP_TYPE';\n    await generateLandingPagesType(\n      {\n        'fake-category-one': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03', INDEX_TOKEN],\n          it: ['fake-lp-01', 'fake-lp-02', INDEX_TOKEN],\n          en: ['fake-lp-01', 'fake-lp-03'],\n          fr: ['fake-lp-01']\n        },\n        'fake-empty-subcategories-nested-in-category': {\n          DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'],\n          zh: ['fake-lp-10']\n        },\n        'fake-category-three': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], en: ['fake-lp-03'], it: ['fake-lp-03'] },\n        'fake-category-two': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], zh: ['fake-lp-10', INDEX_TOKEN] },\n        'fake-subcategory-four': { DEFAULT_LANGUAGE: ['fake-lp-01', 'fake-lp-02', 'fake-lp-03'], es: ['fake-lp-04'] },\n        'fake-empty-category': {}\n      },\n      pretty,\n      targetFile,\n      __TARGET_FOLDER\n    );\n\n    const fileContent = fs.readFileSync(`${__TARGET_FOLDER}/${targetFile}.ts`, 'utf8');\n    expect(fileContent).toMatchSnapshot();\n  });\n});\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogSubcategoryGuard.mocked_blog_route_root.test.ts": {
      "tests": [
        {
          "id": "115",
          "name": "blogSubcategoryGuard should not throw redirect error, given valid category and subcategory"
        },
        {
          "id": "116",
          "name": "blogSubcategoryGuard should throw redirect error, given invalid category and valid subcategory"
        },
        {
          "id": "117",
          "name": "blogSubcategoryGuard should throw redirect error, given invalid category and subcategory"
        },
        {
          "id": "118",
          "name": "blogSubcategoryGuard should throw redirect error, given valid category and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport ROUTES_ROOTS from '##/config/routes';\nimport BlogConfig from '@/config/blog';\n\nimport blogSubcategoryGuard from '../blogSubcategoryGuard';\n\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\nvi.mock('##/config/routes', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('##/config/routes')>();\n\n  return {\n    default: {\n      ...mod.default,\n      BLOG: '/blog/'\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('blogSubcategoryGuard', () => {\n  it('should not throw redirect error, given valid category and subcategory', async () => {\n    await expect(\n      blogSubcategoryGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid category and valid subcategory', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given invalid category and subcategory', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given valid category and invalid subcategory', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n});\n\nvi.doUnmock('##/config/routes');\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.testing_ctx.test.ts": {
      "tests": [
        {
          "id": "119",
          "name": "getLandingPageByLanguageAndSlugStrict (happy paths) should always return a valid lp"
        },
        {
          "id": "120",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should always return null, given invalid slug"
        },
        {
          "id": "121",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should always return null, given invalid language"
        }
      ],
      "source": "import type { TLpFakeLanguage } from '𝕍/testingBlogCategoryDatas';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport { TESTING_LP_FAKE_LANGUAGES } from '𝕍/testingBlogCategoryDatas';\nimport LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, vi, it } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('../ctx', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../ctx')>();\n\n  return {\n    default: {\n      ...mod.default,\n      TESTING: true\n    }\n  } satisfies typeof mod;\n});\n\nvi.mock('../../../../interop/config/i18n', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../../../../interop/config/i18n')>();\n  return {\n    ...mod,\n    LANGUAGES: TESTING_LP_FAKE_LANGUAGES\n  };\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (happy paths)', () => {\n  it('should always return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict(language, targettedSlug) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n\n  it('should always return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-index` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict(language, targettedSlug) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n\n  it('should always return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-index` as const;\n    const language = 'en' satisfies TLpFakeLanguage;\n    const lp = getLandingPageByLanguageAndSlugStrict(language, targettedSlug) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (unhappy paths)', () => {\n  it('should always return null, given invalid slug', () => {\n    const targettedSlug = '__INVALID__TARGETTED_SLUG__' as const;\n    // @ts-expect-error\n    const lp = getLandingPageByLanguageAndSlugStrict(DEFAULT_LANGUAGE, targettedSlug);\n\n    expect(lp).toBe(null);\n  });\n\n  it('should always return null, given invalid language', () => {\n    const targettedSlug = 'testing-fake-lp-00' as const;\n    // @ts-expect-error\n    const lp = getLandingPageByLanguageAndSlugStrict('__INVALID_LANGUAGE__', targettedSlug);\n\n    expect(lp).toBe(null);\n  });\n});\n\nvi.doUnmock('../ctx');\nvi.doUnmock('../../../../interop/config/i18n');\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysPages.test.ts": {
      "tests": [
        {
          "id": "122",
          "name": "sysPagesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "123",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with an invalid page slug"
        },
        {
          "id": "124",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with several invalid page slugs"
        },
        {
          "id": "125",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with an invalid page nesting"
        },
        {
          "id": "126",
          "name": "sysPagesValidator should produce an error feedback, given a path to a folder with several invalid page nestings"
        },
        {
          "id": "127",
          "name": "sysPagesValidator should not produce any feedback, given a path to a valid lp posts folder"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_NESTINGS_NEEDLE, INVALID_NESTING_NEEDLE, INVALID_SLUGS_NEEDLE, INVALID_SLUG_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysPagesValidator from '../sysPages';\n\nconst VALID_PAGES_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_pages_folders/valid_fake_pages_folder';\n\nconst INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_SLUG =\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_invalid_slug';\nconst INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_SLUGS =\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_several_invalid_slugs';\n\nconst INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_NESTING =\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_invalid_nesting';\nconst INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_NESTINGS =\n  './packages/prebuilder/src/validators/__tests__/fake_pages_folders/invalid_fake_pages_folder_several_invalid_nestings';\n\nconst EMPTY_FEEDBACK = '';\n\ndescribe('sysPagesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await sysPagesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid page slug', async () => {\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_SLUG);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid page slugs', async () => {\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_SLUGS);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n    expect(feedback.toLowerCase().includes(INVALID_SLUGS_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid page nesting', async () => {\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_ONE_INVALID_PAGE_NESTING);\n    expect(feedback.toLowerCase().includes(INVALID_NESTING_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid page nestings', async () => {\n    const { feedback } = await sysPagesValidator(INVALID_PAGES_FOLDER_CONTAINING_SEVERAL_INVALID_PAGE_NESTINGS);\n    expect(feedback.toLowerCase().includes(INVALID_NESTINGS_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid lp posts folder', async () => {\n    const { feedback } = await sysPagesValidator(VALID_PAGES_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.path.test.ts": {
      "tests": [
        {
          "id": "128",
          "name": "path should return a valid path, given a valid input"
        },
        {
          "id": "129",
          "name": "path should return a valid path, given a valid input (with default language root)"
        },
        {
          "id": "130",
          "name": "path should return a valid path, given a valid input with index notation"
        },
        {
          "id": "131",
          "name": "path should return a valid path, given a valid input (with default language root and index notation)"
        },
        {
          "id": "132",
          "name": "path should NOT be fault tolerant"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildPagePath from '../path';\n\ndescribe('path', () => {\n  const leaf = 'leaf';\n  it('should return a valid path, given a valid input', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe(INDEX_TOKEN);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + '/'\n        },\n        _id: '_'\n      })\n    ).toBe(INDEX_TOKEN);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input (with default language root)', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input with index notation', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input (with default language root and index notation)', () => {\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}`\n        },\n        _id: '_'\n      })\n    ).toBe(INDEX_TOKEN);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/${leaf}`);\n\n    expect(\n      buildPagePath({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(`foo/bar/baz/${leaf}`);\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildPagePath({\n        _raw: {\n          flattenedPath: '_' + PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/portable/node/__tests__/prebuild.env.test.ts": {
      "tests": [
        {
          "id": "133",
          "name": "ComputedNodeCtx should have all values to false, except TEST"
        },
        {
          "id": "134",
          "name": "ComputedNodeCtx should have all values to false, except DEV"
        },
        {
          "id": "135",
          "name": "ComputedNodeCtx should have all values to false, except PROD"
        },
        {
          "id": "136",
          "name": "ComputedNodeCtx should fallback on PROD, given an unknown NODE_ENV value"
        },
        {
          "id": "137",
          "name": "ComputedNodeCtx (undefined NODE_ENV) should fallback on PROD, given an undefined NODE_ENV value"
        },
        {
          "id": "138",
          "name": "Post job NODE_ENV value should be reset"
        }
      ],
      "source": "import { beforeEach, afterAll, describe, expect, test, it, vi } from 'vitest';\nimport NODE_ENV from '𝕍/setEnv';\n\nimport type ComputedNodeCtx from '../env';\n\nconst getCtx = async () => (await import('../env')).default as typeof ComputedNodeCtx;\n\nconst NODE_ENV_KEY = 'NODE_ENV';\n\ndescribe('ComputedNodeCtx', () => {\n  beforeEach(() => {\n    vi.resetModules();\n    vi.unstubAllEnvs();\n    vi.spyOn(console, 'warn').mockImplementationOnce(vi.fn(() => {}));\n  });\n\n  afterAll(() => {\n    vi.unstubAllEnvs();\n  });\n\n  it('should have all values to false, except TEST', async () => {\n    const ctx = await getCtx();\n\n    for (const k of Object.keys(ctx)) {\n      const k2 = k as keyof typeof ctx;\n      if (k2 === 'TEST') expect(ctx[k2]).toBe(true);\n      else expect(ctx[k2]).toBe(false);\n    }\n  });\n\n  it('should have all values to false, except DEV', async () => {\n    vi.stubEnv(NODE_ENV_KEY, 'development');\n    const ctx = await getCtx();\n\n    for (const k of Object.keys(ctx)) {\n      const k2 = k as keyof typeof ctx;\n      if (k2 === 'DEV') expect(ctx[k2]).toBe(true);\n      else expect(ctx[k2]).toBe(false);\n    }\n  });\n\n  it('should have all values to false, except PROD', async () => {\n    vi.stubEnv(NODE_ENV_KEY, 'production');\n    const ctx = await getCtx();\n\n    for (const k of Object.keys(ctx)) {\n      const k2 = k as keyof typeof ctx;\n      if (k2 === 'PROD') expect(ctx[k2]).toBe(true);\n      else expect(ctx[k2]).toBe(false);\n    }\n  });\n\n  it('should fallback on PROD, given an unknown NODE_ENV value', async () => {\n    vi.stubEnv(NODE_ENV_KEY, '$');\n    const ctx = await getCtx();\n\n    for (const k of Object.keys(ctx)) {\n      const k2 = k as keyof typeof ctx;\n      if (k2 === 'PROD') expect(ctx[k2]).toBe(true);\n      else expect(ctx[k2]).toBe(false);\n    }\n  });\n});\n\ndescribe('ComputedNodeCtx (undefined NODE_ENV)', () => {\n  const OLD_ENV = process.env;\n\n  beforeEach(() => {\n    vi.resetModules();\n    vi.spyOn(console, 'warn').mockImplementationOnce(vi.fn(() => {}));\n\n    // * ... Workaround: if we only reassign process.env.NODE_ENV or just stub it, the coverage decreases\n    process.env = { ...OLD_ENV };\n  });\n\n  afterAll(() => {\n    process.env = OLD_ENV;\n  });\n\n  it('should fallback on PROD, given an undefined NODE_ENV value', async () => {\n    // @ts-expect-error\n    process.env.NODE_ENV = undefined;\n    const ctx = await getCtx();\n\n    for (const k of Object.keys(ctx)) {\n      const k2 = k as keyof typeof ctx;\n      if (k2 === 'PROD') expect(ctx[k2]).toBe(true);\n      else expect(ctx[k2]).toBe(false);\n    }\n  });\n});\n\ndescribe('Post job', () => {\n  test('NODE_ENV value should be reset', () => expect(process.env.NODE_ENV).toBe(NODE_ENV));\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.slug.test.ts": {
      "tests": [
        {
          "id": "139",
          "name": "lp slug (happy paths) should return a valid slug, given a valid flattenedPath"
        },
        {
          "id": "140",
          "name": "lp slug (happy paths, index notation) should return a valid slug, given a valid flattenedPath"
        },
        {
          "id": "141",
          "name": "lp slug (unhappy paths) should throw, given an invalid flattenedPath"
        },
        {
          "id": "142",
          "name": "lp slug (unhappy paths) should NOT be fault tolerant"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, LANDING_PAGES_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildLandingPageSlug, { buildLandingPageSlugFromLpObj } from '../slug';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('lp slug (happy paths)', () => {\n  const name = 'slug';\n  const category = 'category';\n  const slug = category + '-' + name;\n\n  it('should return a valid slug, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/subcategory/${name}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/subcategory/${name}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n  });\n});\n\ndescribe('lp slug (happy paths, index notation)', () => {\n  it('should return a valid slug, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/subcategory/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${INDEX_TOKEN}/subcategory/slug`\n        },\n        _id: '_'\n      })\n    ).toBe('index-slug');\n\n    expect(\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/category/subcategory/lang/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + '/category/subcategory/lang'\n        },\n        _id: '_'\n      })\n    ).toBe('category-index');\n  });\n});\n\ndescribe('lp slug (unhappy paths)', () => {\n  const name = 'slug';\n  const category = 'category';\n\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildLandingPageSlugFromLpObj({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildLandingPageSlug({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}` + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + `/${category}/subcategory/lang/${name}`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.taxonomyConvention.test.ts": {
      "tests": [
        {
          "id": "143",
          "name": "isValidPageTaxonomy should return false, given invalid taxonomies"
        },
        {
          "id": "144",
          "name": "isValidPageTaxonomy should return true, given valid taxonomies"
        },
        {
          "id": "145",
          "name": "isValidBlogTaxonomy should return false, given invalid taxonomies"
        },
        {
          "id": "146",
          "name": "isValidBlogTaxonomy should return true, given valid taxonomies"
        },
        {
          "id": "147",
          "name": "isValidLpTaxonomy should return false, given invalid taxonomies"
        },
        {
          "id": "148",
          "name": "isValidLpTaxonomy should return true, given valid taxonomies"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport { isValidBlogTaxonomy, isValidPageTaxonomy, isValidLpTaxonomy } from '../taxonomyConvention';\nimport { MAX_BLOG_TAXONOMY_LEN, MAX_PAGE_TAXONOMY_LEN, MAX_LP_TAXONOMY_LEN } from '../../config';\n\ndescribe('isValidPageTaxonomy', () => {\n  it('should return false, given invalid taxonomies', () => {\n    const tooLong = 'w'.repeat(MAX_PAGE_TAXONOMY_LEN + 1);\n\n    expect(isValidPageTaxonomy('_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('0_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('_foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidPageTaxonomy('_foo-bar')).toBe(false);\n    expect(isValidPageTaxonomy('$foo-bar')).toBe(false);\n    expect(isValidPageTaxonomy(tooLong)).toBe(false);\n  });\n\n  it('should return true, given valid taxonomies', () => {\n    expect(isValidPageTaxonomy('foo-bar')).toBe(true);\n    expect(isValidPageTaxonomy('0-foo-bar')).toBe(true);\n  });\n});\n\ndescribe('isValidBlogTaxonomy', () => {\n  it('should return false, given invalid taxonomies', () => {\n    const tooLong = 'w'.repeat(MAX_BLOG_TAXONOMY_LEN + 1);\n\n    expect(isValidBlogTaxonomy('_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('0_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('_foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidBlogTaxonomy('_foo-bar')).toBe(false);\n    expect(isValidBlogTaxonomy('$foo-bar')).toBe(false);\n    expect(isValidBlogTaxonomy(tooLong)).toBe(false);\n  });\n\n  it('should return true, given valid taxonomies', () => {\n    expect(isValidBlogTaxonomy('foo-bar')).toBe(true);\n    expect(isValidBlogTaxonomy('0-foo-bar')).toBe(true);\n  });\n});\n\ndescribe('isValidLpTaxonomy', () => {\n  it('should return false, given invalid taxonomies', () => {\n    const tooLong = 'w'.repeat(MAX_LP_TAXONOMY_LEN + 1);\n\n    expect(isValidLpTaxonomy('_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('0_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('_foo-bar_$!§%&/()=?')).toBe(false);\n    expect(isValidLpTaxonomy('_foo-bar')).toBe(false);\n    expect(isValidLpTaxonomy('$foo-bar')).toBe(false);\n    expect(isValidLpTaxonomy(tooLong)).toBe(false);\n  });\n\n  it('should return true, given valid taxonomies', () => {\n    expect(isValidLpTaxonomy('foo-bar')).toBe(true);\n    expect(isValidLpTaxonomy('0-foo-bar')).toBe(true);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "149",
          "name": "getPostStrict (happy paths) should always return a valid post when picking a non-draft post in an authorized drafts CTX"
        },
        {
          "id": "150",
          "name": "getPostStrict (happy paths) should always return a valid post when picking a draft post in an authorized drafts CTX"
        },
        {
          "id": "151",
          "name": "getBlogPostUnstrict (unhappy paths) should return null, given invalid slug"
        }
      ],
      "source": "import type { TBlogFakeLanguage } from '𝕍/testingBlogCategoryDatas';\nimport type { TBlogConfig } from '@/config/blog';\nimport type { TBlogPost } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\nimport BlogConfig from '@/config/blog';\n\nimport { getBlogPostUnstrict, getBlogPostStrict } from '../api';\n\nvi.mock('@/config/blog', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/blog')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies TBlogConfig\n  };\n});\n\ndescribe('getPostStrict (happy paths)', () => {\n  it('should always return a valid post when picking a non-draft post in an authorized drafts CTX', async () => {\n    const [category, subcategory, targettedSlug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const language = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict(category, subcategory, language, targettedSlug)) as TBlogPost;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(targettedSlug);\n    expect(post.language).toBe(language);\n    expect(post.url).toBe('/' + language + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${targettedSlug}`);\n  });\n\n  it('should always return a valid post when picking a draft post in an authorized drafts CTX', async () => {\n    const [category, subcategory, language, targettedSlug] = [\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' as const satisfies TBlogFakeLanguage,\n      'fake-draft-01' as const\n    ];\n    const post = (await getBlogPostStrict(category, subcategory, language, targettedSlug)) as TBlogPost;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(targettedSlug);\n    expect(post.language).toBe(language);\n    expect(post.url).toBe('/' + language + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${targettedSlug}`);\n  });\n});\n\ndescribe('getBlogPostUnstrict (unhappy paths)', () => {\n  it('should return null, given invalid slug', async () => {\n    const posts = await getBlogPostUnstrict(BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, '__INVALID_SLUG__', DEFAULT_LANGUAGE);\n    expect(posts).toBe(null);\n  });\n});\n\nvi.doUnmock('@/config/blog');\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogSubcategoryGuard.test.ts": {
      "tests": [
        {
          "id": "152",
          "name": "blogSubcategoryGuard should not throw redirect error, given valid category and subcategory"
        },
        {
          "id": "153",
          "name": "blogSubcategoryGuard should throw redirect error, given invalid category and subcategory"
        },
        {
          "id": "154",
          "name": "blogSubcategoryGuard should throw redirect error, given valid category and invalid subcategory"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { indexOfNthOccurrence } from '@/lib/str';\nimport { describe, expect, it } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\nimport BlogConfig from '@/config/blog';\n\nimport blogSubcategoryGuard from '../blogSubcategoryGuard';\n\nconst getUrlFromDigest = (digest: string): string => digest.substring(indexOfNthOccurrence(digest, ';', 2) + 1, indexOfNthOccurrence(digest, ';', 3));\n\ndescribe('blogSubcategoryGuard', () => {\n  it('should not throw redirect error, given valid category and subcategory', async () => {\n    await expect(\n      blogSubcategoryGuard({\n        params: {\n          [BlogTaxonomy.SUBCATEGORY]: TESTING_BLOG_FAKE_SUBCATEGORY,\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw redirect error, given invalid category and subcategory', async () => {\n    expect.assertions(2);\n\n    const category = '__INVALID_CATEGORY__';\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE,\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: category\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe('/' + category);\n    }\n  });\n\n  it('should throw redirect error, given valid category and invalid subcategory', async () => {\n    expect.assertions(2);\n\n    try {\n      await blogSubcategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.SUBCATEGORY]: '__INVALID_SUBCATEGORY__',\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      });\n    } catch (interceptedError) {\n      expect(isRedirectError(interceptedError)).toBe(true);\n      const URLFromDigest = getUrlFromDigest((interceptedError as any).digest);\n      expect(URLFromDigest).toBe(ROUTES_ROOTS.BLOG + BlogConfig.TESTING_CATEGORY);\n    }\n  });\n});\n"
    },
    "interop/lib/builders/landing-pages/computedFields/functions/__tests__/prebuild.category.test.ts": {
      "tests": [
        {
          "id": "155",
          "name": "lp category (happy paths) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "156",
          "name": "lp category (happy paths, with index notation) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "157",
          "name": "lp category (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, LANDING_PAGES_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildLandingPageCategory from '../category';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('lp category (happy paths)', () => {\n  const category = 'category';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/lang/slug` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n  });\n});\n\ndescribe('lp category (happy paths, with index notation)', () => {\n  const category = 'category';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n\n    expect(\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + `/${category}/lang/${INDEX_TOKEN}` + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER + `/${category}/lang`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n  });\n});\n\ndescribe('lp category (unhappy paths)', () => {\n  const category = 'category';\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: LANDING_PAGES_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: LANDING_PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildLandingPageCategory({\n        _raw: {\n          sourceFilePath: '_' + LANDING_PAGES_FOLDER + `/${category}/lang/slug` + EXT,\n          flattenedPath: '_' + LANDING_PAGES_FOLDER + `/${category}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.subcategory.test.ts": {
      "tests": [
        {
          "id": "158",
          "name": "blog subcategory (happy paths) should return the subcategory string part, given a valid flattenedPath"
        },
        {
          "id": "159",
          "name": "blog subcategory (happy paths) should be fault tolerant"
        },
        {
          "id": "160",
          "name": "blog subcategory (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, BLOG_POSTS_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostSubcategory from '../subcategory';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('blog subcategory (happy paths)', () => {\n  const subcategory = 'subcategory';\n  it('should return the subcategory string part, given a valid flattenedPath', () => {\n    expect(\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(subcategory);\n\n    expect(\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(subcategory);\n  });\n\n  it('should be fault tolerant', () => {\n    expect(\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}`\n        },\n        _id: '_'\n      })\n    ).toBe(subcategory);\n  });\n});\n\ndescribe('blog subcategory (unhappy paths)', () => {\n  const subcategory = 'subcategory';\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n\n    expect(() =>\n      buildBlogPostSubcategory({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/category/${subcategory}/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysBlogSubcategories.test.ts": {
      "tests": [
        {
          "id": "161",
          "name": "sysBlogSubcategoriesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "162",
          "name": "sysBlogSubcategoriesValidator should produce an error feedback, given a path to a folder with an invalid blog subcategory"
        },
        {
          "id": "163",
          "name": "sysBlogSubcategoriesValidator should produce an error feedback, given a path to a folder with several invalid blog subcategories"
        },
        {
          "id": "164",
          "name": "sysBlogSubcategoriesValidator should not produce any feedback, given a path to a valid blog posts folder"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_SUBCATEGORIES_NEEDLE, INVALID_SUBCATEGORY_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysBlogSubcategoriesValidator from '../sysBlogSubcategories';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/valid_fake_posts_folder';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SUBCATEGORY =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_invalid_subcategory';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SUBCATEGORIES =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_several_invalid_subcategories';\n\nconst EMPTY_FEEDBACK = '';\n\ndescribe('sysBlogSubcategoriesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await sysBlogSubcategoriesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid blog subcategory', async () => {\n    const feedback = await sysBlogSubcategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SUBCATEGORY);\n    expect(feedback.toLowerCase().includes(INVALID_SUBCATEGORY_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid blog subcategories', async () => {\n    const feedback = await sysBlogSubcategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SUBCATEGORIES);\n    expect(feedback.toLowerCase().includes(INVALID_SUBCATEGORIES_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid blog posts folder', async () => {\n    const feedback = await sysBlogSubcategoriesValidator(VALID_BLOG_POSTS_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysBlogCategories.test.ts": {
      "tests": [
        {
          "id": "165",
          "name": "sysBlogCategoriesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "166",
          "name": "sysBlogCategoriesValidator should produce an error feedback, given a path to a folder with an invalid blog category"
        },
        {
          "id": "167",
          "name": "sysBlogCategoriesValidator should produce an error feedback, given a path to a folder with several invalid blog categories"
        },
        {
          "id": "168",
          "name": "sysBlogCategoriesValidator should not produce any feedback, given a path to a valid blog posts folder"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_CATEGORIES_NEEDLE, INVALID_CATEGORY_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysBlogCategoriesValidator from '../sysBlogCategories';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/valid_fake_posts_folder';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_CATEGORY =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_invalid_category';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_CATEGORIES =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_several_invalid_categories';\n\nconst EMPTY_FEEDBACK = '';\n\ndescribe('sysBlogCategoriesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await sysBlogCategoriesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid blog category', async () => {\n    const feedback = await sysBlogCategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_CATEGORY);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORY_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid blog categories', async () => {\n    const feedback = await sysBlogCategoriesValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_CATEGORIES);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORIES_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid blog posts folder', async () => {\n    const feedback = await sysBlogCategoriesValidator(VALID_BLOG_POSTS_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysBlogSlugs.test.ts": {
      "tests": [
        {
          "id": "169",
          "name": "sysBlogSlugsValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "170",
          "name": "sysBlogSlugsValidator should produce an error feedback, given a path to a folder with an invalid blog slug"
        },
        {
          "id": "171",
          "name": "sysBlogSlugsValidator should produce an error feedback, given a path to a folder with several invalid blog slugs"
        },
        {
          "id": "172",
          "name": "sysBlogSlugsValidator should not produce any feedback, given a path to a valid blog posts folder"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_SLUGS_NEEDLE, INVALID_SLUG_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysBlogSlugsValidator from '../sysBlogSlugs';\n\nconst VALID_BLOG_POSTS_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_posts_folders/valid_fake_posts_folder';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SLUG =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_invalid_blog_slug';\n\nconst INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SLUGS =\n  './packages/prebuilder/src/validators/__tests__/fake_posts_folders/invalid_fake_posts_folder_several_invalid_blog_slugs';\n\nconst EMPTY_FEEDBACK = '';\n\ndescribe('sysBlogSlugsValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await sysBlogSlugsValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid blog slug', async () => {\n    const feedback = await sysBlogSlugsValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_ONE_INVALID_BLOG_SLUG);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid blog slugs', async () => {\n    const feedback = await sysBlogSlugsValidator(INVALID_BLOG_POSTS_FOLDER_CONTAINING_SEVERAL_INVALID_BLOG_SLUGS);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n    expect(feedback.toLowerCase().includes(INVALID_SLUGS_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid blog posts folder', async () => {\n    const feedback = await sysBlogSlugsValidator(VALID_BLOG_POSTS_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.url.test.ts": {
      "tests": [
        {
          "id": "173",
          "name": "url should return a valid url, given a valid input"
        },
        {
          "id": "174",
          "name": "url should return a valid path, given a valid input (with default language root)"
        },
        {
          "id": "175",
          "name": "url should NOT be fault tolerant"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER, ROUTES_ROOTS, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildPageUrl from '../url';\n\ndescribe('url', () => {\n  const leaf = 'leaf';\n  it('should return a valid url, given a valid input', () => {\n    expect(\n      buildPageUrl({\n        _raw: {\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + DEFAULT_LANGUAGE + '/' + INDEX_TOKEN);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + '/'\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + DEFAULT_LANGUAGE + '/' + INDEX_TOKEN);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/${leaf}`);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`);\n  });\n\n  it('should return a valid path, given a valid input (with default language root)', () => {\n    expect(\n      buildPageUrl({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + DEFAULT_LANGUAGE + '/' + INDEX_TOKEN);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/${leaf}`);\n\n    expect(\n      buildPageUrl({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toBe(ROUTES_ROOTS.WEBSITE + `${DEFAULT_LANGUAGE}/foo/bar/baz/${leaf}`);\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildPageUrl({\n        _raw: {\n          flattenedPath: '_' + PAGES_FOLDER + `/foo/bar/baz/${leaf}`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysLpCategories.test.ts": {
      "tests": [
        {
          "id": "176",
          "name": "sysLpCategoriesValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "177",
          "name": "sysLpCategoriesValidator should produce an error feedback, given a path to a folder with an invalid lp category"
        },
        {
          "id": "178",
          "name": "sysLpCategoriesValidator should produce an error feedback, given a path to a folder with several invalid lp categories"
        },
        {
          "id": "179",
          "name": "sysLpCategoriesValidator should not produce any feedback, given a path to a valid lp folder"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_CATEGORIES_NEEDLE, INVALID_CATEGORY_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysLpCategoriesValidator from '../sysLpCategories';\n\nconst VALID_LP_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/valid_fake_lp_folder';\n\nconst INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_CATEGORY =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_invalid_category';\n\nconst INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_CATEGORIES =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_several_invalid_categories';\n\nconst EMPTY_FEEDBACK = '';\n\ndescribe('sysLpCategoriesValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await sysLpCategoriesValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid lp category', async () => {\n    const feedback = await sysLpCategoriesValidator(INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_CATEGORY);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORY_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid lp categories', async () => {\n    const feedback = await sysLpCategoriesValidator(INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_CATEGORIES);\n    expect(feedback.toLowerCase().includes(INVALID_CATEGORIES_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid lp folder', async () => {\n    const feedback = await sysLpCategoriesValidator(VALID_LP_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/validators/__tests__/prebuild.sysLpSlugs.test.ts": {
      "tests": [
        {
          "id": "180",
          "name": "sysLpSlugsValidator should throw ENOENT, given invalid path"
        },
        {
          "id": "181",
          "name": "sysLpSlugsValidator should produce an error feedback, given a path to a folder with an invalid lp slug"
        },
        {
          "id": "182",
          "name": "sysLpSlugsValidator should produce an error feedback, given a path to a folder with several invalid lp slugs"
        },
        {
          "id": "183",
          "name": "sysLpSlugsValidator should not produce any feedback, given a path to a valid lp posts folder"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_SLUGS_NEEDLE, INVALID_SLUG_NEEDLE } from '𝕍/needles';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport sysLpSlugsValidator from '../sysLpSlugs';\n\nconst VALID_LP_FOLDER = './packages/prebuilder/src/validators/__tests__/fake_lp_folders/valid_fake_lp_folder';\n\nconst INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_SLUG =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_invalid_slug';\n\nconst INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_SLUGS =\n  './packages/prebuilder/src/validators/__tests__/fake_lp_folders/invalid_fake_lp_folder_several_invalid_slugs';\n\nconst EMPTY_FEEDBACK = '';\n\ndescribe('sysLpSlugsValidator', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await sysLpSlugsValidator(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should produce an error feedback, given a path to a folder with an invalid lp slug', async () => {\n    const feedback = await sysLpSlugsValidator(INVALID_LP_FOLDER_CONTAINING_ONE_INVALID_LP_SLUG);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n  });\n\n  it('should produce an error feedback, given a path to a folder with several invalid lp slugs', async () => {\n    const feedback = await sysLpSlugsValidator(INVALID_LP_FOLDER_CONTAINING_SEVERAL_INVALID_LP_SLUGS);\n    expect(feedback.toLowerCase().includes(INVALID_SLUG_NEEDLE)).toBe(true);\n    expect(feedback.toLowerCase().includes(INVALID_SLUGS_NEEDLE)).toBe(true);\n  });\n\n  it('should not produce any feedback, given a path to a valid lp posts folder', async () => {\n    const feedback = await sysLpSlugsValidator(VALID_LP_FOLDER);\n    expect(feedback).toBe(EMPTY_FEEDBACK);\n  });\n});\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.getRawDataFromBracesDeclaration.test.ts": {
      "tests": [
        {
          "id": "184",
          "name": "getRawDataFromBracesDeclaration should pass, given any string, with default startIndex which is equal to 0"
        },
        {
          "id": "185",
          "name": "getRawDataFromBracesDeclaration should pass, given any string, with startIndex"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport getRawDataFromBracesDeclaration from '../getRawDataFromBracesDeclaration';\n\nconst OBJ_A = { foo: 'bar' };\nconst OBJ_B = {\n  baz: {\n    foo: 'bar',\n    bar: 'foo'\n  },\n  foo: 'bar',\n  bar: 'foo'\n};\n\nconst OBJ_C = {\n  baz: {\n    foo: 'bar',\n    bar: 'foo'\n  },\n  bar: {\n    foo: 'foo',\n    bar: 'bar'\n  },\n  foo: 'bar'\n};\n\ndescribe('getRawDataFromBracesDeclaration', () => {\n  it('should pass, given any string, with default startIndex which is equal to 0', () => {\n    expect(getRawDataFromBracesDeclaration('test')).toBe(null);\n    expect(getRawDataFromBracesDeclaration('{}')).toBe('');\n    expect(getRawDataFromBracesDeclaration('{{}}')).toBe('{}');\n    expect(getRawDataFromBracesDeclaration(JSON.stringify(OBJ_A))).toBe('\"foo\":\"bar\"');\n    expect(getRawDataFromBracesDeclaration(JSON.stringify(OBJ_B))).toBe('\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"foo\":\"bar\",\"bar\":\"foo\"');\n    expect(getRawDataFromBracesDeclaration(JSON.stringify(OBJ_C))).toBe(\n      '\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"bar\":{\"foo\":\"foo\",\"bar\":\"bar\"},\"foo\":\"bar\"'\n    );\n  });\n\n  it('should pass, given any string, with startIndex', () => {\n    const padding_1 = ' ';\n    const padding_2 = ' '.repeat(2);\n    const padding_3 = ' '.repeat(3);\n    const padding_4 = ' '.repeat(4);\n\n    expect(getRawDataFromBracesDeclaration(padding_1 + '{}', padding_1.length)).toBe('');\n    expect(getRawDataFromBracesDeclaration(padding_2 + '{{}}', padding_2.length)).toBe('{}');\n    expect(getRawDataFromBracesDeclaration(padding_3 + JSON.stringify(OBJ_A), padding_3.length)).toBe('\"foo\":\"bar\"');\n    expect(getRawDataFromBracesDeclaration(padding_4 + JSON.stringify(OBJ_B), padding_4.length)).toBe(\n      '\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"foo\":\"bar\",\"bar\":\"foo\"'\n    );\n    expect(getRawDataFromBracesDeclaration(padding_1 + JSON.stringify(OBJ_C), padding_1.length)).toBe(\n      '\"baz\":{\"foo\":\"bar\",\"bar\":\"foo\"},\"bar\":{\"foo\":\"foo\",\"bar\":\"bar\"},\"foo\":\"bar\"'\n    );\n    expect(getRawDataFromBracesDeclaration(`{foo:{bar: 'baz';}}`, 1)).toBe(\"bar: 'baz';\");\n  });\n});\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.slug.test.ts": {
      "tests": [
        {
          "id": "186",
          "name": "blog slug (happy paths) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "187",
          "name": "blog slug (happy paths) should be fault tolerant"
        },
        {
          "id": "188",
          "name": "blog slug (happy paths, with index notation) should return the correct slug, with index notation"
        },
        {
          "id": "189",
          "name": "blog slug (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, BLOG_POSTS_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostSlug from '../slug';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('blog slug (happy paths)', () => {\n  const slug = 'slug';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/${slug}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/${slug}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n  });\n\n  it('should be fault tolerant', () => {\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang/${slug}`\n        },\n        _id: '_'\n      })\n    ).toBe(slug);\n  });\n});\n\ndescribe('blog slug (happy paths, with index notation)', () => {\n  it('should return the correct slug, with index notation', () => {\n    expect(\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang/${INDEX_TOKEN}` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/category/subcategory/lang`\n        },\n        _id: '_'\n      })\n    ).toBe(INDEX_TOKEN);\n  });\n});\n\ndescribe('blog slug (unhappy paths)', () => {\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostSlug({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "190",
          "name": "getPostStrict (happy paths) should always return a valid post when picking a non-draft post in an unauthorized drafts CTX"
        },
        {
          "id": "191",
          "name": "getPostStrict (unhappy paths) should always return NULL when picking a draft post in an unauthorized drafts CTX"
        }
      ],
      "source": "import type { TBlogFakeLanguage } from '𝕍/testingBlogCategoryDatas';\nimport type { TBlogConfig } from '@/config/blog';\nimport type { TBlogPost } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\nimport BlogConfig from '@/config/blog';\n\nimport { getBlogPostStrict } from '../api';\n\nvi.mock('@/config/blog', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/blog')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies TBlogConfig\n  };\n});\n\ndescribe('getPostStrict (happy paths)', () => {\n  it('should always return a valid post when picking a non-draft post in an unauthorized drafts CTX', async () => {\n    const [category, subcategory, targettedSlug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const language = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict(category, subcategory, language, targettedSlug)) as TBlogPost;\n\n    expect(post.category).toBe(category);\n    expect(post.subcategory).toBe(subcategory);\n    expect(post.slug).toBe(targettedSlug);\n    expect(post.language).toBe(language);\n    expect(post.url).toBe('/' + language + ROUTES_ROOTS.BLOG + `${category}/${subcategory}/${targettedSlug}`);\n  });\n});\n\ndescribe('getPostStrict (unhappy paths)', () => {\n  it('should always return NULL when picking a draft post in an unauthorized drafts CTX', async () => {\n    const [category, subcategory, language, targettedSlug] = [\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      'drafts' as const satisfies TBlogFakeLanguage,\n      'fake-draft-01' as const\n    ];\n    const post = await getBlogPostStrict(category, subcategory, language, targettedSlug);\n\n    expect(post).toBe(null);\n  });\n});\n\nvi.doUnmock('@/config/blog');\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.language.test.ts": {
      "tests": [
        {
          "id": "192",
          "name": "language should be fault tolerant, given an invalid language in the flattenedPath (fallback on default language)"
        },
        {
          "id": "193",
          "name": "language should return the default language, given the valid default language in the flattenedPath"
        },
        {
          "id": "194",
          "name": "language should return the default language, given a valid flattenedPath without language param"
        },
        {
          "id": "195",
          "name": "language should return the default language, given an incomplete flattenedPath"
        },
        {
          "id": "196",
          "name": "language should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport buildPageLanguageFlag from '../language';\n\ndescribe('language', () => {\n  const PREFIX = '$';\n  let prefixAcc = PREFIX;\n  while (LANGUAGES.includes((prefixAcc + DEFAULT_LANGUAGE) as any)) prefixAcc += PREFIX;\n  const invalidLanguage = prefixAcc + DEFAULT_LANGUAGE;\n\n  it('should be fault tolerant, given an invalid language in the flattenedPath (fallback on default language)', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${invalidLanguage}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given the valid default language in the flattenedPath', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given a valid flattenedPath without language param', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + '/slug'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should return the default language, given an incomplete flattenedPath', () => {\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n\n    expect(\n      buildPageLanguageFlag({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + '/'\n        },\n        _id: '_'\n      })\n    ).toBe(DEFAULT_LANGUAGE);\n  });\n\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildPageLanguageFlag({\n        _raw: {\n          flattenedPath: '_' + PAGES_FOLDER + '/slug'\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/misc/__tests__/prebuild.getComputedNavData.test.ts": {
      "tests": [
        {
          "id": "197",
          "name": "getComputedNavData should return a simple computed navData, given simple valid input"
        },
        {
          "id": "198",
          "name": "getComputedNavData should return a multi-entries computed navData, given a multi-entries valid input"
        },
        {
          "id": "199",
          "name": "getComputedNavData should return a multi-entries computed navData with embedded entities, given a multi-entries with embedded entities valid input"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getComputedNavData from '../getComputedNavData';\n\ndescribe('getComputedNavData', () => {\n  it('should return a simple computed navData, given simple valid input', () => {\n    const computedNavData = getComputedNavData(\n      {\n        // @ts-expect-error\n        ___FOO_PAGE___: 'foo'\n      },\n      { ___FOO_PAGE___: 'testing.foo.foo' }\n    );\n\n    expect(computedNavData).toStrictEqual([{ i18nTitle: 'testing.foo.foo', path: 'foo' }]);\n  });\n\n  it('should return a multi-entries computed navData, given a multi-entries valid input', () => {\n    const computedNavData = getComputedNavData(\n      {\n        // @ts-expect-error\n        ___FOO_PAGE___: 'foo',\n        ___BAR_PAGE___: 'bar'\n      },\n      {\n        ___FOO_PAGE___: 'testing.foo.foo',\n        ___BAR_PAGE___: 'testing.foo.bar'\n      }\n    );\n\n    expect(computedNavData).toStrictEqual([\n      { i18nTitle: 'testing.foo.foo', path: 'foo' },\n      { i18nTitle: 'testing.foo.bar', path: 'bar' }\n    ]);\n  });\n\n  it('should return a multi-entries computed navData with embedded entities, given a multi-entries with embedded entities valid input', () => {\n    const computedNavData = getComputedNavData(\n      {\n        // @ts-expect-error\n        ___FOOA_PAGE___: 'fooa',\n        ___FOO_PAGE___: 'foo',\n        ___BAR_PAGE___: 'bar'\n      },\n      {\n        ___FOOA_PAGE___: 'testing.foo.fooa',\n        ___FOO_PAGE___: 'testing.foo.foo',\n        ___BAR_PAGE___: 'testing.foo.bar'\n      },\n      {\n        ___FOOA_PAGE___: [\n          { i18nTitle: 'testing.foo.fooa.bar', path: 'fooa/bar' },\n          { i18nTitle: 'testing.foo.foob.bar', path: 'foob/bar' }\n        ]\n      }\n    );\n\n    expect(computedNavData).toStrictEqual([\n      {\n        embeddedEntities: [\n          { i18nTitle: 'testing.foo.fooa.bar', path: 'fooa/bar' },\n          { i18nTitle: 'testing.foo.foob.bar', path: 'foob/bar' }\n        ],\n        i18nTitle: 'testing.foo.fooa',\n        path: 'fooa'\n      },\n      { i18nTitle: 'testing.foo.foo', path: 'foo' },\n      { i18nTitle: 'testing.foo.bar', path: 'bar' }\n    ]);\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.retrieveLocaleFileInfosMetadatas.test.ts": {
      "tests": [
        {
          "id": "200",
          "name": "retrieveLocaleFileInfosMetadatas should throw ENOENT, given invalid locale filepath"
        },
        {
          "id": "201",
          "name": "retrieveLocaleFileInfosMetadatas should throw, given an invalid locale filepath (not evaluable)"
        },
        {
          "id": "202",
          "name": "retrieveLocaleFileInfosMetadatas should throw, given an invalid locale filepath (empty infos)"
        },
        {
          "id": "203",
          "name": "retrieveLocaleFileInfosMetadatas should return a valid object, given a valid locale filepath"
        }
      ],
      "source": "// @ts-expect-error\nimport BuilderError from '@rtm/prebuilder/errors/BuilderError';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport retrieveLocaleFileInfosMetadatas from '../retrieveLocaleFileInfosMetadatas';\n\nconst VALID_I18N_LOCALE_FILEPATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_locales/foo_valid_locale.ts';\nconst INVALID_I18N_LOCALE_FILEPATH_NOT_EVALUABLE =\n  './packages/prebuilder/src/metadatas-builders/__tests__/fake_locales/bar_invalid_locales_not_evaluable_infos.ts';\nconst INVALID_I18N_LOCALE_FILEPATH_EMPTY_INFOS =\n  './packages/prebuilder/src/metadatas-builders/__tests__/fake_locales/baz_invalid_locales_empty_infos.ts';\n\ndescribe('retrieveLocaleFileInfosMetadatas', () => {\n  it('should throw ENOENT, given invalid locale filepath', async () => {\n    expect.assertions(1);\n\n    try {\n      await retrieveLocaleFileInfosMetadatas(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should throw, given an invalid locale filepath (not evaluable)', async () => {\n    await expect(retrieveLocaleFileInfosMetadatas(INVALID_I18N_LOCALE_FILEPATH_NOT_EVALUABLE)).rejects.toThrowError(BuilderError);\n  });\n\n  it('should throw, given an invalid locale filepath (empty infos)', async () => {\n    await expect(retrieveLocaleFileInfosMetadatas(INVALID_I18N_LOCALE_FILEPATH_EMPTY_INFOS)).rejects.toThrowError(BuilderError);\n  });\n\n  it('should return a valid object, given a valid locale filepath', async () => {\n    const retrievedData = await retrieveLocaleFileInfosMetadatas(VALID_I18N_LOCALE_FILEPATH);\n    expect(retrievedData).toStrictEqual({ lng: 'NOT testing localesInfosValidator here! Only testing retrieveLocaleFilesInfosMetadatas!' });\n  });\n});\n"
    },
    "interop/lib/builders/pages/computedFields/functions/__tests__/prebuild.root.test.ts": {
      "tests": [
        {
          "id": "204",
          "name": "root should return the top level root, given a valid input"
        },
        {
          "id": "205",
          "name": "root should return the top level root, given a valid input (with default language root)"
        },
        {
          "id": "206",
          "name": "root should return the top level root, given a flattenedPath corresponding to index notation"
        },
        {
          "id": "207",
          "name": "root should NOT be fault tolerant"
        }
      ],
      "source": "import { InvalidArgumentsError, DEFAULT_LANGUAGE, PAGES_FOLDER } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildPageRoot from '../root';\n\ndescribe('root', () => {\n  const root = 'root';\n  it('should return the top level root, given a valid input', () => {\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${root}`\n        },\n        _id: '_'\n      })\n    ).toBe('/');\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${root}/foo/bar`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n  });\n\n  it('should return the top level root, given a valid input (with default language root)', () => {\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/`\n        },\n        _id: '_'\n      })\n    ).toBe('/');\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER + `/${DEFAULT_LANGUAGE}/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toBe(root);\n  });\n\n  it('should return the top level root, given a flattenedPath corresponding to index notation', () => {\n    expect(\n      buildPageRoot({\n        _raw: {\n          flattenedPath: PAGES_FOLDER\n        },\n        _id: '_'\n      })\n    ).toBe('/');\n  });\n\n  it('should NOT be fault tolerant', () => {\n    expect(() =>\n      buildPageRoot({\n        _raw: {\n          flattenedPath: '_' + PAGES_FOLDER + `/${root}/foo/bar/baz`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.enabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "208",
          "name": "getLandingPageByLanguageAndSlugStrict should always return a valid lp"
        },
        {
          "id": "209",
          "name": "getLandingPageByLanguageAndSlugStrict should always return NULL when picking a draft lp in an unauthorized drafts CTX"
        }
      ],
      "source": "import type { TLandingPagesConfig } from '@/config/landingPages';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('@/config/landingPages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/landingPages')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: true\n    } satisfies TLandingPagesConfig\n  };\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict', () => {\n  it('should always return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict(DEFAULT_LANGUAGE, targettedSlug) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n\n  it('should always return NULL when picking a draft lp in an unauthorized drafts CTX', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-draft-lp-00` as const;\n    const lp = getLandingPageByLanguageAndSlugStrict(DEFAULT_LANGUAGE, targettedSlug) as LandingPage;\n    const language = DEFAULT_LANGUAGE;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n});\n\nvi.doUnmock('@/config/landingPages');\n"
    },
    "interop/errors/__tests__/prebuild.InvalidArguments.test.ts": {
      "tests": [
        {
          "id": "210",
          "name": "InvalidArgumentsError should generate an error message with hint"
        },
        {
          "id": "211",
          "name": "InvalidArgumentsError should generate an error message with trimmed hint"
        },
        {
          "id": "212",
          "name": "InvalidArgumentsError should generate an error message with hint, without additional punctuation"
        },
        {
          "id": "213",
          "name": "InvalidArgumentsError should generate an error message without hint"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport InvalidArgumentsError, { PUNCTUATION } from '../InvalidArguments';\n\nconst FAKE_FUNCTION_NAME = 'FAKE_FUNCTION';\nconst FAKE_ARG = 'FAKE';\nconst FAKE_ARG_KEY = 'fakeArg';\n\ndescribe('InvalidArgumentsError', () => {\n  it('should generate an error message with hint', () => {\n    const FAKE_HINT = 'FAKE HINT';\n    const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG }, FAKE_HINT);\n\n    expect(FAKE_ERROR.message).toBe(`Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}\n${FAKE_HINT}.`);\n  });\n\n  it('should generate an error message with trimmed hint', () => {\n    const FAKE_HINT = '                   FAKE HINT              ';\n    const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG }, FAKE_HINT);\n\n    expect(FAKE_ERROR.message).toBe(`Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}\n${FAKE_HINT.trim()}.`);\n  });\n\n  it('should generate an error message with hint, without additional punctuation', () => {\n    for (const currentPunctuation of PUNCTUATION) {\n      const FAKE_HINT = 'FAKE HINT' + currentPunctuation;\n      const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG }, FAKE_HINT);\n\n      expect(FAKE_ERROR.message).toBe(\n        `Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}\n${FAKE_HINT}`\n      );\n    }\n  });\n\n  it('should generate an error message without hint', () => {\n    const FAKE_ERROR = new InvalidArgumentsError(FAKE_FUNCTION_NAME, { [FAKE_ARG_KEY]: FAKE_ARG });\n\n    expect(FAKE_ERROR.message).toBe(`Impossible to ${FAKE_FUNCTION_NAME} with:\n{\n  \"${FAKE_ARG_KEY}\": \"${FAKE_ARG}\"\n}`);\n  });\n});\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.disabled_drafts_prod_ctx.test.ts": {
      "tests": [
        {
          "id": "214",
          "name": "getLandingPageByLanguageAndSlugStrict (happy paths) should always return a valid lp"
        },
        {
          "id": "215",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should always return NULL when picking a draft lp in an unauthorized drafts CTX"
        }
      ],
      "source": "import type { TLandingPagesConfig } from '@/config/landingPages';\nimport type { LandingPage } from 'contentlayer/generated';\n\nimport LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('@/config/landingPages', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/landingPages')>();\n\n  return {\n    default: {\n      ...mod.default,\n      ENABLE_DRAFTS_IN_PROD: false\n    } satisfies TLandingPagesConfig\n  };\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (happy paths)', () => {\n  it('should always return a valid lp', () => {\n    const category = LandingPagesConfig.TESTING_CATEGORY;\n    const targettedSlug = `${category}-fake-lp-00` as const;\n    const language = DEFAULT_LANGUAGE;\n    const lp = getLandingPageByLanguageAndSlugStrict(DEFAULT_LANGUAGE, targettedSlug) as LandingPage;\n\n    expect(lp.category).toBe(category);\n    expect(lp.slug).toBe(targettedSlug);\n    expect(lp.language).toBe(language);\n    expect(lp.url).toBe('/' + language + ROUTES_ROOTS.LANDING_PAGES + targettedSlug);\n  });\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (unhappy paths)', () => {\n  it('should always return NULL when picking a draft lp in an unauthorized drafts CTX', () => {\n    const targettedSlug = `${LandingPagesConfig.TESTING_CATEGORY}-fake-draft-lp-00` as const;\n    const lp = getLandingPageByLanguageAndSlugStrict(DEFAULT_LANGUAGE, targettedSlug) as LandingPage;\n\n    expect(lp).toBe(null);\n  });\n});\n\nvi.doUnmock('@/config/landingPages');\n"
    },
    "interop/lib/builders/blog/computedFields/functions/__tests__/prebuild.category.test.ts": {
      "tests": [
        {
          "id": "216",
          "name": "blog category (happy paths) should return the category string part, given a valid flattenedPath"
        },
        {
          "id": "217",
          "name": "blog category (unhappy paths) should throw, given an invalid flattenedPath"
        }
      ],
      "source": "import { ForbiddenToUseIndexError, InvalidArgumentsError, BLOG_POSTS_FOLDER, INDEX_TOKEN } from '##/lib/builders/unifiedImport';\nimport { describe, expect, it } from 'vitest';\n\nimport buildBlogPostCategory from '../category';\n\nconst EXT = '.FAKE_EXT';\n\ndescribe('blog category (happy paths)', () => {\n  const category = 'category';\n  it('should return the category string part, given a valid flattenedPath', () => {\n    expect(\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/${category}/subcategory/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/${category}/subcategory/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n\n    expect(\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug` + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toBe(category);\n  });\n});\n\ndescribe('blog category (unhappy paths)', () => {\n  const category = 'category';\n  it('should throw, given an invalid flattenedPath', () => {\n    expect(() =>\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: BLOG_POSTS_FOLDER + '/' + INDEX_TOKEN + EXT,\n          flattenedPath: BLOG_POSTS_FOLDER\n        },\n        _id: '_'\n      })\n    ).toThrowError(ForbiddenToUseIndexError);\n\n    expect(() =>\n      buildBlogPostCategory({\n        _raw: {\n          sourceFilePath: '_' + BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug` + EXT,\n          flattenedPath: '_' + BLOG_POSTS_FOLDER + `/${category}/subcategory/lang/slug`\n        },\n        _id: '_'\n      })\n    ).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.not_testing_ctx.test.ts": {
      "tests": [
        {
          "id": "218",
          "name": "getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths) should return an empty list, given testing category in not testing ctx"
        },
        {
          "id": "219",
          "name": "getBlogPostUnstrict (unhappy paths) should return null, given testing category in not testing ctx"
        },
        {
          "id": "220",
          "name": "isValidBlogCategory should return false, given testing category in not testing ctx"
        }
      ],
      "source": "import { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, vi, it } from 'vitest';\nimport BlogConfig from '@/config/blog';\n\nimport { getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict, getBlogPostUnstrict, isValidBlogCategory } from '../api';\n\nvi.mock('../ctx', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../ctx')>();\n\n  return {\n    default: {\n      ...mod.default,\n      TESTING: false\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict (unhappy paths)', () => {\n  it('should return an empty list, given testing category in not testing ctx', async () => {\n    const posts = await getAllBlogPostsByCategoryAndSubcategoryAndLanguageUnstrict(\n      BlogConfig.TESTING_CATEGORY,\n      TESTING_BLOG_FAKE_SUBCATEGORY,\n      DEFAULT_LANGUAGE\n    );\n    expect(posts).toStrictEqual([]);\n  });\n});\n\ndescribe('getBlogPostUnstrict (unhappy paths)', () => {\n  it('should return null, given testing category in not testing ctx', async () => {\n    const posts = await getBlogPostUnstrict(BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01', DEFAULT_LANGUAGE);\n    expect(posts).toBe(null);\n  });\n});\n\ndescribe('isValidBlogCategory', () => {\n  it('should return false, given testing category in not testing ctx', () => {\n    const posts = isValidBlogCategory(BlogConfig.TESTING_CATEGORY);\n    expect(posts).toBe(false);\n  });\n});\n\nvi.doUnmock('../ctx');\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.feedbacksMerge.test.ts": {
      "tests": [
        {
          "id": "221",
          "name": "prefixFeedback should return empty string, given empty feedback"
        },
        {
          "id": "222",
          "name": "prefixFeedback should return prefixed feedback string, given feedback and prefix"
        },
        {
          "id": "223",
          "name": "foldFeedbacks should return an empty string, given no feedback"
        },
        {
          "id": "224",
          "name": "foldFeedbacks should return an empty string, given an empty feedback"
        },
        {
          "id": "225",
          "name": "foldFeedbacks should return the same string, given only one feedback"
        },
        {
          "id": "226",
          "name": "foldFeedbacks should return the merged feedbacks, given two feedbacks"
        },
        {
          "id": "227",
          "name": "foldFeedbacks should return the folded feedbacks, given three feedbacks"
        },
        {
          "id": "228",
          "name": "foldFeedbacks should return the first feedback, given a first valid feedback and a second empty feedback"
        },
        {
          "id": "229",
          "name": "foldFeedbacks should return the second feedback, given a first empty feedback and a second valid feedback"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport { prefixFeedback, foldFeedbacks } from '../feedbacksMerge';\n\ndescribe('prefixFeedback', () => {\n  it('should return empty string, given empty feedback', () => {\n    expect(prefixFeedback('', 'prefix')).toBe('');\n  });\n\n  it('should return prefixed feedback string, given feedback and prefix', () => {\n    expect(prefixFeedback('feedback', 'prefix: ')).toBe('prefix: feedback');\n  });\n});\n\ndescribe('foldFeedbacks', () => {\n  it('should return an empty string, given no feedback', () => {\n    expect(foldFeedbacks()).toBe('');\n  });\n\n  it('should return an empty string, given an empty feedback', () => {\n    expect(foldFeedbacks('')).toBe('');\n  });\n\n  it('should return the same string, given only one feedback', () => {\n    expect(foldFeedbacks('foo')).toBe('foo');\n  });\n\n  it('should return the merged feedbacks, given two feedbacks', () => {\n    expect(foldFeedbacks('foo', 'bar')).toBe('foo\\nbar');\n  });\n\n  it('should return the folded feedbacks, given three feedbacks', () => {\n    expect(foldFeedbacks('foo', 'bar', 'baz')).toBe('foo\\nbar\\nbaz');\n  });\n\n  it('should return the first feedback, given a first valid feedback and a second empty feedback', () => {\n    expect(foldFeedbacks('foo', '')).toBe('foo');\n  });\n\n  it('should return the second feedback, given a first empty feedback and a second valid feedback', () => {\n    expect(foldFeedbacks('', 'bar')).toBe('bar');\n  });\n});\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.traverseAndMapFilepaths.test.ts": {
      "tests": [
        {
          "id": "230",
          "name": "traverseAndMapFilepaths should return an arborescence, given a valid RootFolder (full)"
        },
        {
          "id": "231",
          "name": "traverseAndMapFilepaths should return an arborescence, given a valid RootFolder (partial)"
        },
        {
          "id": "232",
          "name": "traverseAndMapFilepaths should return an arborescence, given a valid RootFolder (partial 2)"
        },
        {
          "id": "233",
          "name": "traverseAndMapFilepaths should throw ENOENT, given invalid path"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport traverseAndMapFilepaths from '../traverseAndMapFilepaths';\n\ndescribe('traverseAndMapFilepaths', () => {\n  it('should return an arborescence, given a valid RootFolder (full)', async () => {\n    expect(await traverseAndMapFilepaths('./packages/prebuilder/src/lib/__tests__/fakeDirectory')).toMatchSnapshot();\n  });\n\n  it('should return an arborescence, given a valid RootFolder (partial)', async () => {\n    expect(await traverseAndMapFilepaths('./packages/prebuilder/src/lib/__tests__/fakeDirectory/bar')).toMatchSnapshot();\n  });\n\n  it('should return an arborescence, given a valid RootFolder (partial 2)', async () => {\n    expect(await traverseAndMapFilepaths('./packages/prebuilder/src/lib/__tests__/fakeDirectory/bar/baz/foo')).toMatchSnapshot();\n  });\n\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await traverseAndMapFilepaths(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.disabled_notfound_trigger_ctx.test.ts": {
      "tests": [
        {
          "id": "234",
          "name": "blogSubcategoryShouldTriggerNotFound should return false only when the list is not empty"
        }
      ],
      "source": "import type { TBlogConfig } from '@/config/blog';\nimport type { TBlogPost } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport BlogConfig from '@/config/blog';\n\nimport { blogSubcategoryShouldTriggerNotFound, getBlogPostStrict } from '../api';\n\nvi.mock('@/config/blog', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/blog')>();\n\n  return {\n    default: {\n      ...mod.default,\n      USE_BLOG_POSTS_NOTFOUND_WHEN_SUBCATEGORY_IS_EMPTY_INSTEAD_OF_NOT_FOUND: false\n    } satisfies TBlogConfig\n  };\n});\n\ndescribe('blogSubcategoryShouldTriggerNotFound', () => {\n  it('should return false only when the list is not empty', async () => {\n    const [category, subcategory, targettedSlug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const language = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict(category, subcategory, language, targettedSlug)) as TBlogPost;\n\n    expect(blogSubcategoryShouldTriggerNotFound([])).toBe(true);\n    expect(blogSubcategoryShouldTriggerNotFound([post])).toBe(false);\n  });\n});\n\nvi.doUnmock('@/config/blog');\n"
    },
    "src/lib/blog/__tests__/postbuild.api.enabled_notfound_trigger_ctx.test.ts": {
      "tests": [
        {
          "id": "235",
          "name": "blogSubcategoryShouldTriggerNotFound should always return false"
        }
      ],
      "source": "import type { TBlogConfig } from '@/config/blog';\nimport type { TBlogPost } from '@/types/Blog';\n\nimport { TESTING_BLOG_FAKE_SUBCATEGORY } from '𝕍/testingBlogCategoryDatas';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it, vi } from 'vitest';\nimport BlogConfig from '@/config/blog';\n\nimport { blogSubcategoryShouldTriggerNotFound, getBlogPostStrict } from '../api';\n\nvi.mock('@/config/blog', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('@/config/blog')>();\n\n  return {\n    default: {\n      ...mod.default,\n      USE_BLOG_POSTS_NOTFOUND_WHEN_SUBCATEGORY_IS_EMPTY_INSTEAD_OF_NOT_FOUND: true\n    } satisfies TBlogConfig\n  };\n});\n\ndescribe('blogSubcategoryShouldTriggerNotFound', () => {\n  it('should always return false', async () => {\n    const [category, subcategory, targettedSlug] = [BlogConfig.TESTING_CATEGORY, TESTING_BLOG_FAKE_SUBCATEGORY, 'fake-post-01' as const];\n    const language = DEFAULT_LANGUAGE;\n    const post = (await getBlogPostStrict(category, subcategory, language, targettedSlug)) as TBlogPost;\n\n    expect(blogSubcategoryShouldTriggerNotFound([])).toBe(false);\n    expect(blogSubcategoryShouldTriggerNotFound([post])).toBe(false);\n  });\n});\n\nvi.doUnmock('@/config/blog');\n"
    },
    "packages/shared-lib/src/portable/html/__tests__/prebuild.computeHTMLElementHeightWidth.test.tsx": {
      "tests": [
        {
          "id": "236",
          "name": "computeHTMLElementHeight/computeHTMLElementWidth should return the correct height/width of an element"
        }
      ],
      "source": "import { beforeAll, afterAll, describe, expect, it, vi } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\n\nimport computeHTMLElementHeight from '../computeHTMLElementHeight';\nimport computeHTMLElementWidth from '../computeHTMLElementWidth';\n\nvi.spyOn(HTMLElement.prototype, 'getBoundingClientRect').mockImplementation(() => {\n  return {\n    bottom: 1029,\n    height: 1234,\n    right: 3250,\n    width: 2500,\n    left: 4321,\n    top: 1200\n  } as DOMRect;\n});\n\nvi.spyOn(window, 'getComputedStyle').mockImplementation(() => {\n  return {\n    marginBottom: '121px',\n    marginRight: '302px',\n    marginLeft: '928px',\n    marginTop: '810px'\n  } as CSSStyleDeclaration;\n});\nvi.resetModules();\n\ndescribe('computeHTMLElementHeight/computeHTMLElementWidth', () => {\n  let fakeElement: HTMLElement;\n\n  beforeAll(() => {\n    fakeElement = document.createElement('div');\n    fakeElement.setAttribute('data-testid', 'fake-component');\n    document.body.appendChild(fakeElement);\n  });\n\n  afterAll(() => {\n    document.body.removeChild(fakeElement);\n    vi.restoreAllMocks();\n  });\n\n  it('should return the correct height/width of an element', () => {\n    expect(computeHTMLElementHeight(fakeElement)).toBe(2165);\n    expect(computeHTMLElementWidth(fakeElement)).toBe(3730);\n  });\n});\n"
    },
    "src/lib/blog/__tests__/postbuild.api.ctx_agnostic.test.ts": {
      "tests": [
        {
          "id": "237",
          "name": "getBlogPostFormattedDate should return date without time, given valid ISO Date String with null timestamp"
        },
        {
          "id": "238",
          "name": "isValidBlogCategoryAndSubcategoryPair should be false for invalid combinations, given invalid category and subcategory"
        },
        {
          "id": "239",
          "name": "isValidBlogCategoryAndSubcategoryPairInAnyLanguage should return false, given an invalid category and subcategory"
        }
      ],
      "source": "import type { TBlogFakeLanguage } from '𝕍/testingBlogCategoryDatas';\n\nimport { describe, expect, it } from 'vitest';\n\nimport { isValidBlogCategoryAndSubcategoryPairInAnyLanguage, isValidBlogCategoryAndSubcategoryPair, getBlogPostFormattedDate } from '../api';\n\ndescribe('getBlogPostFormattedDate', () => {\n  it('should return date without time, given valid ISO Date String with null timestamp', () => {\n    expect(getBlogPostFormattedDate('fr' as any, '2021-12-24T00:00:00.000Z')).toBe('Vendredi 24 décembre 2021');\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPair', () => {\n  it('should be false for invalid combinations, given invalid category and subcategory', async () => {\n    const isValid = await isValidBlogCategoryAndSubcategoryPair(\n      // @ts-expect-error\n      '__INVALID_CATEGORY__',\n      '__INVALID_SUBCATEGORY__',\n      'drafts' satisfies TBlogFakeLanguage\n    );\n    expect(isValid).toBe(false);\n  });\n});\n\ndescribe('isValidBlogCategoryAndSubcategoryPairInAnyLanguage', () => {\n  it('should return false, given an invalid category and subcategory', async () => {\n    // @ts-expect-error\n    const isValid = await isValidBlogCategoryAndSubcategoryPairInAnyLanguage('__INVALID_CATEGORY__', '__INVALID_SUBCATEGORY__');\n\n    expect(isValid).toBe(false);\n  });\n});\n"
    },
    "interop/lib/misc/__tests__/prebuild.addClassname.test.ts": {
      "tests": [
        {
          "id": "240",
          "name": "addClassname should pass, given array input and expecting array output"
        },
        {
          "id": "241",
          "name": "addClassname should pass, given string input and expecting array output"
        },
        {
          "id": "242",
          "name": "addClassname should pass, given null input and expecting string output"
        }
      ],
      "source": "import type { Element as hASTElement } from 'hast';\n\nimport { describe, expect, it } from 'vitest';\n\nimport addClassname from '../addClassname';\n\ndescribe('addClassname', () => {\n  it('should pass, given array input and expecting array output', () => {\n    const node: hASTElement = {\n      properties: {\n        className: ['foo']\n      },\n      type: 'element',\n      tagName: 'div',\n      children: []\n    };\n    addClassname(node, 'bar');\n    expect(node.properties.className).toStrictEqual(['foo', 'bar']);\n  });\n\n  it('should pass, given string input and expecting array output', () => {\n    const node: hASTElement = {\n      properties: {\n        className: 'foo'\n      },\n      type: 'element',\n      tagName: 'div',\n      children: []\n    };\n    addClassname(node, 'bar');\n    expect(node.properties.className).toStrictEqual(['foo', 'bar']);\n  });\n\n  it('should pass, given null input and expecting string output', () => {\n    const node: hASTElement = {\n      properties: {\n        className: null\n      },\n      type: 'element',\n      tagName: 'div',\n      children: []\n    };\n    addClassname(node, 'foo');\n    expect(node.properties.className).toBe('foo');\n  });\n});\n"
    },
    "src/lib/blog/guards/__tests__/postbuild.blogCategoryGuard.test.ts": {
      "tests": [
        {
          "id": "243",
          "name": "blogCategoryGuard should not throw not found error, given valid category"
        },
        {
          "id": "244",
          "name": "blogCategoryGuard should throw not found error, given invalid category"
        }
      ],
      "source": "import { isNotFoundError } from 'next/dist/client/components/not-found';\nimport I18nTaxonomy from '##/config/taxonomies/i18n';\nimport BlogTaxonomy from '##/config/taxonomies/blog';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\nimport BlogConfig from '@/config/blog';\n\nimport blogCategoryGuard from '../blogCategoryGuard';\n\ndescribe('blogCategoryGuard', () => {\n  it('should not throw not found error, given valid category', async () => {\n    await expect(\n      blogCategoryGuard({\n        params: {\n          [BlogTaxonomy.CATEGORY]: BlogConfig.TESTING_CATEGORY,\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      })\n    ).resolves.not.toThrow();\n  });\n\n  it('should throw not found error, given invalid category', async () => {\n    expect.assertions(1);\n\n    try {\n      await blogCategoryGuard({\n        params: {\n          // @ts-expect-error\n          [BlogTaxonomy.CATEGORY]: '__INVALID_CATEGORY__',\n          [I18nTaxonomy.LANGUAGE]: DEFAULT_LANGUAGE\n        }\n      });\n    } catch (interceptedError) {\n      expect(isNotFoundError(interceptedError)).toBe(true);\n    }\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.blogArchitectureMetadatas.test.ts": {
      "tests": [
        {
          "id": "245",
          "name": "getBlogArchitectureMetadatas should throw ENOENT, given invalid path"
        },
        {
          "id": "246",
          "name": "getBlogArchitectureMetadatas should return an exhaustive metadatas object, given a valid blog posts folder path"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport getBlogArchitectureMetadatas from '../blogArchitectureMetadatas';\n\nconst VALID_BLOG_POSTS_FOLDER_PATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_blog_posts_folder';\n\ndescribe('getBlogArchitectureMetadatas', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await getBlogArchitectureMetadatas(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should return an exhaustive metadatas object, given a valid blog posts folder path', async () => {\n    expect(await getBlogArchitectureMetadatas(VALID_BLOG_POSTS_FOLDER_PATH)).toMatchSnapshot();\n  });\n});\n"
    },
    "interop/lib/builders/__tests__/prebuild.getFlattenedPathWithoutRootFolder.test.ts": {
      "tests": [
        {
          "id": "247",
          "name": "getFlattenedPathWithoutRootFolder should return the correct outputs, given valid inputs"
        },
        {
          "id": "248",
          "name": "getFlattenedPathWithoutRootFolder should throw, given invalid inputs"
        }
      ],
      "source": "import InvalidArgumentsError from '##/errors/InvalidArguments';\nimport { describe, expect, it } from 'vitest';\n\nimport getFlattenedPathWithoutRootFolder from '../getFlattenedPathWithoutRootFolder';\n\ndescribe('getFlattenedPathWithoutRootFolder', () => {\n  const POSTS_FOLDER = 'posts' as const;\n\n  it('should return the correct outputs, given valid inputs', () => {\n    expect(getFlattenedPathWithoutRootFolder('whatever/lang/category/subcategory/slug')).toBe('lang/category/subcategory/slug');\n\n    expect(getFlattenedPathWithoutRootFolder('posts/lang/category/subcategory/slug', POSTS_FOLDER)).toBe('lang/category/subcategory/slug');\n  });\n\n  it('should throw, given invalid inputs', () => {\n    expect(() => getFlattenedPathWithoutRootFolder('posts/lang/category/subcategory/slug', 'invalidNeedle')).toThrowError(InvalidArgumentsError);\n\n    expect(() => getFlattenedPathWithoutRootFolder(POSTS_FOLDER)).toThrowError(InvalidArgumentsError);\n\n    expect(() => getFlattenedPathWithoutRootFolder(POSTS_FOLDER + '/')).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.indexOfNthOccurence.test.ts": {
      "tests": [
        {
          "id": "249",
          "name": "indexOfNthOccurrence should return a positive value, given a string containing the needle"
        },
        {
          "id": "250",
          "name": "indexOfNthOccurrence should return -1, given a string not containing the needle"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport indexOfNthOccurrence from '../indexOfNthOccurrence';\n\ndescribe('indexOfNthOccurrence', () => {\n  it('should return a positive value, given a string containing the needle', () => {\n    const repetitions = 3;\n    const strBase = 'abc';\n    const strHaystack = strBase.repeat(repetitions);\n    const baseLen = strBase.length;\n\n    for (let n = 0; n < repetitions; n++) {\n      const expected = n * baseLen;\n      const result = indexOfNthOccurrence(strHaystack, 'a', n + 1);\n      expect(result).toBe(expected);\n    }\n  });\n\n  it('should return -1, given a string not containing the needle', () => {\n    const expected = -1;\n    const foo = 'foo';\n    const invalidNeedle = '$';\n    const validNeedle = 'f';\n\n    expect(indexOfNthOccurrence('', foo, 1)).toBe(expected);\n    expect(indexOfNthOccurrence(foo, invalidNeedle, 1)).toBe(expected);\n    expect(indexOfNthOccurrence(foo, invalidNeedle, 2)).toBe(expected);\n    expect(indexOfNthOccurrence(foo, validNeedle, 0)).toBe(expected);\n  });\n});\n"
    },
    "interop/validators/__tests__/prebuild.contentLayer.test.ts": {
      "tests": [
        {
          "id": "251",
          "name": "validateContentLayerConfig should throw, given invalid config, containing duplicates"
        },
        {
          "id": "252",
          "name": "validateContentLayerConfig should not throw, given invalid config, containing duplicates"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport ContentLayerDuplicateTypesError from '../errors/ContentLayerDuplicateTypesError';\nimport validateContentLayerConfig from '../contentLayer';\n\ndescribe('validateContentLayerConfig', () => {\n  it('should throw, given invalid config, containing duplicates', () => {\n    expect(() =>\n      validateContentLayerConfig([\n        { def: () => ({ name: 'duplicate' }), type: 'document' },\n        { def: () => ({ name: 'duplicate' }), type: 'document' },\n        { def: () => ({ name: 'notDuplicate' }), type: 'document' }\n      ])\n    ).toThrowError(ContentLayerDuplicateTypesError);\n  });\n\n  it('should not throw, given invalid config, containing duplicates', () => {\n    expect(() =>\n      validateContentLayerConfig([\n        { def: () => ({ name: 'a' }), type: 'document' },\n        { def: () => ({ name: 'b' }), type: 'document' },\n        { def: () => ({ name: 'c' }), type: 'document' }\n      ])\n    ).not.toThrowError(ContentLayerDuplicateTypesError);\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.endsWithChar.test.ts": {
      "tests": [
        {
          "id": "253",
          "name": "endsWithChar should return true, given strings ending with endChars"
        },
        {
          "id": "254",
          "name": "endsWithChar should return false, given strings not ending with endChars"
        },
        {
          "id": "255",
          "name": "endsWithChar should return false, given endChars is empty"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport endsWithChars from '../endsWithChar';\n\ndescribe('endsWithChar', () => {\n  it('should return true, given strings ending with endChars', () => {\n    const endChars = 'abc';\n    expect(endsWithChars('foo bar abc', endChars)).toBe(true);\n    expect(endsWithChars('foo bar acb', endChars)).toBe(true);\n    expect(endsWithChars('foo bar cba', endChars)).toBe(true);\n  });\n\n  it('should return false, given strings not ending with endChars', () => {\n    const endChars = '$';\n    expect(endsWithChars('foo bar abc', endChars)).toBe(false);\n    expect(endsWithChars('foo bar acb', endChars)).toBe(false);\n    expect(endsWithChars('foo bar cba', endChars)).toBe(false);\n  });\n\n  it('should return false, given endChars is empty', () => {\n    const endChars = '';\n    expect(endsWithChars('foo bar abc', endChars)).toBe(false);\n    expect(endsWithChars('foo bar acb', endChars)).toBe(false);\n    expect(endsWithChars('foo bar cba', endChars)).toBe(false);\n  });\n});\n"
    },
    "src/lib/__tests__/prebuild.i18n.test.ts": {
      "tests": [
        {
          "id": "256",
          "name": "getPathnameMaybeI18nFlag should return empty string or flag, given a pathname without i18n flag and a pathname with an i18n flag"
        },
        {
          "id": "257",
          "name": "getPathnameWithoutI18nFlag should return the same path or the path without its i18n flag, given a pathname without i18n flag and a pathname with an i18n flag"
        }
      ],
      "source": "import { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\nimport ROUTES_ROOTS from '##/config/routes';\n\nimport { getPathnameWithoutI18nFlag, getPathnameMaybeI18nFlag } from '../i18n';\n\ndescribe('getPathnameMaybeI18nFlag', () => {\n  it('should return empty string or flag, given a pathname without i18n flag and a pathname with an i18n flag', () => {\n    expect(getPathnameMaybeI18nFlag('/foo')).toBe('');\n    expect(getPathnameMaybeI18nFlag(`/${DEFAULT_LANGUAGE}/foo`)).toBe(DEFAULT_LANGUAGE);\n  });\n});\n\ndescribe('getPathnameWithoutI18nFlag', () => {\n  it('should return the same path or the path without its i18n flag, given a pathname without i18n flag and a pathname with an i18n flag', () => {\n    expect(getPathnameWithoutI18nFlag('/foo')).toBe('/foo');\n    expect(getPathnameWithoutI18nFlag(`/${DEFAULT_LANGUAGE}/foo`)).toBe('/foo');\n    expect(getPathnameWithoutI18nFlag(`${ROUTES_ROOTS.WEBSITE}${DEFAULT_LANGUAGE}`)).toBe(ROUTES_ROOTS.WEBSITE);\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.landingPagesMetadatas.test.ts": {
      "tests": [
        {
          "id": "258",
          "name": "getLpMetadatas should throw ENOENT, given invalid path"
        },
        {
          "id": "259",
          "name": "getLpMetadatas should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { INVALID_PATH } from '𝕍/commons';\n\nimport getLpMetadatas from '../landingPagesMetadatas';\n\nconst VALID_LP_FOLDER_PATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_lp_folder';\n\ndescribe('getLpMetadatas', () => {\n  it('should throw ENOENT, given invalid path', async () => {\n    expect.assertions(1);\n\n    try {\n      await getLpMetadatas(INVALID_PATH);\n    } catch (e) {\n      const interceptedError = e as Error;\n      if ('code' in interceptedError) {\n        expect(interceptedError.code).toBe('ENOENT');\n      } else {\n        throw new Error('Error code not found');\n      }\n    }\n  });\n\n  it('should match snapshot', async () => {\n    expect(await getLpMetadatas(VALID_LP_FOLDER_PATH)).toMatchSnapshot();\n  });\n});\n"
    },
    "packages/prebuilder/src/metadatas-builders/__tests__/prebuild.arborescence.test.ts": {
      "tests": [
        {
          "id": "260",
          "name": "buildArborescence should match snapshot"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport traverseAndMapFilepaths from '../../lib/traverseAndMapFilepaths';\nimport buildArborescence from '../arborescence';\n\nconst VALID_ARBORESCENCE_FOLDER_PATH = './packages/prebuilder/src/metadatas-builders/__tests__/fake_arborescence';\n\ndescribe('buildArborescence', () => {\n  it('should match snapshot', async () => {\n    const arborescenceMap = await traverseAndMapFilepaths(VALID_ARBORESCENCE_FOLDER_PATH);\n    const arborescence = buildArborescence(arborescenceMap, VALID_ARBORESCENCE_FOLDER_PATH);\n    expect(arborescence).toMatchSnapshot();\n  });\n\n  it('should match snapshot', async () => {\n    const arborescenceMap = await traverseAndMapFilepaths(VALID_ARBORESCENCE_FOLDER_PATH);\n    const arborescence = buildArborescence(arborescenceMap);\n    expect(arborescence).toMatchSnapshot();\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.buildAbsolutePathFromParts.test.ts": {
      "tests": [
        {
          "id": "261",
          "name": "buildAbsolutePathFromParts should return '/foo', given only one arg"
        },
        {
          "id": "262",
          "name": "buildAbsolutePathFromParts should return '/foo/bar/test', given clean and dirty args"
        },
        {
          "id": "263",
          "name": "buildAbsolutePathFromParts should return '/' or '//', given empty args"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport buildAbsolutePathFromParts from '../buildAbsolutePathFromParts';\n\ndescribe('buildAbsolutePathFromParts', () => {\n  it(\"should return '/foo', given only one arg\", () => {\n    expect(buildAbsolutePathFromParts('foo')).toBe('/foo');\n  });\n\n  it(\"should return '/foo/bar/test', given clean and dirty args\", () => {\n    const expected = '/foo/bar/test';\n\n    expect(buildAbsolutePathFromParts('foo', 'bar', 'test')).toBe(expected);\n    expect(buildAbsolutePathFromParts('///foo///', '///bar///', '///test///')).toBe(expected);\n    expect(buildAbsolutePathFromParts('foo///', '///bar', 'test///')).toBe(expected);\n  });\n\n  it(\"should return '/' or '//', given empty args\", () => {\n    expect(buildAbsolutePathFromParts('')).toBe('/');\n    expect(buildAbsolutePathFromParts('', '')).toBe('/');\n    expect(buildAbsolutePathFromParts('', '', '')).toBe('//');\n  });\n});\n"
    },
    "src/lib/__tests__/prebuild.str.test.ts": {
      "tests": [
        {
          "id": "264",
          "name": "hrefMatchesPathname should return true"
        },
        {
          "id": "265",
          "name": "hrefMatchesPathname should return false"
        }
      ],
      "source": "import { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\n\nimport { hrefMatchesPathname } from '../str';\n\ndescribe('hrefMatchesPathname', () => {\n  it('should return true', () => {\n    expect(hrefMatchesPathname('/foo/bar', '/foo/bar/1', '/')).toBe(true);\n    expect(hrefMatchesPathname('/foo', '/foo/bar/1', '/')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard/foo', '/dashboard/foo/1', '/dashboard')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard', '/dashboard/bar', '/')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard', `/${DEFAULT_LANGUAGE}/dashboard/bar`, '/')).toBe(true);\n    expect(hrefMatchesPathname('/dashboard', `/${DEFAULT_LANGUAGE}/dashboard`, '/')).toBe(true);\n  });\n\n  it('should return false', () => {\n    expect(hrefMatchesPathname('/dashboard', '/dashboard/bar', '/dashboard')).toBe(false);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.buildPathFromParts.test.ts": {
      "tests": [
        {
          "id": "266",
          "name": "buildPathFromParts should return the same value as input, given only one argument"
        },
        {
          "id": "267",
          "name": "buildPathFromParts should return a path, given two arguments"
        },
        {
          "id": "268",
          "name": "buildPathFromParts should return a cleaned path, given dirty arguments"
        },
        {
          "id": "269",
          "name": "buildPathFromParts should return '/' or '//', given empty arguments"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport buildPathFromParts from '../buildPathFromParts';\n\ndescribe('buildPathFromParts', () => {\n  it('should return the same value as input, given only one argument', () => {\n    expect(buildPathFromParts('foo')).toBe('foo');\n    expect(buildPathFromParts('')).toBe('');\n  });\n\n  it('should return a path, given two arguments', () => {\n    expect(buildPathFromParts('foo', 'bar')).toBe('foo/bar');\n  });\n\n  it('should return a cleaned path, given dirty arguments', () => {\n    expect(buildPathFromParts('foo///', 'bar///')).toBe('foo/bar');\n    expect(buildPathFromParts('///foo///', '///bar///')).toBe('foo/bar');\n  });\n\n  it(\"should return '/' or '//', given empty arguments\", () => {\n    expect(buildPathFromParts('', '')).toBe('/');\n    expect(buildPathFromParts('', '', '')).toBe('//');\n  });\n});\n"
    },
    "src/lib/landingPages/__tests__/postbuild.api.not_testing_ctx.test.ts": {
      "tests": [
        {
          "id": "270",
          "name": "getLandingPageByLanguageAndSlugStrict (unhappy paths) should return null, given testing category in not testing ctx"
        }
      ],
      "source": "import LandingPagesConfig from '@/config/landingPages';\nimport { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, vi, it } from 'vitest';\n\nimport { getLandingPageByLanguageAndSlugStrict } from '../api';\n\nvi.mock('../ctx', async (orgImport) => {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  const mod = await orgImport<typeof import('../ctx')>();\n\n  return {\n    default: {\n      ...mod.default,\n      TESTING: false\n    }\n  } satisfies typeof mod;\n});\n\ndescribe('getLandingPageByLanguageAndSlugStrict (unhappy paths)', () => {\n  it('should return null, given testing category in not testing ctx', () => {\n    const lp = getLandingPageByLanguageAndSlugStrict(DEFAULT_LANGUAGE, `${LandingPagesConfig.TESTING_CATEGORY}-fake-lp-00`);\n    expect(lp).toBe(null);\n  });\n});\n\nvi.doUnmock('../ctx');\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.buildPageTitle.test.ts": {
      "tests": [
        {
          "id": "271",
          "name": "buildPageTitle should return '{productTitle} | {pageTitle}'"
        },
        {
          "id": "272",
          "name": "buildPageTitle should return 'foo | {productTitle}'"
        },
        {
          "id": "273",
          "name": "buildPageTitle should return '{productTitle} | '"
        },
        {
          "id": "274",
          "name": "buildPageTitle should return ' | {productTitle}'"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport buildPageTitle from '../buildPageTitle';\n\nconst pageTitle = 'FOO';\nconst productTitle = 'PRODUCT';\nconst sep = ' | ';\n\ndescribe('buildPageTitle', () => {\n  it(\"should return '{productTitle} | {pageTitle}'\", () => {\n    expect(buildPageTitle(productTitle, pageTitle, true)).toBe(`${productTitle}${sep}${pageTitle}`);\n  });\n\n  it(\"should return 'foo | {productTitle}'\", () => {\n    expect(buildPageTitle(productTitle, 'foo')).toBe(`foo${sep}${productTitle}`);\n  });\n\n  it(\"should return '{productTitle} | '\", () => {\n    expect(buildPageTitle(productTitle, '', true)).toBe(`${productTitle}${sep}`);\n  });\n\n  it(\"should return ' | {productTitle}'\", () => {\n    expect(buildPageTitle(productTitle, '')).toBe(`${sep}${productTitle}`);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.deleteTrailingSlashes.test.ts": {
      "tests": [
        {
          "id": "275",
          "name": "deleteTrailingSlashes should return '', given an empty string"
        },
        {
          "id": "276",
          "name": "deleteTrailingSlashes should return '$'"
        },
        {
          "id": "277",
          "name": "deleteTrailingSlashes should return 'foo'"
        },
        {
          "id": "278",
          "name": "deleteTrailingSlashes should return '', given string which only includes slashes"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport deleteTrailingSlashes from '../deleteTrailingSlashes';\n\ndescribe('deleteTrailingSlashes', () => {\n  it(\"should return '', given an empty string\", () => {\n    expect(deleteTrailingSlashes('')).toBe('');\n  });\n\n  it(\"should return '$'\", () => {\n    const expected = '$';\n    expect(deleteTrailingSlashes(expected + '/////////////')).toBe(expected);\n  });\n\n  it(\"should return 'foo'\", () => {\n    const expected = 'foo';\n    expect(deleteTrailingSlashes(expected + '/')).toBe(expected);\n    expect(deleteTrailingSlashes(expected + '//////')).toBe(expected);\n  });\n\n  it(\"should return '', given string which only includes slashes\", () => {\n    expect(deleteTrailingSlashes('/////////////')).toBe('');\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.deleteLeadingSlashes.test.ts": {
      "tests": [
        {
          "id": "279",
          "name": "deleteLeadingSlashes should return '', given an empty string"
        },
        {
          "id": "280",
          "name": "deleteLeadingSlashes should return '$'"
        },
        {
          "id": "281",
          "name": "deleteLeadingSlashes should return 'foo'"
        },
        {
          "id": "282",
          "name": "deleteLeadingSlashes should return '', given a string which includes only slashes"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport deleteLeadingSlashes from '../deleteLeadingSlashes';\n\ndescribe('deleteLeadingSlashes', () => {\n  it(\"should return '', given an empty string\", () => {\n    expect(deleteLeadingSlashes('')).toBe('');\n  });\n\n  it(\"should return '$'\", () => {\n    const expected = '$';\n    expect(deleteLeadingSlashes('/////////////' + expected)).toBe(expected);\n  });\n\n  it(\"should return 'foo'\", () => {\n    const expected = 'foo';\n    expect(deleteLeadingSlashes('/' + expected)).toBe(expected);\n    expect(deleteLeadingSlashes('//////' + expected)).toBe(expected);\n  });\n\n  it(\"should return '', given a string which includes only slashes\", () => {\n    expect(deleteLeadingSlashes('/////////////')).toBe('');\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.surroundString.test.ts": {
      "tests": [
        {
          "id": "283",
          "name": "surroundString should return envelope + foo + envelope"
        },
        {
          "id": "284",
          "name": "surroundString should return 'barbar', given '' as input and 'bar' as envelope"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport surroundString from '../surroundString';\n\ndescribe('surroundString', () => {\n  it('should return envelope + foo + envelope', () => {\n    const foo = 'foo';\n    const envelope = 'bar';\n    const expected = envelope + foo + envelope;\n\n    expect(surroundString(foo, envelope)).toBe(expected);\n    expect(surroundString(envelope + foo, envelope)).toBe(expected);\n    expect(surroundString(foo + envelope, envelope)).toBe(expected);\n    expect(surroundString(expected, envelope)).toBe(expected);\n  });\n\n  it(\"should return 'barbar', given '' as input and 'bar' as envelope\", () => {\n    const envelope = 'bar';\n    expect(surroundString('', envelope)).toBe(envelope.repeat(2));\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.countCharacter.test.ts": {
      "tests": [
        {
          "id": "285",
          "name": "countCharacter should return a positive value, given strings containing the searched char"
        },
        {
          "id": "286",
          "name": "countCharacter should throw, given char is not a char but a string"
        }
      ],
      "source": "import InvalidArgumentsError from '##/errors/InvalidArguments';\nimport { describe, expect, it } from 'vitest';\n\nimport countCharacter from '../countCharacter';\n\ndescribe('countCharacter', () => {\n  it('should return a positive value, given strings containing the searched char', () => {\n    expect(countCharacter('aa    bbqsklqjdkqjdkqjd   aa   qlj,dqkdjqkdjkbb', 'a')).toBe(4);\n    expect(countCharacter('aa    bbqsklqjdkqjdkqjd   aa   qlj,dqkdjqkdjkbb', '$')).toBe(0);\n  });\n\n  it('should throw, given char is not a char but a string', () => {\n    expect(() => {\n      countCharacter('aa    bbqsklqjdkqjdkqjd   aa   qlj,dqkdjqkdjkbb', 'asqdqd');\n    }).toThrowError(InvalidArgumentsError);\n  });\n});\n"
    },
    "src/lib/portable/i18n/__tests__/prebuild.isValidLanguageFlag.test.ts": {
      "tests": [
        {
          "id": "287",
          "name": "isValidLanguageFlag should return true for valid language flag"
        },
        {
          "id": "288",
          "name": "isValidLanguageFlag should return false for an invalid language flag"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\nimport { LANGUAGES } from '##/config/i18n';\n\nimport isValidLanguageFlag from '../isValidLanguageFlag';\n\ndescribe('isValidLanguageFlag', () => {\n  const FIRST_LANG = LANGUAGES[0];\n\n  it('should return true for valid language flag', () => expect(isValidLanguageFlag(FIRST_LANG)).toBe(true));\n\n  it('should return false for an invalid language flag', () => {\n    const PREFIX = '$';\n    let prefixAcc = PREFIX;\n    while (LANGUAGES.includes((prefixAcc + FIRST_LANG) as any)) prefixAcc += PREFIX;\n    const invalidLanguage = prefixAcc + FIRST_LANG;\n    expect(isValidLanguageFlag(invalidLanguage)).toBe(false);\n  });\n});\n"
    },
    "src/lib/portable/tailwind/__tests__/prebuild.getBreakpoint.test.ts": {
      "tests": [
        {
          "id": "289",
          "name": "getBreakpoint should return the correct breakpoint value"
        },
        {
          "id": "290",
          "name": "getBreakpoint should return NaN for an invalid breakpoint"
        }
      ],
      "source": "import { describe, expect, it, vi } from 'vitest';\n\nimport { getBreakpoint } from '../../../tailwind';\n\nvi.mock('tailwind.config', async () => {\n  return {\n    default: {\n      theme: {\n        screens: {\n          sm: '279px',\n          md: '729px'\n        }\n      }\n    }\n  };\n});\n\ndescribe('getBreakpoint', () => {\n  it('should return the correct breakpoint value', () => {\n    expect(getBreakpoint('sm')).toBe(279);\n    expect(getBreakpoint('md')).toBe(729);\n  });\n\n  it('should return NaN for an invalid breakpoint', () => {\n    // @ts-expect-error\n    expect(getBreakpoint('foo')).toBeNaN();\n  });\n});\n\nvi.doUnmock('tailwind.config');\n"
    },
    "packages/shared-lib/src/portable/html/__tests__/prebuild.scrollToTop.test.ts": {
      "tests": [
        {
          "id": "291",
          "name": "scrollToTop should call window.scrollTo with 0, 0"
        },
        {
          "id": "292",
          "name": "scrollToTop should scroll to the top of the item, given an HTMLElement item"
        }
      ],
      "source": "import { afterAll, describe, expect, it, vi } from 'vitest';\n\nimport scrollToTop from '../scrollToTop';\n\nvi.spyOn(global, 'scrollTo');\n\ndescribe('scrollToTop', () => {\n  afterAll(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should call window.scrollTo with 0, 0', () => {\n    scrollToTop();\n    expect(global.scrollTo).toHaveBeenCalledWith(0, 0);\n  });\n\n  it('should scroll to the top of the item, given an HTMLElement item', () => {\n    const fakeDiv = document.createElement('div');\n    const spy = vi.spyOn(fakeDiv, 'scrollTo');\n\n    scrollToTop(fakeDiv);\n    expect(spy).toHaveBeenCalledWith(0, 0);\n  });\n});\n"
    },
    "src/lib/portable/typescript/__tests__/prebuild.getEnumKeys.test.ts": {
      "tests": [
        {
          "id": "293",
          "name": "getEnumKeys should return an array of enum keys, given a fake enum"
        },
        {
          "id": "294",
          "name": "getEnumKeys should return an empty array, given an empty fake enum"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport { getEnumKeys } from '../../../typescript';\n\ndescribe('getEnumKeys', () => {\n  it('should return an array of enum keys, given a fake enum', () => {\n    enum Fake_E {\n      foo,\n      bar\n    }\n\n    const result = getEnumKeys(Fake_E);\n    const expected: typeof result = ['foo', 'bar'];\n    expect(result).toStrictEqual(expected);\n  });\n\n  it('should return an empty array, given an empty fake enum', () => {\n    enum Empty_E {}\n    const result: never[] = getEnumKeys(Empty_E);\n    expect(result).toStrictEqual([]);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/html/__tests__/prebuild.createURLSearchParams.test.ts": {
      "tests": [
        {
          "id": "295",
          "name": "createURLSearchParams should create URLSearchParams, given searchParams object"
        },
        {
          "id": "296",
          "name": "createURLSearchParams should return an empty string, given empty searchParams object"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport createURLSearchParams from '../createURLSearchParams';\n\ndescribe('createURLSearchParams', () => {\n  it('should create URLSearchParams, given searchParams object', () => {\n    const URLSearchParams = createURLSearchParams({ foo: '1', bar: '2' });\n    expect(URLSearchParams).toBe('?foo=1&bar=2');\n  });\n\n  it('should return an empty string, given empty searchParams object', () => {\n    const URLSearchParams = createURLSearchParams({});\n    expect(URLSearchParams).toBe('');\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.getSlashEnvelope.test.ts": {
      "tests": [
        {
          "id": "297",
          "name": "getSlashEnvelope should return /foo/"
        },
        {
          "id": "298",
          "name": "getSlashEnvelope should return '//', given empty string"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getSlashEnvelope from '../getSlashEnvelope';\n\ndescribe('getSlashEnvelope', () => {\n  it('should return /foo/', () => {\n    const expected = '/foo/';\n    expect(getSlashEnvelope('foo')).toBe(expected);\n    expect(getSlashEnvelope('/foo')).toBe(expected);\n    expect(getSlashEnvelope('foo/')).toBe(expected);\n    expect(getSlashEnvelope('/foo/')).toBe(expected);\n  });\n\n  it(\"should return '//', given empty string\", () => {\n    expect(getSlashEnvelope('')).toBe('//');\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.getFormattedDate.test.ts": {
      "tests": [
        {
          "id": "299",
          "name": "getFormattedDate should return the correct formatted date (basic test, since it relays on native functions)"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getFormattedDate from '../getFormattedDate';\n\ndescribe('getFormattedDate', () => {\n  it('should return the correct formatted date (basic test, since it relays on native functions)', () => {\n    const language = 'fr';\n    const date = new Date(1998, 1, 1, 7, 29, 0, 0);\n\n    expect(getFormattedDate(language, date, false)).toBe('Dimanche 1 février 1998');\n    expect(getFormattedDate(language, date, true)).toBe('Dimanche 1 février 1998 à 07:29');\n  });\n});\n"
    },
    "src/cache/__tests__/postbuild.blog.test.ts": {
      "tests": [
        {
          "id": "300",
          "name": "getBlogSubcategoriesByCategory (unhappy paths) should return an empty array, given an invalid category"
        }
      ],
      "source": "import { DEFAULT_LANGUAGE } from '##/config/i18n';\nimport { describe, expect, it } from 'vitest';\n\nimport { getBlogSubcategoriesByCategory } from '../blog';\n\ndescribe('getBlogSubcategoriesByCategory (unhappy paths)', () => {\n  it('should return an empty array, given an invalid category', async () => {\n    // @ts-expect-error\n    const emptyList = await getBlogSubcategoriesByCategory('__INVALID_CATEGORY__', DEFAULT_LANGUAGE);\n    expect(emptyList).toStrictEqual([]);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/react/__tests__/prebuild.getLinkTarget.test.ts": {
      "tests": [
        {
          "id": "301",
          "name": "getLinkTarget should return target blank, given external link"
        },
        {
          "id": "302",
          "name": "getLinkTarget should return target undefined, given internal link"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getLinkTarget from '../getLinkTarget';\n\ndescribe('getLinkTarget', () => {\n  it('should return target blank, given external link', () => {\n    const target = getLinkTarget('https://example.com');\n    expect(target).toBe('_blank');\n  });\n\n  it('should return target undefined, given internal link', () => {\n    const target = getLinkTarget('foo/bar');\n    expect(target).toBe(undefined);\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/str/__tests__/prebuild.getPathWithoutExtension.test.ts": {
      "tests": [
        {
          "id": "303",
          "name": "getPathWithoutExtension should return the correct paths"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getPathWithoutExtension from '../getPathWithoutExtension';\n\ndescribe('getPathWithoutExtension', () => {\n  const expected = 'path/to/something';\n\n  it('should return the correct paths', () => {\n    expect(getPathWithoutExtension('')).toBe('');\n    expect(getPathWithoutExtension(expected)).toBe(expected);\n    expect(getPathWithoutExtension(`${expected}.any_extension`)).toBe(expected);\n  });\n});\n"
    },
    "src/lib/portable/str/__tests__/prebuild.capitalize.test.ts": {
      "tests": [
        {
          "id": "304",
          "name": "capitalize should return capitalized string, given any string"
        },
        {
          "id": "305",
          "name": "capitalize should return '', given an empty string"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport capitalize from '../capitalize';\n\ndescribe('capitalize', () => {\n  it('should return capitalized string, given any string', () => {\n    expect(capitalize('abc')).toBe('Abc');\n    expect(capitalize('ABC')).toBe('ABC');\n    expect(capitalize(' aBC')).toBe(' aBC');\n  });\n\n  it(\"should return '', given an empty string\", () => {\n    expect(capitalize('')).toBe('');\n  });\n});\n"
    },
    "packages/prebuilder/src/lib/__tests__/prebuild.etc.test.ts": {
      "tests": [
        {
          "id": "306",
          "name": "objInnerToObj should return an obj, given a valid obj inner"
        }
      ],
      "source": "// eslint-disable-next-line import/no-extraneous-dependencies\nimport { describe, expect, it } from 'vitest';\n\nimport { objInnerToObj } from '../etc';\n\ndescribe('objInnerToObj', () => {\n  it('should return an obj, given a valid obj inner', () => {\n    const objInner = `\n      foo: 'bar',\n      bar: 'foo',\n    `;\n    expect(objInnerToObj(objInner)).toStrictEqual({ foo: 'bar', bar: 'foo' });\n  });\n});\n"
    },
    "packages/shared-lib/src/portable/misc/__tests__/prebuild.isEmptyObject.test.ts": {
      "tests": [
        {
          "id": "307",
          "name": "isEmptyObject should return true, given an empty object"
        },
        {
          "id": "308",
          "name": "isEmptyObject should return false, given a not empty object"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport isEmptyObject from '../isEmptyObject';\n\ndescribe('isEmptyObject', () => {\n  it('should return true, given an empty object', () => expect(isEmptyObject({})).toBe(true));\n\n  it('should return false, given a not empty object', () => expect(isEmptyObject({ foo: 'bar' })).toBe(false));\n});\n"
    },
    "packages/shared-lib/src/portable/react/__tests__/prebuild.getRefCurrentPtr.test.ts": {
      "tests": [
        {
          "id": "309",
          "name": "getRefCurrentPtr should return current value, given a valid RefObject"
        }
      ],
      "source": "import { describe, expect, it } from 'vitest';\n\nimport getRefCurrentPtr from '../getRefCurrentPtr';\n\ndescribe('getRefCurrentPtr', () => {\n  it('should return current value, given a valid RefObject', () => {\n    const ptr = getRefCurrentPtr({\n      current: 'foo'\n    });\n    expect(ptr).toBe('foo');\n  });\n});\n"
    },
    "packages/shared-types/src/__tests__/postbuild.ContentlayerConfig.test.ts": {
      "tests": [
        {
          "id": "310",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    },
    "packages/shared-types/src/__tests__/postbuild.I18n.test.ts": {
      "tests": [
        {
          "id": "311",
          "name": "should not produce static type errors"
        }
      ],
      "source": "import { expectTypeTestsToPassAsync } from 'jest-tsd';\nimport { it } from 'vitest';\n\nit('should not produce static type errors', async () => await expectTypeTestsToPassAsync(__filename));\n"
    }
  },
  "projectRoot": "/home/stan/Delivery/dashboard_rtm",
  "config": {
    "plugins": ["@stryker-mutator/vitest-runner", "@stryker-mutator/typescript-checker"],
    "typescriptChecker": {
      "prioritizePerformanceOverAccuracy": false
    },
    "vitest": {
      "configFile": "vitest.config.mts",
      "dir": "."
    },
    "ignorePatterns": ["prebuilder-dist"],
    "tsconfigFile": "tsconfig.json",
    "checkers": ["typescript"],
    "testRunner": "vitest",
    "timeoutMS": 300000,
    "incremental": true,
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "coverageAnalysis": "perTest",
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignoreStatic": false,
    "incrementalFile": "reports/stryker-incremental.json",
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutate": [
      "{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)",
      "!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"
    ],
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "reporters": ["clear-text", "progress", "html"],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "jsonReporter": {
      "fileName": "reports/mutation/mutation.json"
    },
    "disableTypeChecks": true,
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "thresholds": {
      "high": 80,
      "low": 60,
      "break": null
    },
    "timeoutFactor": 1.5,
    "dryRunTimeoutMinutes": 5,
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "ignorers": []
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.2.2",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "8.2.2",
      "typescript": "5.3.2"
    }
  }
}
