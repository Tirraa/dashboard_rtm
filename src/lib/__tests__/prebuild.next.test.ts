import type { NextFetchEvent, NextMiddleware, NextRequest } from 'next/server';
import type { MiddlewareFactory } from '@rtm/shared-types/Next';

import { describe, expect, it, vi } from 'vitest';
import { NextResponse } from 'next/server';

import { stackMiddlewares } from '../next';

const fakeMiddleware: MiddlewareFactory = (next: NextMiddleware) => {
  return async (request: NextRequest, _next: NextFetchEvent) => {
    const res = await next(request, _next);
    return res;
  };
};

const fakeSlowAsyncMiddleware: MiddlewareFactory = (next: NextMiddleware) => {
  return async (request: NextRequest, _next: NextFetchEvent) => {
    const res = await next(request, _next);
    // eslint-disable-next-line @typescript-eslint/no-magic-numbers
    await new Promise((resolve) => setTimeout(resolve, 10));
    return res;
  };
};

const fakeRequest = {} as NextRequest;
const fakeEvent = {} as NextFetchEvent;

describe('stackMiddlewares', () => {
  it('should return an instanceof function', () => {
    const foo = stackMiddlewares();
    expect(foo).toBeInstanceOf(Function);
    const bar = stackMiddlewares([]);
    expect(bar).toBeInstanceOf(Function);
    const foo2 = stackMiddlewares([fakeMiddleware]);
    expect(foo2).toBeInstanceOf(Function);
    const bar2 = stackMiddlewares([fakeMiddleware, fakeMiddleware]);
    expect(bar2).toBeInstanceOf(Function);
  });

  // * ... [ChatGPT] AUTOGENERATED

  it('calls each middleware with the correct arguments', () => {
    const mockMiddleware1 = vi.fn((next) => next);
    const mockMiddleware2 = vi.fn((next) => next);
    const stackedMiddleware = stackMiddlewares([mockMiddleware1, mockMiddleware2]);

    stackedMiddleware(fakeRequest, fakeEvent);

    expect(mockMiddleware1).toHaveBeenCalled();
    expect(mockMiddleware2).toHaveBeenCalled();
  });

  it('calls middlewares in the correct order', () => {
    const order: number[] = [];
    const middleware1: MiddlewareFactory = (next) => (req, evt) => {
      // eslint-disable-next-line @typescript-eslint/no-magic-numbers
      order.push(1);
      next(req, evt);
    };
    const middleware2: MiddlewareFactory = (next) => (req, evt) => {
      // eslint-disable-next-line @typescript-eslint/no-magic-numbers
      order.push(2);
      next(req, evt);
    };

    const stackedMiddleware = stackMiddlewares([middleware1, middleware2]);
    stackedMiddleware(fakeRequest, fakeEvent);

    // eslint-disable-next-line @typescript-eslint/no-magic-numbers
    expect(order).toStrictEqual([1, 2]);
  });

  it('properly propagates request and event through middlewares', async () => {
    const middleware1 = vi.fn((next) => (req: any, evt: any) => next(req, evt));
    const middleware2 = vi.fn((next) => (req: any, evt: any) => next(req, evt));

    const stackedMiddleware = stackMiddlewares([middleware1, middleware2]);
    await stackedMiddleware(fakeRequest, fakeEvent);

    expect(middleware1).toHaveBeenCalledWith(expect.any(Function));
    expect(middleware2).toHaveBeenCalledWith(expect.any(Function));
  });

  it('returns the final response correctly', async () => {
    const middleware: MiddlewareFactory = (next) => (req, evt) => next(req, evt);
    const stackedMiddleware = stackMiddlewares([middleware]);
    const response = await stackedMiddleware(fakeRequest, fakeEvent);

    expect(response).toBeInstanceOf(NextResponse);
  });

  it('handles slow async middleware correctly', async () => {
    const stackedMiddleware = stackMiddlewares([fakeSlowAsyncMiddleware]);
    const stackedMiddleware2 = stackMiddlewares([fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware]);
    const stackedMiddleware3 = stackMiddlewares([fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware, fakeSlowAsyncMiddleware]);

    await Promise.all([
      expect(stackedMiddleware(fakeRequest, fakeEvent)).resolves.not.toThrow(),
      expect(stackedMiddleware2(fakeRequest, fakeEvent)).resolves.not.toThrow(),
      expect(stackedMiddleware3(fakeRequest, fakeEvent)).resolves.not.toThrow()
    ]);
  });
});
