import type { WriterFunction } from 'ts-morph';
import { Project, StructureKind, VariableDeclarationKind, Writers } from 'ts-morph';
import {
  AUTOGENERATED_CODE_COMMENT_STR,
  BLOG_CATEGORIES_CONST_STR,
  GENERATIONS_TARGET_FOLDER,
  I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS,
  I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS
} from '../../config';
import type { CategoriesMetadatas } from '../../types/metadatas';

function generateSchema(blogArchitecture: CategoriesMetadatas) {
  const schema = {} as Record<string, Record<string, unknown>>;

  for (const category in blogArchitecture) {
    const subcategories = blogArchitecture[category];

    schema[category] = {};
    schema[category]._title = '';
    schema[category]['_meta-description'] = '';

    Object.keys(subcategories).forEach((subcategory) => {
      schema[category][subcategory] = {
        title: '',
        'meta-description': ''
      };
    });
  }

  return schema;
}

export default function generateI18nBlogCategories(blogArchitecture: CategoriesMetadatas) {
  const project = new Project();

  const initializerWriterFunction: WriterFunction = Writers.assertion(
    JSON.stringify(generateSchema(blogArchitecture), null, 2).replace(/""|''|``/g, '_'),
    'const satisfies BlogCategoriesArtefact;\n'
  );

  const sourceFile = project.createSourceFile(
    `${GENERATIONS_TARGET_FOLDER}/${BLOG_CATEGORIES_CONST_STR}.ts`,
    {
      statements: [
        {
          kind: StructureKind.VariableStatement,
          declarationKind: VariableDeclarationKind.Const,
          declarations: [
            {
              name: '_',
              initializer: "''",
              type: 'EmptyString'
            }
          ]
        },
        {
          kind: StructureKind.VariableStatement,
          declarationKind: VariableDeclarationKind.Const,
          declarations: [
            {
              name: BLOG_CATEGORIES_CONST_STR,
              initializer: initializerWriterFunction,
              trailingTrivia: [
                "type EmptyString = '';",
                `type SubcategoriesMetadatas = Record<${I18N_SUBCATEGORIES_REQUIRED_EXTRA_FIELDS.map((field) => `'${field}'`).join(
                  ' | '
                )}, EmptyString>;`,
                `type CategoriesMetadatas = Record<${I18N_CATEGORIES_REQUIRED_EXTRA_FIELDS.map((field) => `'${field}'`).join(
                  ' | '
                )}, EmptyString> | Record<string, SubcategoriesMetadatas>;`,
                'type BlogCategoriesArtefact = Record<string, CategoriesMetadatas>'
              ].join('\n')
            }
          ],
          isExported: false
        }
      ]
    },
    { overwrite: true }
  );
  const oldTextLength = sourceFile.getText().length;

  sourceFile.insertText(0, AUTOGENERATED_CODE_COMMENT_STR);

  sourceFile.insertText(oldTextLength + AUTOGENERATED_CODE_COMMENT_STR.length, `export default ${BLOG_CATEGORIES_CONST_STR};`);
  sourceFile.formatText({ ensureNewLineAtEndOfFile: true });
  sourceFile.saveSync();
}
