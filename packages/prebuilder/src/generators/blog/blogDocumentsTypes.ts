import type { WriterFunction } from 'ts-morph';

import { VariableDeclarationKind, StructureKind, Project, Writers } from 'ts-morph';
import { capitalize } from 'inflection';

import type { CategoriesMetadatas } from '../../types/Metadatas';

import {
  AUTOGENERATED_CODE_COMMENT_STR,
  BLOG_DOCUMENTS_TYPES_CONST_STR,
  TS_MORPH_FORMATTER_SETTINGS,
  GENERATIONS_TARGET_FOLDER,
  TAB_SIZE
} from '../../config';

type PostIdentifier = string;
type DocumentTypeEntity = { categoryFolder: string };

const generateSchema = (blogArchitecture: CategoriesMetadatas) =>
  Object.keys(blogArchitecture).reduce(
    (documentTypes, categoryFolder) => {
      const postSuffix = 'post';
      const categoryWithoutDashes = categoryFolder.split('-').map(capitalize).join('');

      const sanitizedCategory = categoryWithoutDashes.toLowerCase().endsWith(postSuffix)
        ? // eslint-disable-next-line no-magic-numbers
          categoryWithoutDashes.slice(0, -postSuffix.length)
        : categoryWithoutDashes;

      const postsIdentifier = sanitizedCategory + capitalize(postSuffix);

      documentTypes[postsIdentifier] = { categoryFolder };
      return documentTypes;
    },
    {} as Record<PostIdentifier, DocumentTypeEntity>
  );

export default async function generateBlogDocumentTypes(
  blogArchitecture: CategoriesMetadatas,
  pretty: boolean,
  __BLOG_DOCUMENTS_TYPES_CONST_STR: string = BLOG_DOCUMENTS_TYPES_CONST_STR,
  __TARGET_FOLDER: string = GENERATIONS_TARGET_FOLDER
) {
  const project = new Project();

  const initializerWriterFunction: WriterFunction = Writers.assertion(
    JSON.stringify(generateSchema(blogArchitecture), null, pretty ? TAB_SIZE : undefined),
    'const'
  );

  // console.log(generateSchema(blogArchitecture), null, pretty ? TAB_SIZE : undefined);
  const sourceFile = project.createSourceFile(
    `${__TARGET_FOLDER}/${__BLOG_DOCUMENTS_TYPES_CONST_STR}.ts`,
    {
      statements: [
        {
          declarations: [
            {
              initializer: initializerWriterFunction,
              name: __BLOG_DOCUMENTS_TYPES_CONST_STR
            }
          ],
          declarationKind: VariableDeclarationKind.Const,
          kind: StructureKind.VariableStatement,
          isExported: false
        }
      ]
    },
    { overwrite: true }
  );
  const oldTextLength = sourceFile.getText().length;

  // eslint-disable-next-line no-magic-numbers
  sourceFile.insertText(0, AUTOGENERATED_CODE_COMMENT_STR);

  sourceFile.insertText(oldTextLength + AUTOGENERATED_CODE_COMMENT_STR.length, `export default ${__BLOG_DOCUMENTS_TYPES_CONST_STR};`);
  if (pretty) sourceFile.formatText(TS_MORPH_FORMATTER_SETTINGS);
  await sourceFile.save();
}
