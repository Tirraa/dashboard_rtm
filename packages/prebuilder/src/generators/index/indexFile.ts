import { Project } from 'ts-morph';

import {
  PAGES_FROM_CODEGEN_SCHEMA_TYPE_STR,
  DEFAULT_LANGUAGE_TOKEN_TYPE_STR,
  AUTOGENERATED_CODE_COMMENT_STR,
  BLOG_ARCHITECTURE_TYPE_STR,
  GENERATIONS_TARGET_FOLDER,
  BLOG_CATEGORIES_CONST_STR,
  PAGES_TITLES_CONST_STR,
  PAGES_TYPE_STR,
  BLOG_TYPE_STR,
  LP_TYPE_STR
} from '../../config';

const matchingNames = [
  BLOG_TYPE_STR,
  BLOG_ARCHITECTURE_TYPE_STR,
  BLOG_CATEGORIES_CONST_STR,
  DEFAULT_LANGUAGE_TOKEN_TYPE_STR,
  LP_TYPE_STR,
  PAGES_TYPE_STR,
  PAGES_TITLES_CONST_STR
];

const PATH_PREFIX = './';

const importsAndExports = matchingNames.map((name) => ({
  path: PATH_PREFIX + name,
  isDefault: true,
  name
}));

importsAndExports.push({ name: PAGES_FROM_CODEGEN_SCHEMA_TYPE_STR, path: PATH_PREFIX + PAGES_TYPE_STR, isDefault: false });

export default async function generateIndexFile(__TARGET_FOLDER: string = GENERATIONS_TARGET_FOLDER) {
  const project = new Project();

  const sourceFile = project.createSourceFile(`${__TARGET_FOLDER}/index.ts`, '', { overwrite: true });

  for (const importAndExport of importsAndExports) {
    const isTypeOnly = importAndExport.name.charAt(0).toUpperCase() === importAndExport.name.charAt(0);

    if (importAndExport.isDefault) {
      sourceFile.addImportDeclaration({
        moduleSpecifier: importAndExport.path,
        defaultImport: importAndExport.name,
        isTypeOnly
      });
      continue;
    }

    sourceFile.addImportDeclaration({
      moduleSpecifier: importAndExport.path,
      namedImports: [importAndExport.name],
      isTypeOnly
    });
  }

  sourceFile.addExportDeclaration({
    namedExports: importsAndExports.map(({ name }) => name)
  });

  sourceFile.insertText(0, AUTOGENERATED_CODE_COMMENT_STR);
  await sourceFile.save();
}
